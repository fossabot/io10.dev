
/* Until a better solution comes along for running emscripten Module multiple time, we'll create it from scratch every run.
   Based on pre/post scripts of  'https://github.com/mdaines/viz.js'
 */

//This is the PRE emscripten scipt,
//suitable for running AWK as a web-worker.

run_web_awk = function(program_source, input_text)
{
	var Module = {
		"noInitialRun": true,

		arguments: [ "-f", "/my_program.awk", "/my_input.txt"],

		reset_outputs: function() {
			Module.awk_stdout = "" ;
			Module.awk_stderr = "" ;
		},
		"preRun": function() {
			FS.createDataFile('/', 'my_program.awk', program_source, true, false);
			FS.createDataFile('/', 'my_input.txt', input_text, true, false);
		},
		"print": function(text) {
			self.postMessage({
						'event': 'stdout',
						'stdout_text': text + "\n",
					});
		},
	};
	//Module["printErr"] = Module["foo_printErr"];

	Module.reset_outputs();

	/* Now comes the emscripten-generated Javascript block ... */

	/* The end of this function is in "post_AWK.js" */

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// TODO: " u s e   s t r i c t ";

try {
  this['Module'] = Module;
} catch(e) {
  this['Module'] = Module = {};
}

// The environment setup code below is customized to use Module.
// *** Environment setup code ***
var ENVIRONMENT_IS_NODE = typeof process === 'object';
var ENVIRONMENT_IS_WEB = typeof window === 'object';
var ENVIRONMENT_IS_WORKER = typeof importScripts === 'function';
var ENVIRONMENT_IS_SHELL = !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_WORKER;

if (ENVIRONMENT_IS_NODE) {
  // Expose functionality in the same simple way that the shells work
  // Note that we pollute the global namespace here, otherwise we break in node
  Module['print'] = function(x) {
    process['stdout'].write(x + '\n');
  };
  Module['printErr'] = function(x) {
    process['stderr'].write(x + '\n');
  };

  var nodeFS = require('fs');
  var nodePath = require('path');

  Module['read'] = function(filename) {
    filename = nodePath['normalize'](filename);
    var ret = nodeFS['readFileSync'](filename).toString();
    // The path is absolute if the normalized version is the same as the resolved.
    if (!ret && filename != nodePath['resolve'](filename)) {
      filename = path.join(__dirname, '..', 'src', filename);
      ret = nodeFS['readFileSync'](filename).toString();
    }
    return ret;
  };

  Module['load'] = function(f) {
    globalEval(read(f));
  };

  if (!Module['arguments']) {
    Module['arguments'] = process['argv'].slice(2);
  }
}

if (ENVIRONMENT_IS_SHELL) {
  Module['print'] = print;
  if (typeof printErr != 'undefined') Module['printErr'] = printErr; // not present in v8 or older sm

  // Polyfill over SpiderMonkey/V8 differences
  if (typeof read != 'undefined') {
    Module['read'] = read;
  } else {
    Module['read'] = function(f) { snarf(f) };
  }

  if (!Module['arguments']) {
    if (typeof scriptArgs != 'undefined') {
      Module['arguments'] = scriptArgs;
    } else if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_WORKER) {
  if (!Module['print']) {
    Module['print'] = function(x) {
      console.log(x);
    };
  }

  if (!Module['printErr']) {
    Module['printErr'] = function(x) {
      console.log(x);
    };
  }
}

if (ENVIRONMENT_IS_WEB || ENVIRONMENT_IS_WORKER) {
  Module['read'] = function(url) {
    var xhr = new XMLHttpRequest();
    xhr.open('GET', url, false);
    xhr.send(null);
    return xhr.responseText;
  };

  if (!Module['arguments']) {
    if (typeof arguments != 'undefined') {
      Module['arguments'] = arguments;
    }
  }
}

if (ENVIRONMENT_IS_WORKER) {
  // We can do very little here...
  var TRY_USE_DUMP = false;
  if (!Module['print']) {
    Module['print'] = (TRY_USE_DUMP && (typeof(dump) !== "undefined") ? (function(x) {
      dump(x);
    }) : (function(x) {
      // self.postMessage(x); // enable this if you want stdout to be sent as messages
    }));
  }

  Module['load'] = importScripts;
}

if (!ENVIRONMENT_IS_WORKER && !ENVIRONMENT_IS_WEB && !ENVIRONMENT_IS_NODE && !ENVIRONMENT_IS_SHELL) {
  // Unreachable because SHELL is dependant on the others
  throw 'Unknown runtime environment. Where are we?';
}

function globalEval(x) {
  eval.call(null, x);
}
if (!Module['load'] == 'undefined' && Module['read']) {
  Module['load'] = function(f) {
    globalEval(Module['read'](f));
  };
}
if (!Module['print']) {
  Module['print'] = function(){};
}
if (!Module['printErr']) {
  Module['printErr'] = Module['print'];
}
if (!Module['arguments']) {
  Module['arguments'] = [];
}
// *** Environment setup code ***

// Closure helpers
Module.print = Module['print'];
Module.printErr = Module['printErr'];

// Callbacks
if (!Module['preRun']) Module['preRun'] = [];
if (!Module['postRun']) Module['postRun'] = [];

  
// === Auto-generated preamble library stuff ===

//========================================
// Runtime code shared with compiler
//========================================

var Runtime = {
  stackSave: function () {
    return STACKTOP;
  },
  stackRestore: function (stackTop) {
    STACKTOP = stackTop;
  },
  forceAlign: function (target, quantum) {
    quantum = quantum || 4;
    if (quantum == 1) return target;
    if (isNumber(target) && isNumber(quantum)) {
      return Math.ceil(target/quantum)*quantum;
    } else if (isNumber(quantum) && isPowerOfTwo(quantum)) {
      var logg = log2(quantum);
      return '((((' +target + ')+' + (quantum-1) + ')>>' + logg + ')<<' + logg + ')';
    }
    return 'Math.ceil((' + target + ')/' + quantum + ')*' + quantum;
  },
  isNumberType: function (type) {
    return type in Runtime.INT_TYPES || type in Runtime.FLOAT_TYPES;
  },
  isPointerType: function isPointerType(type) {
  return type[type.length-1] == '*';
},
  isStructType: function isStructType(type) {
  if (isPointerType(type)) return false;
  if (/^\[\d+\ x\ (.*)\]/.test(type)) return true; // [15 x ?] blocks. Like structs
  if (/<?{ ?[^}]* ?}>?/.test(type)) return true; // { i32, i8 } etc. - anonymous struct types
  // See comment in isStructPointerType()
  return type[0] == '%';
},
  INT_TYPES: {"i1":0,"i8":0,"i16":0,"i32":0,"i64":0},
  FLOAT_TYPES: {"float":0,"double":0},
  bitshift64: function (low, high, op, bits) {
    var ander = Math.pow(2, bits)-1;
    if (bits < 32) {
      switch (op) {
        case 'shl':
          return [low << bits, (high << bits) | ((low&(ander << (32 - bits))) >>> (32 - bits))];
        case 'ashr':
          return [(((low >>> bits ) | ((high&ander) << (32 - bits))) >> 0) >>> 0, (high >> bits) >>> 0];
        case 'lshr':
          return [((low >>> bits) | ((high&ander) << (32 - bits))) >>> 0, high >>> bits];
      }
    } else if (bits == 32) {
      switch (op) {
        case 'shl':
          return [0, low];
        case 'ashr':
          return [high, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high, 0];
      }
    } else { // bits > 32
      switch (op) {
        case 'shl':
          return [0, low << (bits - 32)];
        case 'ashr':
          return [(high >> (bits - 32)) >>> 0, (high|0) < 0 ? ander : 0];
        case 'lshr':
          return [high >>>  (bits - 32) , 0];
      }
    }
    abort('unknown bitshift64 op: ' + [value, op, bits]);
  },
  or64: function (x, y) {
    var l = (x | 0) | (y | 0);
    var h = (Math.round(x / 4294967296) | Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  and64: function (x, y) {
    var l = (x | 0) & (y | 0);
    var h = (Math.round(x / 4294967296) & Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  xor64: function (x, y) {
    var l = (x | 0) ^ (y | 0);
    var h = (Math.round(x / 4294967296) ^ Math.round(y / 4294967296)) * 4294967296;
    return l + h;
  },
  getNativeTypeSize: function (type, quantumSize) {
    if (Runtime.QUANTUM_SIZE == 1) return 1;
    var size = {
      '%i1': 1,
      '%i8': 1,
      '%i16': 2,
      '%i32': 4,
      '%i64': 8,
      "%float": 4,
      "%double": 8
    }['%'+type]; // add '%' since float and double confuse Closure compiler as keys, and also spidermonkey as a compiler will remove 's from '_i8' etc
    if (!size) {
      if (type.charAt(type.length-1) == '*') {
        size = Runtime.QUANTUM_SIZE; // A pointer
      } else if (type[0] == 'i') {
        var bits = parseInt(type.substr(1));
        assert(bits % 8 == 0);
        size = bits/8;
      }
    }
    return size;
  },
  getNativeFieldSize: function (type) {
    return Math.max(Runtime.getNativeTypeSize(type), Runtime.QUANTUM_SIZE);
  },
  dedup: function dedup(items, ident) {
  var seen = {};
  if (ident) {
    return items.filter(function(item) {
      if (seen[item[ident]]) return false;
      seen[item[ident]] = true;
      return true;
    });
  } else {
    return items.filter(function(item) {
      if (seen[item]) return false;
      seen[item] = true;
      return true;
    });
  }
},
  set: function set() {
  var args = typeof arguments[0] === 'object' ? arguments[0] : arguments;
  var ret = {};
  for (var i = 0; i < args.length; i++) {
    ret[args[i]] = 0;
  }
  return ret;
},
  calculateStructAlignment: function calculateStructAlignment(type) {
    type.flatSize = 0;
    type.alignSize = 0;
    var diffs = [];
    var prev = -1;
    type.flatIndexes = type.fields.map(function(field) {
      var size, alignSize;
      if (Runtime.isNumberType(field) || Runtime.isPointerType(field)) {
        size = Runtime.getNativeTypeSize(field); // pack char; char; in structs, also char[X]s.
        alignSize = size;
      } else if (Runtime.isStructType(field)) {
        size = Types.types[field].flatSize;
        alignSize = Types.types[field].alignSize;
      } else {
        throw 'Unclear type in struct: ' + field + ', in ' + type.name_ + ' :: ' + dump(Types.types[type.name_]);
      }
      alignSize = type.packed ? 1 : Math.min(alignSize, Runtime.QUANTUM_SIZE);
      type.alignSize = Math.max(type.alignSize, alignSize);
      var curr = Runtime.alignMemory(type.flatSize, alignSize); // if necessary, place this on aligned memory
      type.flatSize = curr + size;
      if (prev >= 0) {
        diffs.push(curr-prev);
      }
      prev = curr;
      return curr;
    });
    type.flatSize = Runtime.alignMemory(type.flatSize, type.alignSize);
    if (diffs.length == 0) {
      type.flatFactor = type.flatSize;
    } else if (Runtime.dedup(diffs).length == 1) {
      type.flatFactor = diffs[0];
    }
    type.needsFlattening = (type.flatFactor != 1);
    return type.flatIndexes;
  },
  generateStructInfo: function (struct, typeName, offset) {
    var type, alignment;
    if (typeName) {
      offset = offset || 0;
      type = (typeof Types === 'undefined' ? Runtime.typeInfo : Types.types)[typeName];
      if (!type) return null;
      if (type.fields.length != struct.length) {
        printErr('Number of named fields must match the type for ' + typeName + ': possibly duplicate struct names. Cannot return structInfo');
        return null;
      }
      alignment = type.flatIndexes;
    } else {
      var type = { fields: struct.map(function(item) { return item[0] }) };
      alignment = Runtime.calculateStructAlignment(type);
    }
    var ret = {
      __size__: type.flatSize
    };
    if (typeName) {
      struct.forEach(function(item, i) {
        if (typeof item === 'string') {
          ret[item] = alignment[i] + offset;
        } else {
          // embedded struct
          var key;
          for (var k in item) key = k;
          ret[key] = Runtime.generateStructInfo(item[key], type.fields[i], alignment[i]);
        }
      });
    } else {
      struct.forEach(function(item, i) {
        ret[item[1]] = alignment[i];
      });
    }
    return ret;
  },
  addFunction: function (func) {
    var ret = FUNCTION_TABLE.length;
    FUNCTION_TABLE.push(func);
    FUNCTION_TABLE.push(0);
    return ret;
  },
  warnOnce: function (text) {
    if (!Runtime.warnOnce.shown) Runtime.warnOnce.shown = {};
    if (!Runtime.warnOnce.shown[text]) {
      Runtime.warnOnce.shown[text] = 1;
      Module.printErr(text);
    }
  },
  funcWrappers: {},
  getFuncWrapper: function (func) {
    if (!Runtime.funcWrappers[func]) {
      Runtime.funcWrappers[func] = function() {
        FUNCTION_TABLE[func].apply(null, arguments);
      };
    }
    return Runtime.funcWrappers[func];
  },
  UTF8Processor: function () {
    var buffer = [];
    var needed = 0;
    this.processCChar = function (code) {
      code = code & 0xff;
      if (needed) {
        buffer.push(code);
        needed--;
      }
      if (buffer.length == 0) {
        if (code < 128) return String.fromCharCode(code);
        buffer.push(code);
        if (code > 191 && code < 224) {
          needed = 1;
        } else {
          needed = 2;
        }
        return '';
      }
      if (needed > 0) return '';
      var c1 = buffer[0];
      var c2 = buffer[1];
      var c3 = buffer[2];
      var ret;
      if (c1 > 191 && c1 < 224) {
        ret = String.fromCharCode(((c1 & 31) << 6) | (c2 & 63));
      } else {
        ret = String.fromCharCode(((c1 & 15) << 12) | ((c2 & 63) << 6) | (c3 & 63));
      }
      buffer.length = 0;
      return ret;
    }
    this.processJSString = function(string) {
      string = unescape(encodeURIComponent(string));
      var ret = [];
      for (var i = 0; i < string.length; i++) {
        ret.push(string.charCodeAt(i));
      }
      return ret;
    }
  },
  stackAlloc: function stackAlloc(size) { var ret = STACKTOP;STACKTOP += size;STACKTOP = ((((STACKTOP)+3)>>2)<<2);assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"); return ret; },
  staticAlloc: function staticAlloc(size) { var ret = STATICTOP;STATICTOP += size;STATICTOP = ((((STATICTOP)+3)>>2)<<2); if (STATICTOP >= TOTAL_MEMORY) enlargeMemory();; return ret; },
  alignMemory: function alignMemory(size,quantum) { var ret = size = Math.ceil((size)/(quantum ? quantum : 4))*(quantum ? quantum : 4); return ret; },
  makeBigInt: function makeBigInt(low,high,unsigned) { var ret = (unsigned ? (((low)>>>0)+(((high)>>>0)*4294967296)) : (((low)>>>0)+(((high)|0)*4294967296))); return ret; },
  QUANTUM_SIZE: 4,
  __dummy__: 0
}



var CorrectionsMonitor = {
  MAX_ALLOWED: 0, // XXX
  corrections: 0,
  sigs: {},

  note: function(type, succeed, sig) {
    if (!succeed) {
      this.corrections++;
      if (this.corrections >= this.MAX_ALLOWED) abort('\n\nToo many corrections!');
    }
  },

  print: function() {
  }
};





//========================================
// Runtime essentials
//========================================

var __THREW__ = false; // Used in checking for thrown exceptions.

var ABORT = false;

var undef = 0;
// tempInt is used for 32-bit signed values or smaller. tempBigInt is used
// for 32-bit unsigned values or more than 32 bits. TODO: audit all uses of tempInt
var tempValue, tempInt, tempBigInt, tempInt2, tempBigInt2, tempPair, tempBigIntI, tempBigIntR, tempBigIntS, tempBigIntP, tempBigIntD;
var tempI64, tempI64b;

function abort(text) {
  Module.print(text + ':\n' + (new Error).stack);
  ABORT = true;
  throw "Assertion: " + text;
}

function assert(condition, text) {
  if (!condition) {
    abort('Assertion failed: ' + text);
  }
}

var globalScope = this;

// C calling interface. A convenient way to call C functions (in C files, or
// defined with extern "C").
//
// Note: LLVM optimizations can inline and remove functions, after which you will not be
//       able to call them. Adding
//
//         __attribute__((used))
//
//       to the function definition will prevent that.
//
// Note: Closure optimizations will minify function names, making
//       functions no longer callable. If you run closure (on by default
//       in -O2 and above), you should export the functions you will call
//       by calling emcc with something like
//
//         -s EXPORTED_FUNCTIONS='["_func1","_func2"]'
//
// @param ident      The name of the C function (note that C++ functions will be name-mangled - use extern "C")
// @param returnType The return type of the function, one of the JS types 'number', 'string' or 'array' (use 'number' for any C pointer, and
//                   'array' for JavaScript arrays and typed arrays).
// @param argTypes   An array of the types of arguments for the function (if there are no arguments, this can be ommitted). Types are as in returnType,
//                   except that 'array' is not possible (there is no way for us to know the length of the array)
// @param args       An array of the arguments to the function, as native JS values (as in returnType)
//                   Note that string arguments will be stored on the stack (the JS string will become a C string on the stack).
// @return           The return value, as a native JS value (as in returnType)
function ccall(ident, returnType, argTypes, args) {
  var stack = 0;
  function toC(value, type) {
    if (type == 'string') {
      if (value === null || value === undefined || value === 0) return 0; // null string
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length+1);
      writeStringToMemory(value, ret);
      return ret;
    } else if (type == 'array') {
      if (!stack) stack = Runtime.stackSave();
      var ret = Runtime.stackAlloc(value.length);
      writeArrayToMemory(value, ret);
      return ret;
    }
    return value;
  }
  function fromC(value, type) {
    if (type == 'string') {
      return Pointer_stringify(value);
    }
    assert(type != 'array');
    return value;
  }
  try {
    var func = eval('_' + ident);
  } catch(e) {
    try {
      func = globalScope['Module']['_' + ident]; // closure exported function
    } catch(e) {}
  }
  assert(func, 'Cannot call unknown function ' + ident + ' (perhaps LLVM optimizations or closure removed it?)');
  var i = 0;
  var cArgs = args ? args.map(function(arg) {
    return toC(arg, argTypes[i++]);
  }) : [];
  var ret = fromC(func.apply(null, cArgs), returnType);
  if (stack) Runtime.stackRestore(stack);
  return ret;
}
Module["ccall"] = ccall;

// Returns a native JS wrapper for a C function. This is similar to ccall, but
// returns a function you can call repeatedly in a normal way. For example:
//
//   var my_function = cwrap('my_c_function', 'number', ['number', 'number']);
//   alert(my_function(5, 22));
//   alert(my_function(99, 12));
//
function cwrap(ident, returnType, argTypes) {
  // TODO: optimize this, eval the whole function once instead of going through ccall each time
  return function() {
    return ccall(ident, returnType, argTypes, Array.prototype.slice.call(arguments));
  }
}
Module["cwrap"] = cwrap;

// Sets a value in memory in a dynamic way at run-time. Uses the
// type data. This is the same as makeSetValue, except that
// makeSetValue is done at compile-time and generates the needed
// code then, whereas this function picks the right code at
// run-time.
// Note that setValue and getValue only do *aligned* writes and reads!
// Note that ccall uses JS types as for defining types, while setValue and
// getValue need LLVM types ('i8', 'i32') - this is a lower-level operation
function setValue(ptr, value, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': HEAP8[(ptr)]=value; break;
      case 'i8': HEAP8[(ptr)]=value; break;
      case 'i16': HEAP16[((ptr)>>1)]=value; break;
      case 'i32': HEAP32[((ptr)>>2)]=value; break;
      case 'i64': (tempI64 = [value>>>0,Math.min(Math.floor((value)/4294967296), 4294967295)],HEAP32[((ptr)>>2)]=tempI64[0],HEAP32[(((ptr)+(4))>>2)]=tempI64[1]); break;
      case 'float': HEAPF32[((ptr)>>2)]=value; break;
      case 'double': (tempDoubleF64[0]=value,HEAP32[((ptr)>>2)]=tempDoubleI32[0],HEAP32[(((ptr)+(4))>>2)]=tempDoubleI32[1]); break;
      default: abort('invalid type for setValue: ' + type);
    }
}
Module['setValue'] = setValue;

// Parallel to setValue.
function getValue(ptr, type, noSafe) {
  type = type || 'i8';
  if (type.charAt(type.length-1) === '*') type = 'i32'; // pointers are 32-bit
    switch(type) {
      case 'i1': return HEAP8[(ptr)];
      case 'i8': return HEAP8[(ptr)];
      case 'i16': return HEAP16[((ptr)>>1)];
      case 'i32': return HEAP32[((ptr)>>2)];
      case 'i64': return HEAP32[((ptr)>>2)];
      case 'float': return HEAPF32[((ptr)>>2)];
      case 'double': return (tempDoubleI32[0]=HEAP32[((ptr)>>2)],tempDoubleI32[1]=HEAP32[(((ptr)+(4))>>2)],tempDoubleF64[0]);
      default: abort('invalid type for setValue: ' + type);
    }
  return null;
}
Module['getValue'] = getValue;

var ALLOC_NORMAL = 0; // Tries to use _malloc()
var ALLOC_STACK = 1; // Lives for the duration of the current function call
var ALLOC_STATIC = 2; // Cannot be freed
Module['ALLOC_NORMAL'] = ALLOC_NORMAL;
Module['ALLOC_STACK'] = ALLOC_STACK;
Module['ALLOC_STATIC'] = ALLOC_STATIC;

// allocate(): This is for internal use. You can use it yourself as well, but the interface
//             is a little tricky (see docs right below). The reason is that it is optimized
//             for multiple syntaxes to save space in generated code. So you should
//             normally not use allocate(), and instead allocate memory using _malloc(),
//             initialize it with setValue(), and so forth.
// @slab: An array of data, or a number. If a number, then the size of the block to allocate,
//        in *bytes* (note that this is sometimes confusing: the next parameter does not
//        affect this!)
// @types: Either an array of types, one for each byte (or 0 if no type at that position),
//         or a single type which is used for the entire block. This only matters if there
//         is initial data - if @slab is a number, then this does not matter at all and is
//         ignored.
// @allocator: How to allocate memory, see ALLOC_*
function allocate(slab, types, allocator) {
  var zeroinit, size;
  if (typeof slab === 'number') {
    zeroinit = true;
    size = slab;
  } else {
    zeroinit = false;
    size = slab.length;
  }

  var singleType = typeof types === 'string' ? types : null;

  var ret = [_malloc, Runtime.stackAlloc, Runtime.staticAlloc][allocator === undefined ? ALLOC_STATIC : allocator](Math.max(size, singleType ? 1 : types.length));

  if (zeroinit) {
      _memset(ret, 0, size);
      return ret;
  }
  
  var i = 0, type;
  while (i < size) {
    var curr = slab[i];

    if (typeof curr === 'function') {
      curr = Runtime.getFunctionIndex(curr);
    }

    type = singleType || types[i];
    if (type === 0) {
      i++;
      continue;
    }
    assert(type, 'Must know what type to store in allocate!');

    if (type == 'i64') type = 'i32'; // special case: we have one i32 here, and one i32 later

    setValue(ret+i, curr, type);
    i += Runtime.getNativeTypeSize(type);
  }

  return ret;
}
Module['allocate'] = allocate;

function Pointer_stringify(ptr, /* optional */ length) {
  var utf8 = new Runtime.UTF8Processor();
  var nullTerminated = typeof(length) == "undefined";
  var ret = "";
  var i = 0;
  var t;
  while (1) {
    t = HEAPU8[((ptr)+(i))];
    if (nullTerminated && t == 0) break;
    ret += utf8.processCChar(t);
    i += 1;
    if (!nullTerminated && i == length) break;
  }
  return ret;
}
Module['Pointer_stringify'] = Pointer_stringify;

function Array_stringify(array) {
  var ret = "";
  for (var i = 0; i < array.length; i++) {
    ret += String.fromCharCode(array[i]);
  }
  return ret;
}
Module['Array_stringify'] = Array_stringify;

// Memory management

var FUNCTION_TABLE; // XXX: In theory the indexes here can be equal to pointers to stacked or malloced memory. Such comparisons should
                    //      be false, but can turn out true. We should probably set the top bit to prevent such issues.

var PAGE_SIZE = 4096;
function alignMemoryPage(x) {
  return ((x+4095)>>12)<<12;
}

var HEAP;
var HEAP8, HEAPU8, HEAP16, HEAPU16, HEAP32, HEAPU32, HEAPF32, HEAPF64;

var STACK_ROOT, STACKTOP, STACK_MAX;
var STATICTOP;
function enlargeMemory() {
  abort('Cannot enlarge memory arrays. Adjust TOTAL_MEMORY (currently ' + TOTAL_MEMORY + ') or compile with ALLOW_MEMORY_GROWTH');
}

var TOTAL_STACK = Module['TOTAL_STACK'] || 5242880;
var TOTAL_MEMORY = Module['TOTAL_MEMORY'] || 10485760;
var FAST_MEMORY = Module['FAST_MEMORY'] || 2097152;

// Initialize the runtime's memory
// check for full engine support (use string 'subarray' to avoid closure compiler confusion)
  assert(!!Int32Array && !!Float64Array && !!(new Int32Array(1)['subarray']) && !!(new Int32Array(1)['set']),
         'Cannot fallback to non-typed array case: Code is too specialized');

  var buffer = new ArrayBuffer(TOTAL_MEMORY);
  HEAP8 = new Int8Array(buffer);
  HEAP16 = new Int16Array(buffer);
  HEAP32 = new Int32Array(buffer);
  HEAPU8 = new Uint8Array(buffer);
  HEAPU16 = new Uint16Array(buffer);
  HEAPU32 = new Uint32Array(buffer);
  HEAPF32 = new Float32Array(buffer);
  HEAPF64 = new Float64Array(buffer);

  // Endianness check (note: assumes compiler arch was little-endian)
  HEAP32[0] = 255;
  assert(HEAPU8[0] === 255 && HEAPU8[3] === 0, 'Typed arrays 2 must be run on a little-endian system');

Module['HEAP'] = HEAP;
Module['HEAP8'] = HEAP8;
Module['HEAP16'] = HEAP16;
Module['HEAP32'] = HEAP32;
Module['HEAPU8'] = HEAPU8;
Module['HEAPU16'] = HEAPU16;
Module['HEAPU32'] = HEAPU32;
Module['HEAPF32'] = HEAPF32;
Module['HEAPF64'] = HEAPF64;

STACK_ROOT = STACKTOP = Runtime.alignMemory(1);
STACK_MAX = STACK_ROOT + TOTAL_STACK;

var tempDoublePtr = Runtime.alignMemory(STACK_MAX, 8);
var tempDoubleI8  = HEAP8.subarray(tempDoublePtr);
var tempDoubleI32 = HEAP32.subarray(tempDoublePtr >> 2);
var tempDoubleF32 = HEAPF32.subarray(tempDoublePtr >> 2);
var tempDoubleF64 = HEAPF64.subarray(tempDoublePtr >> 3);
function copyTempFloat(ptr) { // functions, because inlining this code is increases code size too much
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
}
function copyTempDouble(ptr) {
  tempDoubleI8[0] = HEAP8[ptr];
  tempDoubleI8[1] = HEAP8[ptr+1];
  tempDoubleI8[2] = HEAP8[ptr+2];
  tempDoubleI8[3] = HEAP8[ptr+3];
  tempDoubleI8[4] = HEAP8[ptr+4];
  tempDoubleI8[5] = HEAP8[ptr+5];
  tempDoubleI8[6] = HEAP8[ptr+6];
  tempDoubleI8[7] = HEAP8[ptr+7];
}
STACK_MAX = tempDoublePtr + 8;

STATICTOP = alignMemoryPage(STACK_MAX);

assert(STATICTOP < TOTAL_MEMORY); // Stack must fit in TOTAL_MEMORY; allocations from here on may enlarge TOTAL_MEMORY

var nullString = allocate(intArrayFromString('(null)'), 'i8', ALLOC_STATIC);

function callRuntimeCallbacks(callbacks) {
  while(callbacks.length > 0) {
    var callback = callbacks.shift();
    var func = callback.func;
    if (typeof func === 'number') {
      func = FUNCTION_TABLE[func];
    }
    func(callback.arg === undefined ? null : callback.arg);
  }
}

var __ATINIT__ = []; // functions called during startup
var __ATMAIN__ = []; // functions called when main() is to be run
var __ATEXIT__ = []; // functions called during shutdown

function initRuntime() {
  callRuntimeCallbacks(__ATINIT__);
}
function preMain() {
  callRuntimeCallbacks(__ATMAIN__);
}
function exitRuntime() {
  callRuntimeCallbacks(__ATEXIT__);

  // Print summary of correction activity
  CorrectionsMonitor.print();
}

function String_len(ptr) {
  var i = ptr;
  while (HEAP8[(i++)]) {}; // Note: should be |!= 0|, technically. But this helps catch bugs with undefineds
  return i - ptr - 1;
}
Module['String_len'] = String_len;

// Tools

// This processes a JS string into a C-line array of numbers, 0-terminated.
// For LLVM-originating strings, see parser.js:parseLLVMString function
function intArrayFromString(stringy, dontAddNull, length /* optional */) {
  var ret = (new Runtime.UTF8Processor()).processJSString(stringy);
  if (length) {
    ret.length = length;
  }
  if (!dontAddNull) {
    ret.push(0);
  }
  return ret;
}
Module['intArrayFromString'] = intArrayFromString;

function intArrayToString(array) {
  var ret = [];
  for (var i = 0; i < array.length; i++) {
    var chr = array[i];
    if (chr > 0xFF) {
        assert(false, 'Character code ' + chr + ' (' + String.fromCharCode(chr) + ')  at offset ' + i + ' not in 0x00-0xFF.');
      chr &= 0xFF;
    }
    ret.push(String.fromCharCode(chr));
  }
  return ret.join('');
}
Module['intArrayToString'] = intArrayToString;

// Write a Javascript array to somewhere in the heap
function writeStringToMemory(string, buffer, dontAddNull) {
  var array = intArrayFromString(string, dontAddNull);
  var i = 0;
  while (i < array.length) {
    var chr = array[i];
    HEAP8[((buffer)+(i))]=chr
    i = i + 1;
  }
}
Module['writeStringToMemory'] = writeStringToMemory;

function writeArrayToMemory(array, buffer) {
  for (var i = 0; i < array.length; i++) {
    HEAP8[((buffer)+(i))]=array[i];
  }
}
Module['writeArrayToMemory'] = writeArrayToMemory;

var STRING_TABLE = [];

function unSign(value, bits, ignore, sig) {
  if (value >= 0) {
    return value;
  }
  return bits <= 32 ? 2*Math.abs(1 << (bits-1)) + value // Need some trickery, since if bits == 32, we are right at the limit of the bits JS uses in bitshifts
                    : Math.pow(2, bits)         + value;
  // TODO: clean up previous line
}
function reSign(value, bits, ignore, sig) {
  if (value <= 0) {
    return value;
  }
  var half = bits <= 32 ? Math.abs(1 << (bits-1)) // abs is needed if bits == 32
                        : Math.pow(2, bits-1);
  if (value >= half && (bits <= 32 || value > half)) { // for huge values, we can hit the precision limit and always get true here. so don't do that
                                                       // but, in general there is no perfect solution here. With 64-bit ints, we get rounding and errors
                                                       // TODO: In i64 mode 1, resign the two parts separately and safely
    value = -2*half + value; // Cannot bitshift half, as it may be at the limit of the bits JS uses in bitshifts
  }
  return value;
}

// A counter of dependencies for calling run(). If we need to
// do asynchronous work before running, increment this and
// decrement it. Incrementing must happen in a place like
// PRE_RUN_ADDITIONS (used by emcc to add file preloading).
// Note that you can add dependencies in preRun, even though
// it happens right before run - run will be postponed until
// the dependencies are met.
var runDependencies = 0;
var runDependencyTracking = {};
var calledRun = false;
var runDependencyWatcher = null;
function addRunDependency(id) {
  runDependencies++;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(!runDependencyTracking[id]);
    runDependencyTracking[id] = 1;
    if (runDependencyWatcher === null && typeof setInterval !== 'undefined') {
      // Check for missing dependencies every few seconds
      runDependencyWatcher = setInterval(function() {
        var shown = false;
        for (var dep in runDependencyTracking) {
          if (!shown) {
            shown = true;
            Module.printErr('still waiting on run dependencies:');
          }
          Module.printErr('dependency: ' + dep);
        }
        if (shown) {
          Module.printErr('(end of list)');
        }
      }, 6000);
    }
  } else {
    Module.printErr('warning: run dependency added without ID');
  }
}
Module['addRunDependency'] = addRunDependency;
function removeRunDependency(id) {
  runDependencies--;
  if (Module['monitorRunDependencies']) {
    Module['monitorRunDependencies'](runDependencies);
  }
  if (id) {
    assert(runDependencyTracking[id]);
    delete runDependencyTracking[id];
  } else {
    Module.printErr('warning: run dependency removed without ID');
  }
  if (runDependencies == 0) {
    if (runDependencyWatcher !== null) {
      clearInterval(runDependencyWatcher);
      runDependencyWatcher = null;
    } 
    if (!calledRun) run();
  }
}
Module['removeRunDependency'] = removeRunDependency;

Module["preloadedImages"] = {}; // maps url to image data
Module["preloadedAudios"] = {}; // maps url to audio data

// === Body ===




// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.

function _notification_adjust_pattern_positions($pat_enter, $pat_match, $pat_exit) {
  ;
  var __label__;

  var $pat_enter_addr;
  var $pat_match_addr;
  var $pat_exit_addr;
  $pat_enter_addr=$pat_enter;
  $pat_match_addr=$pat_match;
  $pat_exit_addr=$pat_exit;
  var $0=$pat_match_addr;
  var $l=(($0+8)|0);
  var $nt=$l;
  var $end_line=(($nt+12)|0);
  var $1=HEAP32[(($end_line)>>2)];
  var $2=$pat_exit_addr;
  var $l1=(($2+8)|0);
  var $nt2=$l1;
  var $end_line3=(($nt2+12)|0);
  HEAP32[(($end_line3)>>2)]=$1;
  var $3=$pat_enter_addr;
  var $l4=(($3+8)|0);
  var $nt5=$l4;
  var $end_line6=(($nt5+12)|0);
  HEAP32[(($end_line6)>>2)]=$1;
  var $4=$pat_match_addr;
  var $l7=(($4+8)|0);
  var $nt8=$l7;
  var $end_char_pos=(($nt8+16)|0);
  var $5=HEAP32[(($end_char_pos)>>2)];
  var $6=$pat_exit_addr;
  var $l9=(($6+8)|0);
  var $nt10=$l9;
  var $end_char_pos11=(($nt10+16)|0);
  HEAP32[(($end_char_pos11)>>2)]=$5;
  var $7=$pat_enter_addr;
  var $l12=(($7+8)|0);
  var $nt13=$l12;
  var $end_char_pos14=(($nt13+16)|0);
  HEAP32[(($end_char_pos14)>>2)]=$5;
  ;
  return;
}


function _nextword($s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $p;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=HEAP32[(($0)>>2)];
      $p=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$s_addr;
      var $3=HEAP32[(($2)>>2)];
      var $incdec_ptr=(($3+1)|0);
      HEAP32[(($2)>>2)]=$incdec_ptr;
      var $4=HEAP8[($3)];
      var $conv=(($4 << 24) >> 24);
      var $cmp=(($conv)|0)!=0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      __label__ = 3; break;
    case 5: 
      var $5=$p;
      ;
      return $5;
    default: assert(0, "bad label: " + __label__);
  }
}


function _send_notification($nt) {
  var __stackBase__  = STACKTOP; STACKTOP += 1024; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $nt_addr;
  var $buf=__stackBase__;
  $nt_addr=$nt;
  var $arraydecay=(($buf)|0);
  var $0=$nt_addr;
  var $type=(($0)|0);
  var $1=HEAP32[(($type)>>2)];
  var $2=$nt_addr;
  var $start_line=(($2+4)|0);
  var $3=HEAP32[(($start_line)>>2)];
  var $4=$nt_addr;
  var $start_char_pos=(($4+8)|0);
  var $5=HEAP32[(($start_char_pos)>>2)];
  var $6=$nt_addr;
  var $end_line=(($6+12)|0);
  var $7=HEAP32[(($end_line)>>2)];
  var $8=$nt_addr;
  var $end_char_pos=(($8+16)|0);
  var $9=HEAP32[(($end_char_pos)>>2)];
  var $call=_snprintf($arraydecay, 1024, ((STRING_TABLE.__str20)|0), (tempInt=STACKTOP,STACKTOP += 20,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$1,HEAP32[(((tempInt)+(4))>>2)]=$3,HEAP32[(((tempInt)+(8))>>2)]=$5,HEAP32[(((tempInt)+(12))>>2)]=$7,HEAP32[(((tempInt)+(16))>>2)]=$9,tempInt));
  var $arraydecay1=(($buf)|0);
  var $call2=_emscripten_run_script($arraydecay1);
  STACKTOP = __stackBase__;
  return;
}


function _process_notification($op) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $op_addr;
      $op_addr=$op;
      var $0=$op_addr;
      var $l=(($0+8)|0);
      var $nt=$l;
      var $type=(($nt)|0);
      var $1=HEAP32[(($type)>>2)];
      var $cmp=(($1)|0)==7;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      HEAP8[(((_G1+114)|0))]=0;
      __label__ = 13; break;
    case 4: 
      var $2=$op_addr;
      var $l1=(($2+8)|0);
      var $nt2=$l1;
      var $type3=(($nt2)|0);
      var $3=HEAP32[(($type3)>>2)];
      var $cmp4=(($3)|0)==8;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      HEAP8[(((_G1+114)|0))]=1;
      __label__ = 12; break;
    case 6: 
      var $4=$op_addr;
      var $l7=(($4+8)|0);
      var $nt8=$l7;
      var $type9=(($nt8)|0);
      var $5=HEAP32[(($type9)>>2)];
      var $cmp10=(($5)|0)==9;
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $6=HEAP8[(((_G1+114)|0))];
      var $conv=(($6 << 24) >> 24);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 14; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $7=$op_addr;
      var $l14=(($7+8)|0);
      var $nt15=$l14;
      _send_notification($nt15);
      __label__ = 14; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _zero_out_var($vp) {
  ;
  var __label__;

  var $vp_addr;
  $vp_addr=$vp;
  var $0=$vp_addr;
  var $1=$0;
  HEAP32[(($1)>>2)]=0; HEAP32[((($1)+(4))>>2)]=0; HEAP32[((($1)+(8))>>2)]=0; HEAP32[((($1)+(12))>>2)]=0; HEAP32[((($1)+(16))>>2)]=0;
  ;
  return;
}


function _hash_init() {
  ;
  var __label__;

  var $newhash;
  var $call=_xzalloc(20);
  var $0=$call;
  $newhash=$0;
  var $1=$newhash;
  var $csize=(($1+4)|0);
  HEAP32[(($csize)>>2)]=61;
  var $call1=_xzalloc(244);
  var $2=$call1;
  var $3=$newhash;
  var $items=(($3+16)|0);
  HEAP32[(($items)>>2)]=$2;
  var $4=$newhash;
  ;
  return $4;
}


function _hash_find($hash, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $hash_addr;
      var $name_addr;
      var $hi;
      var $idx;
      var $l;
      $hash_addr=$hash;
      $name_addr=$name;
      var $0=$hash_addr;
      var $1=$name_addr;
      var $call=_hash_search($0, $1);
      var $2=$call;
      $hi=$2;
      var $3=$hi;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$hash_addr;
      var $nel=(($4)|0);
      var $5=HEAP32[(($nel)>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[(($nel)>>2)]=$inc;
      var $6=$hash_addr;
      var $csize=(($6+4)|0);
      var $7=HEAP32[(($csize)>>2)];
      var $div=Math.floor(((($inc)>>>0))/((($7)>>>0)));
      var $cmp=(($div)>>>0) > 10;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $8=$hash_addr;
      _hash_rebuild($8);
      __label__ = 5; break;
    case 5: 
      var $9=$name_addr;
      var $call2=_strlen($9);
      var $add=((($call2)+(1))|0);
      $l=$add;
      var $10=$l;
      var $add3=((($10)+(32))|0);
      var $call4=_xzalloc($add3);
      var $11=$call4;
      $hi=$11;
      var $12=$hi;
      var $name5=(($12+28)|0);
      var $arraydecay=(($name5)|0);
      var $13=$name_addr;
      var $call6=_strcpy($arraydecay, $13);
      var $14=$name_addr;
      var $call7=_hashidx($14);
      var $15=$hash_addr;
      var $csize8=(($15+4)|0);
      var $16=HEAP32[(($csize8)>>2)];
      var $rem=((($call7)>>>0))%((($16)>>>0));
      $idx=$rem;
      var $17=$idx;
      var $18=$hash_addr;
      var $items=(($18+16)|0);
      var $19=HEAP32[(($items)>>2)];
      var $arrayidx=(($19+($17<<2))|0);
      var $20=HEAP32[(($arrayidx)>>2)];
      var $21=$hi;
      var $next=(($21+24)|0);
      HEAP32[(($next)>>2)]=$20;
      var $22=$hi;
      var $23=$idx;
      var $24=$hash_addr;
      var $items9=(($24+16)|0);
      var $25=HEAP32[(($items9)>>2)];
      var $arrayidx10=(($25+($23<<2))|0);
      HEAP32[(($arrayidx10)>>2)]=$22;
      var $26=$l;
      var $27=$hash_addr;
      var $glen=(($27+12)|0);
      var $28=HEAP32[(($glen)>>2)];
      var $add11=((($28)+($26))|0);
      HEAP32[(($glen)>>2)]=$add11;
      __label__ = 6; break;
    case 6: 
      var $29=$hi;
      var $data=(($29)|0);
      var $30=$data;
      ;
      return $30;
    default: assert(0, "bad label: " + __label__);
  }
}
_hash_find["X"]=1;

function _setvar_s($v, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      var $value_addr;
      $v_addr=$v;
      $value_addr=$value;
      var $0=$v_addr;
      var $1=$value_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$value_addr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $tobool1=(($conv)|0)!=0;
      if ($tobool1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$value_addr;
      var $call=_xstrdup($4);
      var $cond = $call;__label__ = 6; break;
    case 5: 
      var $cond = 0;__label__ = 6; break;
    case 6: 
      var $cond;
      var $call2=_setvar_p($0, $cond);
      ;
      return $call2;
    default: assert(0, "bad label: " + __label__);
  }
}


function _setvar_i($v, $value) {
  ;
  var __label__;

  var $v_addr;
  var $value_addr;
  $v_addr=$v;
  $value_addr=$value;
  var $0=$v_addr;
  var $call=_clrvar($0);
  var $1=$v_addr;
  var $type=(($1)|0);
  var $2=HEAP32[(($type)>>2)];
  var $or=$2 | 1;
  HEAP32[(($type)>>2)]=$or;
  var $3=$value_addr;
  var $4=$v_addr;
  var $number=(($4+4)|0);
  (tempDoubleF64[0]=$3,HEAP32[(($number)>>2)]=tempDoubleI32[0],HEAP32[((($number)+(4))>>2)]=tempDoubleI32[1]);
  var $5=$v_addr;
  _handle_special($5);
  var $6=$v_addr;
  ;
  return $6;
}


function _handle_special($v) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      var $n;
      var $b;
      var $sep;
      var $s;
      var $sl;
      var $l;
      var $len;
      var $i;
      var $bsize=__stackBase__;
      $v_addr=$v;
      var $0=$v_addr;
      var $type=(($0)|0);
      var $1=HEAP32[(($type)>>2)];
      var $and=$1 & 1024;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      __label__ = 30; break;
    case 4: 
      var $2=$v_addr;
      var $3=HEAP32[((((_G+80)|0))>>2)];
      var $cmp=(($2)|0)==(($3)|0);
      if ($cmp) { __label__ = 5; break; } else { __label__ = 14; break; }
    case 5: 
      var $4=$v_addr;
      var $call=_getvar_i($4);
      var $conv=(($call)&-1);
      $n=$conv;
      var $5=$n;
      _fsrealloc($5);
      var $6=HEAP32[((((_G+28)|0))>>2)];
      var $call2=_getvar_s($6);
      $sep=$call2;
      var $7=$sep;
      var $call3=_strlen($7);
      $sl=$call3;
      $b=0;
      $len=0;
      $i=0;
      __label__ = 6; break;
    case 6: 
      var $8=$i;
      var $9=$n;
      var $cmp4=(($8)|0) < (($9)|0);
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $10=$i;
      var $11=HEAP32[((((_G1+92)|0))>>2)];
      var $arrayidx=(($11+($10)*(20))|0);
      var $call6=_getvar_s($arrayidx);
      $s=$call6;
      var $12=$s;
      var $call7=_strlen($12);
      $l=$call7;
      var $13=$b;
      var $tobool8=(($13)|0)!=0;
      if ($tobool8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $14=$b;
      var $15=$len;
      var $add_ptr=(($14+$15)|0);
      var $16=$sep;
      var $17=$sl;
      assert($17 % 1 === 0, 'memcpy given ' + $17 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr, $16, $17, 1);
      var $18=$sl;
      var $19=$len;
      var $add=((($19)+($18))|0);
      $len=$add;
      __label__ = 9; break;
    case 9: 
      var $20=$b;
      var $21=$len;
      var $22=$l;
      var $add11=((($21)+($22))|0);
      var $23=$sl;
      var $add12=((($add11)+($23))|0);
      var $call13=_qrealloc($20, $add12, $bsize);
      $b=$call13;
      var $24=$b;
      var $25=$len;
      var $add_ptr14=(($24+$25)|0);
      var $26=$s;
      var $27=$l;
      assert($27 % 1 === 0, 'memcpy given ' + $27 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr14, $26, $27, 1);
      var $28=$l;
      var $29=$len;
      var $add15=((($29)+($28))|0);
      $len=$add15;
      __label__ = 10; break;
    case 10: 
      var $30=$i;
      var $inc=((($30)+(1))|0);
      $i=$inc;
      __label__ = 6; break;
    case 11: 
      var $31=$b;
      var $tobool16=(($31)|0)!=0;
      if ($tobool16) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $32=$len;
      var $33=$b;
      var $arrayidx18=(($33+$32)|0);
      HEAP8[($arrayidx18)]=0;
      __label__ = 13; break;
    case 13: 
      var $34=HEAP32[((((_G+52)|0))>>2)];
      var $35=$b;
      var $call20=_setvar_p($34, $35);
      HEAP8[(((_G1+112)|0))]=1;
      __label__ = 30; break;
    case 14: 
      var $36=$v_addr;
      var $37=HEAP32[((((_G+52)|0))>>2)];
      var $cmp21=(($36)|0)==(($37)|0);
      if ($cmp21) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      HEAP8[(((_G1+112)|0))]=0;
      __label__ = 29; break;
    case 16: 
      var $38=$v_addr;
      var $39=HEAP32[((((_G+24)|0))>>2)];
      var $cmp25=(($38)|0)==(($39)|0);
      if ($cmp25) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $40=$v_addr;
      var $call28=_getvar_s($40);
      var $call29=_mk_splitter($call28, ((_G+248)|0));
      __label__ = 28; break;
    case 18: 
      var $41=$v_addr;
      var $42=HEAP32[((((_G+36)|0))>>2)];
      var $cmp31=(($41)|0)==(($42)|0);
      if ($cmp31) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $43=$v_addr;
      var $call34=_getvar_s($43);
      var $call35=_mk_splitter($call34, ((_G+316)|0));
      __label__ = 27; break;
    case 20: 
      var $44=$v_addr;
      var $45=HEAP32[((((_G+84)|0))>>2)];
      var $cmp37=(($44)|0)==(($45)|0);
      if ($cmp37) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $46=$v_addr;
      var $call40=_istrue($46);
      var $conv41=(($call40) & 255);
      HEAP8[(((_G1+108)|0))]=$conv41;
      __label__ = 26; break;
    case 22: 
      var $47=HEAP32[((((_G+80)|0))>>2)];
      var $call43=_getvar_i($47);
      var $conv44=(($call43)&-1);
      $n=$conv44;
      var $48=HEAP32[((((_G+80)|0))>>2)];
      var $49=$n;
      var $50=$v_addr;
      var $51=HEAP32[((((_G1+92)|0))>>2)];
      var $sub_ptr_lhs_cast=$50;
      var $sub_ptr_rhs_cast=$51;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(20))&-1);
      var $cmp45=(($49)|0) > (($sub_ptr_div)|0);
      if ($cmp45) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $52=$n;
      var $cond = $52;__label__ = 25; break;
    case 24: 
      var $53=$v_addr;
      var $54=HEAP32[((((_G1+92)|0))>>2)];
      var $sub_ptr_lhs_cast47=$53;
      var $sub_ptr_rhs_cast48=$54;
      var $sub_ptr_sub49=((($sub_ptr_lhs_cast47)-($sub_ptr_rhs_cast48))|0);
      var $sub_ptr_div50=((((($sub_ptr_sub49)|0))/(20))&-1);
      var $add51=((($sub_ptr_div50)+(1))|0);
      var $cond = $add51;__label__ = 25; break;
    case 25: 
      var $cond;
      var $conv52=(($cond)|0);
      var $call53=_setvar_i($48, $conv52);
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_handle_special["X"]=1;

function _main($argc, $argv) {
  var __stackBase__  = STACKTOP; STACKTOP += 60; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $argc_addr;
      var $argv_addr;
      var $opt;
      var $opt_F=__stackBase__;
      var $list_v=(__stackBase__)+(4);
      var $list_f=(__stackBase__)+(8);
      var $i;
      var $j;
      var $v;
      var $tv=(__stackBase__)+(12);
      var $envp;
      var $vnames=(__stackBase__)+(32);
      var $vvalues=(__stackBase__)+(36);
      var $s;
      var $from_file;
      var $nt=(__stackBase__)+(40);
      $retval=0;
      $argc_addr=$argc;
      $argv_addr=$argv;
      HEAP32[(($list_v)>>2)]=0;
      HEAP32[(($list_f)>>2)]=0;
      HEAP32[(($vnames)>>2)]=((STRING_TABLE._vNames)|0);
      HEAP32[(($vvalues)>>2)]=((STRING_TABLE._vValues)|0);
      _zero_out_var($tv);
      var $call=_xmalloc(241);
      HEAP32[((((_G1+104)|0))>>2)]=$call;
      var $call1=_hash_init();
      HEAP32[((((_G1+60)|0))>>2)]=$call1;
      var $call2=_hash_init();
      HEAP32[((((_G1+64)|0))>>2)]=$call2;
      var $call3=_hash_init();
      HEAP32[((((_G1+68)|0))>>2)]=$call3;
      var $call4=_hash_init();
      HEAP32[((((_G1+72)|0))>>2)]=$call4;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=HEAP32[(($vnames)>>2)];
      var $1=HEAP8[($0)];
      var $tobool=(($1 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 11; break; }
    case 4: 
      var $2=HEAP32[((((_G1+60)|0))>>2)];
      var $call5=_nextword($vnames);
      var $call6=_hash_find($2, $call5);
      var $3=$call6;
      $v=$3;
      var $4=$i;
      var $arrayidx=((((_G+16)|0)+($4<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$3;
      var $5=HEAP32[(($vvalues)>>2)];
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $cmp=(($conv)|0)!=-1;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=$v;
      var $call8=_nextword($vvalues);
      var $call9=_setvar_s($7, $call8);
      __label__ = 7; break;
    case 6: 
      var $8=$v;
      var $call10=_setvar_i($8, 0);
      __label__ = 7; break;
    case 7: 
      var $9=HEAP32[(($vnames)>>2)];
      var $10=HEAP8[($9)];
      var $conv11=(($10 << 24) >> 24);
      var $cmp12=(($conv11)|0)==42;
      if ($cmp12) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$v;
      var $type=(($11)|0);
      var $12=HEAP32[(($type)>>2)];
      var $or=$12 | 1024;
      HEAP32[(($type)>>2)]=$or;
      var $13=HEAP32[(($vnames)>>2)];
      var $incdec_ptr=(($13+1)|0);
      HEAP32[(($vnames)>>2)]=$incdec_ptr;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 11: 
      var $15=HEAP32[((((_G+24)|0))>>2)];
      _handle_special($15);
      var $16=HEAP32[((((_G+36)|0))>>2)];
      _handle_special($16);
      var $17=HEAP32[((_stdin)>>2)];
      var $18=HEAP32[((((_G1+68)|0))>>2)];
      var $call16=_hash_find($18, ((STRING_TABLE.__str23)|0));
      var $19=$call16;
      var $F=(($19)|0);
      HEAP32[(($F)>>2)]=$17;
      var $20=HEAP32[((_stdout)>>2)];
      var $21=HEAP32[((((_G1+68)|0))>>2)];
      var $call17=_hash_find($21, ((STRING_TABLE.__str24)|0));
      var $22=$call17;
      var $F18=(($22)|0);
      HEAP32[(($F18)>>2)]=$20;
      var $23=HEAP32[((_stderr)>>2)];
      var $24=HEAP32[((((_G1+68)|0))>>2)];
      var $call19=_hash_find($24, ((STRING_TABLE.__str25)|0));
      var $25=$call19;
      var $F20=(($25)|0);
      HEAP32[(($F20)>>2)]=$23;
      HEAP32[((_opt_complementary)>>2)]=((STRING_TABLE.__str26)|0);
      var $26=$argv_addr;
      var $27=$opt_F;
      var $28=$list_v;
      var $29=$list_f;
      var $call21=_fixed_getopt32($26, ((STRING_TABLE.__str27)|0), $27, $28, $29);
      $opt=$call21;
      var $30=$opt;
      var $31=HEAP32[((_optind)>>2)];
      var $32=$argv_addr;
      var $add_ptr=(($32+($31<<2))|0);
      $argv_addr=$add_ptr;
      var $33=HEAP32[((_optind)>>2)];
      var $34=$argc_addr;
      var $sub=((($34)-($33))|0);
      $argc_addr=$sub;
      var $35=$opt;
      var $and=$35 & 1;
      var $tobool22=(($and)|0)!=0;
      if ($tobool22) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $36=HEAP32[((((_G+24)|0))>>2)];
      var $37=HEAP32[(($opt_F)>>2)];
      var $call24=_setvar_s($36, $37);
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $38=HEAP32[(($list_v)>>2)];
      var $tobool26=(($38)|0)!=0;
      if ($tobool26) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $call27=_llist_pop($list_v);
      var $call28=_is_assignment($call27);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      _bb_show_usage();
      throw "Reached an unreachable!"
    case 17: 
      __label__ = 14; break;
    case 18: 
      var $39=HEAP32[(($list_f)>>2)];
      var $tobool32=(($39)|0)!=0;
      if ($tobool32) { __label__ = 19; break; } else { __label__ = 27; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      $s=0;
      var $call34=_llist_pop($list_f);
      HEAP32[((((_G1+76)|0))>>2)]=$call34;
      var $40=HEAP32[((((_G1+76)|0))>>2)];
      var $41=HEAP32[((((_G1+76)|0))>>2)];
      var $call35=_xfopen_stdin($41);
      $from_file=$call35;
      $j=1;
      $i=1;
      __label__ = 21; break;
    case 21: 
      var $42=$j;
      var $cmp37=(($42)|0) > 0;
      if ($cmp37) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $43=$s;
      var $44=$i;
      var $add=((($44)+(4096))|0);
      var $call40=_xrealloc($43, $add);
      $s=$call40;
      var $45=$s;
      var $46=$i;
      var $add_ptr41=(($45+$46)|0);
      var $47=$from_file;
      var $call42=_fread($add_ptr41, 1, 4094, $47);
      $j=$call42;
      __label__ = 23; break;
    case 23: 
      var $48=$j;
      var $49=$i;
      var $add44=((($49)+($48))|0);
      $i=$add44;
      __label__ = 21; break;
    case 24: 
      var $50=$i;
      var $51=$s;
      var $arrayidx46=(($51+$50)|0);
      HEAP8[($arrayidx46)]=0;
      var $52=$from_file;
      var $call47=_fclose($52);
      var $53=$s;
      var $add_ptr48=(($53+1)|0);
      _parse_program($add_ptr48);
      var $54=$s;
      _free($54);
      __label__ = 25; break;
    case 25: 
      var $55=HEAP32[(($list_f)>>2)];
      var $tobool49=(($55)|0)!=0;
      if ($tobool49) { __label__ = 20; break; } else { __label__ = 26; break; }
    case 26: 
      var $56=$argc_addr;
      var $inc50=((($56)+(1))|0);
      $argc_addr=$inc50;
      __label__ = 30; break;
    case 27: 
      var $57=$argc_addr;
      var $tobool52=(($57)|0)!=0;
      if ($tobool52) { __label__ = 29; break; } else { __label__ = 28; break; }
    case 28: 
      _bb_show_usage();
      throw "Reached an unreachable!"
    case 29: 
      HEAP32[((((_G1+76)|0))>>2)]=((STRING_TABLE.__str31)|0);
      var $58=$argv_addr;
      var $incdec_ptr55=(($58+4)|0);
      $argv_addr=$incdec_ptr55;
      var $59=HEAP32[(($58)>>2)];
      _parse_program($59);
      __label__ = 30; break;
    case 30: 
      var $60=$opt;
      var $and57=$60 & 8;
      var $tobool58=(($and57)|0)!=0;
      if ($tobool58) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      _bb_error_msg(((STRING_TABLE.__str33)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      __label__ = 32; break;
    case 32: 
      var $61=HEAP32[((((_G+60)|0))>>2)];
      var $62=$argc_addr;
      var $conv61=(($62)|0);
      var $call62=_setvar_i($61, $conv61);
      var $63=HEAP32[((((_G+64)|0))>>2)];
      _setari_u($63, 0, ((STRING_TABLE.__str35)|0));
      $i=0;
      __label__ = 33; break;
    case 33: 
      var $64=$argv_addr;
      var $65=HEAP32[(($64)>>2)];
      var $tobool64=(($65)|0)!=0;
      if ($tobool64) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $66=HEAP32[((((_G+64)|0))>>2)];
      var $67=$i;
      var $inc66=((($67)+(1))|0);
      $i=$inc66;
      var $68=$argv_addr;
      var $incdec_ptr67=(($68+4)|0);
      $argv_addr=$incdec_ptr67;
      var $69=HEAP32[(($68)>>2)];
      _setari_u($66, $inc66, $69);
      __label__ = 33; break;
    case 35: 
      var $70=HEAP32[((((_G1+8)|0))>>2)];
      var $call69=_evaluate($70, $tv);
      var $71=HEAP32[((((_G1+20)|0))>>2)];
      var $tobool70=(($71)|0)!=0;
      if ($tobool70) { __label__ = 38; break; } else { __label__ = 36; break; }
    case 36: 
      var $72=HEAP32[((((_G1+32)|0))>>2)];
      var $tobool71=(($72)|0)!=0;
      if ($tobool71) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $73=_awk_exit(0);
      throw "Reached an unreachable!"
    case 38: 
      var $74=HEAP32[((((_G1+56)|0))>>2)];
      var $tobool74=(($74)|0)!=0;
      if ($tobool74) { __label__ = 40; break; } else { __label__ = 39; break; }
    case 39: 
      var $call76=_next_input_file();
      HEAP32[((((_G1+56)|0))>>2)]=$call76;
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $75=HEAP32[((((_G1+56)|0))>>2)];
      var $tobool79=(($75)|0)!=0;
      if ($tobool79) { __label__ = 42; break; } else { __label__ = 50; break; }
    case 42: 
      HEAP8[(((_G1+111)|0))]=0;
      var $76=HEAP32[((((_G+72)|0))>>2)];
      var $call81=_setvar_i($76, 0);
      __label__ = 43; break;
    case 43: 
      var $77=HEAP32[((((_G1+56)|0))>>2)];
      var $78=HEAP32[((((_G+52)|0))>>2)];
      var $call83=_awk_getline($77, $78);
      $i=$call83;
      var $cmp84=(($call83)|0) > 0;
      if ($cmp84) { __label__ = 44; break; } else { __label__ = 47; break; }
    case 44: 
      HEAP8[(((_G1+110)|0))]=0;
      var $79=HEAP32[((((_G+76)|0))>>2)];
      var $call87=_incvar($79);
      var $80=HEAP32[((((_G+72)|0))>>2)];
      var $call88=_incvar($80);
      var $81=HEAP32[((((_G1+20)|0))>>2)];
      var $call89=_evaluate($81, $tv);
      var $82=HEAP8[(((_G1+111)|0))];
      var $tobool90=(($82 << 24) >> 24)!=0;
      if ($tobool90) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      __label__ = 47; break;
    case 46: 
      __label__ = 43; break;
    case 47: 
      var $83=$i;
      var $cmp94=(($83)|0) < 0;
      if ($cmp94) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $call97=___errno();
      var $84=HEAP32[(($call97)>>2)];
      var $call98=_strerror($84);
      _syntax_error($call98);
      throw "Reached an unreachable!"
    case 49: 
      var $call100=_next_input_file();
      HEAP32[((((_G1+56)|0))>>2)]=$call100;
      __label__ = 41; break;
    case 50: 
      var $type102=(($nt)|0);
      HEAP32[(($type102)>>2)]=18;
      var $end_line=(($nt+12)|0);
      HEAP32[(($end_line)>>2)]=0;
      var $start_line=(($nt+4)|0);
      HEAP32[(($start_line)>>2)]=0;
      var $end_char_pos=(($nt+16)|0);
      HEAP32[(($end_char_pos)>>2)]=0;
      var $start_char_pos=(($nt+8)|0);
      HEAP32[(($start_char_pos)>>2)]=0;
      _send_notification($nt);
      var $85=_awk_exit(0);
      throw "Reached an unreachable!"
    case 51: 
      var $86=$retval;
      STACKTOP = __stackBase__;
      return $86;
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_main"] = _main;_main["X"]=1;

function _is_assignment($expr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $expr_addr;
      var $exprc;
      var $val;
      var $s=__stackBase__;
      var $s1;
      $expr_addr=$expr;
      var $0=$expr_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $call=_isalnum_($conv);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$expr_addr;
      var $call1=_strchr($2, 61);
      $val=$call1;
      var $cmp=(($call1)|0)==0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=0;
      __label__ = 9; break;
    case 5: 
      var $3=$expr_addr;
      var $call3=_xstrdup($3);
      $exprc=$call3;
      var $4=$exprc;
      var $5=$val;
      var $6=$expr_addr;
      var $sub_ptr_lhs_cast=$5;
      var $sub_ptr_rhs_cast=$6;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add_ptr=(($4+$sub_ptr_sub)|0);
      $val=$add_ptr;
      var $7=$val;
      var $incdec_ptr=(($7+1)|0);
      $val=$incdec_ptr;
      HEAP8[($7)]=0;
      var $8=$val;
      $s1=$8;
      HEAP32[(($s)>>2)]=$8;
      __label__ = 6; break;
    case 6: 
      var $call4=_nextchar($s);
      var $9=$s1;
      HEAP8[($9)]=$call4;
      var $conv5=(($call4 << 24) >> 24);
      var $cmp6=(($conv5)|0)!=0;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $10=$s1;
      var $incdec_ptr8=(($10+1)|0);
      $s1=$incdec_ptr8;
      __label__ = 6; break;
    case 8: 
      var $11=HEAP32[((((_G1+60)|0))>>2)];
      var $12=$exprc;
      var $call9=_hash_find($11, $12);
      var $13=$call9;
      var $14=$val;
      var $call10=_setvar_u($13, $14);
      var $15=$exprc;
      _free($15);
      $retval=1;
      __label__ = 9; break;
    case 9: 
      var $16=$retval;
      STACKTOP = __stackBase__;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}
_is_assignment["X"]=1;

function _parse_program($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $tclass;
      var $cn;
      var $f;
      var $v;
      var $nt_enter;
      var $nt_pattern_enter;
      var $nt_pattern_match;
      var $nt_pattern_exit;
      $p_addr=$p;
      var $0=$p_addr;
      HEAP32[((((_G1+100)|0))>>2)]=$0;
      HEAP32[((((_G+12)|0))>>2)]=1;
      HEAP32[((((_G1+116)|0))>>2)]=0;
      __label__ = 3; break;
    case 3: 
      var $call=_next_token(1073271845);
      $tclass=$call;
      var $cmp=(($call)|0)!=16777216;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 43; break; }
    case 4: 
      var $1=$tclass;
      var $and=$1 & 49152;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      __label__ = 3; break;
    case 8: 
      HEAP32[((((_G1+44)|0))>>2)]=((_G1+20)|0);
      var $2=$tclass;
      var $and1=$2 & 4194304;
      var $tobool2=(($and1)|0)!=0;
      if ($tobool2) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      HEAP32[((((_G1+44)|0))>>2)]=((_G1+8)|0);
      var $call6=_chain_notification(1, 0);
      $nt_enter=$call6;
      _chain_group();
      var $3=$nt_enter;
      var $call7=_chain_notification(2, $3);
      __label__ = 42; break;
    case 12: 
      var $4=$tclass;
      var $and8=$4 & 8388608;
      var $tobool9=(($and8)|0)!=0;
      if ($tobool9) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      __label__ = 14; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      HEAP32[((((_G1+44)|0))>>2)]=((_G1+32)|0);
      var $call13=_chain_notification(3, 0);
      $nt_enter=$call13;
      _chain_group();
      var $5=$nt_enter;
      var $call14=_chain_notification(4, $5);
      __label__ = 41; break;
    case 16: 
      var $6=$tclass;
      var $and16=$6 & 2097152;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $call21=_next_token(134217728);
      var $7=HEAP32[((((_G1+100)|0))>>2)];
      var $incdec_ptr=(($7+1)|0);
      HEAP32[((((_G1+100)|0))>>2)]=$incdec_ptr;
      var $8=HEAP32[((((_G1+72)|0))>>2)];
      var $9=HEAP32[((((_G+8)|0))>>2)];
      var $call22=_hash_find($8, $9);
      var $10=$call22;
      $f=$10;
      var $11=$f;
      var $body=(($11+4)|0);
      var $first=(($body)|0);
      HEAP32[(($first)>>2)]=0;
      var $12=$f;
      var $nargs=(($12)|0);
      HEAP32[(($nargs)>>2)]=0;
      __label__ = 20; break;
    case 20: 
      var $call24=_next_token(33554434);
      var $and25=$call24 & 33554432;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $13=HEAP32[((((_G1+64)|0))>>2)];
      var $14=HEAP32[((((_G+8)|0))>>2)];
      var $call28=_hash_find($13, $14);
      var $15=$call28;
      $v=$15;
      var $16=$f;
      var $nargs29=(($16)|0);
      var $17=HEAP32[(($nargs29)>>2)];
      var $inc=((($17)+(1))|0);
      HEAP32[(($nargs29)>>2)]=$inc;
      var $18=$v;
      var $x=(($18+16)|0);
      var $aidx=$x;
      HEAP32[(($aidx)>>2)]=$17;
      var $call30=_next_token(258);
      var $and31=$call30 & 2;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      __label__ = 24; break;
    case 23: 
      __label__ = 20; break;
    case 24: 
      var $19=$f;
      var $body35=(($19+4)|0);
      HEAP32[((((_G1+44)|0))>>2)]=$body35;
      _chain_group();
      var $20=HEAP32[((((_G1+64)|0))>>2)];
      _clear_array($20);
      __label__ = 40; break;
    case 25: 
      var $21=$tclass;
      var $and37=$21 & 1041761317;
      var $tobool38=(($and37)|0)!=0;
      if ($tobool38) { __label__ = 26; break; } else { __label__ = 36; break; }
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $call42=_chain_notification(7, 0);
      $nt_pattern_enter=$call42;
      _rollback_token();
      var $call43=_chain_node(3328);
      $cn=$call43;
      var $call44=_parse_expr(16830464);
      var $22=$cn;
      var $l=(($22+8)|0);
      var $n=$l;
      HEAP32[(($n)>>2)]=$call44;
      var $23=$nt_pattern_enter;
      var $call45=_chain_notification(8, $23);
      $nt_pattern_match=$call45;
      var $24=HEAP32[((((_G+4)|0))>>2)];
      var $and46=$24 & 4096;
      var $tobool47=(($and46)|0)!=0;
      if ($tobool47) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $call51=_chain_notification(5, 0);
      $nt_enter=$call51;
      _rollback_token();
      _chain_group();
      var $25=$nt_enter;
      var $call52=_chain_notification(6, $25);
      __label__ = 35; break;
    case 32: 
      var $call54=_chain_notification(11, 0);
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $call57=_chain_node(1024);
      __label__ = 35; break;
    case 35: 
      var $26=HEAP32[((((_G1+24)|0))>>2)];
      var $27=$cn;
      var $r=(($27+28)|0);
      var $n59=$r;
      HEAP32[(($n59)>>2)]=$26;
      var $28=$nt_pattern_enter;
      var $call60=_chain_notification(9, $28);
      $nt_pattern_exit=$call60;
      var $29=$nt_pattern_enter;
      var $30=$nt_pattern_match;
      var $31=$nt_pattern_exit;
      _notification_adjust_pattern_positions($29, $30, $31);
      __label__ = 39; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      _rollback_token();
      var $call64=_chain_notification(10, 0);
      var $call65=_chain_notification(5, 0);
      $nt_enter=$call65;
      _chain_group();
      var $32=$nt_enter;
      var $call66=_chain_notification(6, $32);
      __label__ = 39; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      __label__ = 3; break;
    case 43: 
      var $call72=_chain_notification(12, 0);
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_program["X"]=1;

function _setari_u($a, $idx, $s) {
  ;
  var __label__;

  var $a_addr;
  var $idx_addr;
  var $s_addr;
  var $v;
  $a_addr=$a;
  $idx_addr=$idx;
  $s_addr=$s;
  var $0=$a_addr;
  var $call=_iamarray($0);
  var $1=$idx_addr;
  var $call1=_itoa($1);
  var $call2=_hash_find($call, $call1);
  var $2=$call2;
  $v=$2;
  var $3=$v;
  var $4=$s_addr;
  var $call3=_setvar_u($3, $4);
  ;
  return;
}


function _evaluate($op, $res) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $op_addr;
      var $res_addr;
      var $v1;
      var $L=__stackBase__;
      var $R=(__stackBase__)+(8);
      var $L_d;
      var $opinfo;
      var $opn;
      var $op1=(__stackBase__)+(16);
      var $F;
      var $rsm;
      var $v145;
      var $s168;
      var $info174;
      var $v177;
      var $s193;
      var $re;
      var $i;
      var $vbeg;
      var $v300;
      var $sv_progname;
      var $arg;
      var $rsm330;
      var $i331;
      var $R_d;
      var $rsm433;
      var $rsm443;
      var $err;
      var $Ld;
      var $R_d483;
      var $i503;
      var $sep;
      var $R_d556;
      var $i596;
      var $Ld597;
      var $l612;
      var $r615;
      $op_addr=$op;
      $res_addr=$res;
      var $0=$op_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$res_addr;
      var $call=_setvar_s($1, 0);
      $retval=$call;
      __label__ = 253; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $call1=_nvalloc(2);
      $v1=$call1;
      __label__ = 7; break;
    case 7: 
      var $2=$op_addr;
      var $tobool2=(($2)|0)!=0;
      if ($tobool2) { __label__ = 8; break; } else { __label__ = 250; break; }
    case 8: 
      var $3=$L;
      var $4=$L;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($3)>>2)]=HEAP32[(($4)>>2)];HEAP32[((($3)+(4))>>2)]=HEAP32[((($4)+(4))>>2)];
      var $5=$R;
      var $6=$R;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($5)>>2)]=HEAP32[(($6)>>2)];HEAP32[((($5)+(4))>>2)]=HEAP32[((($6)+(4))>>2)];
      var $7=$L_d;
      $L_d=$7;
      var $8=$op_addr;
      var $info=(($8)|0);
      var $9=HEAP32[(($info)>>2)];
      $opinfo=$9;
      var $10=$opinfo;
      var $and=$10 & 127;
      $opn=$and;
      var $11=$op_addr;
      var $lineno=(($11+4)|0);
      var $12=HEAP32[(($lineno)>>2)];
      HEAP32[((((_G1+80)|0))>>2)]=$12;
      var $13=$op_addr;
      var $l=(($13+8)|0);
      var $n=$l;
      var $14=HEAP32[(($n)>>2)];
      HEAP32[(($op1)>>2)]=$14;
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $15=$opinfo;
      var $and5=$15 & 65536;
      var $tobool6=(($and5)|0)!=0;
      if ($tobool6) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $16=HEAP32[(($op1)>>2)];
      var $17=$v1;
      var $call8=_evaluate($16, $17);
      var $v=(($L)|0);
      HEAP32[(($v)>>2)]=$call8;
      __label__ = 12; break;
    case 12: 
      var $18=$opinfo;
      var $and10=$18 & 131072;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $19=$op_addr;
      var $r=(($19+28)|0);
      var $n13=$r;
      var $20=HEAP32[(($n13)>>2)];
      var $21=$v1;
      var $add_ptr=(($21+20)|0);
      var $call14=_evaluate($20, $add_ptr);
      var $v15=(($R)|0);
      HEAP32[(($v15)>>2)]=$call14;
      __label__ = 14; break;
    case 14: 
      var $22=$opinfo;
      var $and17=$22 & 262144;
      var $tobool18=(($and17)|0)!=0;
      if ($tobool18) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $v20=(($L)|0);
      var $23=HEAP32[(($v20)>>2)];
      var $call21=_getvar_s($23);
      var $s=(($L+4)|0);
      HEAP32[(($s)>>2)]=$call21;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $24=$opinfo;
      var $and25=$24 & 524288;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      var $v28=(($R)|0);
      var $25=HEAP32[(($v28)>>2)];
      var $call29=_getvar_s($25);
      var $s30=(($R+4)|0);
      HEAP32[(($s30)>>2)]=$call29;
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $26=$opinfo;
      var $and34=$26 & 1048576;
      var $tobool35=(($and34)|0)!=0;
      if ($tobool35) { __label__ = 23; break; } else { __label__ = 26; break; }
    case 23: 
      var $v37=(($L)|0);
      var $27=HEAP32[(($v37)>>2)];
      var $call38=_getvar_i($27);
      $L_d=$call38;
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $28=$opinfo;
      var $and44=$28 & 65280;
      var $shr=$and44 >>> 8;
      if ((($shr)|0) == 13) {
        __label__ = 29; break;
      }
      else if ((($shr)|0) == 2) {
        __label__ = 42; break;
      }
      else if ((($shr)|0) == 7) {
        __label__ = 43; break;
      }
      else if ((($shr)|0) == 6) {
        __label__ = 47; break;
      }
      else if ((($shr)|0) == 14) {
        __label__ = 48; break;
      }
      else if ((($shr)|0) == 4 || (($shr)|0) == 5) {
        __label__ = 52; break;
      }
      else if ((($shr)|0) == 1) {
        __label__ = 76; break;
      }
      else if ((($shr)|0) == 3) {
        __label__ = 86; break;
      }
      else if ((($shr)|0) == 35) {
        __label__ = 87; break;
      }
      else if ((($shr)|0) == 12) {
        __label__ = 88; break;
      }
      else if ((($shr)|0) == 11) {
        __label__ = 89; break;
      }
      else if ((($shr)|0) == 40) {
        __label__ = 90; break;
      }
      else if ((($shr)|0) == 10) {
        __label__ = 91; break;
      }
      else if ((($shr)|0) == 39) {
        __label__ = 92; break;
      }
      else if ((($shr)|0) == 24) {
        __label__ = 95; break;
      }
      else if ((($shr)|0) == 27) {
        __label__ = 100; break;
      }
      else if ((($shr)|0) == 33) {
        __label__ = 101; break;
      }
      else if ((($shr)|0) == 30) {
        __label__ = 102; break;
      }
      else if ((($shr)|0) == 31) {
        __label__ = 106; break;
      }
      else if ((($shr)|0) == 37) {
        __label__ = 109; break;
      }
      else if ((($shr)|0) == 25) {
        __label__ = 115; break;
      }
      else if ((($shr)|0) == 26 || (($shr)|0) == 32) {
        __label__ = 123; break;
      }
      else if ((($shr)|0) == 22) {
        __label__ = 142; break;
      }
      else if ((($shr)|0) == 17) {
        __label__ = 182; break;
      }
      else if ((($shr)|0) == 36) {
        __label__ = 183; break;
      }
      else if ((($shr)|0) == 38) {
        __label__ = 184; break;
      }
      else if ((($shr)|0) == 23) {
        __label__ = 193; break;
      }
      else if ((($shr)|0) == 21 || (($shr)|0) == 19) {
        __label__ = 199; break;
      }
      else if ((($shr)|0) == 28) {
        __label__ = 202; break;
      }
      else if ((($shr)|0) == 29) {
        __label__ = 206; break;
      }
      else if ((($shr)|0) == 16 || (($shr)|0) == 34) {
        __label__ = 210; break;
      }
      else if ((($shr)|0) == 20) {
        __label__ = 229; break;
      }
      else if ((($shr)|0) == 64) {
        __label__ = 241; break;
      }
      else {
      __label__ = 242; break;
      }
      
    case 29: 
      var $29=HEAP32[(($op1)>>2)];
      var $info45=(($29)|0);
      var $30=HEAP32[(($info45)>>2)];
      var $and46=$30 & 65280;
      var $cmp=(($and46)|0)==4864;
      if ($cmp) { __label__ = 30; break; } else { __label__ = 37; break; }
    case 30: 
      var $31=$opinfo;
      var $and48=$31 & 2097152;
      var $tobool49=(($and48)|0)!=0;
      if ($tobool49) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $32=HEAP32[(($op1)>>2)];
      var $l50=(($32+8)|0);
      var $n51=$l50;
      var $33=HEAP32[(($n51)>>2)];
      var $call52=_ptest($33);
      var $tobool53=(($call52)|0)!=0;
      if ($tobool53) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $34=$op_addr;
      var $info55=(($34)|0);
      var $35=HEAP32[(($info55)>>2)];
      var $or=$35 | 2097152;
      HEAP32[(($info55)>>2)]=$or;
      var $36=HEAP32[(($op1)>>2)];
      var $r56=(($36+28)|0);
      var $n57=$r56;
      var $37=HEAP32[(($n57)>>2)];
      var $call58=_ptest($37);
      var $tobool59=(($call58)|0)!=0;
      if ($tobool59) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $38=$op_addr;
      var $info61=(($38)|0);
      var $39=HEAP32[(($info61)>>2)];
      var $and62=$39 & -2097153;
      HEAP32[(($info61)>>2)]=$and62;
      __label__ = 34; break;
    case 34: 
      var $40=$op_addr;
      var $a=(($40+32)|0);
      var $n64=$a;
      var $41=HEAP32[(($n64)>>2)];
      $op_addr=$41;
      __label__ = 36; break;
    case 35: 
      var $42=$op_addr;
      var $r65=(($42+28)|0);
      var $n66=$r65;
      var $43=HEAP32[(($n66)>>2)];
      $op_addr=$43;
      __label__ = 36; break;
    case 36: 
      __label__ = 41; break;
    case 37: 
      var $44=HEAP32[(($op1)>>2)];
      var $call69=_ptest($44);
      var $tobool70=(($call69)|0)!=0;
      if ($tobool70) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $45=$op_addr;
      var $a71=(($45+32)|0);
      var $n72=$a71;
      var $46=HEAP32[(($n72)>>2)];
      var $cond = $46;__label__ = 40; break;
    case 39: 
      var $47=$op_addr;
      var $r73=(($47+28)|0);
      var $n74=$r73;
      var $48=HEAP32[(($n74)>>2)];
      var $cond = $48;__label__ = 40; break;
    case 40: 
      var $cond;
      $op_addr=$cond;
      __label__ = 41; break;
    case 41: 
      __label__ = 243; break;
    case 42: 
      __label__ = 243; break;
    case 43: 
      var $v78=(($L)|0);
      var $49=HEAP32[(($v78)>>2)];
      var $call79=_istrue($49);
      var $tobool80=(($call79)|0)!=0;
      if ($tobool80) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $50=$op_addr;
      var $a82=(($50+32)|0);
      var $n83=$a82;
      var $51=HEAP32[(($n83)>>2)];
      var $cond88 = $51;__label__ = 46; break;
    case 45: 
      var $52=$op_addr;
      var $r85=(($52+28)|0);
      var $n86=$r85;
      var $53=HEAP32[(($n86)>>2)];
      var $cond88 = $53;__label__ = 46; break;
    case 46: 
      var $cond88;
      $op_addr=$cond88;
      __label__ = 243; break;
    case 47: 
      var $v90=(($L)|0);
      var $54=HEAP32[(($v90)>>2)];
      var $v91=(($R)|0);
      var $55=HEAP32[(($v91)>>2)];
      var $call92=_iamarray($55);
      _hashwalk_init($54, $call92);
      __label__ = 243; break;
    case 48: 
      var $v94=(($L)|0);
      var $56=HEAP32[(($v94)>>2)];
      var $call95=_hashwalk_next($56);
      var $tobool96=(($call95)|0)!=0;
      if ($tobool96) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $57=$op_addr;
      var $a98=(($57+32)|0);
      var $n99=$a98;
      var $58=HEAP32[(($n99)>>2)];
      var $cond104 = $58;__label__ = 51; break;
    case 50: 
      var $59=$op_addr;
      var $r101=(($59+28)|0);
      var $n102=$r101;
      var $60=HEAP32[(($n102)>>2)];
      var $cond104 = $60;__label__ = 51; break;
    case 51: 
      var $cond104;
      $op_addr=$cond104;
      __label__ = 243; break;
    case 52: 
      var $61=HEAP32[((_stdout)>>2)];
      $F=$61;
      var $62=$op_addr;
      var $r106=(($62+28)|0);
      var $n107=$r106;
      var $63=HEAP32[(($n107)>>2)];
      var $tobool108=(($63)|0)!=0;
      if ($tobool108) { __label__ = 53; break; } else { __label__ = 61; break; }
    case 53: 
      var $64=HEAP32[((((_G1+68)|0))>>2)];
      var $s110=(($R+4)|0);
      var $65=HEAP32[(($s110)>>2)];
      var $call111=_hash_find($64, $65);
      var $66=$call111;
      $rsm=$66;
      var $67=$rsm;
      var $F112=(($67)|0);
      var $68=HEAP32[(($F112)>>2)];
      var $tobool113=(($68)|0)!=0;
      if ($tobool113) { __label__ = 60; break; } else { __label__ = 54; break; }
    case 54: 
      var $69=$opn;
      var $cmp115=(($69)|0)==124;
      if ($cmp115) { __label__ = 55; break; } else { __label__ = 58; break; }
    case 55: 
      var $s117=(($R+4)|0);
      var $70=HEAP32[(($s117)>>2)];
      var $call118=_popen($70, ((STRING_TABLE.__str45)|0));
      var $71=$rsm;
      var $F119=(($71)|0);
      HEAP32[(($F119)>>2)]=$call118;
      var $72=$rsm;
      var $F120=(($72)|0);
      var $73=HEAP32[(($F120)>>2)];
      var $cmp121=(($73)|0)==0;
      if ($cmp121) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      _bb_perror_msg_and_die(((STRING_TABLE.__str46)|0), (tempInt=STACKTOP,STACKTOP += 1,STACKTOP = ((((STACKTOP)+3)>>2)<<2),assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=0,tempInt));
      throw "Reached an unreachable!"
    case 57: 
      var $74=$rsm;
      var $is_pipe=(($74+20)|0);
      HEAP8[($is_pipe)]=1;
      __label__ = 59; break;
    case 58: 
      var $s125=(($R+4)|0);
      var $75=HEAP32[(($s125)>>2)];
      var $76=$opn;
      var $cmp126=(($76)|0)==119;
      var $cond127=$cmp126 ? (((STRING_TABLE.__str45)|0)) : (((STRING_TABLE.__str47)|0));
      var $call128=_xfopen($75, $cond127);
      var $77=$rsm;
      var $F129=(($77)|0);
      HEAP32[(($F129)>>2)]=$call128;
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      var $78=$rsm;
      var $F132=(($78)|0);
      var $79=HEAP32[(($F132)>>2)];
      $F=$79;
      __label__ = 61; break;
    case 61: 
      var $80=$opinfo;
      var $and134=$80 & 65280;
      var $cmp135=(($and134)|0)==1024;
      if ($cmp135) { __label__ = 62; break; } else { __label__ = 74; break; }
    case 62: 
      var $81=HEAP32[(($op1)>>2)];
      var $tobool137=(($81)|0)!=0;
      if ($tobool137) { __label__ = 64; break; } else { __label__ = 63; break; }
    case 63: 
      var $82=HEAP32[((((_G+52)|0))>>2)];
      var $call139=_getvar_s($82);
      var $83=$F;
      var $call140=_fputs($call139, $83);
      __label__ = 73; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $84=HEAP32[(($op1)>>2)];
      var $tobool143=(($84)|0)!=0;
      if ($tobool143) { __label__ = 66; break; } else { __label__ = 72; break; }
    case 66: 
      var $call146=_nextarg($op1);
      var $85=$v1;
      var $call147=_evaluate($call146, $85);
      $v145=$call147;
      var $86=$v145;
      var $type=(($86)|0);
      var $87=HEAP32[(($type)>>2)];
      var $and148=$87 & 1;
      var $tobool149=(($and148)|0)!=0;
      if ($tobool149) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $88=HEAP32[((((_G1+104)|0))>>2)];
      var $89=HEAP32[((((_G+20)|0))>>2)];
      var $call151=_getvar_s($89);
      var $90=$v145;
      var $call152=_getvar_i($90);
      var $call153=_fmt_num($88, 240, $call151, $call152, 1);
      var $91=HEAP32[((((_G1+104)|0))>>2)];
      var $92=$F;
      var $call154=_fputs($91, $92);
      __label__ = 69; break;
    case 68: 
      var $93=$v145;
      var $call156=_getvar_s($93);
      var $94=$F;
      var $call157=_fputs($call156, $94);
      __label__ = 69; break;
    case 69: 
      var $95=HEAP32[(($op1)>>2)];
      var $tobool159=(($95)|0)!=0;
      if ($tobool159) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $96=HEAP32[((((_G+28)|0))>>2)];
      var $call161=_getvar_s($96);
      var $97=$F;
      var $call162=_fputs($call161, $97);
      __label__ = 71; break;
    case 71: 
      __label__ = 65; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      var $98=HEAP32[((((_G+32)|0))>>2)];
      var $call165=_getvar_s($98);
      var $99=$F;
      var $call166=_fputs($call165, $99);
      __label__ = 75; break;
    case 74: 
      var $100=HEAP32[(($op1)>>2)];
      var $call169=_awk_printf($100);
      $s168=$call169;
      var $101=$s168;
      var $102=$F;
      var $call170=_fputs($101, $102);
      var $103=$s168;
      _free($103);
      __label__ = 75; break;
    case 75: 
      var $104=$F;
      var $call172=_fflush($104);
      __label__ = 243; break;
    case 76: 
      var $105=HEAP32[(($op1)>>2)];
      var $info175=(($105)|0);
      var $106=HEAP32[(($info175)>>2)];
      var $and176=$106 & 65280;
      $info174=$and176;
      var $107=$info174;
      var $cmp178=(($107)|0)==9984;
      if ($cmp178) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $108=HEAP32[(($op1)>>2)];
      var $l180=(($108+8)|0);
      var $v181=$l180;
      var $109=HEAP32[(($v181)>>2)];
      $v177=$109;
      __label__ = 82; break;
    case 78: 
      var $110=$info174;
      var $cmp183=(($110)|0)==6144;
      if ($cmp183) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $111=HEAP32[(($op1)>>2)];
      var $l185=(($111+8)|0);
      var $aidx=$l185;
      var $112=HEAP32[(($aidx)>>2)];
      var $113=HEAP32[((((_G+136)|0))>>2)];
      var $arrayidx=(($113+($112)*(20))|0);
      $v177=$arrayidx;
      __label__ = 81; break;
    case 80: 
      _syntax_error(((STRING_TABLE._EMSG_NOT_ARRAY)|0));
      throw "Reached an unreachable!"
    case 81: 
      __label__ = 82; break;
    case 82: 
      var $114=HEAP32[(($op1)>>2)];
      var $r189=(($114+28)|0);
      var $n190=$r189;
      var $115=HEAP32[(($n190)>>2)];
      var $tobool191=(($115)|0)!=0;
      if ($tobool191) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $v194=(($L)|0);
      var $116=HEAP32[(($v194)>>2)];
      var $call195=_clrvar($116);
      var $117=HEAP32[(($op1)>>2)];
      var $r196=(($117+28)|0);
      var $n197=$r196;
      var $118=HEAP32[(($n197)>>2)];
      var $119=$v1;
      var $call198=_evaluate($118, $119);
      var $call199=_getvar_s($call198);
      $s193=$call199;
      var $120=$v177;
      var $call200=_iamarray($120);
      var $121=$s193;
      _hash_remove($call200, $121);
      __label__ = 85; break;
    case 84: 
      var $122=$v177;
      var $call202=_iamarray($122);
      _clear_array($call202);
      __label__ = 85; break;
    case 85: 
      __label__ = 243; break;
    case 86: 
      var $123=$op_addr;
      var $l205=(($123+8)|0);
      var $new_progname=$l205;
      var $124=HEAP32[(($new_progname)>>2)];
      HEAP32[((((_G1+76)|0))>>2)]=$124;
      __label__ = 243; break;
    case 87: 
      var $125=$res_addr;
      var $v207=(($L)|0);
      var $126=HEAP32[(($v207)>>2)];
      var $call208=_copyvar($125, $126);
      __label__ = 243; break;
    case 88: 
      HEAP8[(((_G1+111)|0))]=1;
      __label__ = 89; break;
    case 89: 
      HEAP8[(((_G1+110)|0))]=1;
      __label__ = 90; break;
    case 90: 
      var $127=$res_addr;
      var $call212=_clrvar($127);
      __label__ = 243; break;
    case 91: 
      var $128=$L_d;
      var $conv=(($128)&-1);
      var $129=_awk_exit($conv);
      throw "Reached an unreachable!"
    case 92: 
      var $130=$op_addr;
      var $l215=(($130+8)|0);
      var $v216=$l215;
      var $131=HEAP32[(($v216)>>2)];
      var $v217=(($L)|0);
      HEAP32[(($v217)>>2)]=$131;
      var $v218=(($L)|0);
      var $132=HEAP32[(($v218)>>2)];
      var $133=HEAP32[((((_G+80)|0))>>2)];
      var $cmp219=(($132)|0)==(($133)|0);
      if ($cmp219) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      _split_f0();
      __label__ = 94; break;
    case 94: 
      __label__ = 96; break;
    case 95: 
      var $134=$op_addr;
      var $l224=(($134+8)|0);
      var $aidx225=$l224;
      var $135=HEAP32[(($aidx225)>>2)];
      var $136=HEAP32[((((_G+136)|0))>>2)];
      var $arrayidx226=(($136+($135)*(20))|0);
      var $v227=(($L)|0);
      HEAP32[(($v227)>>2)]=$arrayidx226;
      __label__ = 96; break;
    case 96: 
      var $137=$op_addr;
      var $r228=(($137+28)|0);
      var $n229=$r228;
      var $138=HEAP32[(($n229)>>2)];
      var $tobool230=(($138)|0)!=0;
      if ($tobool230) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: 
      var $v232=(($L)|0);
      var $139=HEAP32[(($v232)>>2)];
      var $call233=_iamarray($139);
      var $s234=(($R+4)|0);
      var $140=HEAP32[(($s234)>>2)];
      var $call235=_hash_find($call233, $140);
      var $141=$call235;
      var $cond239 = $141;__label__ = 99; break;
    case 98: 
      var $v237=(($L)|0);
      var $142=HEAP32[(($v237)>>2)];
      var $cond239 = $142;__label__ = 99; break;
    case 99: 
      var $cond239;
      $res_addr=$cond239;
      __label__ = 243; break;
    case 100: 
      var $143=$res_addr;
      var $v241=(($R)|0);
      var $144=HEAP32[(($v241)>>2)];
      var $call242=_iamarray($144);
      var $s243=(($L+4)|0);
      var $145=HEAP32[(($s243)>>2)];
      var $call244=_hash_search($call242, $145);
      var $tobool245=(($call244)|0)!=0;
      var $cond246=$tobool245 ? 1 : 0;
      var $conv247=(($cond246)|0);
      var $call248=_setvar_i($143, $conv247);
      __label__ = 243; break;
    case 101: 
      var $146=$op_addr;
      HEAP32[(($op1)>>2)]=$146;
      var $147=HEAP32[((((_G+52)|0))>>2)];
      var $call250=_getvar_s($147);
      var $s251=(($L+4)|0);
      HEAP32[(($s251)>>2)]=$call250;
      __label__ = 103; break;
    case 102: 
      var $148=$op_addr;
      var $r253=(($148+28)|0);
      var $n254=$r253;
      var $149=HEAP32[(($n254)>>2)];
      HEAP32[(($op1)>>2)]=$149;
      __label__ = 103; break;
    case 103: 
      var $150=HEAP32[(($op1)>>2)];
      var $call255=_as_regex($150, ((_G+144)|0));
      $re=$call255;
      var $151=$re;
      var $s256=(($L+4)|0);
      var $152=HEAP32[(($s256)>>2)];
      var $call257=_regexec($151, $152, 0, 0, 0);
      $i=$call257;
      var $153=$re;
      var $cmp258=(($153)|0)==(((((_G+144)|0)))|0);
      if ($cmp258) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $154=$re;
      _regfree($154);
      __label__ = 105; break;
    case 105: 
      var $155=$res_addr;
      var $156=$i;
      var $cmp262=(($156)|0)==0;
      var $conv263=(($cmp262)&1);
      var $157=$opn;
      var $cmp264=(($157)|0)==33;
      var $conv265=(($cmp264)&1);
      var $xor=$conv263 ^ $conv265;
      var $conv266=(($xor)|0);
      var $call267=_setvar_i($155, $conv266);
      __label__ = 243; break;
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      var $v271=(($L)|0);
      var $158=HEAP32[(($v271)>>2)];
      var $v272=(($R)|0);
      var $159=HEAP32[(($v272)>>2)];
      var $call273=_copyvar($158, $159);
      $res_addr=$call273;
      __label__ = 243; break;
    case 109: 
      var $160=$op_addr;
      var $r275=(($160+28)|0);
      var $n276=$r275;
      var $161=HEAP32[(($n276)>>2)];
      var $info277=(($161)|0);
      var $162=HEAP32[(($info277)>>2)];
      var $and278=$162 & 65280;
      var $cmp279=(($and278)|0)!=4608;
      if ($cmp279) { __label__ = 110; break; } else { __label__ = 111; break; }
    case 110: 
      _syntax_error(((STRING_TABLE._EMSG_POSSIBLE_ERROR)|0));
      throw "Reached an unreachable!"
    case 111: 
      var $v283=(($L)|0);
      var $163=HEAP32[(($v283)>>2)];
      var $call284=_istrue($163);
      var $tobool285=(($call284)|0)!=0;
      if ($tobool285) { __label__ = 112; break; } else { __label__ = 113; break; }
    case 112: 
      var $164=$op_addr;
      var $r287=(($164+28)|0);
      var $n288=$r287;
      var $165=HEAP32[(($n288)>>2)];
      var $l289=(($165+8)|0);
      var $n290=$l289;
      var $166=HEAP32[(($n290)>>2)];
      var $cond297 = $166;__label__ = 114; break;
    case 113: 
      var $167=$op_addr;
      var $r292=(($167+28)|0);
      var $n293=$r292;
      var $168=HEAP32[(($n293)>>2)];
      var $r294=(($168+28)|0);
      var $n295=$r294;
      var $169=HEAP32[(($n295)>>2)];
      var $cond297 = $169;__label__ = 114; break;
    case 114: 
      var $cond297;
      var $170=$res_addr;
      var $call298=_evaluate($cond297, $170);
      $res_addr=$call298;
      __label__ = 243; break;
    case 115: 
      var $171=$op_addr;
      var $r301=(($171+28)|0);
      var $f=$r301;
      var $172=HEAP32[(($f)>>2)];
      var $body=(($172+4)|0);
      var $first=(($body)|0);
      var $173=HEAP32[(($first)>>2)];
      var $tobool302=(($173)|0)!=0;
      if ($tobool302) { __label__ = 117; break; } else { __label__ = 116; break; }
    case 116: 
      _syntax_error(((STRING_TABLE._EMSG_UNDEF_FUNC)|0));
      throw "Reached an unreachable!"
    case 117: 
      var $174=$op_addr;
      var $r305=(($174+28)|0);
      var $f306=$r305;
      var $175=HEAP32[(($f306)>>2)];
      var $nargs=(($175)|0);
      var $176=HEAP32[(($nargs)>>2)];
      var $add=((($176)+(1))|0);
      var $call307=_nvalloc($add);
      $v300=$call307;
      $vbeg=$call307;
      __label__ = 118; break;
    case 118: 
      var $177=HEAP32[(($op1)>>2)];
      var $tobool309=(($177)|0)!=0;
      if ($tobool309) { __label__ = 119; break; } else { __label__ = 122; break; }
    case 119: 
      var $call311=_nextarg($op1);
      var $178=$v1;
      var $call312=_evaluate($call311, $178);
      $arg=$call312;
      var $179=$v300;
      var $180=$arg;
      var $call313=_copyvar($179, $180);
      var $181=$v300;
      var $type314=(($181)|0);
      var $182=HEAP32[(($type314)>>2)];
      var $or315=$182 | 8192;
      HEAP32[(($type314)>>2)]=$or315;
      var $183=$arg;
      var $184=$v300;
      var $x=(($184+16)|0);
      var $parent=$x;
      HEAP32[(($parent)>>2)]=$183;
      var $185=$v300;
      var $incdec_ptr=(($185+20)|0);
      $v300=$incdec_ptr;
      var $186=$vbeg;
      var $sub_ptr_lhs_cast=$incdec_ptr;
      var $sub_ptr_rhs_cast=$186;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(20))&-1);
      var $187=$op_addr;
      var $r316=(($187+28)|0);
      var $f317=$r316;
      var $188=HEAP32[(($f317)>>2)];
      var $nargs318=(($188)|0);
      var $189=HEAP32[(($nargs318)>>2)];
      var $cmp319=(($sub_ptr_div)>>>0) >= (($189)>>>0);
      if ($cmp319) { __label__ = 120; break; } else { __label__ = 121; break; }
    case 120: 
      __label__ = 122; break;
    case 121: 
      __label__ = 118; break;
    case 122: 
      var $190=HEAP32[((((_G+136)|0))>>2)];
      $v300=$190;
      var $191=$vbeg;
      HEAP32[((((_G+136)|0))>>2)]=$191;
      var $192=HEAP32[((((_G1+76)|0))>>2)];
      $sv_progname=$192;
      var $193=$op_addr;
      var $r324=(($193+28)|0);
      var $f325=$r324;
      var $194=HEAP32[(($f325)>>2)];
      var $body326=(($194+4)|0);
      var $first327=(($body326)|0);
      var $195=HEAP32[(($first327)>>2)];
      var $196=$res_addr;
      var $call328=_evaluate($195, $196);
      $res_addr=$call328;
      var $197=$sv_progname;
      HEAP32[((((_G1+76)|0))>>2)]=$197;
      var $198=HEAP32[((((_G+136)|0))>>2)];
      _nvfree($198);
      var $199=$v300;
      HEAP32[((((_G+136)|0))>>2)]=$199;
      __label__ = 243; break;
    case 123: 
      var $200=HEAP32[(($op1)>>2)];
      var $tobool332=(($200)|0)!=0;
      if ($tobool332) { __label__ = 124; break; } else { __label__ = 130; break; }
    case 124: 
      var $201=HEAP32[((((_G1+68)|0))>>2)];
      var $s334=(($L+4)|0);
      var $202=HEAP32[(($s334)>>2)];
      var $call335=_hash_find($201, $202);
      var $203=$call335;
      $rsm330=$203;
      var $204=$rsm330;
      var $F336=(($204)|0);
      var $205=HEAP32[(($F336)>>2)];
      var $tobool337=(($205)|0)!=0;
      if ($tobool337) { __label__ = 129; break; } else { __label__ = 125; break; }
    case 125: 
      var $206=$opinfo;
      var $and339=$206 & 65280;
      var $cmp340=(($and339)|0)==8192;
      if ($cmp340) { __label__ = 126; break; } else { __label__ = 127; break; }
    case 126: 
      var $s343=(($L+4)|0);
      var $207=HEAP32[(($s343)>>2)];
      var $call344=_popen($207, ((STRING_TABLE.__str48)|0));
      var $208=$rsm330;
      var $F345=(($208)|0);
      HEAP32[(($F345)>>2)]=$call344;
      var $209=$rsm330;
      var $is_pipe346=(($209+20)|0);
      HEAP8[($is_pipe346)]=1;
      __label__ = 128; break;
    case 127: 
      var $s348=(($L+4)|0);
      var $210=HEAP32[(($s348)>>2)];
      var $call349=_fopen_for_read($210);
      var $211=$rsm330;
      var $F350=(($211)|0);
      HEAP32[(($F350)>>2)]=$call349;
      __label__ = 128; break;
    case 128: 
      __label__ = 129; break;
    case 129: 
      __label__ = 133; break;
    case 130: 
      var $212=HEAP32[((((_G1+56)|0))>>2)];
      var $tobool354=(($212)|0)!=0;
      if ($tobool354) { __label__ = 132; break; } else { __label__ = 131; break; }
    case 131: 
      var $call356=_next_input_file();
      HEAP32[((((_G1+56)|0))>>2)]=$call356;
      __label__ = 132; break;
    case 132: 
      var $213=HEAP32[((((_G1+56)|0))>>2)];
      $rsm330=$213;
      __label__ = 133; break;
    case 133: 
      var $214=$rsm330;
      var $tobool359=(($214)|0)!=0;
      if ($tobool359) { __label__ = 134; break; } else { __label__ = 135; break; }
    case 134: 
      var $215=$rsm330;
      var $F361=(($215)|0);
      var $216=HEAP32[(($F361)>>2)];
      var $tobool362=(($216)|0)!=0;
      if ($tobool362) { __label__ = 136; break; } else { __label__ = 135; break; }
    case 135: 
      var $217=HEAP32[((((_G+68)|0))>>2)];
      var $call364=___errno();
      var $218=HEAP32[(($call364)>>2)];
      var $conv365=(($218)|0);
      var $call366=_setvar_i($217, $conv365);
      var $219=$res_addr;
      var $call367=_setvar_i($219, -1);
      __label__ = 243; break;
    case 136: 
      var $220=$op_addr;
      var $r369=(($220+28)|0);
      var $n370=$r369;
      var $221=HEAP32[(($n370)>>2)];
      var $tobool371=(($221)|0)!=0;
      if ($tobool371) { __label__ = 138; break; } else { __label__ = 137; break; }
    case 137: 
      var $222=HEAP32[((((_G+52)|0))>>2)];
      var $v373=(($R)|0);
      HEAP32[(($v373)>>2)]=$222;
      __label__ = 138; break;
    case 138: 
      var $223=$rsm330;
      var $v375=(($R)|0);
      var $224=HEAP32[(($v375)>>2)];
      var $call376=_awk_getline($223, $224);
      $i331=$call376;
      var $225=$i331;
      var $cmp377=(($225)|0) > 0;
      if ($cmp377) { __label__ = 139; break; } else { __label__ = 141; break; }
    case 139: 
      var $226=HEAP32[(($op1)>>2)];
      var $tobool379=(($226)|0)!=0;
      if ($tobool379) { __label__ = 141; break; } else { __label__ = 140; break; }
    case 140: 
      var $227=HEAP32[((((_G+72)|0))>>2)];
      var $call381=_incvar($227);
      var $228=HEAP32[((((_G+76)|0))>>2)];
      var $call382=_incvar($228);
      __label__ = 141; break;
    case 141: 
      var $229=$res_addr;
      var $230=$i331;
      var $conv384=(($230)|0);
      var $call385=_setvar_i($229, $conv384);
      __label__ = 243; break;
    case 142: 
      var $231=$R_d;
      $R_d=$231;
      var $232=$opn;
      if ((($232)|0) == 0) {
        __label__ = 143; break;
      }
      else if ((($232)|0) == 1) {
        __label__ = 144; break;
      }
      else if ((($232)|0) == 2) {
        __label__ = 145; break;
      }
      else if ((($232)|0) == 3) {
        __label__ = 146; break;
      }
      else if ((($232)|0) == 4) {
        __label__ = 147; break;
      }
      else if ((($232)|0) == 5) {
        __label__ = 148; break;
      }
      else if ((($232)|0) == 6) {
        __label__ = 149; break;
      }
      else if ((($232)|0) == 7) {
        __label__ = 150; break;
      }
      else if ((($232)|0) == 8) {
        __label__ = 154; break;
      }
      else if ((($232)|0) == 9) {
        __label__ = 155; break;
      }
      else if ((($232)|0) == 10) {
        __label__ = 158; break;
      }
      else if ((($232)|0) == 11) {
        __label__ = 159; break;
      }
      else if ((($232)|0) == 12) {
        __label__ = 167; break;
      }
      else {
      __label__ = 181; break;
      }
      
    case 143: 
      var $233=$L_d;
      var $conv388=(($233)&-1);
      var $conv389=(($conv388)|0);
      $R_d=$conv389;
      __label__ = 181; break;
    case 144: 
      var $call391=_rand();
      var $conv392=(($call391)|0);
      var $div=($conv392)/(2147483647);
      $R_d=$div;
      __label__ = 181; break;
    case 145: 
      __label__ = 146; break;
    case 146: 
      __label__ = 147; break;
    case 147: 
      __label__ = 148; break;
    case 148: 
      __label__ = 149; break;
    case 149: 
      _syntax_error(((STRING_TABLE._EMSG_NO_MATH)|0));
      throw "Reached an unreachable!"
    case 150: 
      var $234=HEAP32[((((_G+140)|0))>>2)];
      var $conv399=(($234)>>>0);
      $R_d=$conv399;
      var $235=HEAP32[(($op1)>>2)];
      var $tobool400=(($235)|0)!=0;
      if ($tobool400) { __label__ = 151; break; } else { __label__ = 152; break; }
    case 151: 
      var $236=$L_d;
      var $conv402=($236 >= 0 ? Math.floor($236) : Math.ceil($236));
      var $cond406 = $conv402;__label__ = 153; break;
    case 152: 
      var $call404=_time(0);
      var $cond406 = $call404;__label__ = 153; break;
    case 153: 
      var $cond406;
      HEAP32[((((_G+140)|0))>>2)]=$cond406;
      var $237=HEAP32[((((_G+140)|0))>>2)];
      _srand($237);
      __label__ = 181; break;
    case 154: 
      var $call408=_time(0);
      var $conv409=(($call408)|0);
      $R_d=$conv409;
      __label__ = 181; break;
    case 155: 
      var $238=HEAP32[(($op1)>>2)];
      var $tobool411=(($238)|0)!=0;
      if ($tobool411) { __label__ = 157; break; } else { __label__ = 156; break; }
    case 156: 
      var $239=HEAP32[((((_G+52)|0))>>2)];
      var $call413=_getvar_s($239);
      var $s414=(($L+4)|0);
      HEAP32[(($s414)>>2)]=$call413;
      __label__ = 157; break;
    case 157: 
      var $s416=(($L+4)|0);
      var $240=HEAP32[(($s416)>>2)];
      var $call417=_strlen($240);
      var $conv418=(($call417)>>>0);
      $R_d=$conv418;
      __label__ = 181; break;
    case 158: 
      var $call420=_fflush_all();
      $R_d=0;
      __label__ = 181; break;
    case 159: 
      var $241=HEAP32[(($op1)>>2)];
      var $tobool422=(($241)|0)!=0;
      if ($tobool422) { __label__ = 161; break; } else { __label__ = 160; break; }
    case 160: 
      var $242=HEAP32[((_stdout)>>2)];
      var $call424=_fflush($242);
      __label__ = 166; break;
    case 161: 
      var $s426=(($L+4)|0);
      var $243=HEAP32[(($s426)>>2)];
      var $tobool427=(($243)|0)!=0;
      if ($tobool427) { __label__ = 162; break; } else { __label__ = 164; break; }
    case 162: 
      var $s429=(($L+4)|0);
      var $244=HEAP32[(($s429)>>2)];
      var $245=HEAP8[($244)];
      var $conv430=(($245 << 24) >> 24);
      var $tobool431=(($conv430)|0)!=0;
      if ($tobool431) { __label__ = 163; break; } else { __label__ = 164; break; }
    case 163: 
      var $246=HEAP32[((((_G1+68)|0))>>2)];
      var $s434=(($L+4)|0);
      var $247=HEAP32[(($s434)>>2)];
      var $call435=_hash_find($246, $247);
      var $248=$call435;
      $rsm433=$248;
      var $249=$rsm433;
      var $F436=(($249)|0);
      var $250=HEAP32[(($F436)>>2)];
      var $call437=_fflush($250);
      __label__ = 165; break;
    case 164: 
      var $call439=_fflush_all();
      __label__ = 165; break;
    case 165: 
      __label__ = 166; break;
    case 166: 
      __label__ = 181; break;
    case 167: 
      $err=0;
      var $251=HEAP32[((((_G1+68)|0))>>2)];
      var $s444=(($L+4)|0);
      var $252=HEAP32[(($s444)>>2)];
      var $call445=_hash_search($251, $252);
      var $253=$call445;
      $rsm443=$253;
      __label__ = 168; break;
    case 168: 
      __label__ = 169; break;
    case 169: 
      var $254=$rsm443;
      var $tobool448=(($254)|0)!=0;
      if ($tobool448) { __label__ = 170; break; } else { __label__ = 178; break; }
    case 170: 
      __label__ = 171; break;
    case 171: 
      __label__ = 172; break;
    case 172: 
      var $255=$rsm443;
      var $F452=(($255)|0);
      var $256=HEAP32[(($F452)>>2)];
      var $tobool453=(($256)|0)!=0;
      if ($tobool453) { __label__ = 173; break; } else { __label__ = 177; break; }
    case 173: 
      var $257=$rsm443;
      var $is_pipe455=(($257+20)|0);
      var $258=HEAP8[($is_pipe455)];
      var $conv456=(($258 << 24) >> 24);
      var $tobool457=(($conv456)|0)!=0;
      if ($tobool457) { __label__ = 174; break; } else { __label__ = 175; break; }
    case 174: 
      var $259=$rsm443;
      var $F459=(($259)|0);
      var $260=HEAP32[(($F459)>>2)];
      var $call460=_pclose($260);
      var $cond465 = $call460;__label__ = 176; break;
    case 175: 
      var $261=$rsm443;
      var $F462=(($261)|0);
      var $262=HEAP32[(($F462)>>2)];
      var $call463=_fclose($262);
      var $cond465 = $call463;__label__ = 176; break;
    case 176: 
      var $cond465;
      $err=$cond465;
      __label__ = 177; break;
    case 177: 
      var $263=$rsm443;
      var $buffer=(($263+4)|0);
      var $264=HEAP32[(($buffer)>>2)];
      _free($264);
      var $265=HEAP32[((((_G1+68)|0))>>2)];
      var $s467=(($L+4)|0);
      var $266=HEAP32[(($s467)>>2)];
      _hash_remove($265, $266);
      __label__ = 178; break;
    case 178: 
      var $267=$err;
      var $tobool469=(($267)|0)!=0;
      if ($tobool469) { __label__ = 179; break; } else { __label__ = 180; break; }
    case 179: 
      var $268=HEAP32[((((_G+68)|0))>>2)];
      var $call471=___errno();
      var $269=HEAP32[(($call471)>>2)];
      var $conv472=(($269)|0);
      var $call473=_setvar_i($268, $conv472);
      __label__ = 180; break;
    case 180: 
      var $270=$err;
      var $conv475=(($270)|0);
      $R_d=$conv475;
      __label__ = 181; break;
    case 181: 
      var $271=$res_addr;
      var $272=$R_d;
      var $call476=_setvar_i($271, $272);
      __label__ = 243; break;
    case 182: 
      var $273=$op_addr;
      var $274=$res_addr;
      var $call478=_exec_builtin($273, $274);
      $res_addr=$call478;
      __label__ = 243; break;
    case 183: 
      var $275=$res_addr;
      var $276=HEAP32[(($op1)>>2)];
      var $call480=_awk_printf($276);
      var $call481=_setvar_p($275, $call480);
      __label__ = 243; break;
    case 184: 
      var $v484=(($R)|0);
      var $277=HEAP32[(($v484)>>2)];
      var $call485=_getvar_i($277);
      $R_d483=$call485;
      $Ld=$call485;
      var $278=$opn;
      if ((($278)|0) == 80) {
        __label__ = 185; break;
      }
      else if ((($278)|0) == 112) {
        __label__ = 186; break;
      }
      else if ((($278)|0) == 77) {
        __label__ = 187; break;
      }
      else if ((($278)|0) == 109) {
        __label__ = 188; break;
      }
      else if ((($278)|0) == 33) {
        __label__ = 190; break;
      }
      else if ((($278)|0) == 45) {
        __label__ = 191; break;
      }
      else {
      __label__ = 192; break;
      }
      
    case 185: 
      var $279=$R_d483;
      var $inc=($279)+(1);
      $R_d483=$inc;
      $Ld=$inc;
      __label__ = 189; break;
    case 186: 
      var $280=$R_d483;
      var $inc488=($280)+(1);
      $R_d483=$inc488;
      __label__ = 189; break;
    case 187: 
      var $281=$R_d483;
      var $dec=($281)-(1);
      $R_d483=$dec;
      $Ld=$dec;
      __label__ = 189; break;
    case 188: 
      var $282=$R_d483;
      var $dec491=($282)-(1);
      $R_d483=$dec491;
      __label__ = 189; break;
    case 189: 
      var $v492=(($R)|0);
      var $283=HEAP32[(($v492)>>2)];
      var $284=$R_d483;
      var $call493=_setvar_i($283, $284);
      __label__ = 192; break;
    case 190: 
      var $v495=(($R)|0);
      var $285=HEAP32[(($v495)>>2)];
      var $call496=_istrue($285);
      var $tobool497=(($call496)|0)!=0;
      var $lnot=$tobool497 ^ 1;
      var $lnot_ext=(($lnot)&1);
      var $conv498=(($lnot_ext)|0);
      $Ld=$conv498;
      __label__ = 192; break;
    case 191: 
      var $286=$R_d483;
      var $sub=(-$286);
      $Ld=$sub;
      __label__ = 192; break;
    case 192: 
      var $287=$res_addr;
      var $288=$Ld;
      var $call501=_setvar_i($287, $288);
      __label__ = 243; break;
    case 193: 
      var $v504=(($R)|0);
      var $289=HEAP32[(($v504)>>2)];
      var $call505=_getvar_i($289);
      var $conv506=(($call505)&-1);
      $i503=$conv506;
      var $290=$i503;
      var $cmp507=(($290)|0)==0;
      if ($cmp507) { __label__ = 194; break; } else { __label__ = 195; break; }
    case 194: 
      var $291=HEAP32[((((_G+52)|0))>>2)];
      $res_addr=$291;
      __label__ = 198; break;
    case 195: 
      _split_f0();
      var $292=$i503;
      var $293=HEAP32[((((_G1+84)|0))>>2)];
      var $cmp511=(($292)|0) > (($293)|0);
      if ($cmp511) { __label__ = 196; break; } else { __label__ = 197; break; }
    case 196: 
      var $294=$i503;
      _fsrealloc($294);
      __label__ = 197; break;
    case 197: 
      var $295=$i503;
      var $sub515=((($295)-(1))|0);
      var $296=HEAP32[((((_G1+92)|0))>>2)];
      var $arrayidx516=(($296+($sub515)*(20))|0);
      $res_addr=$arrayidx516;
      __label__ = 198; break;
    case 198: 
      __label__ = 243; break;
    case 199: 
      $sep=((__str41)|0);
      var $297=$opinfo;
      var $and519=$297 & 65280;
      var $cmp520=(($and519)|0)==4864;
      if ($cmp520) { __label__ = 200; break; } else { __label__ = 201; break; }
    case 200: 
      var $298=HEAP32[((((_G+48)|0))>>2)];
      var $call523=_getvar_s($298);
      $sep=$call523;
      __label__ = 201; break;
    case 201: 
      var $299=$res_addr;
      var $s525=(($L+4)|0);
      var $300=HEAP32[(($s525)>>2)];
      var $301=$sep;
      var $s526=(($R+4)|0);
      var $302=HEAP32[(($s526)>>2)];
      var $call527=_xasprintf(((STRING_TABLE.__str49)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$300,HEAP32[(((tempInt)+(4))>>2)]=$301,HEAP32[(((tempInt)+(8))>>2)]=$302,tempInt));
      var $call528=_setvar_p($299, $call527);
      __label__ = 243; break;
    case 202: 
      var $303=$res_addr;
      var $v530=(($L)|0);
      var $304=HEAP32[(($v530)>>2)];
      var $call531=_istrue($304);
      var $tobool532=(($call531)|0)!=0;
      if ($tobool532) { __label__ = 203; break; } else { __label__ = 204; break; }
    case 203: 
      var $305=$op_addr;
      var $r534=(($305+28)|0);
      var $n535=$r534;
      var $306=HEAP32[(($n535)>>2)];
      var $call536=_ptest($306);
      var $cond539 = $call536;__label__ = 205; break;
    case 204: 
      var $cond539 = 0;__label__ = 205; break;
    case 205: 
      var $cond539;
      var $conv540=(($cond539)|0);
      var $call541=_setvar_i($303, $conv540);
      __label__ = 243; break;
    case 206: 
      var $307=$res_addr;
      var $v543=(($L)|0);
      var $308=HEAP32[(($v543)>>2)];
      var $call544=_istrue($308);
      var $tobool545=(($call544)|0)!=0;
      if ($tobool545) { __label__ = 207; break; } else { __label__ = 208; break; }
    case 207: 
      var $cond552 = 1;__label__ = 209; break;
    case 208: 
      var $309=$op_addr;
      var $r548=(($309+28)|0);
      var $n549=$r548;
      var $310=HEAP32[(($n549)>>2)];
      var $call550=_ptest($310);
      var $cond552 = $call550;__label__ = 209; break;
    case 209: 
      var $cond552;
      var $conv553=(($cond552)|0);
      var $call554=_setvar_i($307, $conv553);
      __label__ = 243; break;
    case 210: 
      var $v557=(($R)|0);
      var $311=HEAP32[(($v557)>>2)];
      var $call558=_getvar_i($311);
      $R_d556=$call558;
      __label__ = 211; break;
    case 211: 
      __label__ = 212; break;
    case 212: 
      var $312=$opn;
      if ((($312)|0) == 43) {
        __label__ = 213; break;
      }
      else if ((($312)|0) == 45) {
        __label__ = 214; break;
      }
      else if ((($312)|0) == 42) {
        __label__ = 215; break;
      }
      else if ((($312)|0) == 47) {
        __label__ = 216; break;
      }
      else if ((($312)|0) == 38) {
        __label__ = 219; break;
      }
      else if ((($312)|0) == 37) {
        __label__ = 220; break;
      }
      else {
      __label__ = 223; break;
      }
      
    case 213: 
      var $313=$R_d556;
      var $314=$L_d;
      var $add562=($314)+($313);
      $L_d=$add562;
      __label__ = 223; break;
    case 214: 
      var $315=$R_d556;
      var $316=$L_d;
      var $sub564=($316)-($315);
      $L_d=$sub564;
      __label__ = 223; break;
    case 215: 
      var $317=$R_d556;
      var $318=$L_d;
      var $mul=($318)*($317);
      $L_d=$mul;
      __label__ = 223; break;
    case 216: 
      var $319=$R_d556;
      var $cmp567=$319 == 0;
      if ($cmp567) { __label__ = 217; break; } else { __label__ = 218; break; }
    case 217: 
      _syntax_error(((STRING_TABLE._EMSG_DIV_BY_ZERO)|0));
      throw "Reached an unreachable!"
    case 218: 
      var $320=$R_d556;
      var $321=$L_d;
      var $div571=($321)/($320);
      $L_d=$div571;
      __label__ = 223; break;
    case 219: 
      _syntax_error(((STRING_TABLE._EMSG_NO_MATH)|0));
      throw "Reached an unreachable!"
    case 220: 
      var $322=$R_d556;
      var $cmp574=$322 == 0;
      if ($cmp574) { __label__ = 221; break; } else { __label__ = 222; break; }
    case 221: 
      _syntax_error(((STRING_TABLE._EMSG_DIV_BY_ZERO)|0));
      throw "Reached an unreachable!"
    case 222: 
      var $323=$L_d;
      var $324=$R_d556;
      var $div578=($323)/($324);
      var $conv579=(($div578)&-1);
      var $conv580=(($conv579)|0);
      var $325=$R_d556;
      var $mul581=($conv580)*($325);
      var $326=$L_d;
      var $sub582=($326)-($mul581);
      $L_d=$sub582;
      __label__ = 223; break;
    case 223: 
      __label__ = 224; break;
    case 224: 
      __label__ = 225; break;
    case 225: 
      var $327=$opinfo;
      var $and586=$327 & 65280;
      var $cmp587=(($and586)|0)==4096;
      if ($cmp587) { __label__ = 226; break; } else { __label__ = 227; break; }
    case 226: 
      var $328=$res_addr;
      var $cond593 = $328;__label__ = 228; break;
    case 227: 
      var $v591=(($L)|0);
      var $329=HEAP32[(($v591)>>2)];
      var $cond593 = $329;__label__ = 228; break;
    case 228: 
      var $cond593;
      var $330=$L_d;
      var $call594=_setvar_i($cond593, $330);
      $res_addr=$call594;
      __label__ = 243; break;
    case 229: 
      var $331=$i596;
      $i596=$331;
      var $v598=(($L)|0);
      var $332=HEAP32[(($v598)>>2)];
      var $call599=_is_numeric($332);
      var $tobool600=(($call599)|0)!=0;
      if ($tobool600) { __label__ = 230; break; } else { __label__ = 232; break; }
    case 230: 
      var $v602=(($R)|0);
      var $333=HEAP32[(($v602)>>2)];
      var $call603=_is_numeric($333);
      var $tobool604=(($call603)|0)!=0;
      if ($tobool604) { __label__ = 231; break; } else { __label__ = 232; break; }
    case 231: 
      var $v606=(($L)|0);
      var $334=HEAP32[(($v606)>>2)];
      var $call607=_getvar_i($334);
      var $v608=(($R)|0);
      var $335=HEAP32[(($v608)>>2)];
      var $call609=_getvar_i($335);
      var $sub610=($call607)-($call609);
      $Ld597=$sub610;
      __label__ = 236; break;
    case 232: 
      var $v613=(($L)|0);
      var $336=HEAP32[(($v613)>>2)];
      var $call614=_getvar_s($336);
      $l612=$call614;
      var $v616=(($R)|0);
      var $337=HEAP32[(($v616)>>2)];
      var $call617=_getvar_s($337);
      $r615=$call617;
      var $338=HEAP8[(((_G1+108)|0))];
      var $conv618=(($338 << 24) >> 24);
      var $tobool619=(($conv618)|0)!=0;
      if ($tobool619) { __label__ = 233; break; } else { __label__ = 234; break; }
    case 233: 
      var $339=$l612;
      var $340=$r615;
      var $call621=_strcasecmp($339, $340);
      var $cond625 = $call621;__label__ = 235; break;
    case 234: 
      var $341=$l612;
      var $342=$r615;
      var $call623=_strcmp($341, $342);
      var $cond625 = $call623;__label__ = 235; break;
    case 235: 
      var $cond625;
      var $conv626=(($cond625)|0);
      $Ld597=$conv626;
      __label__ = 236; break;
    case 236: 
      var $343=$opn;
      var $and628=$343 & 254;
      if ((($and628)|0) == 0) {
        __label__ = 237; break;
      }
      else if ((($and628)|0) == 2) {
        __label__ = 238; break;
      }
      else if ((($and628)|0) == 4) {
        __label__ = 239; break;
      }
      else {
      __label__ = 240; break;
      }
      
    case 237: 
      var $344=$Ld597;
      var $cmp630=$344 > 0;
      var $conv631=(($cmp630)&1);
      $i596=$conv631;
      __label__ = 240; break;
    case 238: 
      var $345=$Ld597;
      var $cmp633=$345 >= 0;
      var $conv634=(($cmp633)&1);
      $i596=$conv634;
      __label__ = 240; break;
    case 239: 
      var $346=$Ld597;
      var $cmp636=$346 == 0;
      var $conv637=(($cmp636)&1);
      $i596=$conv637;
      __label__ = 240; break;
    case 240: 
      var $347=$res_addr;
      var $348=$i596;
      var $cmp639=(($348)|0)==0;
      var $conv640=(($cmp639)&1);
      var $349=$opn;
      var $and641=$349 & 1;
      var $xor642=$conv640 ^ $and641;
      var $conv643=(($xor642)|0);
      var $call644=_setvar_i($347, $conv643);
      __label__ = 243; break;
    case 241: 
      var $350=$op_addr;
      _process_notification($350);
      var $351=$op_addr;
      var $a646=(($351+32)|0);
      var $n647=$a646;
      var $352=HEAP32[(($n647)>>2)];
      $op_addr=$352;
      __label__ = 7; break;
    case 242: 
      _syntax_error(((STRING_TABLE._EMSG_POSSIBLE_ERROR)|0));
      throw "Reached an unreachable!"
    case 243: 
      var $353=$opinfo;
      var $and649=$353 & 65280;
      var $cmp650=(($and649)>>>0) <= 1536;
      if ($cmp650) { __label__ = 244; break; } else { __label__ = 245; break; }
    case 244: 
      var $354=$op_addr;
      var $a653=(($354+32)|0);
      var $n654=$a653;
      var $355=HEAP32[(($n654)>>2)];
      $op_addr=$355;
      __label__ = 245; break;
    case 245: 
      var $356=$opinfo;
      var $and656=$356 & 65280;
      var $cmp657=(($and656)>>>0) >= 4096;
      if ($cmp657) { __label__ = 246; break; } else { __label__ = 247; break; }
    case 246: 
      __label__ = 250; break;
    case 247: 
      var $357=HEAP8[(((_G1+110)|0))];
      var $tobool661=(($357 << 24) >> 24)!=0;
      if ($tobool661) { __label__ = 248; break; } else { __label__ = 249; break; }
    case 248: 
      __label__ = 250; break;
    case 249: 
      __label__ = 7; break;
    case 250: 
      var $358=$v1;
      _nvfree($358);
      __label__ = 251; break;
    case 251: 
      __label__ = 252; break;
    case 252: 
      var $359=$res_addr;
      $retval=$359;
      __label__ = 253; break;
    case 253: 
      var $360=$retval;
      STACKTOP = __stackBase__;
      return $360;
    default: assert(0, "bad label: " + __label__);
  }
}
_evaluate["X"]=1;

function _skip_spaces($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      $p_addr=$p;
      __label__ = 3; break;
    case 3: 
      var $0=$p_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==92;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $2=$p_addr;
      var $arrayidx=(($2+1)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv2=(($3 << 24) >> 24);
      var $cmp3=(($conv2)|0)==10;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $4=$p_addr;
      var $incdec_ptr=(($4+1)|0);
      $p_addr=$incdec_ptr;
      var $5=HEAP32[((((_G+12)|0))>>2)];
      var $inc=((($5)+(1))|0);
      HEAP32[((((_G+12)|0))>>2)]=$inc;
      __label__ = 10; break;
    case 6: 
      var $6=$p_addr;
      var $7=HEAP8[($6)];
      var $conv5=(($7 << 24) >> 24);
      var $cmp6=(($conv5)|0)!=32;
      if ($cmp6) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $8=$p_addr;
      var $9=HEAP8[($8)];
      var $conv9=(($9 << 24) >> 24);
      var $cmp10=(($conv9)|0)!=9;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      __label__ = 11; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $10=$p_addr;
      var $incdec_ptr14=(($10+1)|0);
      $p_addr=$incdec_ptr14;
      __label__ = 3; break;
    case 11: 
      var $11=$p_addr;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _next_input_file() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $F;
      var $fname;
      var $ind;
      var $0=HEAP32[((((_G+112)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=HEAP32[((((_G+112)|0))>>2)];
      var $call=_fclose($1);
      __label__ = 4; break;
    case 4: 
      HEAP32[((((_G+112)|0))>>2)]=0;
      HEAP32[((((_G+120)|0))>>2)]=0;
      HEAP32[((((_G+128)|0))>>2)]=0;
      __label__ = 5; break;
    case 5: 
      var $2=HEAP32[((((_G+56)|0))>>2)];
      var $call1=_getvar_i($2);
      var $add=($call1)+(1);
      var $3=HEAP32[((((_G+60)|0))>>2)];
      var $call2=_getvar_i($3);
      var $cmp=$add >= $call2;
      if ($cmp) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $4=HEAP8[(((_G+109)|0))];
      var $tobool4=(($4 << 24) >> 24)!=0;
      if ($tobool4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=0;
      __label__ = 15; break;
    case 8: 
      $fname=((STRING_TABLE.__str40)|0);
      var $5=HEAP32[((_stdin)>>2)];
      $F=$5;
      __label__ = 14; break;
    case 9: 
      var $6=HEAP32[((((_G+56)|0))>>2)];
      var $call8=_incvar($6);
      var $call9=_getvar_s($call8);
      $ind=$call9;
      var $7=HEAP32[((((_G+64)|0))>>2)];
      var $call10=_iamarray($7);
      var $8=$ind;
      var $call11=_hash_find($call10, $8);
      var $9=$call11;
      var $call12=_getvar_s($9);
      $fname=$call12;
      var $10=$fname;
      var $tobool13=(($10)|0)!=0;
      if ($tobool13) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $11=$fname;
      var $12=HEAP8[($11)];
      var $conv=(($12 << 24) >> 24);
      var $tobool14=(($conv)|0)!=0;
      if ($tobool14) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $13=$fname;
      var $call16=_is_assignment($13);
      var $tobool17=(($call16)|0)!=0;
      if ($tobool17) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $14=$fname;
      var $call19=_xfopen_stdin($14);
      $F=$call19;
      __label__ = 14; break;
    case 13: 
      __label__ = 5; break;
    case 14: 
      HEAP8[(((_G+109)|0))]=1;
      var $15=HEAP32[((((_G+44)|0))>>2)];
      var $16=$fname;
      var $call21=_setvar_s($15, $16);
      var $17=$F;
      HEAP32[((((_G+112)|0))>>2)]=$17;
      $retval=((_G+112)|0);
      __label__ = 15; break;
    case 15: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_next_input_file["X"]=1;

function _awk_getline($rsm, $v) {
  var __stackBase__  = STACKTOP; STACKTOP += 40; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $rsm_addr;
      var $v_addr;
      var $b;
      var $pmatch=__stackBase__;
      var $size=(__stackBase__)+(16);
      var $a;
      var $p;
      var $pp;
      var $fd;
      var $so;
      var $eo;
      var $r;
      var $rp;
      var $c;
      var $m;
      var $s;
      var $nt=(__stackBase__)+(20);
      $rsm_addr=$rsm;
      $v_addr=$v;
      $pp=0;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $0=$rsm_addr;
      var $F=(($0)|0);
      var $1=HEAP32[(($F)>>2)];
      var $call=_fileno($1);
      $fd=$call;
      var $2=$rsm_addr;
      var $buffer=(($2+4)|0);
      var $3=HEAP32[(($buffer)>>2)];
      $m=$3;
      var $4=$rsm_addr;
      var $adv=(($4+8)|0);
      var $5=HEAP32[(($adv)>>2)];
      $a=$5;
      var $6=$rsm_addr;
      var $pos=(($6+16)|0);
      var $7=HEAP32[(($pos)>>2)];
      $p=$7;
      var $8=$rsm_addr;
      var $size1=(($8+12)|0);
      var $9=HEAP32[(($size1)>>2)];
      HEAP32[(($size)>>2)]=$9;
      var $10=HEAP32[((((_G+316)|0))>>2)];
      var $conv=(($10) & 255);
      $c=$conv;
      $rp=0;
      var $11=$m;
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $12=$m;
      var $call2=_qrealloc($12, 256, $size);
      $m=$call2;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $13=$m;
      var $14=$a;
      var $add_ptr=(($13+$14)|0);
      $b=$add_ptr;
      var $15=$p;
      $eo=$15;
      $so=$15;
      $r=1;
      var $16=$p;
      var $cmp=(($16)|0) > 0;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 36; break; }
    case 8: 
      var $17=HEAP32[((((_G+316)|0))>>2)];
      var $and=$17 & 65280;
      var $cmp6=(($and)|0)==8448;
      if ($cmp6) { __label__ = 9; break; } else { __label__ = 17; break; }
    case 9: 
      var $18=HEAP8[(((_G1+108)|0))];
      var $conv9=(($18 << 24) >> 24);
      var $tobool10=(($conv9)|0)!=0;
      if ($tobool10) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $19=HEAP32[(((((_G+344)|0)))>>2)];
      var $cond = $19;__label__ = 12; break;
    case 11: 
      var $20=HEAP32[(((((_G+324)|0)))>>2)];
      var $cond = $20;__label__ = 12; break;
    case 12: 
      var $cond;
      var $21=$b;
      var $arraydecay=(($pmatch)|0);
      var $call11=_regexec($cond, $21, 1, $arraydecay, 0);
      var $cmp12=(($call11)|0)==0;
      if ($cmp12) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $arrayidx=(($pmatch)|0);
      var $rm_so=(($arrayidx)|0);
      var $22=HEAP32[(($rm_so)>>2)];
      $so=$22;
      var $arrayidx15=(($pmatch)|0);
      var $rm_eo=(($arrayidx15+4)|0);
      var $23=HEAP32[(($rm_eo)>>2)];
      $eo=$23;
      var $24=$eo;
      var $25=$b;
      var $arrayidx16=(($25+$24)|0);
      var $26=HEAP8[($arrayidx16)];
      var $conv17=(($26 << 24) >> 24);
      var $cmp18=(($conv17)|0)!=0;
      if ($cmp18) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 42; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 35; break;
    case 17: 
      var $27=$c;
      var $conv23=(($27 << 24) >> 24);
      var $cmp24=(($conv23)|0)!=0;
      if ($cmp24) { __label__ = 18; break; } else { __label__ = 23; break; }
    case 18: 
      var $28=$b;
      var $29=$pp;
      var $add_ptr27=(($28+$29)|0);
      var $30=$c;
      var $conv28=(($30 << 24) >> 24);
      var $call29=_strchr($add_ptr27, $conv28);
      $s=$call29;
      var $31=$s;
      var $tobool30=(($31)|0)!=0;
      if ($tobool30) { __label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $32=$b;
      var $33=$pp;
      var $add_ptr32=(($32+$33)|0);
      var $34=$p;
      var $35=$pp;
      var $sub=((($34)-($35))|0);
      var $call33=_memchr($add_ptr32, 0, $sub);
      $s=$call33;
      __label__ = 20; break;
    case 20: 
      var $36=$s;
      var $tobool35=(($36)|0)!=0;
      if ($tobool35) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $37=$s;
      var $38=$b;
      var $sub_ptr_lhs_cast=$37;
      var $sub_ptr_rhs_cast=$38;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $eo=$sub_ptr_sub;
      $so=$sub_ptr_sub;
      var $39=$eo;
      var $inc=((($39)+(1))|0);
      $eo=$inc;
      __label__ = 42; break;
    case 22: 
      __label__ = 34; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $40=$rp;
      var $41=$b;
      var $arrayidx39=(($41+$40)|0);
      var $42=HEAP8[($arrayidx39)];
      var $conv40=(($42 << 24) >> 24);
      var $cmp41=(($conv40)|0)==10;
      if ($cmp41) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $43=$rp;
      var $inc43=((($43)+(1))|0);
      $rp=$inc43;
      __label__ = 24; break;
    case 26: 
      var $44=$b;
      var $45=$rp;
      var $add_ptr44=(($44+$45)|0);
      var $call45=_strstr($add_ptr44, ((STRING_TABLE.__str39)|0));
      $s=$call45;
      var $46=$s;
      var $tobool46=(($46)|0)!=0;
      if ($tobool46) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      var $47=$s;
      var $48=$b;
      var $sub_ptr_lhs_cast48=$47;
      var $sub_ptr_rhs_cast49=$48;
      var $sub_ptr_sub50=((($sub_ptr_lhs_cast48)-($sub_ptr_rhs_cast49))|0);
      $eo=$sub_ptr_sub50;
      $so=$sub_ptr_sub50;
      __label__ = 28; break;
    case 28: 
      var $49=$eo;
      var $50=$b;
      var $arrayidx52=(($50+$49)|0);
      var $51=HEAP8[($arrayidx52)];
      var $conv53=(($51 << 24) >> 24);
      var $cmp54=(($conv53)|0)==10;
      if ($cmp54) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $52=$eo;
      var $inc57=((($52)+(1))|0);
      $eo=$inc57;
      __label__ = 28; break;
    case 30: 
      var $53=$eo;
      var $54=$b;
      var $arrayidx59=(($54+$53)|0);
      var $55=HEAP8[($arrayidx59)];
      var $conv60=(($55 << 24) >> 24);
      var $cmp61=(($conv60)|0)!=0;
      if ($cmp61) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 42; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $56=$a;
      var $cmp69=(($56)|0) > 0;
      if ($cmp69) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $57=$m;
      var $58=$m;
      var $59=$a;
      var $add_ptr72=(($58+$59)|0);
      var $60=$p;
      var $add=((($60)+(1))|0);
      _llvm_memmove_p0i8_p0i8_i32($57, $add_ptr72, $add, 1, 0);
      var $61=$m;
      $b=$61;
      $a=0;
      __label__ = 38; break;
    case 38: 
      var $62=$m;
      var $63=$a;
      var $64=$p;
      var $add74=((($63)+($64))|0);
      var $add75=((($add74)+(128))|0);
      var $call76=_qrealloc($62, $add75, $size);
      $m=$call76;
      var $65=$m;
      var $66=$a;
      var $add_ptr77=(($65+$66)|0);
      $b=$add_ptr77;
      var $67=$p;
      $pp=$67;
      var $68=$fd;
      var $69=$b;
      var $70=$p;
      var $add_ptr78=(($69+$70)|0);
      var $71=HEAP32[(($size)>>2)];
      var $72=$p;
      var $sub79=((($71)-($72))|0);
      var $sub80=((($sub79)-(1))|0);
      var $call81=_safe_read($68, $add_ptr78, $sub80);
      var $73=$p;
      var $add82=((($73)+($call81))|0);
      $p=$add82;
      var $74=$p;
      var $75=$pp;
      var $cmp83=(($74)|0) < (($75)|0);
      if ($cmp83) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      $p=0;
      $r=0;
      var $76=HEAP32[((((_G+68)|0))>>2)];
      var $call86=___errno();
      var $77=HEAP32[(($call86)>>2)];
      var $conv87=(($77)|0);
      var $call88=_setvar_i($76, $conv87);
      __label__ = 40; break;
    case 40: 
      var $78=$p;
      var $79=$b;
      var $arrayidx90=(($79+$78)|0);
      HEAP8[($arrayidx90)]=0;
      __label__ = 41; break;
    case 41: 
      var $80=$p;
      var $81=$pp;
      var $cmp91=(($80)|0) > (($81)|0);
      if ($cmp91) { __label__ = 7; break; } else { __label__ = 42; break; }
    case 42: 
      var $82=$p;
      var $cmp94=(($82)|0)==0;
      if ($cmp94) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $83=$r;
      var $dec=((($83)-(1))|0);
      $r=$dec;
      __label__ = 45; break;
    case 44: 
      var $84=$so;
      var $85=$b;
      var $arrayidx98=(($85+$84)|0);
      var $86=HEAP8[($arrayidx98)];
      $c=$86;
      var $87=$so;
      var $88=$b;
      var $arrayidx99=(($88+$87)|0);
      HEAP8[($arrayidx99)]=0;
      var $89=$v_addr;
      var $90=$b;
      var $91=$rp;
      var $add_ptr100=(($90+$91)|0);
      var $call101=_setvar_s($89, $add_ptr100);
      var $92=$v_addr;
      var $type=(($92)|0);
      var $93=HEAP32[(($type)>>2)];
      var $or=$93 | 512;
      HEAP32[(($type)>>2)]=$or;
      var $94=$c;
      var $95=$so;
      var $96=$b;
      var $arrayidx102=(($96+$95)|0);
      HEAP8[($arrayidx102)]=$94;
      var $97=$eo;
      var $98=$b;
      var $arrayidx103=(($98+$97)|0);
      var $99=HEAP8[($arrayidx103)];
      $c=$99;
      var $100=$eo;
      var $101=$b;
      var $arrayidx104=(($101+$100)|0);
      HEAP8[($arrayidx104)]=0;
      var $102=HEAP32[((((_G+40)|0))>>2)];
      var $103=$b;
      var $104=$so;
      var $add_ptr105=(($103+$104)|0);
      var $call106=_setvar_s($102, $add_ptr105);
      var $105=$c;
      var $106=$eo;
      var $107=$b;
      var $arrayidx107=(($107+$106)|0);
      HEAP8[($arrayidx107)]=$105;
      __label__ = 45; break;
    case 45: 
      var $108=$m;
      var $109=$rsm_addr;
      var $buffer109=(($109+4)|0);
      HEAP32[(($buffer109)>>2)]=$108;
      var $110=$a;
      var $111=$eo;
      var $add110=((($110)+($111))|0);
      var $112=$rsm_addr;
      var $adv111=(($112+8)|0);
      HEAP32[(($adv111)>>2)]=$add110;
      var $113=$p;
      var $114=$eo;
      var $sub112=((($113)-($114))|0);
      var $115=$rsm_addr;
      var $pos113=(($115+16)|0);
      HEAP32[(($pos113)>>2)]=$sub112;
      var $116=HEAP32[(($size)>>2)];
      var $117=$rsm_addr;
      var $size114=(($117+12)|0);
      HEAP32[(($size114)>>2)]=$116;
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $118=$r;
      var $tobool118=(($118)|0)!=0;
      if ($tobool118) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $type120=(($nt)|0);
      HEAP32[(($type120)>>2)]=16;
      var $119=HEAP32[((((_G+76)|0))>>2)];
      var $call121=_getvar_i($119);
      var $conv122=(($call121)&-1);
      var $add123=((($conv122)+(1))|0);
      var $start_line=(($nt+4)|0);
      HEAP32[(($start_line)>>2)]=$add123;
      var $start_line124=(($nt+4)|0);
      var $120=HEAP32[(($start_line124)>>2)];
      var $end_line=(($nt+12)|0);
      HEAP32[(($end_line)>>2)]=$120;
      var $start_char_pos=(($nt+8)|0);
      HEAP32[(($start_char_pos)>>2)]=0;
      var $end_char_pos=(($nt+16)|0);
      HEAP32[(($end_char_pos)>>2)]=0;
      _send_notification($nt);
      __label__ = 49; break;
    case 49: 
      var $121=$r;
      STACKTOP = __stackBase__;
      return $121;
    default: assert(0, "bad label: " + __label__);
  }
}
_awk_getline["X"]=1;

function _incvar($v) {
  ;
  var __label__;

  var $v_addr;
  $v_addr=$v;
  var $0=$v_addr;
  var $1=$v_addr;
  var $call=_getvar_i($1);
  var $add=($call)+(1);
  var $call1=_setvar_i($0, $add);
  ;
  return $call1;
}


function _getvar_i($v) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      var $s=__stackBase__;
      $v_addr=$v;
      var $0=$v_addr;
      var $type=(($0)|0);
      var $1=HEAP32[(($type)>>2)];
      var $and=$1 & 257;
      var $cmp=(($and)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 18; break; }
    case 3: 
      var $2=$v_addr;
      var $number=(($2+4)|0);
      (tempDoubleF64[0]=0,HEAP32[(($number)>>2)]=tempDoubleI32[0],HEAP32[((($number)+(4))>>2)]=tempDoubleI32[1]);
      var $3=$v_addr;
      var $string=(($3+12)|0);
      var $4=HEAP32[(($string)>>2)];
      HEAP32[(($s)>>2)]=$4;
      var $5=HEAP32[(($s)>>2)];
      var $tobool=(($5)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 14; break; }
    case 4: 
      var $6=HEAP32[(($s)>>2)];
      var $7=HEAP8[($6)];
      var $conv=(($7 << 24) >> 24);
      var $tobool1=(($conv)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 14; break; }
    case 5: 
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $call=_my_strtod($s);
      var $8=$v_addr;
      var $number3=(($8+4)|0);
      (tempDoubleF64[0]=$call,HEAP32[(($number3)>>2)]=tempDoubleI32[0],HEAP32[((($number3)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $9=$v_addr;
      var $type6=(($9)|0);
      var $10=HEAP32[(($type6)>>2)];
      var $and7=$10 & 512;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 10; break; } else { __label__ = 13; break; }
    case 10: 
      var $11=HEAP32[(($s)>>2)];
      var $call10=_skip_spaces($11);
      HEAP32[(($s)>>2)]=$call10;
      var $12=HEAP32[(($s)>>2)];
      var $13=HEAP8[($12)];
      var $conv11=(($13 << 24) >> 24);
      var $cmp12=(($conv11)|0)!=0;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $14=$v_addr;
      var $type15=(($14)|0);
      var $15=HEAP32[(($type15)>>2)];
      var $and16=$15 & -513;
      HEAP32[(($type15)>>2)]=$and16;
      __label__ = 12; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 17; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $16=$v_addr;
      var $type20=(($16)|0);
      var $17=HEAP32[(($type20)>>2)];
      var $and21=$17 & -513;
      HEAP32[(($type20)>>2)]=$and21;
      __label__ = 17; break;
    case 17: 
      var $18=$v_addr;
      var $type23=(($18)|0);
      var $19=HEAP32[(($type23)>>2)];
      var $or=$19 | 256;
      HEAP32[(($type23)>>2)]=$or;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $20=$v_addr;
      var $number27=(($20+4)|0);
      var $21=(tempDoubleI32[0]=HEAP32[(($number27)>>2)],tempDoubleI32[1]=HEAP32[((($number27)+(4))>>2)],tempDoubleF64[0]);
      STACKTOP = __stackBase__;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}
_getvar_i["X"]=1;

function _my_strtod($pp) {
  ;
  var __label__;

  var $pp_addr;
  var $cp;
  $pp_addr=$pp;
  var $0=$pp_addr;
  var $1=HEAP32[(($0)>>2)];
  $cp=$1;
  var $2=$cp;
  var $3=$pp_addr;
  var $call=_strtod($2, $3);
  ;
  return $call;
}


function _qrealloc($b, $n, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $b_addr;
      var $n_addr;
      var $size_addr;
      $b_addr=$b;
      $n_addr=$n;
      $size_addr=$size;
      var $0=$b_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$n_addr;
      var $2=$size_addr;
      var $3=HEAP32[(($2)>>2)];
      var $cmp=(($1)|0) >= (($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$n_addr;
      var $5=$n_addr;
      var $shr=$5 >> 1;
      var $add=((($4)+($shr))|0);
      var $add1=((($add)+(80))|0);
      var $6=$size_addr;
      HEAP32[(($6)>>2)]=$add1;
      var $7=$b_addr;
      var $8=$size_addr;
      var $9=HEAP32[(($8)>>2)];
      var $call=_xrealloc($7, $9);
      $b_addr=$call;
      __label__ = 5; break;
    case 5: 
      var $10=$b_addr;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _getvar_s($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      $v_addr=$v;
      var $0=$v_addr;
      var $type=(($0)|0);
      var $1=HEAP32[(($type)>>2)];
      var $and=$1 & 257;
      var $cmp=(($and)|0)==1;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=HEAP32[((((_G1+104)|0))>>2)];
      var $3=HEAP32[((((_G+16)|0))>>2)];
      var $call=_getvar_s($3);
      var $4=$v_addr;
      var $number=(($4+4)|0);
      var $5=(tempDoubleI32[0]=HEAP32[(($number)>>2)],tempDoubleI32[1]=HEAP32[((($number)+(4))>>2)],tempDoubleF64[0]);
      var $call1=_fmt_num($2, 240, $call, $5, 1);
      var $6=HEAP32[((((_G1+104)|0))>>2)];
      var $call2=_xstrdup($6);
      var $7=$v_addr;
      var $string=(($7+12)|0);
      HEAP32[(($string)>>2)]=$call2;
      var $8=$v_addr;
      var $type3=(($8)|0);
      var $9=HEAP32[(($type3)>>2)];
      var $or=$9 | 256;
      HEAP32[(($type3)>>2)]=$or;
      __label__ = 4; break;
    case 4: 
      var $10=$v_addr;
      var $string4=(($10+12)|0);
      var $11=HEAP32[(($string4)>>2)];
      var $cmp5=(($11)|0)==0;
      if ($cmp5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $cond = ((__str41)|0);__label__ = 7; break;
    case 6: 
      var $12=$v_addr;
      var $string6=(($12+12)|0);
      var $13=HEAP32[(($string6)>>2)];
      var $cond = $13;__label__ = 7; break;
    case 7: 
      var $cond;
      ;
      return $cond;
    default: assert(0, "bad label: " + __label__);
  }
}


function _iamarray($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      var $a;
      $v_addr=$v;
      var $0=$v_addr;
      $a=$0;
      __label__ = 3; break;
    case 3: 
      var $1=$a;
      var $type=(($1)|0);
      var $2=HEAP32[(($type)>>2)];
      var $and=$2 & 8192;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$a;
      var $x=(($3+16)|0);
      var $parent=$x;
      var $4=HEAP32[(($parent)>>2)];
      $a=$4;
      __label__ = 3; break;
    case 5: 
      var $5=$a;
      var $type1=(($5)|0);
      var $6=HEAP32[(($type1)>>2)];
      var $and2=$6 & 2;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $7=$a;
      var $type4=(($7)|0);
      var $8=HEAP32[(($type4)>>2)];
      var $or=$8 | 2;
      HEAP32[(($type4)>>2)]=$or;
      var $call=_hash_init();
      var $9=$a;
      var $x5=(($9+16)|0);
      var $array=$x5;
      HEAP32[(($array)>>2)]=$call;
      __label__ = 7; break;
    case 7: 
      var $10=$a;
      var $x6=(($10+16)|0);
      var $array7=$x6;
      var $11=HEAP32[(($array7)>>2)];
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _awk_exit($r) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $r_addr;
      var $tv=__stackBase__;
      var $i;
      var $hi;
      $r_addr=$r;
      _zero_out_var($tv);
      var $0=HEAP8[(((_G1+109)|0))];
      var $tobool=(($0 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      HEAP8[(((_G1+109)|0))]=1;
      HEAP8[(((_G1+110)|0))]=0;
      var $1=HEAP32[((((_G1+32)|0))>>2)];
      var $call=_evaluate($1, $tv);
      __label__ = 4; break;
    case 4: 
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $2=$i;
      var $3=HEAP32[((((_G1+68)|0))>>2)];
      var $csize=(($3+4)|0);
      var $4=HEAP32[(($csize)>>2)];
      var $cmp=(($2)>>>0) < (($4)>>>0);
      if ($cmp) { __label__ = 6; break; } else { __label__ = 14; break; }
    case 6: 
      var $5=$i;
      var $6=HEAP32[((((_G1+68)|0))>>2)];
      var $items=(($6+16)|0);
      var $7=HEAP32[(($items)>>2)];
      var $arrayidx=(($7+($5<<2))|0);
      var $8=HEAP32[(($arrayidx)>>2)];
      $hi=$8;
      __label__ = 7; break;
    case 7: 
      var $9=$hi;
      var $tobool1=(($9)|0)!=0;
      if ($tobool1) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $10=$hi;
      var $data=(($10)|0);
      var $rs=$data;
      var $F=(($rs)|0);
      var $11=HEAP32[(($F)>>2)];
      var $tobool2=(($11)|0)!=0;
      if ($tobool2) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $12=$hi;
      var $data3=(($12)|0);
      var $rs4=$data3;
      var $is_pipe=(($rs4+20)|0);
      var $13=HEAP8[($is_pipe)];
      var $conv=(($13 << 24) >> 24);
      var $tobool5=(($conv)|0)!=0;
      if ($tobool5) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $14=$hi;
      var $data7=(($14)|0);
      var $rs8=$data7;
      var $F9=(($rs8)|0);
      var $15=HEAP32[(($F9)>>2)];
      var $call10=_pclose($15);
      __label__ = 11; break;
    case 11: 
      var $16=$hi;
      var $next=(($16+24)|0);
      var $17=HEAP32[(($next)>>2)];
      $hi=$17;
      __label__ = 7; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      __label__ = 5; break;
    case 14: 
      var $19=$r_addr;
      _exit($19);
      throw "Reached an unreachable!"
    case 15: 
      var $20=$retval;
      STACKTOP = __stackBase__;
      return $20;
    default: assert(0, "bad label: " + __label__);
  }
}
_awk_exit["X"]=1;

function _syntax_error($message) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $message_addr;
      $message_addr=$message;
      var $0=HEAP32[((((_G1+76)|0))>>2)];
      var $1=HEAP32[((((_G1+80)|0))>>2)];
      var $2=$message_addr;
      _bb_error_msg_and_die(((STRING_TABLE.__str38)|0), (tempInt=STACKTOP,STACKTOP += 12,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$0,HEAP32[(((tempInt)+(4))>>2)]=$1,HEAP32[(((tempInt)+(8))>>2)]=$2,tempInt));
      throw "Reached an unreachable!"
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _nextarg($pn) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $pn_addr;
      var $n;
      $pn_addr=$pn;
      var $0=$pn_addr;
      var $1=HEAP32[(($0)>>2)];
      $n=$1;
      var $2=$n;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $3=$n;
      var $info=(($3)|0);
      var $4=HEAP32[(($info)>>2)];
      var $and=$4 & 65280;
      var $cmp=(($and)|0)==4864;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $5=$n;
      var $r=(($5+28)|0);
      var $n1=$r;
      var $6=HEAP32[(($n1)>>2)];
      var $7=$pn_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$n;
      var $l=(($8+8)|0);
      var $n2=$l;
      var $9=HEAP32[(($n2)>>2)];
      $n=$9;
      __label__ = 6; break;
    case 5: 
      var $10=$pn_addr;
      HEAP32[(($10)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $11=$n;
      ;
      return $11;
    default: assert(0, "bad label: " + __label__);
  }
}


function _nvalloc($n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $n_addr;
      var $pb;
      var $v;
      var $r;
      var $size;
      $n_addr=$n;
      $pb=0;
      __label__ = 3; break;
    case 3: 
      var $0=HEAP32[((((_G1+96)|0))>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $1=HEAP32[((((_G1+96)|0))>>2)];
      $pb=$1;
      var $2=HEAP32[((((_G1+96)|0))>>2)];
      var $pos=(($2+4)|0);
      var $3=HEAP32[(($pos)>>2)];
      var $4=HEAP32[((((_G1+96)|0))>>2)];
      var $nv=(($4+16)|0);
      var $arraydecay=(($nv)|0);
      var $sub_ptr_lhs_cast=$3;
      var $sub_ptr_rhs_cast=$arraydecay;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(20))&-1);
      var $5=$n_addr;
      var $add=((($sub_ptr_div)+($5))|0);
      var $6=HEAP32[((((_G1+96)|0))>>2)];
      var $size1=(($6)|0);
      var $7=HEAP32[(($size1)>>2)];
      var $cmp=(($add)|0) <= (($7)|0);
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      var $8=HEAP32[((((_G1+96)|0))>>2)];
      var $next=(($8+12)|0);
      var $9=HEAP32[(($next)>>2)];
      HEAP32[((((_G1+96)|0))>>2)]=$9;
      __label__ = 3; break;
    case 7: 
      var $10=HEAP32[((((_G1+96)|0))>>2)];
      var $tobool2=(($10)|0)!=0;
      if ($tobool2) { __label__ = 14; break; } else { __label__ = 8; break; }
    case 8: 
      var $11=$n_addr;
      var $cmp4=(($11)|0) <= 64;
      if ($cmp4) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $cond = 64;__label__ = 11; break;
    case 10: 
      var $12=$n_addr;
      var $cond = $12;__label__ = 11; break;
    case 11: 
      var $cond;
      $size=$cond;
      var $13=$size;
      var $mul=((($13)*(20))|0);
      var $add5=((($mul)+(16))|0);
      var $call=_xzalloc($add5);
      var $14=$call;
      HEAP32[((((_G1+96)|0))>>2)]=$14;
      var $15=$size;
      var $16=HEAP32[((((_G1+96)|0))>>2)];
      var $size6=(($16)|0);
      HEAP32[(($size6)>>2)]=$15;
      var $17=HEAP32[((((_G1+96)|0))>>2)];
      var $nv7=(($17+16)|0);
      var $arraydecay8=(($nv7)|0);
      var $18=HEAP32[((((_G1+96)|0))>>2)];
      var $pos9=(($18+4)|0);
      HEAP32[(($pos9)>>2)]=$arraydecay8;
      var $19=$pb;
      var $20=HEAP32[((((_G1+96)|0))>>2)];
      var $prev=(($20+8)|0);
      HEAP32[(($prev)>>2)]=$19;
      var $21=$pb;
      var $tobool10=(($21)|0)!=0;
      if ($tobool10) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $22=HEAP32[((((_G1+96)|0))>>2)];
      var $23=$pb;
      var $next12=(($23+12)|0);
      HEAP32[(($next12)>>2)]=$22;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $24=HEAP32[((((_G1+96)|0))>>2)];
      var $pos15=(($24+4)|0);
      var $25=HEAP32[(($pos15)>>2)];
      $r=$25;
      $v=$25;
      var $26=$n_addr;
      var $27=HEAP32[((((_G1+96)|0))>>2)];
      var $pos16=(($27+4)|0);
      var $28=HEAP32[(($pos16)>>2)];
      var $add_ptr=(($28+($26)*(20))|0);
      HEAP32[(($pos16)>>2)]=$add_ptr;
      __label__ = 15; break;
    case 15: 
      var $29=$v;
      var $30=HEAP32[((((_G1+96)|0))>>2)];
      var $pos18=(($30+4)|0);
      var $31=HEAP32[(($pos18)>>2)];
      var $cmp19=(($29)>>>0) < (($31)>>>0);
      if ($cmp19) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $32=$v;
      var $type=(($32)|0);
      HEAP32[(($type)>>2)]=0;
      var $33=$v;
      var $string=(($33+12)|0);
      HEAP32[(($string)>>2)]=0;
      var $34=$v;
      var $incdec_ptr=(($34+20)|0);
      $v=$incdec_ptr;
      __label__ = 15; break;
    case 17: 
      var $35=$r;
      ;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}
_nvalloc["X"]=1;

function _ptest($pattern) {
  ;
  var __label__;

  var $pattern_addr;
  $pattern_addr=$pattern;
  var $0=$pattern_addr;
  var $call=_evaluate($0, ((_G+160)|0));
  var $call1=_istrue($call);
  ;
  return $call1;
}


function _istrue($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $v_addr;
      $v_addr=$v;
      var $0=$v_addr;
      var $call=_is_numeric($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=$v_addr;
      var $number=(($1+4)|0);
      var $2=(tempDoubleI32[0]=HEAP32[(($number)>>2)],tempDoubleI32[1]=HEAP32[((($number)+(4))>>2)],tempDoubleF64[0]);
      var $cmp=$2 != 0;
      var $conv=(($cmp)&1);
      $retval=$conv;
      __label__ = 7; break;
    case 4: 
      var $3=$v_addr;
      var $string=(($3+12)|0);
      var $4=HEAP32[(($string)>>2)];
      var $tobool1=(($4)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { var $8 = 0;__label__ = 6; break; }
    case 5: 
      var $5=$v_addr;
      var $string2=(($5+12)|0);
      var $6=HEAP32[(($string2)>>2)];
      var $arrayidx=(($6)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv3=(($7 << 24) >> 24);
      var $tobool4=(($conv3)|0)!=0;
      var $8 = $tobool4;__label__ = 6; break;
    case 6: 
      var $8;
      var $land_ext=(($8)&1);
      $retval=$land_ext;
      __label__ = 7; break;
    case 7: 
      var $9=$retval;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _hashwalk_init($v, $array) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      var $array_addr;
      var $hi;
      var $i;
      var $w;
      var $prev_walker;
      $v_addr=$v;
      $array_addr=$array;
      var $0=$v_addr;
      var $type=(($0)|0);
      var $1=HEAP32[(($type)>>2)];
      var $and=$1 & 2048;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$v_addr;
      var $x=(($2+16)|0);
      var $walker=$x;
      var $3=HEAP32[(($walker)>>2)];
      $prev_walker=$3;
      __label__ = 5; break;
    case 4: 
      var $4=$v_addr;
      var $type1=(($4)|0);
      var $5=HEAP32[(($type1)>>2)];
      var $or=$5 | 2048;
      HEAP32[(($type1)>>2)]=$or;
      $prev_walker=0;
      __label__ = 5; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $6=$array_addr;
      var $glen=(($6+12)|0);
      var $7=HEAP32[(($glen)>>2)];
      var $add=((($7)+(16))|0);
      var $add2=((($add)+(1))|0);
      var $call=_xzalloc($add2);
      var $8=$call;
      var $9=$v_addr;
      var $x3=(($9+16)|0);
      var $walker4=$x3;
      HEAP32[(($walker4)>>2)]=$8;
      $w=$8;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $10=$w;
      var $wbuf=(($10+12)|0);
      var $arraydecay=(($wbuf)|0);
      var $11=$w;
      var $end=(($11)|0);
      HEAP32[(($end)>>2)]=$arraydecay;
      var $12=$w;
      var $cur=(($12+4)|0);
      HEAP32[(($cur)>>2)]=$arraydecay;
      var $13=$prev_walker;
      var $14=$w;
      var $prev=(($14+8)|0);
      HEAP32[(($prev)>>2)]=$13;
      $i=0;
      __label__ = 10; break;
    case 10: 
      var $15=$i;
      var $16=$array_addr;
      var $csize=(($16+4)|0);
      var $17=HEAP32[(($csize)>>2)];
      var $cmp=(($15)>>>0) < (($17)>>>0);
      if ($cmp) { __label__ = 11; break; } else { __label__ = 16; break; }
    case 11: 
      var $18=$i;
      var $19=$array_addr;
      var $items=(($19+16)|0);
      var $20=HEAP32[(($items)>>2)];
      var $arrayidx=(($20+($18<<2))|0);
      var $21=HEAP32[(($arrayidx)>>2)];
      $hi=$21;
      __label__ = 12; break;
    case 12: 
      var $22=$hi;
      var $tobool7=(($22)|0)!=0;
      if ($tobool7) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $23=$w;
      var $end8=(($23)|0);
      var $24=HEAP32[(($end8)>>2)];
      var $25=$hi;
      var $name=(($25+28)|0);
      var $arraydecay9=(($name)|0);
      var $call10=_strcpy($24, $arraydecay9);
      var $26=$w;
      var $end11=(($26)|0);
      var $call12=_nextword($end11);
      var $27=$hi;
      var $next=(($27+24)|0);
      var $28=HEAP32[(($next)>>2)];
      $hi=$28;
      __label__ = 12; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $29=$i;
      var $inc=((($29)+(1))|0);
      $i=$inc;
      __label__ = 10; break;
    case 16: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_hashwalk_init["X"]=1;

function _hashwalk_next($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $v_addr;
      var $w;
      var $prev_walker;
      $v_addr=$v;
      var $0=$v_addr;
      var $x=(($0+16)|0);
      var $walker=$x;
      var $1=HEAP32[(($walker)>>2)];
      $w=$1;
      var $2=$w;
      var $cur=(($2+4)|0);
      var $3=HEAP32[(($cur)>>2)];
      var $4=$w;
      var $end=(($4)|0);
      var $5=HEAP32[(($end)>>2)];
      var $cmp=(($3)>>>0) >= (($5)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $6=$w;
      var $prev=(($6+8)|0);
      var $7=HEAP32[(($prev)>>2)];
      $prev_walker=$7;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $8=$w;
      var $9=$8;
      _free($9);
      var $10=$prev_walker;
      var $11=$v_addr;
      var $x1=(($11+16)|0);
      var $walker2=$x1;
      HEAP32[(($walker2)>>2)]=$10;
      $retval=0;
      __label__ = 7; break;
    case 6: 
      var $12=$v_addr;
      var $13=$w;
      var $cur3=(($13+4)|0);
      var $call=_nextword($cur3);
      var $call4=_setvar_s($12, $call);
      $retval=1;
      __label__ = 7; break;
    case 7: 
      var $14=$retval;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}


function _clrvar($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      $v_addr=$v;
      var $0=$v_addr;
      var $type=(($0)|0);
      var $1=HEAP32[(($type)>>2)];
      var $and=$1 & 4096;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$v_addr;
      var $string=(($2+12)|0);
      var $3=HEAP32[(($string)>>2)];
      _free($3);
      __label__ = 4; break;
    case 4: 
      var $4=$v_addr;
      var $type1=(($4)|0);
      var $5=HEAP32[(($type1)>>2)];
      var $and2=$5 & 27650;
      HEAP32[(($type1)>>2)]=$and2;
      var $6=$v_addr;
      var $type3=(($6)|0);
      var $7=HEAP32[(($type3)>>2)];
      var $or=$7 | 16384;
      HEAP32[(($type3)>>2)]=$or;
      var $8=$v_addr;
      var $string4=(($8+12)|0);
      HEAP32[(($string4)>>2)]=0;
      var $9=$v_addr;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _hash_remove($hash, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $hash_addr;
      var $name_addr;
      var $hi;
      var $phi;
      $hash_addr=$hash;
      $name_addr=$name;
      var $0=$name_addr;
      var $call=_hashidx($0);
      var $1=$hash_addr;
      var $csize=(($1+4)|0);
      var $2=HEAP32[(($csize)>>2)];
      var $rem=((($call)>>>0))%((($2)>>>0));
      var $3=$hash_addr;
      var $items=(($3+16)|0);
      var $4=HEAP32[(($items)>>2)];
      var $arrayidx=(($4+($rem<<2))|0);
      $phi=$arrayidx;
      __label__ = 3; break;
    case 3: 
      var $5=$phi;
      var $6=HEAP32[(($5)>>2)];
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $7=$phi;
      var $8=HEAP32[(($7)>>2)];
      $hi=$8;
      var $9=$hi;
      var $name1=(($9+28)|0);
      var $arraydecay=(($name1)|0);
      var $10=$name_addr;
      var $call2=_strcmp($arraydecay, $10);
      var $cmp=(($call2)|0)==0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$name_addr;
      var $call3=_strlen($11);
      var $add=((($call3)+(1))|0);
      var $12=$hash_addr;
      var $glen=(($12+12)|0);
      var $13=HEAP32[(($glen)>>2)];
      var $sub=((($13)-($add))|0);
      HEAP32[(($glen)>>2)]=$sub;
      var $14=$hash_addr;
      var $nel=(($14)|0);
      var $15=HEAP32[(($nel)>>2)];
      var $dec=((($15)-(1))|0);
      HEAP32[(($nel)>>2)]=$dec;
      var $16=$hi;
      var $next=(($16+24)|0);
      var $17=HEAP32[(($next)>>2)];
      var $18=$phi;
      HEAP32[(($18)>>2)]=$17;
      var $19=$hi;
      var $20=$19;
      _free($20);
      __label__ = 7; break;
    case 6: 
      var $21=$hi;
      var $next4=(($21+24)|0);
      $phi=$next4;
      __label__ = 3; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_hash_remove["X"]=1;

function _clear_array($array) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $array_addr;
      var $i;
      var $hi;
      var $thi;
      $array_addr=$array;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$array_addr;
      var $csize=(($1+4)|0);
      var $2=HEAP32[(($csize)>>2)];
      var $cmp=(($0)>>>0) < (($2)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $3=$i;
      var $4=$array_addr;
      var $items=(($4+16)|0);
      var $5=HEAP32[(($items)>>2)];
      var $arrayidx=(($5+($3<<2))|0);
      var $6=HEAP32[(($arrayidx)>>2)];
      $hi=$6;
      __label__ = 5; break;
    case 5: 
      var $7=$hi;
      var $tobool=(($7)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $8=$hi;
      $thi=$8;
      var $9=$hi;
      var $next=(($9+24)|0);
      var $10=HEAP32[(($next)>>2)];
      $hi=$10;
      var $11=$thi;
      var $data=(($11)|0);
      var $v=$data;
      var $string=(($v+12)|0);
      var $12=HEAP32[(($string)>>2)];
      _free($12);
      var $13=$thi;
      var $14=$13;
      _free($14);
      __label__ = 5; break;
    case 7: 
      var $15=$i;
      var $16=$array_addr;
      var $items1=(($16+16)|0);
      var $17=HEAP32[(($items1)>>2)];
      var $arrayidx2=(($17+($15<<2))|0);
      HEAP32[(($arrayidx2)>>2)]=0;
      __label__ = 8; break;
    case 8: 
      var $18=$i;
      var $inc=((($18)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 9: 
      var $19=$array_addr;
      var $nel=(($19)|0);
      HEAP32[(($nel)>>2)]=0;
      var $20=$array_addr;
      var $glen=(($20+12)|0);
      HEAP32[(($glen)>>2)]=0;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_clear_array["X"]=1;

function _fmt_num($b, $size, $format, $n, $int_as_int) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $b_addr;
      var $size_addr;
      var $format_addr;
      var $n_addr;
      var $int_as_int_addr;
      var $r;
      var $c;
      var $s;
      $b_addr=$b;
      $size_addr=$size;
      $format_addr=$format;
      $n_addr=$n;
      $int_as_int_addr=$int_as_int;
      $r=0;
      var $0=$format_addr;
      $s=$0;
      var $1=$int_as_int_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$n_addr;
      var $3=$n_addr;
      var $conv=(($3)&-1);
      var $conv1=(($conv)|0);
      var $cmp=$2 == $conv1;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $4=$b_addr;
      var $5=$size_addr;
      var $6=$n_addr;
      var $conv3=(($6)&-1);
      var $call=_snprintf($4, $5, ((STRING_TABLE.__str42)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv3,tempInt));
      $r=$call;
      __label__ = 17; break;
    case 5: 
      __label__ = 6; break;
    case 6: 
      var $7=$s;
      var $8=HEAP8[($7)];
      $c=$8;
      __label__ = 7; break;
    case 7: 
      var $9=$c;
      var $conv4=(($9 << 24) >> 24);
      var $tobool5=(($conv4)|0)!=0;
      if ($tobool5) { __label__ = 8; break; } else { var $12 = 0;__label__ = 9; break; }
    case 8: 
      var $10=$s;
      var $incdec_ptr=(($10+1)|0);
      $s=$incdec_ptr;
      var $11=HEAP8[($incdec_ptr)];
      var $conv6=(($11 << 24) >> 24);
      var $tobool7=(($conv6)|0)!=0;
      var $12 = $tobool7;__label__ = 9; break;
    case 9: 
      var $12;
      if ($12) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 10: 
      var $13=$c;
      var $conv8=(($13 << 24) >> 24);
      var $call9=_strchr(((STRING_TABLE.__str43)|0), $conv8);
      var $tobool10=(($call9)|0)!=0;
      if ($tobool10) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $14=$b_addr;
      var $15=$size_addr;
      var $16=$format_addr;
      var $17=$n_addr;
      var $conv12=(($17)&-1);
      var $call13=_snprintf($14, $15, $16, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv12,tempInt));
      $r=$call13;
      __label__ = 16; break;
    case 12: 
      var $18=$c;
      var $conv15=(($18 << 24) >> 24);
      var $call16=_strchr(((STRING_TABLE.__str44)|0), $conv15);
      var $tobool17=(($call16)|0)!=0;
      if ($tobool17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $19=$b_addr;
      var $20=$size_addr;
      var $21=$format_addr;
      var $22=$n_addr;
      var $call19=_snprintf($19, $20, $21, (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),(tempDoubleF64[0]=$22,HEAP32[((tempInt)>>2)]=tempDoubleI32[0],HEAP32[(((tempInt)+(4))>>2)]=tempDoubleI32[1]),tempInt));
      $r=$call19;
      __label__ = 15; break;
    case 14: 
      _syntax_error(((STRING_TABLE._EMSG_INV_FMT)|0));
      throw "Reached an unreachable!"
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $23=$r;
      STACKTOP = __stackBase__;
      return $23;
    default: assert(0, "bad label: " + __label__);
  }
}
_fmt_num["X"]=1;

function _awk_printf($n) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $n_addr=__stackBase__;
      var $b;
      var $fmt;
      var $s;
      var $f;
      var $s1;
      var $i;
      var $j;
      var $incr;
      var $bsize=(__stackBase__)+(4);
      var $c;
      var $c1;
      var $v;
      var $arg;
      HEAP32[(($n_addr)>>2)]=$n;
      $b=0;
      var $call=_nvalloc(1);
      $v=$call;
      var $call1=_nextarg($n_addr);
      var $0=$v;
      var $call2=_evaluate($call1, $0);
      var $call3=_getvar_s($call2);
      var $call4=_xstrdup($call3);
      $f=$call4;
      $fmt=$call4;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $1=$f;
      var $2=HEAP8[($1)];
      var $tobool=(($2 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 33; break; }
    case 4: 
      var $3=$f;
      $s=$3;
      __label__ = 5; break;
    case 5: 
      var $4=$f;
      var $5=HEAP8[($4)];
      var $conv=(($5 << 24) >> 24);
      var $tobool6=(($conv)|0)!=0;
      if ($tobool6) { __label__ = 6; break; } else { var $11 = 0;__label__ = 9; break; }
    case 6: 
      var $6=$f;
      var $7=HEAP8[($6)];
      var $conv7=(($7 << 24) >> 24);
      var $cmp=(($conv7)|0)!=37;
      if ($cmp) { var $10 = 1;__label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $8=$f;
      var $incdec_ptr=(($8+1)|0);
      $f=$incdec_ptr;
      var $9=HEAP8[($incdec_ptr)];
      var $conv9=(($9 << 24) >> 24);
      var $cmp10=(($conv9)|0)==37;
      var $10 = $cmp10;__label__ = 8; break;
    case 8: 
      var $10;
      var $11 = $10;__label__ = 9; break;
    case 9: 
      var $11;
      if ($11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $12=$f;
      var $incdec_ptr13=(($12+1)|0);
      $f=$incdec_ptr13;
      __label__ = 5; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $13=$f;
      var $14=HEAP8[($13)];
      var $conv15=(($14 << 24) >> 24);
      var $tobool16=(($conv15)|0)!=0;
      if ($tobool16) { __label__ = 13; break; } else { var $17 = 0;__label__ = 14; break; }
    case 13: 
      var $15=$f;
      var $16=HEAP8[($15)];
      var $conv18=(($16 << 24) >> 24);
      var $call19=_isalpha($conv18);
      var $tobool20=(($call19)|0)!=0;
      var $lnot=$tobool20 ^ 1;
      var $17 = $lnot;__label__ = 14; break;
    case 14: 
      var $17;
      if ($17) { __label__ = 15; break; } else { __label__ = 18; break; }
    case 15: 
      var $18=$f;
      var $19=HEAP8[($18)];
      var $conv23=(($19 << 24) >> 24);
      var $cmp24=(($conv23)|0)==42;
      if ($cmp24) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      _syntax_error(((STRING_TABLE.__str54)|0));
      throw "Reached an unreachable!"
    case 17: 
      var $20=$f;
      var $incdec_ptr26=(($20+1)|0);
      $f=$incdec_ptr26;
      __label__ = 12; break;
    case 18: 
      var $21=$f;
      var $22=$s;
      var $sub_ptr_lhs_cast=$21;
      var $sub_ptr_rhs_cast=$22;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add=((($sub_ptr_sub)+(240))|0);
      $incr=$add;
      var $23=$b;
      var $24=$incr;
      var $25=$i;
      var $add28=((($24)+($25))|0);
      var $call29=_qrealloc($23, $add28, $bsize);
      $b=$call29;
      var $26=$f;
      var $27=HEAP8[($26)];
      $c=$27;
      var $28=$c;
      var $conv30=(($28 << 24) >> 24);
      var $cmp31=(($conv30)|0)!=0;
      if ($cmp31) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $29=$f;
      var $incdec_ptr34=(($29+1)|0);
      $f=$incdec_ptr34;
      __label__ = 20; break;
    case 20: 
      var $30=$f;
      var $31=HEAP8[($30)];
      $c1=$31;
      var $32=$f;
      HEAP8[($32)]=0;
      var $call36=_nextarg($n_addr);
      var $33=$v;
      var $call37=_evaluate($call36, $33);
      $arg=$call37;
      var $34=$i;
      $j=$34;
      var $35=$c;
      var $conv38=(($35 << 24) >> 24);
      var $cmp39=(($conv38)|0)==99;
      if ($cmp39) { __label__ = 22; break; } else { __label__ = 21; break; }
    case 21: 
      var $36=$c;
      var $tobool41=(($36 << 24) >> 24)!=0;
      if ($tobool41) { __label__ = 26; break; } else { __label__ = 22; break; }
    case 22: 
      var $37=$b;
      var $38=$i;
      var $add_ptr=(($37+$38)|0);
      var $39=$s;
      var $40=$arg;
      var $call43=_is_numeric($40);
      var $tobool44=(($call43)|0)!=0;
      if ($tobool44) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $41=$arg;
      var $call45=_getvar_i($41);
      var $conv46=(($call45)&-1);
      var $conv47=(($conv46 << 24) >> 24);
      var $cond = $conv47;__label__ = 25; break;
    case 24: 
      var $42=$arg;
      var $call48=_getvar_s($42);
      var $43=HEAP8[($call48)];
      var $conv49=(($43 << 24) >> 24);
      var $cond = $conv49;__label__ = 25; break;
    case 25: 
      var $cond;
      var $call50=_sprintf($add_ptr, $39, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$cond,tempInt));
      var $44=$i;
      var $add51=((($44)+($call50))|0);
      $i=$add51;
      __label__ = 30; break;
    case 26: 
      var $45=$c;
      var $conv52=(($45 << 24) >> 24);
      var $cmp53=(($conv52)|0)==115;
      if ($cmp53) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $46=$arg;
      var $call56=_getvar_s($46);
      $s1=$call56;
      var $47=$b;
      var $48=$incr;
      var $49=$i;
      var $add57=((($48)+($49))|0);
      var $50=$s1;
      var $call58=_strlen($50);
      var $add59=((($add57)+($call58))|0);
      var $call60=_qrealloc($47, $add59, $bsize);
      $b=$call60;
      var $51=$b;
      var $52=$i;
      var $add_ptr61=(($51+$52)|0);
      var $53=$s;
      var $54=$s1;
      var $call62=_sprintf($add_ptr61, $53, (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$54,tempInt));
      var $55=$i;
      var $add63=((($55)+($call62))|0);
      $i=$add63;
      __label__ = 29; break;
    case 28: 
      var $56=$b;
      var $57=$i;
      var $add_ptr65=(($56+$57)|0);
      var $58=$incr;
      var $59=$s;
      var $60=$arg;
      var $call66=_getvar_i($60);
      var $call67=_fmt_num($add_ptr65, $58, $59, $call66, 0);
      var $61=$i;
      var $add68=((($61)+($call67))|0);
      $i=$add68;
      __label__ = 29; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $62=$c1;
      var $63=$f;
      HEAP8[($63)]=$62;
      var $64=$i;
      var $65=$j;
      var $cmp71=(($64)|0) < (($65)|0);
      if ($cmp71) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $66=$j;
      $i=$66;
      __label__ = 32; break;
    case 32: 
      __label__ = 3; break;
    case 33: 
      var $67=$fmt;
      _free($67);
      var $68=$v;
      _nvfree($68);
      var $69=$b;
      var $70=$i;
      var $add76=((($70)+(1))|0);
      var $call77=_xrealloc($69, $add76);
      $b=$call77;
      var $71=$i;
      var $72=$b;
      var $arrayidx=(($72+$71)|0);
      HEAP8[($arrayidx)]=0;
      var $73=$b;
      STACKTOP = __stackBase__;
      return $73;
    default: assert(0, "bad label: " + __label__);
  }
}
_awk_printf["X"]=1;

function _copyvar($dest, $src) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $dest_addr;
      var $src_addr;
      $dest_addr=$dest;
      $src_addr=$src;
      var $0=$dest_addr;
      var $1=$src_addr;
      var $cmp=(($0)|0)!=(($1)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $2=$dest_addr;
      var $call=_clrvar($2);
      var $3=$src_addr;
      var $type=(($3)|0);
      var $4=HEAP32[(($type)>>2)];
      var $and=$4 & -31747;
      var $5=$dest_addr;
      var $type1=(($5)|0);
      var $6=HEAP32[(($type1)>>2)];
      var $or=$6 | $and;
      HEAP32[(($type1)>>2)]=$or;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $7=$src_addr;
      var $number=(($7+4)|0);
      var $8=(tempDoubleI32[0]=HEAP32[(($number)>>2)],tempDoubleI32[1]=HEAP32[((($number)+(4))>>2)],tempDoubleF64[0]);
      var $9=$dest_addr;
      var $number2=(($9+4)|0);
      (tempDoubleF64[0]=$8,HEAP32[(($number2)>>2)]=tempDoubleI32[0],HEAP32[((($number2)+(4))>>2)]=tempDoubleI32[1]);
      var $10=$src_addr;
      var $string=(($10+12)|0);
      var $11=HEAP32[(($string)>>2)];
      var $tobool=(($11)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $12=$src_addr;
      var $string4=(($12+12)|0);
      var $13=HEAP32[(($string4)>>2)];
      var $call5=_xstrdup($13);
      var $14=$dest_addr;
      var $string6=(($14+12)|0);
      HEAP32[(($string6)>>2)]=$call5;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $15=$dest_addr;
      _handle_special($15);
      var $16=$dest_addr;
      ;
      return $16;
    default: assert(0, "bad label: " + __label__);
  }
}


function _split_f0() {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $i;
      var $n;
      var $s=__stackBase__;
      var $0=HEAP8[(((_G1+112)|0))];
      var $tobool=(($0 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 9; break;
    case 4: 
      HEAP8[(((_G1+112)|0))]=1;
      var $1=HEAP32[((((_G+92)|0))>>2)];
      _free($1);
      _fsrealloc(0);
      var $2=HEAP32[((((_G+52)|0))>>2)];
      var $call=_getvar_s($2);
      var $call1=_awk_split($call, ((_G+248)|0), ((_G+92)|0));
      $n=$call1;
      var $3=$n;
      _fsrealloc($3);
      var $4=HEAP32[((((_G+92)|0))>>2)];
      HEAP32[(($s)>>2)]=$4;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $5=$i;
      var $6=$n;
      var $cmp=(($5)|0) < (($6)|0);
      if ($cmp) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $call2=_nextword($s);
      var $7=$i;
      var $8=HEAP32[((((_G1+92)|0))>>2)];
      var $arrayidx=(($8+($7)*(20))|0);
      var $string=(($arrayidx+12)|0);
      HEAP32[(($string)>>2)]=$call2;
      var $9=$i;
      var $10=HEAP32[((((_G1+92)|0))>>2)];
      var $arrayidx3=(($10+($9)*(20))|0);
      var $type=(($arrayidx3)|0);
      var $11=HEAP32[(($type)>>2)];
      var $or=$11 | 20992;
      HEAP32[(($type)>>2)]=$or;
      __label__ = 7; break;
    case 7: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      __label__ = 5; break;
    case 8: 
      var $13=HEAP32[((((_G+80)|0))>>2)];
      var $call4=_clrvar($13);
      var $14=HEAP32[((((_G+80)|0))>>2)];
      var $type5=(($14)|0);
      HEAP32[(($type5)>>2)]=1025;
      var $15=HEAP32[((((_G1+84)|0))>>2)];
      var $conv=(($15)|0);
      var $16=HEAP32[((((_G+80)|0))>>2)];
      var $number=(($16+4)|0);
      (tempDoubleF64[0]=$conv,HEAP32[(($number)>>2)]=tempDoubleI32[0],HEAP32[((($number)+(4))>>2)]=tempDoubleI32[1]);
      __label__ = 9; break;
    case 9: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_split_f0["X"]=1;

function _hash_search($hash, $name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $hash_addr;
      var $name_addr;
      var $hi;
      $hash_addr=$hash;
      $name_addr=$name;
      var $0=$name_addr;
      var $call=_hashidx($0);
      var $1=$hash_addr;
      var $csize=(($1+4)|0);
      var $2=HEAP32[(($csize)>>2)];
      var $rem=((($call)>>>0))%((($2)>>>0));
      var $3=$hash_addr;
      var $items=(($3+16)|0);
      var $4=HEAP32[(($items)>>2)];
      var $arrayidx=(($4+($rem<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      $hi=$5;
      __label__ = 3; break;
    case 3: 
      var $6=$hi;
      var $tobool=(($6)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $7=$hi;
      var $name1=(($7+28)|0);
      var $arraydecay=(($name1)|0);
      var $8=$name_addr;
      var $call2=_strcmp($arraydecay, $8);
      var $cmp=(($call2)|0)==0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$hi;
      var $data=(($9)|0);
      var $10=$data;
      $retval=$10;
      __label__ = 8; break;
    case 6: 
      var $11=$hi;
      var $next=(($11+24)|0);
      var $12=HEAP32[(($next)>>2)];
      $hi=$12;
      __label__ = 3; break;
    case 7: 
      $retval=0;
      __label__ = 8; break;
    case 8: 
      var $13=$retval;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _as_regex($op, $preg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $op_addr;
      var $preg_addr;
      var $cflags;
      var $v;
      var $s;
      $op_addr=$op;
      $preg_addr=$preg;
      var $0=$op_addr;
      var $info=(($0)|0);
      var $1=HEAP32[(($info)>>2)];
      var $and=$1 & 65280;
      var $cmp=(($and)|0)==8448;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 3: 
      var $2=HEAP8[(((_G1+108)|0))];
      var $conv=(($2 << 24) >> 24);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $3=$op_addr;
      var $r=(($3+28)|0);
      var $ire=$r;
      var $4=HEAP32[(($ire)>>2)];
      var $cond = $4;__label__ = 6; break;
    case 5: 
      var $5=$op_addr;
      var $l=(($5+8)|0);
      var $re=$l;
      var $6=HEAP32[(($re)>>2)];
      var $cond = $6;__label__ = 6; break;
    case 6: 
      var $cond;
      $retval=$cond;
      __label__ = 10; break;
    case 7: 
      var $call=_nvalloc(1);
      $v=$call;
      var $7=$op_addr;
      var $8=$v;
      var $call1=_evaluate($7, $8);
      var $call2=_getvar_s($call1);
      $s=$call2;
      var $9=HEAP8[(((_G1+108)|0))];
      var $conv3=(($9 << 24) >> 24);
      var $tobool4=(($conv3)|0)!=0;
      var $cond5=$tobool4 ? 3 : 1;
      $cflags=$cond5;
      var $10=$preg_addr;
      var $11=$s;
      var $12=$cflags;
      var $call6=_regcomp($10, $11, $12);
      var $tobool7=(($call6)|0)!=0;
      if ($tobool7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $13=$cflags;
      var $and9=$13 & -2;
      $cflags=$and9;
      var $14=$preg_addr;
      var $15=$s;
      var $16=$cflags;
      _xregcomp($14, $15, $16);
      __label__ = 9; break;
    case 9: 
      var $17=$v;
      _nvfree($17);
      var $18=$preg_addr;
      $retval=$18;
      __label__ = 10; break;
    case 10: 
      var $19=$retval;
      ;
      return $19;
    default: assert(0, "bad label: " + __label__);
  }
}
_as_regex["X"]=1;

function _nvfree($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $v_addr;
      var $p;
      var $n;
      var $w;
      $v_addr=$v;
      var $0=$v_addr;
      var $1=HEAP32[((((_G1+96)|0))>>2)];
      var $nv=(($1+16)|0);
      var $arraydecay=(($nv)|0);
      var $cmp=(($0)>>>0) < (($arraydecay)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $2=$v_addr;
      var $3=HEAP32[((((_G1+96)|0))>>2)];
      var $pos=(($3+4)|0);
      var $4=HEAP32[(($pos)>>2)];
      var $cmp1=(($2)>>>0) >= (($4)>>>0);
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      _syntax_error(((STRING_TABLE._EMSG_INTERNAL_ERROR)|0));
      throw "Reached an unreachable!"
    case 5: 
      var $5=$v_addr;
      $p=$5;
      __label__ = 6; break;
    case 6: 
      var $6=$p;
      var $7=HEAP32[((((_G1+96)|0))>>2)];
      var $pos2=(($7+4)|0);
      var $8=HEAP32[(($pos2)>>2)];
      var $cmp3=(($6)>>>0) < (($8)>>>0);
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 20; break; }
    case 7: 
      var $9=$p;
      var $type=(($9)|0);
      var $10=HEAP32[(($type)>>2)];
      var $and=$10 & 8194;
      var $cmp4=(($and)|0)==2;
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$p;
      var $call=_iamarray($11);
      _clear_array($call);
      var $12=$p;
      var $x=(($12+16)|0);
      var $array=$x;
      var $13=HEAP32[(($array)>>2)];
      var $items=(($13+16)|0);
      var $14=HEAP32[(($items)>>2)];
      var $15=$14;
      _free($15);
      var $16=$p;
      var $x6=(($16+16)|0);
      var $array7=$x6;
      var $17=HEAP32[(($array7)>>2)];
      var $18=$17;
      _free($18);
      __label__ = 9; break;
    case 9: 
      var $19=$p;
      var $type9=(($19)|0);
      var $20=HEAP32[(($type9)>>2)];
      var $and10=$20 & 2048;
      var $tobool=(($and10)|0)!=0;
      if ($tobool) { __label__ = 10; break; } else { __label__ = 18; break; }
    case 10: 
      var $21=$p;
      var $x12=(($21+16)|0);
      var $walker=$x12;
      var $22=HEAP32[(($walker)>>2)];
      $w=$22;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $23=$p;
      var $x13=(($23+16)|0);
      var $walker14=$x13;
      HEAP32[(($walker14)>>2)]=0;
      __label__ = 13; break;
    case 13: 
      var $24=$w;
      var $tobool15=(($24)|0)!=0;
      if ($tobool15) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $25=$w;
      var $prev=(($25+8)|0);
      var $26=HEAP32[(($prev)>>2)];
      $n=$26;
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $27=$w;
      var $28=$27;
      _free($28);
      var $29=$n;
      $w=$29;
      __label__ = 13; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $30=$p;
      var $call19=_clrvar($30);
      __label__ = 19; break;
    case 19: 
      var $31=$p;
      var $incdec_ptr=(($31+20)|0);
      $p=$incdec_ptr;
      __label__ = 6; break;
    case 20: 
      var $32=$v_addr;
      var $33=HEAP32[((((_G1+96)|0))>>2)];
      var $pos20=(($33+4)|0);
      HEAP32[(($pos20)>>2)]=$32;
      __label__ = 21; break;
    case 21: 
      var $34=HEAP32[((((_G1+96)|0))>>2)];
      var $prev22=(($34+8)|0);
      var $35=HEAP32[(($prev22)>>2)];
      var $tobool23=(($35)|0)!=0;
      if ($tobool23) { __label__ = 22; break; } else { var $39 = 0;__label__ = 23; break; }
    case 22: 
      var $36=HEAP32[((((_G1+96)|0))>>2)];
      var $pos24=(($36+4)|0);
      var $37=HEAP32[(($pos24)>>2)];
      var $38=HEAP32[((((_G1+96)|0))>>2)];
      var $nv25=(($38+16)|0);
      var $arraydecay26=(($nv25)|0);
      var $cmp27=(($37)|0)==(($arraydecay26)|0);
      var $39 = $cmp27;__label__ = 23; break;
    case 23: 
      var $39;
      if ($39) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $40=HEAP32[((((_G1+96)|0))>>2)];
      var $prev29=(($40+8)|0);
      var $41=HEAP32[(($prev29)>>2)];
      HEAP32[((((_G1+96)|0))>>2)]=$41;
      __label__ = 21; break;
    case 25: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_nvfree["X"]=1;

function _setvar_p($v, $value) {
  ;
  var __label__;

  var $v_addr;
  var $value_addr;
  $v_addr=$v;
  $value_addr=$value;
  var $0=$v_addr;
  var $call=_clrvar($0);
  var $1=$value_addr;
  var $2=$v_addr;
  var $string=(($2+12)|0);
  HEAP32[(($string)>>2)]=$1;
  var $3=$v_addr;
  _handle_special($3);
  var $4=$v_addr;
  ;
  return $4;
}


function _fsrealloc($size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $size_addr;
      var $i;
      $size_addr=$size;
      var $0=$size_addr;
      var $1=HEAP32[((((_G1+88)|0))>>2)];
      var $cmp=(($0)|0) >= (($1)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 8; break; }
    case 3: 
      var $2=HEAP32[((((_G1+88)|0))>>2)];
      $i=$2;
      var $3=$size_addr;
      var $add=((($3)+(16))|0);
      HEAP32[((((_G1+88)|0))>>2)]=$add;
      var $4=HEAP32[((((_G1+92)|0))>>2)];
      var $5=$4;
      var $6=HEAP32[((((_G1+88)|0))>>2)];
      var $mul=((($6)*(20))|0);
      var $call=_xrealloc($5, $mul);
      var $7=$call;
      HEAP32[((((_G1+92)|0))>>2)]=$7;
      __label__ = 4; break;
    case 4: 
      var $8=$i;
      var $9=HEAP32[((((_G1+88)|0))>>2)];
      var $cmp1=(($8)|0) < (($9)|0);
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $10=$i;
      var $11=HEAP32[((((_G1+92)|0))>>2)];
      var $arrayidx=(($11+($10)*(20))|0);
      var $type=(($arrayidx)|0);
      HEAP32[(($type)>>2)]=1024;
      var $12=$i;
      var $13=HEAP32[((((_G1+92)|0))>>2)];
      var $arrayidx2=(($13+($12)*(20))|0);
      var $string=(($arrayidx2+12)|0);
      HEAP32[(($string)>>2)]=0;
      __label__ = 6; break;
    case 6: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      __label__ = 4; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $15=$size_addr;
      $i=$15;
      __label__ = 9; break;
    case 9: 
      var $16=$i;
      var $17=HEAP32[((((_G1+84)|0))>>2)];
      var $cmp4=(($16)|0) < (($17)|0);
      if ($cmp4) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $18=HEAP32[((((_G1+92)|0))>>2)];
      var $19=$i;
      var $add_ptr=(($18+($19)*(20))|0);
      var $call6=_clrvar($add_ptr);
      __label__ = 11; break;
    case 11: 
      var $20=$i;
      var $inc8=((($20)+(1))|0);
      $i=$inc8;
      __label__ = 9; break;
    case 12: 
      var $21=$size_addr;
      HEAP32[((((_G1+84)|0))>>2)]=$21;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_fsrealloc["X"]=1;

function _is_numeric($v) {
  ;
  var __label__;

  var $v_addr;
  $v_addr=$v;
  var $0=$v_addr;
  var $call=_getvar_i($0);
  var $1=$v_addr;
  var $type=(($1)|0);
  var $2=HEAP32[(($type)>>2)];
  var $xor=$2 ^ 16384;
  var $and=$xor & 16897;
  ;
  return $and;
}


function _mk_splitter($s, $spl) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $spl_addr;
      var $re;
      var $ire;
      var $n;
      $s_addr=$s;
      $spl_addr=$spl;
      var $0=$spl_addr;
      var $re1=(($0+36)|0);
      var $arrayidx=(($re1)|0);
      $re=$arrayidx;
      var $1=$spl_addr;
      var $re2=(($1+36)|0);
      var $arrayidx3=(($re2+16)|0);
      $ire=$arrayidx3;
      var $2=$spl_addr;
      var $n4=(($2)|0);
      $n=$n4;
      var $3=$n;
      var $info=(($3)|0);
      var $4=HEAP32[(($info)>>2)];
      var $and=$4 & 65280;
      var $cmp=(($and)|0)==8448;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$re;
      _regfree($5);
      var $6=$ire;
      _regfree($6);
      __label__ = 4; break;
    case 4: 
      var $7=$s_addr;
      var $arrayidx5=(($7)|0);
      var $8=HEAP8[($arrayidx5)];
      var $conv=(($8 << 24) >> 24);
      var $tobool=(($conv)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 7; break; }
    case 5: 
      var $9=$s_addr;
      var $arrayidx6=(($9+1)|0);
      var $10=HEAP8[($arrayidx6)];
      var $conv7=(($10 << 24) >> 24);
      var $tobool8=(($conv7)|0)!=0;
      if ($tobool8) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $11=$s_addr;
      var $12=$n;
      var $13=$re;
      _mk_re_node($11, $12, $13);
      __label__ = 8; break;
    case 7: 
      var $14=$s_addr;
      var $arrayidx10=(($14)|0);
      var $15=HEAP8[($arrayidx10)];
      var $conv11=(($15 << 24) >> 24);
      var $16=$n;
      var $info12=(($16)|0);
      HEAP32[(($info12)>>2)]=$conv11;
      __label__ = 8; break;
    case 8: 
      var $17=$n;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}
_mk_splitter["X"]=1;

function _exec_builtin($op, $res) {
  var __stackBase__  = STACKTOP; STACKTOP += 92; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $op_addr=__stackBase__;
      var $res_addr;
      var $tv;
      var $an=(__stackBase__)+(4);
      var $av=(__stackBase__)+(20);
      var $as=(__stackBase__)+(36);
      var $pmatch=(__stackBase__)+(52);
      var $sreg=(__stackBase__)+(68);
      var $re;
      var $spl;
      var $isr;
      var $info;
      var $nargs;
      var $tt=(__stackBase__)+(84);
      var $i;
      var $l;
      var $ll;
      var $n;
      var $s=(__stackBase__)+(88);
      var $s1;
      var $s52;
      var $s127;
      var $s1128;
      var $s166;
      HEAP32[(($op_addr)>>2)]=$op;
      $res_addr=$res;
      var $call=_nvalloc(4);
      $tv=$call;
      var $0=HEAP32[(($op_addr)>>2)];
      var $info1=(($0)|0);
      var $1=HEAP32[(($info1)>>2)];
      $info=$1;
      $isr=$1;
      var $2=HEAP32[(($op_addr)>>2)];
      var $l2=(($2+8)|0);
      var $n3=$l2;
      var $3=HEAP32[(($n3)>>2)];
      HEAP32[(($op_addr)>>2)]=$3;
      var $arrayidx=(($av+12)|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $arrayidx4=(($av+8)|0);
      HEAP32[(($arrayidx4)>>2)]=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $4=$i;
      var $cmp=(($4)|0) < 4;
      if ($cmp) { __label__ = 4; break; } else { var $6 = 0;__label__ = 5; break; }
    case 4: 
      var $5=HEAP32[(($op_addr)>>2)];
      var $tobool=(($5)|0)!=0;
      var $6 = $tobool;__label__ = 5; break;
    case 5: 
      var $6;
      if ($6) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $call5=_nextarg($op_addr);
      var $7=$i;
      var $arrayidx6=(($an+($7<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$call5;
      var $8=$isr;
      var $and=$8 & 150994944;
      var $tobool7=(($and)|0)!=0;
      if ($tobool7) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$i;
      var $arrayidx8=(($an+($9<<2))|0);
      var $10=HEAP32[(($arrayidx8)>>2)];
      var $11=$i;
      var $12=$tv;
      var $arrayidx9=(($12+($11)*(20))|0);
      var $call10=_evaluate($10, $arrayidx9);
      var $13=$i;
      var $arrayidx11=(($av+($13<<2))|0);
      HEAP32[(($arrayidx11)>>2)]=$call10;
      __label__ = 8; break;
    case 8: 
      var $14=$isr;
      var $and12=$14 & 134217728;
      var $tobool13=(($and12)|0)!=0;
      if ($tobool13) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$i;
      var $arrayidx15=(($av+($15<<2))|0);
      var $16=HEAP32[(($arrayidx15)>>2)];
      var $call16=_getvar_s($16);
      var $17=$i;
      var $arrayidx17=(($as+($17<<2))|0);
      HEAP32[(($arrayidx17)>>2)]=$call16;
      __label__ = 10; break;
    case 10: 
      var $18=$isr;
      var $shr=$18 >>> 1;
      $isr=$shr;
      __label__ = 11; break;
    case 11: 
      var $19=$i;
      var $inc=((($19)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 12: 
      var $20=$i;
      $nargs=$20;
      var $21=$nargs;
      var $22=$info;
      var $shr19=$22 >>> 30;
      var $cmp20=(($21)>>>0) < (($shr19)>>>0);
      if ($cmp20) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      _syntax_error(((STRING_TABLE._EMSG_TOO_FEW_ARGS)|0));
      throw "Reached an unreachable!"
    case 14: 
      var $23=$info;
      var $and23=$23 & 127;
      $info=$and23;
      var $24=$info;
      if ((($24)|0) == 0) {
        __label__ = 15; break;
      }
      else if ((($24)|0) == 3) {
        __label__ = 16; break;
      }
      else if ((($24)|0) == 4) {
        __label__ = 27; break;
      }
      else if ((($24)|0) == 12) {
        __label__ = 37; break;
      }
      else if ((($24)|0) == 13) {
        __label__ = 38; break;
      }
      else if ((($24)|0) == 14) {
        __label__ = 39; break;
      }
      else if ((($24)|0) == 15) {
        __label__ = 40; break;
      }
      else if ((($24)|0) == 16) {
        __label__ = 41; break;
      }
      else if ((($24)|0) == 17) {
        __label__ = 42; break;
      }
      else if ((($24)|0) == 7 || (($24)|0) == 8) {
        __label__ = 43; break;
      }
      else if ((($24)|0) == 1) {
        __label__ = 52; break;
      }
      else if ((($24)|0) == 5) {
        __label__ = 67; break;
      }
      else if ((($24)|0) == 6) {
        __label__ = 74; break;
      }
      else if ((($24)|0) == 2) {
        __label__ = 75; break;
      }
      else if ((($24)|0) == 9) {
        __label__ = 81; break;
      }
      else if ((($24)|0) == 10) {
        __label__ = 82; break;
      }
      else if ((($24)|0) == 11) {
        __label__ = 83; break;
      }
      else {
      __label__ = 84; break;
      }
      
    case 15: 
      _syntax_error(((STRING_TABLE._EMSG_NO_MATH)|0));
      throw "Reached an unreachable!"
    case 16: 
      var $25=$nargs;
      var $cmp25=(($25)|0) > 2;
      if ($cmp25) { __label__ = 17; break; } else { __label__ = 21; break; }
    case 17: 
      var $arrayidx27=(($an+8)|0);
      var $26=HEAP32[(($arrayidx27)>>2)];
      var $info28=(($26)|0);
      var $27=HEAP32[(($info28)>>2)];
      var $and29=$27 & 65280;
      var $cmp30=(($and29)|0)==8448;
      if ($cmp30) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $arrayidx31=(($an+8)|0);
      var $28=HEAP32[(($arrayidx31)>>2)];
      var $cond = $28;__label__ = 20; break;
    case 19: 
      var $arrayidx32=(($an+8)|0);
      var $29=HEAP32[(($arrayidx32)>>2)];
      var $30=$tv;
      var $arrayidx33=(($30+40)|0);
      var $call34=_evaluate($29, $arrayidx33);
      var $call35=_getvar_s($call34);
      var $call36=_mk_splitter($call35, ((_G+180)|0));
      var $cond = $call36;__label__ = 20; break;
    case 20: 
      var $cond;
      $spl=$cond;
      __label__ = 22; break;
    case 21: 
      $spl=((_G+248)|0);
      __label__ = 22; break;
    case 22: 
      var $arrayidx38=(($as)|0);
      var $31=HEAP32[(($arrayidx38)>>2)];
      var $32=$spl;
      var $call39=_awk_split($31, $32, $s);
      $n=$call39;
      var $33=HEAP32[(($s)>>2)];
      $s1=$33;
      var $arrayidx40=(($av+4)|0);
      var $34=HEAP32[(($arrayidx40)>>2)];
      var $call41=_iamarray($34);
      _clear_array($call41);
      $i=1;
      __label__ = 23; break;
    case 23: 
      var $35=$i;
      var $36=$n;
      var $cmp43=(($35)|0) <= (($36)|0);
      if ($cmp43) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $arrayidx45=(($av+4)|0);
      var $37=HEAP32[(($arrayidx45)>>2)];
      var $38=$i;
      var $call46=_nextword($s);
      _setari_u($37, $38, $call46);
      __label__ = 25; break;
    case 25: 
      var $39=$i;
      var $inc48=((($39)+(1))|0);
      $i=$inc48;
      __label__ = 23; break;
    case 26: 
      var $40=$s1;
      _free($40);
      var $41=$res_addr;
      var $42=$n;
      var $conv=(($42)|0);
      var $call50=_setvar_i($41, $conv);
      __label__ = 84; break;
    case 27: 
      var $arrayidx53=(($as)|0);
      var $43=HEAP32[(($arrayidx53)>>2)];
      var $call54=_strlen($43);
      $l=$call54;
      var $arrayidx55=(($av+4)|0);
      var $44=HEAP32[(($arrayidx55)>>2)];
      var $call56=_getvar_i($44);
      var $sub=($call56)-(1);
      var $conv57=(($sub)&-1);
      $i=$conv57;
      var $45=$i;
      var $46=$l;
      var $cmp58=(($45)|0) > (($46)|0);
      if ($cmp58) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $47=$l;
      $i=$47;
      __label__ = 29; break;
    case 29: 
      var $48=$i;
      var $cmp62=(($48)|0) < 0;
      if ($cmp62) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      $i=0;
      __label__ = 31; break;
    case 31: 
      var $49=$nargs;
      var $cmp66=(($49)|0) > 2;
      if ($cmp66) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $arrayidx69=(($av+8)|0);
      var $50=HEAP32[(($arrayidx69)>>2)];
      var $call70=_getvar_i($50);
      var $cond75 = $call70;__label__ = 34; break;
    case 33: 
      var $51=$l;
      var $52=$i;
      var $sub72=((($51)-($52))|0);
      var $conv73=(($sub72)|0);
      var $cond75 = $conv73;__label__ = 34; break;
    case 34: 
      var $cond75;
      var $conv76=(($cond75)&-1);
      $n=$conv76;
      var $53=$n;
      var $cmp77=(($53)|0) < 0;
      if ($cmp77) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      $n=0;
      __label__ = 36; break;
    case 36: 
      var $arrayidx81=(($as)|0);
      var $54=HEAP32[(($arrayidx81)>>2)];
      var $55=$i;
      var $add_ptr=(($54+$55)|0);
      var $56=$n;
      var $call82=_xstrndup($add_ptr, $56);
      $s52=$call82;
      var $57=$res_addr;
      var $58=$s52;
      var $call83=_setvar_p($57, $58);
      __label__ = 84; break;
    case 37: 
      var $59=$res_addr;
      var $arrayidx85=(($av)|0);
      var $60=HEAP32[(($arrayidx85)>>2)];
      var $call86=_getvar_i_int($60);
      var $arrayidx87=(($av+4)|0);
      var $61=HEAP32[(($arrayidx87)>>2)];
      var $call88=_getvar_i_int($61);
      var $and89=$call86 & $call88;
      var $conv90=(($and89)>>>0);
      var $call91=_setvar_i($59, $conv90);
      __label__ = 84; break;
    case 38: 
      var $62=$res_addr;
      var $arrayidx93=(($av)|0);
      var $63=HEAP32[(($arrayidx93)>>2)];
      var $call94=_getvar_i_int($63);
      var $neg=$call94 ^ -1;
      var $conv95=(($neg)>>>0);
      var $call96=_setvar_i($62, $conv95);
      __label__ = 84; break;
    case 39: 
      var $64=$res_addr;
      var $arrayidx98=(($av)|0);
      var $65=HEAP32[(($arrayidx98)>>2)];
      var $call99=_getvar_i_int($65);
      var $arrayidx100=(($av+4)|0);
      var $66=HEAP32[(($arrayidx100)>>2)];
      var $call101=_getvar_i_int($66);
      var $shl=$call99 << $call101;
      var $conv102=(($shl)>>>0);
      var $call103=_setvar_i($64, $conv102);
      __label__ = 84; break;
    case 40: 
      var $67=$res_addr;
      var $arrayidx105=(($av)|0);
      var $68=HEAP32[(($arrayidx105)>>2)];
      var $call106=_getvar_i_int($68);
      var $arrayidx107=(($av+4)|0);
      var $69=HEAP32[(($arrayidx107)>>2)];
      var $call108=_getvar_i_int($69);
      var $or=$call106 | $call108;
      var $conv109=(($or)>>>0);
      var $call110=_setvar_i($67, $conv109);
      __label__ = 84; break;
    case 41: 
      var $70=$res_addr;
      var $arrayidx112=(($av)|0);
      var $71=HEAP32[(($arrayidx112)>>2)];
      var $call113=_getvar_i_int($71);
      var $arrayidx114=(($av+4)|0);
      var $72=HEAP32[(($arrayidx114)>>2)];
      var $call115=_getvar_i_int($72);
      var $shr116=$call113 >>> (($call115)>>>0);
      var $conv117=(($shr116)>>>0);
      var $call118=_setvar_i($70, $conv117);
      __label__ = 84; break;
    case 42: 
      var $73=$res_addr;
      var $arrayidx120=(($av)|0);
      var $74=HEAP32[(($arrayidx120)>>2)];
      var $call121=_getvar_i_int($74);
      var $arrayidx122=(($av+4)|0);
      var $75=HEAP32[(($arrayidx122)>>2)];
      var $call123=_getvar_i_int($75);
      var $xor=$call121 ^ $call123;
      var $conv124=(($xor)>>>0);
      var $call125=_setvar_i($73, $conv124);
      __label__ = 84; break;
    case 43: 
      var $arrayidx129=(($as)|0);
      var $76=HEAP32[(($arrayidx129)>>2)];
      var $call130=_xstrdup($76);
      $s127=$call130;
      $s1128=$call130;
      __label__ = 44; break;
    case 44: 
      var $77=$s1128;
      var $78=HEAP8[($77)];
      var $tobool131=(($78 << 24) >> 24)!=0;
      if ($tobool131) { __label__ = 45; break; } else { __label__ = 51; break; }
    case 45: 
      var $79=$s1128;
      var $80=HEAP8[($79)];
      var $conv132=(($80 << 24) >> 24);
      var $or133=$conv132 | 32;
      var $sub134=((($or133)-(97))|0);
      var $conv135=(($sub134) & 255);
      var $conv136=(($conv135)&255);
      var $cmp137=(($conv136)|0) <= 25;
      if ($cmp137) { __label__ = 46; break; } else { __label__ = 50; break; }
    case 46: 
      var $81=$info;
      var $cmp140=(($81)|0)==8;
      if ($cmp140) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $82=$s1128;
      var $83=HEAP8[($82)];
      var $conv143=(($83 << 24) >> 24);
      var $and144=$conv143 & 223;
      var $cond149 = $and144;__label__ = 49; break;
    case 48: 
      var $84=$s1128;
      var $85=HEAP8[($84)];
      var $conv146=(($85 << 24) >> 24);
      var $or147=$conv146 | 32;
      var $cond149 = $or147;__label__ = 49; break;
    case 49: 
      var $cond149;
      var $conv150=(($cond149) & 255);
      var $86=$s1128;
      HEAP8[($86)]=$conv150;
      __label__ = 50; break;
    case 50: 
      var $87=$s1128;
      var $incdec_ptr=(($87+1)|0);
      $s1128=$incdec_ptr;
      __label__ = 44; break;
    case 51: 
      var $88=$res_addr;
      var $89=$s127;
      var $call152=_setvar_p($88, $89);
      __label__ = 84; break;
    case 52: 
      $n=0;
      var $arrayidx154=(($as+4)|0);
      var $90=HEAP32[(($arrayidx154)>>2)];
      var $call155=_strlen($90);
      $ll=$call155;
      var $arrayidx156=(($as)|0);
      var $91=HEAP32[(($arrayidx156)>>2)];
      var $call157=_strlen($91);
      var $92=$ll;
      var $sub158=((($call157)-($92))|0);
      $l=$sub158;
      var $93=$ll;
      var $cmp159=(($93)|0) > 0;
      if ($cmp159) { __label__ = 53; break; } else { __label__ = 66; break; }
    case 53: 
      var $94=$l;
      var $cmp161=(($94)|0) >= 0;
      if ($cmp161) { __label__ = 54; break; } else { __label__ = 66; break; }
    case 54: 
      var $95=HEAP8[(((_G1+108)|0))];
      var $tobool164=(($95 << 24) >> 24)!=0;
      if ($tobool164) { __label__ = 58; break; } else { __label__ = 55; break; }
    case 55: 
      var $arrayidx167=(($as)|0);
      var $96=HEAP32[(($arrayidx167)>>2)];
      var $arrayidx168=(($as+4)|0);
      var $97=HEAP32[(($arrayidx168)>>2)];
      var $call169=_strstr($96, $97);
      $s166=$call169;
      var $98=$s166;
      var $tobool170=(($98)|0)!=0;
      if ($tobool170) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $99=$s166;
      var $arrayidx172=(($as)|0);
      var $100=HEAP32[(($arrayidx172)>>2)];
      var $sub_ptr_lhs_cast=$99;
      var $sub_ptr_rhs_cast=$100;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $add=((($sub_ptr_sub)+(1))|0);
      $n=$add;
      __label__ = 57; break;
    case 57: 
      __label__ = 65; break;
    case 58: 
      $i=0;
      __label__ = 59; break;
    case 59: 
      var $101=$i;
      var $102=$l;
      var $cmp176=(($101)|0) <= (($102)|0);
      if ($cmp176) { __label__ = 60; break; } else { __label__ = 64; break; }
    case 60: 
      var $arrayidx179=(($as)|0);
      var $103=HEAP32[(($arrayidx179)>>2)];
      var $104=$i;
      var $add_ptr180=(($103+$104)|0);
      var $arrayidx181=(($as+4)|0);
      var $105=HEAP32[(($arrayidx181)>>2)];
      var $106=$ll;
      var $call182=_strncasecmp($add_ptr180, $105, $106);
      var $cmp183=(($call182)|0)==0;
      if ($cmp183) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $107=$i;
      var $add186=((($107)+(1))|0);
      $n=$add186;
      __label__ = 64; break;
    case 62: 
      __label__ = 63; break;
    case 63: 
      var $108=$i;
      var $inc189=((($108)+(1))|0);
      $i=$inc189;
      __label__ = 59; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $109=$res_addr;
      var $110=$n;
      var $conv193=(($110)|0);
      var $call194=_setvar_i($109, $conv193);
      __label__ = 84; break;
    case 67: 
      var $111=$nargs;
      var $cmp196=(($111)|0) > 1;
      if ($cmp196) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $arrayidx199=(($av+4)|0);
      var $112=HEAP32[(($arrayidx199)>>2)];
      var $call200=_getvar_i($112);
      var $conv201=(($call200)&-1);
      HEAP32[(($tt)>>2)]=$conv201;
      __label__ = 70; break;
    case 69: 
      var $call203=_time($tt);
      __label__ = 70; break;
    case 70: 
      var $113=HEAP32[((((_G1+104)|0))>>2)];
      var $114=$nargs;
      var $cmp205=(($114)|0) > 0;
      if ($cmp205) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $arrayidx208=(($as)|0);
      var $115=HEAP32[(($arrayidx208)>>2)];
      var $cond211 = $115;__label__ = 73; break;
    case 72: 
      var $cond211 = ((STRING_TABLE.__str50)|0);__label__ = 73; break;
    case 73: 
      var $cond211;
      var $call212=_localtime($tt);
      var $call213=_strftime($113, 240, $cond211, $call212);
      $i=$call213;
      var $116=$i;
      var $117=HEAP32[((((_G1+104)|0))>>2)];
      var $arrayidx214=(($117+$116)|0);
      HEAP8[($arrayidx214)]=0;
      var $118=$res_addr;
      var $119=HEAP32[((((_G1+104)|0))>>2)];
      var $call215=_setvar_s($118, $119);
      __label__ = 84; break;
    case 74: 
      var $120=$res_addr;
      var $arrayidx217=(($as)|0);
      var $121=HEAP32[(($arrayidx217)>>2)];
      var $call218=_do_mktime($121);
      var $conv219=(($call218)|0);
      var $call220=_setvar_i($120, $conv219);
      __label__ = 84; break;
    case 75: 
      var $arrayidx222=(($an+4)|0);
      var $122=HEAP32[(($arrayidx222)>>2)];
      var $call223=_as_regex($122, $sreg);
      $re=$call223;
      var $123=$re;
      var $arrayidx224=(($as)|0);
      var $124=HEAP32[(($arrayidx224)>>2)];
      var $arraydecay=(($pmatch)|0);
      var $call225=_regexec($123, $124, 1, $arraydecay, 0);
      $n=$call225;
      var $125=$n;
      var $cmp226=(($125)|0)==0;
      if ($cmp226) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $arrayidx229=(($pmatch)|0);
      var $rm_so=(($arrayidx229)|0);
      var $126=HEAP32[(($rm_so)>>2)];
      var $inc230=((($126)+(1))|0);
      HEAP32[(($rm_so)>>2)]=$inc230;
      var $arrayidx231=(($pmatch)|0);
      var $rm_eo=(($arrayidx231+4)|0);
      var $127=HEAP32[(($rm_eo)>>2)];
      var $inc232=((($127)+(1))|0);
      HEAP32[(($rm_eo)>>2)]=$inc232;
      __label__ = 78; break;
    case 77: 
      var $arrayidx234=(($pmatch)|0);
      var $rm_so235=(($arrayidx234)|0);
      HEAP32[(($rm_so235)>>2)]=0;
      var $arrayidx236=(($pmatch)|0);
      var $rm_eo237=(($arrayidx236+4)|0);
      HEAP32[(($rm_eo237)>>2)]=-1;
      __label__ = 78; break;
    case 78: 
      var $128=HEAP32[((((_G1+60)|0))>>2)];
      var $call239=_hash_find($128, ((STRING_TABLE.__str51)|0));
      var $129=$call239;
      var $arrayidx240=(($pmatch)|0);
      var $rm_so241=(($arrayidx240)|0);
      var $130=HEAP32[(($rm_so241)>>2)];
      var $conv242=(($130)|0);
      var $call243=_setvar_i($129, $conv242);
      var $131=HEAP32[((((_G1+60)|0))>>2)];
      var $call244=_hash_find($131, ((STRING_TABLE.__str52)|0));
      var $132=$call244;
      var $arrayidx245=(($pmatch)|0);
      var $rm_eo246=(($arrayidx245+4)|0);
      var $133=HEAP32[(($rm_eo246)>>2)];
      var $arrayidx247=(($pmatch)|0);
      var $rm_so248=(($arrayidx247)|0);
      var $134=HEAP32[(($rm_so248)>>2)];
      var $sub249=((($133)-($134))|0);
      var $conv250=(($sub249)|0);
      var $call251=_setvar_i($132, $conv250);
      var $135=$res_addr;
      var $arrayidx252=(($pmatch)|0);
      var $rm_so253=(($arrayidx252)|0);
      var $136=HEAP32[(($rm_so253)>>2)];
      var $conv254=(($136)|0);
      var $call255=_setvar_i($135, $conv254);
      var $137=$re;
      var $cmp256=(($137)|0)==(($sreg)|0);
      if ($cmp256) { __label__ = 79; break; } else { __label__ = 80; break; }
    case 79: 
      var $138=$re;
      _regfree($138);
      __label__ = 80; break;
    case 80: 
      __label__ = 84; break;
    case 81: 
      var $arrayidx261=(($an)|0);
      var $139=HEAP32[(($arrayidx261)>>2)];
      var $arrayidx262=(($as+4)|0);
      var $140=HEAP32[(($arrayidx262)>>2)];
      var $arrayidx263=(($av+8)|0);
      var $141=HEAP32[(($arrayidx263)>>2)];
      var $call264=_getvar_i($141);
      var $conv265=(($call264)&-1);
      var $arrayidx266=(($av+12)|0);
      var $142=HEAP32[(($arrayidx266)>>2)];
      var $143=$res_addr;
      var $call267=_awk_sub($139, $140, $conv265, $142, $143, 1);
      __label__ = 84; break;
    case 82: 
      var $144=$res_addr;
      var $arrayidx269=(($an)|0);
      var $145=HEAP32[(($arrayidx269)>>2)];
      var $arrayidx270=(($as+4)|0);
      var $146=HEAP32[(($arrayidx270)>>2)];
      var $arrayidx271=(($av+8)|0);
      var $147=HEAP32[(($arrayidx271)>>2)];
      var $arrayidx272=(($av+8)|0);
      var $148=HEAP32[(($arrayidx272)>>2)];
      var $call273=_awk_sub($145, $146, 0, $147, $148, 0);
      var $conv274=(($call273)|0);
      var $call275=_setvar_i($144, $conv274);
      __label__ = 84; break;
    case 83: 
      var $149=$res_addr;
      var $arrayidx277=(($an)|0);
      var $150=HEAP32[(($arrayidx277)>>2)];
      var $arrayidx278=(($as+4)|0);
      var $151=HEAP32[(($arrayidx278)>>2)];
      var $arrayidx279=(($av+8)|0);
      var $152=HEAP32[(($arrayidx279)>>2)];
      var $arrayidx280=(($av+8)|0);
      var $153=HEAP32[(($arrayidx280)>>2)];
      var $call281=_awk_sub($150, $151, 1, $152, $153, 0);
      var $conv282=(($call281)|0);
      var $call283=_setvar_i($149, $conv282);
      __label__ = 84; break;
    case 84: 
      var $154=$tv;
      _nvfree($154);
      var $155=$res_addr;
      STACKTOP = __stackBase__;
      return $155;
    default: assert(0, "bad label: " + __label__);
  }
}
_exec_builtin["X"]=1;

function _hashidx($name) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $name_addr;
      var $idx;
      $name_addr=$name;
      $idx=0;
      __label__ = 3; break;
    case 3: 
      var $0=$name_addr;
      var $1=HEAP8[($0)];
      var $tobool=(($1 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $2=$name_addr;
      var $incdec_ptr=(($2+1)|0);
      $name_addr=$incdec_ptr;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $4=$idx;
      var $shl=$4 << 6;
      var $add=((($conv)+($shl))|0);
      var $5=$idx;
      var $sub=((($add)-($5))|0);
      $idx=$sub;
      __label__ = 3; break;
    case 5: 
      var $6=$idx;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _awk_split($s, $spl, $slist) {
  var __stackBase__  = STACKTOP; STACKTOP += 24; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $s_addr;
      var $spl_addr;
      var $slist_addr;
      var $l;
      var $n;
      var $c=__stackBase__;
      var $s1=(__stackBase__)+(4);
      var $pmatch=(__stackBase__)+(8);
      $s_addr=$s;
      $spl_addr=$spl;
      $slist_addr=$slist;
      var $0=$s_addr;
      var $call=_strlen($0);
      var $mul=((($call<<1))|0);
      var $add=((($mul)+(3))|0);
      var $call1=_xzalloc($add);
      HEAP32[(($s1)>>2)]=$call1;
      var $1=$slist_addr;
      HEAP32[(($1)>>2)]=$call1;
      var $2=HEAP32[(($s1)>>2)];
      var $3=$s_addr;
      var $call2=_strcpy($2, $3);
      var $4=$spl_addr;
      var $info=(($4)|0);
      var $5=HEAP32[(($info)>>2)];
      var $conv=(($5) & 255);
      var $arrayidx=(($c+1)|0);
      HEAP8[($arrayidx)]=$conv;
      var $arrayidx3=(($c)|0);
      HEAP8[($arrayidx3)]=$conv;
      var $arrayidx4=(($c+3)|0);
      HEAP8[($arrayidx4)]=0;
      var $arrayidx5=(($c+2)|0);
      HEAP8[($arrayidx5)]=0;
      var $6=HEAP32[((((_G+36)|0))>>2)];
      var $call6=_getvar_s($6);
      var $7=HEAP8[($call6)];
      var $conv7=(($7 << 24) >> 24);
      var $cmp=(($conv7)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $arrayidx9=(($c+2)|0);
      HEAP8[($arrayidx9)]=10;
      __label__ = 4; break;
    case 4: 
      $n=0;
      var $8=$spl_addr;
      var $info10=(($8)|0);
      var $9=HEAP32[(($info10)>>2)];
      var $and=$9 & 65280;
      var $cmp11=(($and)|0)==8448;
      if ($cmp11) { __label__ = 5; break; } else { __label__ = 25; break; }
    case 5: 
      var $10=$s_addr;
      var $11=HEAP8[($10)];
      var $tobool=(($11 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 6; break; }
    case 6: 
      var $12=$n;
      $retval=$12;
      __label__ = 50; break;
    case 7: 
      var $13=$n;
      var $inc=((($13)+(1))|0);
      $n=$inc;
      __label__ = 8; break;
    case 8: 
      var $14=$s_addr;
      var $arraydecay=(($c)|0);
      var $add_ptr=(($arraydecay+2)|0);
      var $call16=_strcspn($14, $add_ptr);
      $l=$call16;
      var $15=HEAP8[(((_G1+108)|0))];
      var $conv17=(($15 << 24) >> 24);
      var $tobool18=(($conv17)|0)!=0;
      if ($tobool18) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $16=$spl_addr;
      var $r=(($16+28)|0);
      var $ire=$r;
      var $17=HEAP32[(($ire)>>2)];
      var $cond = $17;__label__ = 11; break;
    case 10: 
      var $18=$spl_addr;
      var $l19=(($18+8)|0);
      var $re=$l19;
      var $19=HEAP32[(($re)>>2)];
      var $cond = $19;__label__ = 11; break;
    case 11: 
      var $cond;
      var $20=$s_addr;
      var $arraydecay20=(($pmatch)|0);
      var $call21=_regexec($cond, $20, 1, $arraydecay20, 0);
      var $cmp22=(($call21)|0)==0;
      if ($cmp22) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $arrayidx24=(($pmatch)|0);
      var $rm_so=(($arrayidx24)|0);
      var $21=HEAP32[(($rm_so)>>2)];
      var $22=$l;
      var $cmp25=(($21)|0) <= (($22)|0);
      if ($cmp25) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $arrayidx28=(($pmatch)|0);
      var $rm_so29=(($arrayidx28)|0);
      var $23=HEAP32[(($rm_so29)>>2)];
      $l=$23;
      var $arrayidx30=(($pmatch)|0);
      var $rm_eo=(($arrayidx30+4)|0);
      var $24=HEAP32[(($rm_eo)>>2)];
      var $cmp31=(($24)|0)==0;
      if ($cmp31) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $25=$l;
      var $inc34=((($25)+(1))|0);
      $l=$inc34;
      var $arrayidx35=(($pmatch)|0);
      var $rm_eo36=(($arrayidx35+4)|0);
      var $26=HEAP32[(($rm_eo36)>>2)];
      var $inc37=((($26)+(1))|0);
      HEAP32[(($rm_eo36)>>2)]=$inc37;
      __label__ = 15; break;
    case 15: 
      var $27=$n;
      var $inc39=((($27)+(1))|0);
      $n=$inc39;
      __label__ = 19; break;
    case 16: 
      var $28=$l;
      var $arrayidx40=(($pmatch)|0);
      var $rm_eo41=(($arrayidx40+4)|0);
      HEAP32[(($rm_eo41)>>2)]=$28;
      var $29=$l;
      var $30=$s_addr;
      var $arrayidx42=(($30+$29)|0);
      var $31=HEAP8[($arrayidx42)];
      var $tobool43=(($31 << 24) >> 24)!=0;
      if ($tobool43) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $arrayidx45=(($pmatch)|0);
      var $rm_eo46=(($arrayidx45+4)|0);
      var $32=HEAP32[(($rm_eo46)>>2)];
      var $inc47=((($32)+(1))|0);
      HEAP32[(($rm_eo46)>>2)]=$inc47;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $33=HEAP32[(($s1)>>2)];
      var $34=$s_addr;
      var $35=$l;
      assert($35 % 1 === 0, 'memcpy given ' + $35 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($33, $34, $35, 1);
      __label__ = 20; break;
    case 20: 
      var $36=$l;
      var $37=HEAP32[(($s1)>>2)];
      var $arrayidx51=(($37+$36)|0);
      HEAP8[($arrayidx51)]=0;
      __label__ = 21; break;
    case 21: 
      var $38=$l;
      var $inc52=((($38)+(1))|0);
      $l=$inc52;
      var $arrayidx53=(($pmatch)|0);
      var $rm_eo54=(($arrayidx53+4)|0);
      var $39=HEAP32[(($rm_eo54)>>2)];
      var $cmp55=(($inc52)|0) < (($39)|0);
      if ($cmp55) { __label__ = 20; break; } else { __label__ = 22; break; }
    case 22: 
      var $call57=_nextword($s1);
      var $arrayidx58=(($pmatch)|0);
      var $rm_eo59=(($arrayidx58+4)|0);
      var $40=HEAP32[(($rm_eo59)>>2)];
      var $41=$s_addr;
      var $add_ptr60=(($41+$40)|0);
      $s_addr=$add_ptr60;
      __label__ = 23; break;
    case 23: 
      var $42=$s_addr;
      var $43=HEAP8[($42)];
      var $tobool62=(($43 << 24) >> 24)!=0;
      if ($tobool62) { __label__ = 8; break; } else { __label__ = 24; break; }
    case 24: 
      var $44=$n;
      $retval=$44;
      __label__ = 50; break;
    case 25: 
      var $arrayidx65=(($c)|0);
      var $45=HEAP8[($arrayidx65)];
      var $conv66=(($45 << 24) >> 24);
      var $cmp67=(($conv66)|0)==0;
      if ($cmp67) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $46=$s_addr;
      var $47=HEAP8[($46)];
      var $tobool70=(($47 << 24) >> 24)!=0;
      if ($tobool70) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $48=$s_addr;
      var $incdec_ptr=(($48+1)|0);
      $s_addr=$incdec_ptr;
      var $49=HEAP8[($48)];
      var $50=HEAP32[(($s1)>>2)];
      var $incdec_ptr71=(($50+1)|0);
      HEAP32[(($s1)>>2)]=$incdec_ptr71;
      HEAP8[($50)]=$49;
      var $51=HEAP32[(($s1)>>2)];
      var $incdec_ptr72=(($51+1)|0);
      HEAP32[(($s1)>>2)]=$incdec_ptr72;
      HEAP8[($51)]=0;
      var $52=$n;
      var $inc73=((($52)+(1))|0);
      $n=$inc73;
      __label__ = 27; break;
    case 29: 
      var $53=$n;
      $retval=$53;
      __label__ = 50; break;
    case 30: 
      var $arrayidx75=(($c)|0);
      var $54=HEAP8[($arrayidx75)];
      var $conv76=(($54 << 24) >> 24);
      var $cmp77=(($conv76)|0)!=32;
      if ($cmp77) { __label__ = 31; break; } else { __label__ = 39; break; }
    case 31: 
      var $55=HEAP8[(((_G1+108)|0))];
      var $tobool80=(($55 << 24) >> 24)!=0;
      if ($tobool80) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $arrayidx82=(($c)|0);
      var $56=HEAP8[($arrayidx82)];
      var $conv83=(($56 << 24) >> 24);
      var $call84=_toupper($conv83);
      var $conv85=(($call84) & 255);
      var $arrayidx86=(($c)|0);
      HEAP8[($arrayidx86)]=$conv85;
      var $arrayidx87=(($c+1)|0);
      var $57=HEAP8[($arrayidx87)];
      var $conv88=(($57 << 24) >> 24);
      var $call89=_tolower($conv88);
      var $conv90=(($call89) & 255);
      var $arrayidx91=(($c+1)|0);
      HEAP8[($arrayidx91)]=$conv90;
      __label__ = 33; break;
    case 33: 
      var $58=HEAP32[(($s1)>>2)];
      var $59=HEAP8[($58)];
      var $tobool93=(($59 << 24) >> 24)!=0;
      if ($tobool93) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $60=$n;
      var $inc95=((($60)+(1))|0);
      $n=$inc95;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $61=HEAP32[(($s1)>>2)];
      var $arraydecay98=(($c)|0);
      var $call99=_strpbrk($61, $arraydecay98);
      HEAP32[(($s1)>>2)]=$call99;
      var $cmp100=(($call99)|0)!=0;
      if ($cmp100) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $62=HEAP32[(($s1)>>2)];
      var $incdec_ptr103=(($62+1)|0);
      HEAP32[(($s1)>>2)]=$incdec_ptr103;
      HEAP8[($62)]=0;
      var $63=$n;
      var $inc104=((($63)+(1))|0);
      $n=$inc104;
      __label__ = 36; break;
    case 38: 
      var $64=$n;
      $retval=$64;
      __label__ = 50; break;
    case 39: 
      __label__ = 40; break;
    case 40: 
      var $65=$s_addr;
      var $66=HEAP8[($65)];
      var $tobool108=(($66 << 24) >> 24)!=0;
      if ($tobool108) { __label__ = 41; break; } else { __label__ = 49; break; }
    case 41: 
      var $67=$s_addr;
      var $call110=_skip_whitespace($67);
      $s_addr=$call110;
      var $68=$s_addr;
      var $69=HEAP8[($68)];
      var $tobool111=(($69 << 24) >> 24)!=0;
      if ($tobool111) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      __label__ = 49; break;
    case 43: 
      var $70=$n;
      var $inc114=((($70)+(1))|0);
      $n=$inc114;
      __label__ = 44; break;
    case 44: 
      var $71=$s_addr;
      var $72=HEAP8[($71)];
      var $conv116=(($72 << 24) >> 24);
      var $tobool117=(($conv116)|0)!=0;
      if ($tobool117) { __label__ = 45; break; } else { var $75 = 0;__label__ = 46; break; }
    case 45: 
      var $73=$s_addr;
      var $74=HEAP8[($73)];
      var $conv118=(($74 << 24) >> 24);
      var $call119=_isspace($conv118);
      var $tobool120=(($call119)|0)!=0;
      var $lnot=$tobool120 ^ 1;
      var $75 = $lnot;__label__ = 46; break;
    case 46: 
      var $75;
      if ($75) { __label__ = 47; break; } else { __label__ = 48; break; }
    case 47: 
      var $76=$s_addr;
      var $incdec_ptr122=(($76+1)|0);
      $s_addr=$incdec_ptr122;
      var $77=HEAP8[($76)];
      var $78=HEAP32[(($s1)>>2)];
      var $incdec_ptr123=(($78+1)|0);
      HEAP32[(($s1)>>2)]=$incdec_ptr123;
      HEAP8[($78)]=$77;
      __label__ = 44; break;
    case 48: 
      var $79=HEAP32[(($s1)>>2)];
      var $incdec_ptr125=(($79+1)|0);
      HEAP32[(($s1)>>2)]=$incdec_ptr125;
      HEAP8[($79)]=0;
      __label__ = 40; break;
    case 49: 
      var $80=$n;
      $retval=$80;
      __label__ = 50; break;
    case 50: 
      var $81=$retval;
      STACKTOP = __stackBase__;
      return $81;
    default: assert(0, "bad label: " + __label__);
  }
}
_awk_split["X"]=1;

function _getvar_i_int($v) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $v_addr;
      var $d;
      $v_addr=$v;
      var $0=$v_addr;
      var $call=_getvar_i($0);
      $d=$call;
      var $1=$d;
      var $cmp=$1 >= 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$d;
      var $conv=($2 >= 0 ? Math.floor($2) : Math.ceil($2));
      $retval=$conv;
      __label__ = 5; break;
    case 4: 
      var $3=$d;
      var $sub=(-$3);
      var $conv1=($sub >= 0 ? Math.floor($sub) : Math.ceil($sub));
      var $sub2=(((-$conv1))|0);
      $retval=$sub2;
      __label__ = 5; break;
    case 5: 
      var $4=$retval;
      ;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _do_mktime($ds) {
  var __stackBase__  = STACKTOP; STACKTOP += 44; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $ds_addr;
      var $then=__stackBase__;
      var $count;
      $ds_addr=$ds;
      var $tm_isdst=(($then+32)|0);
      HEAP32[(($tm_isdst)>>2)]=-1;
      var $0=$ds_addr;
      var $tm_year=(($then+20)|0);
      var $tm_mon=(($then+16)|0);
      var $tm_mday=(($then+12)|0);
      var $tm_hour=(($then+8)|0);
      var $tm_min=(($then+4)|0);
      var $tm_sec=(($then)|0);
      var $tm_isdst1=(($then+32)|0);
      var $call=_sscanf($0, ((STRING_TABLE.__str53)|0), (tempInt=STACKTOP,STACKTOP += 28,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$tm_year,HEAP32[(((tempInt)+(4))>>2)]=$tm_mon,HEAP32[(((tempInt)+(8))>>2)]=$tm_mday,HEAP32[(((tempInt)+(12))>>2)]=$tm_hour,HEAP32[(((tempInt)+(16))>>2)]=$tm_min,HEAP32[(((tempInt)+(20))>>2)]=$tm_sec,HEAP32[(((tempInt)+(24))>>2)]=$tm_isdst1,tempInt));
      $count=$call;
      var $1=$count;
      var $cmp=(($1)|0) < 6;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 3; break; }
    case 3: 
      var $tm_mon2=(($then+16)|0);
      var $2=HEAP32[(($tm_mon2)>>2)];
      var $cmp3=(($2)>>>0) < 1;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $tm_year5=(($then+20)|0);
      var $3=HEAP32[(($tm_year5)>>2)];
      var $cmp6=(($3)>>>0) < 1900;
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=-1;
      __label__ = 7; break;
    case 6: 
      var $tm_mon7=(($then+16)|0);
      var $4=HEAP32[(($tm_mon7)>>2)];
      var $sub=((($4)-(1))|0);
      HEAP32[(($tm_mon7)>>2)]=$sub;
      var $tm_year8=(($then+20)|0);
      var $5=HEAP32[(($tm_year8)>>2)];
      var $sub9=((($5)-(1900))|0);
      HEAP32[(($tm_year8)>>2)]=$sub9;
      var $call10=_mktime($then);
      $retval=$call10;
      __label__ = 7; break;
    case 7: 
      var $6=$retval;
      STACKTOP = __stackBase__;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _awk_sub($rn, $repl, $nm, $src, $dest, $subexp) {
  var __stackBase__  = STACKTOP; STACKTOP += 100; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $rn_addr;
      var $repl_addr;
      var $nm_addr;
      var $src_addr;
      var $dest_addr;
      var $subexp_addr;
      var $resbuf;
      var $sp;
      var $match_no;
      var $residx;
      var $replen;
      var $resbufsize=__stackBase__;
      var $regexec_flags;
      var $pmatch=(__stackBase__)+(4);
      var $sreg=(__stackBase__)+(84);
      var $regex;
      var $so;
      var $eo;
      var $s;
      var $nbs;
      var $c;
      var $j;
      var $n;
      $rn_addr=$rn;
      $repl_addr=$repl;
      $nm_addr=$nm;
      $src_addr=$src;
      $dest_addr=$dest;
      $subexp_addr=$subexp;
      $resbuf=0;
      $residx=0;
      $match_no=0;
      $regexec_flags=0;
      var $0=$rn_addr;
      var $call=_as_regex($0, $sreg);
      $regex=$call;
      var $1=$src_addr;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$src_addr;
      var $cond = $2;__label__ = 5; break;
    case 4: 
      var $3=HEAP32[((((_G+52)|0))>>2)];
      var $cond = $3;__label__ = 5; break;
    case 5: 
      var $cond;
      var $call1=_getvar_s($cond);
      $sp=$call1;
      var $4=$repl_addr;
      var $call2=_strlen($4);
      $replen=$call2;
      __label__ = 6; break;
    case 6: 
      var $5=$regex;
      var $6=$sp;
      var $arraydecay=(($pmatch)|0);
      var $7=$regexec_flags;
      var $call3=_regexec($5, $6, 10, $arraydecay, $7);
      var $cmp=(($call3)|0)==0;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 32; break; }
    case 7: 
      var $arrayidx=(($pmatch)|0);
      var $rm_so=(($arrayidx)|0);
      var $8=HEAP32[(($rm_so)>>2)];
      $so=$8;
      var $arrayidx4=(($pmatch)|0);
      var $rm_eo=(($arrayidx4+4)|0);
      var $9=HEAP32[(($rm_eo)>>2)];
      $eo=$9;
      var $10=$resbuf;
      var $11=$residx;
      var $12=$eo;
      var $add=((($11)+($12))|0);
      var $13=$replen;
      var $add5=((($add)+($13))|0);
      var $call6=_qrealloc($10, $add5, $resbufsize);
      $resbuf=$call6;
      var $14=$resbuf;
      var $15=$residx;
      var $add_ptr=(($14+$15)|0);
      var $16=$sp;
      var $17=$eo;
      assert($17 % 1 === 0, 'memcpy given ' + $17 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr, $16, $17, 1);
      var $18=$eo;
      var $19=$residx;
      var $add7=((($19)+($18))|0);
      $residx=$add7;
      var $20=$match_no;
      var $inc=((($20)+(1))|0);
      $match_no=$inc;
      var $21=$nm_addr;
      var $cmp8=(($inc)|0) >= (($21)|0);
      if ($cmp8) { __label__ = 8; break; } else { __label__ = 25; break; }
    case 8: 
      var $22=$eo;
      var $23=$so;
      var $sub=((($22)-($23))|0);
      var $24=$residx;
      var $sub9=((($24)-($sub))|0);
      $residx=$sub9;
      $nbs=0;
      var $25=$repl_addr;
      $s=$25;
      __label__ = 9; break;
    case 9: 
      var $26=$s;
      var $27=HEAP8[($26)];
      var $tobool10=(($27 << 24) >> 24)!=0;
      if ($tobool10) { __label__ = 10; break; } else { __label__ = 24; break; }
    case 10: 
      var $28=$s;
      var $29=HEAP8[($28)];
      var $30=$residx;
      var $inc11=((($30)+(1))|0);
      $residx=$inc11;
      var $31=$resbuf;
      var $arrayidx12=(($31+$30)|0);
      HEAP8[($arrayidx12)]=$29;
      $c=$29;
      var $32=$c;
      var $conv=(($32 << 24) >> 24);
      var $cmp13=(($conv)|0)==92;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $33=$nbs;
      var $inc16=((($33)+(1))|0);
      $nbs=$inc16;
      __label__ = 23; break;
    case 12: 
      var $34=$c;
      var $conv17=(($34 << 24) >> 24);
      var $cmp18=(($conv17)|0)==38;
      if ($cmp18) { __label__ = 16; break; } else { __label__ = 13; break; }
    case 13: 
      var $35=$subexp_addr;
      var $tobool20=(($35)|0)!=0;
      if ($tobool20) { __label__ = 14; break; } else { __label__ = 22; break; }
    case 14: 
      var $36=$c;
      var $conv21=(($36 << 24) >> 24);
      var $cmp22=(($conv21)|0) >= 48;
      if ($cmp22) { __label__ = 15; break; } else { __label__ = 22; break; }
    case 15: 
      var $37=$c;
      var $conv25=(($37 << 24) >> 24);
      var $cmp26=(($conv25)|0) <= 57;
      if ($cmp26) { __label__ = 16; break; } else { __label__ = 22; break; }
    case 16: 
      var $38=$nbs;
      var $add29=((($38)+(3))|0);
      var $shr=$add29 >> 1;
      var $39=$residx;
      var $sub30=((($39)-($shr))|0);
      $residx=$sub30;
      $j=0;
      var $40=$c;
      var $conv31=(($40 << 24) >> 24);
      var $cmp32=(($conv31)|0)!=38;
      if ($cmp32) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $41=$c;
      var $conv35=(($41 << 24) >> 24);
      var $sub36=((($conv35)-(48))|0);
      $j=$sub36;
      var $42=$nbs;
      var $inc37=((($42)+(1))|0);
      $nbs=$inc37;
      __label__ = 18; break;
    case 18: 
      var $43=$nbs;
      var $rem=((($43)|0))%(2);
      var $tobool39=(($rem)|0)!=0;
      if ($tobool39) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $44=$c;
      var $45=$residx;
      var $inc41=((($45)+(1))|0);
      $residx=$inc41;
      var $46=$resbuf;
      var $arrayidx42=(($46+$45)|0);
      HEAP8[($arrayidx42)]=$44;
      __label__ = 21; break;
    case 20: 
      var $47=$j;
      var $arrayidx43=(($pmatch+($47<<3))|0);
      var $rm_eo44=(($arrayidx43+4)|0);
      var $48=HEAP32[(($rm_eo44)>>2)];
      var $49=$j;
      var $arrayidx45=(($pmatch+($49<<3))|0);
      var $rm_so46=(($arrayidx45)|0);
      var $50=HEAP32[(($rm_so46)>>2)];
      var $sub47=((($48)-($50))|0);
      $n=$sub47;
      var $51=$resbuf;
      var $52=$residx;
      var $53=$replen;
      var $add48=((($52)+($53))|0);
      var $54=$n;
      var $add49=((($add48)+($54))|0);
      var $call50=_qrealloc($51, $add49, $resbufsize);
      $resbuf=$call50;
      var $55=$resbuf;
      var $56=$residx;
      var $add_ptr51=(($55+$56)|0);
      var $57=$sp;
      var $58=$j;
      var $arrayidx52=(($pmatch+($58<<3))|0);
      var $rm_so53=(($arrayidx52)|0);
      var $59=HEAP32[(($rm_so53)>>2)];
      var $add_ptr54=(($57+$59)|0);
      var $60=$n;
      assert($60 % 1 === 0, 'memcpy given ' + $60 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($add_ptr51, $add_ptr54, $60, 1);
      var $61=$n;
      var $62=$residx;
      var $add55=((($62)+($61))|0);
      $residx=$add55;
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      $nbs=0;
      __label__ = 23; break;
    case 23: 
      var $63=$s;
      var $incdec_ptr=(($63+1)|0);
      $s=$incdec_ptr;
      __label__ = 9; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      $regexec_flags=1;
      var $64=$eo;
      var $65=$sp;
      var $add_ptr59=(($65+$64)|0);
      $sp=$add_ptr59;
      var $66=$match_no;
      var $67=$nm_addr;
      var $cmp60=(($66)|0)==(($67)|0);
      if ($cmp60) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 32; break;
    case 27: 
      var $68=$eo;
      var $69=$so;
      var $cmp64=(($68)|0)==(($69)|0);
      if ($cmp64) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $70=$sp;
      var $71=HEAP8[($70)];
      var $72=$residx;
      var $73=$resbuf;
      var $arrayidx67=(($73+$72)|0);
      HEAP8[($arrayidx67)]=$71;
      var $74=$sp;
      var $75=HEAP8[($74)];
      var $conv68=(($75 << 24) >> 24);
      var $cmp69=(($conv68)|0)==0;
      if ($cmp69) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      __label__ = 33; break;
    case 30: 
      var $76=$sp;
      var $incdec_ptr73=(($76+1)|0);
      $sp=$incdec_ptr73;
      var $77=$residx;
      var $inc74=((($77)+(1))|0);
      $residx=$inc74;
      __label__ = 31; break;
    case 31: 
      __label__ = 6; break;
    case 32: 
      var $78=$resbuf;
      var $79=$residx;
      var $80=$sp;
      var $call76=_strlen($80);
      var $add77=((($79)+($call76))|0);
      var $call78=_qrealloc($78, $add77, $resbufsize);
      $resbuf=$call78;
      var $81=$resbuf;
      var $82=$residx;
      var $add_ptr79=(($81+$82)|0);
      var $83=$sp;
      var $call80=_strcpy($add_ptr79, $83);
      __label__ = 33; break;
    case 33: 
      var $84=$dest_addr;
      var $tobool81=(($84)|0)!=0;
      if ($tobool81) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $85=$dest_addr;
      var $cond85 = $85;__label__ = 36; break;
    case 35: 
      var $86=HEAP32[((((_G+52)|0))>>2)];
      var $cond85 = $86;__label__ = 36; break;
    case 36: 
      var $cond85;
      var $87=$resbuf;
      var $call86=_setvar_p($cond85, $87);
      var $88=$regex;
      var $cmp87=(($88)|0)==(($sreg)|0);
      if ($cmp87) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $89=$regex;
      _regfree($89);
      __label__ = 38; break;
    case 38: 
      var $90=$match_no;
      STACKTOP = __stackBase__;
      return $90;
    default: assert(0, "bad label: " + __label__);
  }
}
_awk_sub["X"]=1;

function _mk_re_node($s, $n, $re) {
  ;
  var __label__;

  var $s_addr;
  var $n_addr;
  var $re_addr;
  $s_addr=$s;
  $n_addr=$n;
  $re_addr=$re;
  var $0=$n_addr;
  var $info=(($0)|0);
  HEAP32[(($info)>>2)]=8448;
  var $1=$re_addr;
  var $2=$n_addr;
  var $l=(($2+8)|0);
  var $re1=$l;
  HEAP32[(($re1)>>2)]=$1;
  var $3=$re_addr;
  var $add_ptr=(($3+16)|0);
  var $4=$n_addr;
  var $r=(($4+28)|0);
  var $ire=$r;
  HEAP32[(($ire)>>2)]=$add_ptr;
  var $5=$re_addr;
  var $6=$s_addr;
  _xregcomp($5, $6, 1);
  var $7=$re_addr;
  var $add_ptr2=(($7+16)|0);
  var $8=$s_addr;
  _xregcomp($add_ptr2, $8, 3);
  ;
  return;
}


function _setvar_u($v, $value) {
  ;
  var __label__;

  var $v_addr;
  var $value_addr;
  $v_addr=$v;
  $value_addr=$value;
  var $0=$v_addr;
  var $1=$value_addr;
  var $call=_setvar_s($0, $1);
  $v_addr=$call;
  var $2=$v_addr;
  var $type=(($2)|0);
  var $3=HEAP32[(($type)>>2)];
  var $or=$3 | 512;
  HEAP32[(($type)>>2)]=$or;
  var $4=$v_addr;
  ;
  return $4;
}


function _chain_notification($type, $prev) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $type_addr;
      var $prev_addr;
      var $n;
      $type_addr=$type;
      $prev_addr=$prev;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $call=_chain_node(16384);
      $n=$call;
      var $0=$type_addr;
      var $1=$n;
      var $l=(($1+8)|0);
      var $nt=$l;
      var $type1=(($nt)|0);
      HEAP32[(($type1)>>2)]=$0;
      var $2=$prev_addr;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $3=HEAP32[((((_G1+80)|0))>>2)];
      var $4=$n;
      var $l2=(($4+8)|0);
      var $nt3=$l2;
      var $start_line=(($nt3+4)|0);
      HEAP32[(($start_line)>>2)]=$3;
      var $5=HEAP32[((((_G1+116)|0))>>2)];
      var $6=$n;
      var $l4=(($6+8)|0);
      var $nt5=$l4;
      var $start_char_pos=(($nt5+8)|0);
      HEAP32[(($start_char_pos)>>2)]=$5;
      var $7=$n;
      var $l6=(($7+8)|0);
      var $nt7=$l6;
      var $end_line=(($nt7+12)|0);
      HEAP32[(($end_line)>>2)]=0;
      var $8=$n;
      var $l8=(($8+8)|0);
      var $nt9=$l8;
      var $end_char_pos=(($nt9+16)|0);
      HEAP32[(($end_char_pos)>>2)]=0;
      __label__ = 7; break;
    case 6: 
      var $9=$prev_addr;
      var $l10=(($9+8)|0);
      var $nt11=$l10;
      var $start_char_pos12=(($nt11+8)|0);
      var $10=HEAP32[(($start_char_pos12)>>2)];
      var $11=$n;
      var $l13=(($11+8)|0);
      var $nt14=$l13;
      var $start_char_pos15=(($nt14+8)|0);
      HEAP32[(($start_char_pos15)>>2)]=$10;
      var $12=$prev_addr;
      var $l16=(($12+8)|0);
      var $nt17=$l16;
      var $start_line18=(($nt17+4)|0);
      var $13=HEAP32[(($start_line18)>>2)];
      var $14=$n;
      var $l19=(($14+8)|0);
      var $nt20=$l19;
      var $start_line21=(($nt20+4)|0);
      HEAP32[(($start_line21)>>2)]=$13;
      var $15=HEAP32[((((_G1+116)|0))>>2)];
      var $16=$prev_addr;
      var $l22=(($16+8)|0);
      var $nt23=$l22;
      var $end_char_pos24=(($nt23+16)|0);
      HEAP32[(($end_char_pos24)>>2)]=$15;
      var $17=$n;
      var $l25=(($17+8)|0);
      var $nt26=$l25;
      var $end_char_pos27=(($nt26+16)|0);
      HEAP32[(($end_char_pos27)>>2)]=$15;
      var $18=HEAP32[((((_G1+80)|0))>>2)];
      var $19=$prev_addr;
      var $l28=(($19+8)|0);
      var $nt29=$l28;
      var $end_line30=(($nt29+12)|0);
      HEAP32[(($end_line30)>>2)]=$18;
      var $20=$n;
      var $l31=(($20+8)|0);
      var $nt32=$l31;
      var $end_line33=(($nt32+12)|0);
      HEAP32[(($end_line33)>>2)]=$18;
      __label__ = 7; break;
    case 7: 
      var $21=$n;
      ;
      return $21;
    default: assert(0, "bad label: " + __label__);
  }
}
_chain_notification["X"]=1;

function _next_token($expected) {
  var __stackBase__  = STACKTOP; STACKTOP += 12; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $expected_addr;
      var $p;
      var $s;
      var $tl;
      var $tc;
      var $ti;
      var $old_g_pos;
      var $pp=__stackBase__;
      var $pp73=(__stackBase__)+(4);
      var $pp102=(__stackBase__)+(8);
      var $l;
      $expected_addr=$expected;
      var $0=HEAP32[((((_G1+100)|0))>>2)];
      $old_g_pos=$0;
      var $1=HEAP8[(((_G1+113)|0))];
      var $tobool=(($1 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      HEAP8[(((_G1+113)|0))]=0;
      __label__ = 106; break;
    case 4: 
      var $2=HEAP8[(((_G+108)|0))];
      var $tobool1=(($2 << 24) >> 24)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      HEAP8[(((_G+108)|0))]=0;
      var $3=HEAP32[((((_G+96)|0))>>2)];
      HEAP32[((((_G+4)|0))>>2)]=$3;
      var $4=HEAP32[((((_G+100)|0))>>2)];
      HEAP32[((((_G)|0))>>2)]=$4;
      __label__ = 105; break;
    case 6: 
      var $5=HEAP32[((((_G1+100)|0))>>2)];
      $p=$5;
      __label__ = 7; break;
    case 7: 
      var $6=$p;
      var $call=_skip_spaces($6);
      $p=$call;
      var $7=HEAP32[((((_G+12)|0))>>2)];
      HEAP32[((((_G1+80)|0))>>2)]=$7;
      var $8=$p;
      var $9=HEAP8[($8)];
      var $conv=(($9 << 24) >> 24);
      var $cmp=(($conv)|0)==35;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 14; break; }
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $10=$p;
      var $11=HEAP8[($10)];
      var $conv6=(($11 << 24) >> 24);
      var $cmp7=(($conv6)|0)!=10;
      if ($cmp7) { __label__ = 10; break; } else { var $14 = 0;__label__ = 11; break; }
    case 10: 
      var $12=$p;
      var $13=HEAP8[($12)];
      var $conv9=(($13 << 24) >> 24);
      var $cmp10=(($conv9)|0)!=0;
      var $14 = $cmp10;__label__ = 11; break;
    case 11: 
      var $14;
      if ($14) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $15=$p;
      var $incdec_ptr=(($15+1)|0);
      $p=$incdec_ptr;
      __label__ = 9; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $16=$p;
      var $17=HEAP8[($16)];
      var $conv12=(($17 << 24) >> 24);
      var $cmp13=(($conv12)|0)==10;
      if ($cmp13) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $18=HEAP32[((((_G+12)|0))>>2)];
      var $inc=((($18)+(1))|0);
      HEAP32[((((_G+12)|0))>>2)]=$inc;
      __label__ = 16; break;
    case 16: 
      var $19=$p;
      var $20=HEAP8[($19)];
      var $conv17=(($20 << 24) >> 24);
      var $cmp18=(($conv17)|0)==0;
      if ($cmp18) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      $tc=16777216;
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      __label__ = 91; break;
    case 20: 
      var $21=$p;
      var $22=HEAP8[($21)];
      var $conv22=(($22 << 24) >> 24);
      var $cmp23=(($conv22)|0)==34;
      if ($cmp23) { __label__ = 21; break; } else { __label__ = 30; break; }
    case 21: 
      var $23=$p;
      var $incdec_ptr26=(($23+1)|0);
      $p=$incdec_ptr26;
      $s=$incdec_ptr26;
      HEAP32[((((_G+8)|0))>>2)]=$incdec_ptr26;
      __label__ = 22; break;
    case 22: 
      var $24=$p;
      var $25=HEAP8[($24)];
      var $conv28=(($25 << 24) >> 24);
      var $cmp29=(($conv28)|0)!=34;
      if ($cmp29) { __label__ = 23; break; } else { __label__ = 27; break; }
    case 23: 
      var $26=$p;
      var $27=HEAP8[($26)];
      var $conv32=(($27 << 24) >> 24);
      var $cmp33=(($conv32)|0)==0;
      if ($cmp33) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $28=$p;
      var $29=HEAP8[($28)];
      var $conv35=(($29 << 24) >> 24);
      var $cmp36=(($conv35)|0)==10;
      if ($cmp36) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      _syntax_error(((STRING_TABLE._EMSG_UNEXP_EOS)|0));
      throw "Reached an unreachable!"
    case 26: 
      var $30=$p;
      HEAP32[(($pp)>>2)]=$30;
      var $call40=_nextchar($pp);
      var $31=$s;
      var $incdec_ptr41=(($31+1)|0);
      $s=$incdec_ptr41;
      HEAP8[($31)]=$call40;
      var $32=HEAP32[(($pp)>>2)];
      $p=$32;
      __label__ = 22; break;
    case 27: 
      var $33=$p;
      var $incdec_ptr43=(($33+1)|0);
      $p=$incdec_ptr43;
      var $34=$s;
      HEAP8[($34)]=0;
      $tc=268435456;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 90; break;
    case 30: 
      var $35=$expected_addr;
      var $and=$35 & 4;
      var $tobool47=(($and)|0)!=0;
      if ($tobool47) { __label__ = 31; break; } else { __label__ = 48; break; }
    case 31: 
      var $36=$p;
      var $37=HEAP8[($36)];
      var $conv48=(($37 << 24) >> 24);
      var $cmp49=(($conv48)|0)==47;
      if ($cmp49) { __label__ = 32; break; } else { __label__ = 48; break; }
    case 32: 
      var $38=$p;
      var $incdec_ptr52=(($38+1)|0);
      $p=$incdec_ptr52;
      $s=$incdec_ptr52;
      HEAP32[((((_G+8)|0))>>2)]=$incdec_ptr52;
      __label__ = 33; break;
    case 33: 
      var $39=$p;
      var $40=HEAP8[($39)];
      var $conv54=(($40 << 24) >> 24);
      var $cmp55=(($conv54)|0)!=47;
      if ($cmp55) { __label__ = 34; break; } else { __label__ = 45; break; }
    case 34: 
      var $41=$p;
      var $42=HEAP8[($41)];
      var $conv58=(($42 << 24) >> 24);
      var $cmp59=(($conv58)|0)==0;
      if ($cmp59) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $43=$p;
      var $44=HEAP8[($43)];
      var $conv62=(($44 << 24) >> 24);
      var $cmp63=(($conv62)|0)==10;
      if ($cmp63) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      _syntax_error(((STRING_TABLE._EMSG_UNEXP_EOS)|0));
      throw "Reached an unreachable!"
    case 37: 
      var $45=$p;
      var $incdec_ptr67=(($45+1)|0);
      $p=$incdec_ptr67;
      var $46=HEAP8[($45)];
      var $47=$s;
      HEAP8[($47)]=$46;
      var $48=$s;
      var $incdec_ptr68=(($48+1)|0);
      $s=$incdec_ptr68;
      var $49=HEAP8[($48)];
      var $conv69=(($49 << 24) >> 24);
      var $cmp70=(($conv69)|0)==92;
      if ($cmp70) { __label__ = 38; break; } else { __label__ = 44; break; }
    case 38: 
      var $50=$p;
      HEAP32[(($pp73)>>2)]=$50;
      var $call74=_bb_process_escape_sequence($pp73);
      var $51=$s;
      var $arrayidx=((($51)-(1))|0);
      HEAP8[($arrayidx)]=$call74;
      var $52=$p;
      var $53=HEAP8[($52)];
      var $conv75=(($53 << 24) >> 24);
      var $cmp76=(($conv75)|0)==92;
      if ($cmp76) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $54=$s;
      var $incdec_ptr79=(($54+1)|0);
      $s=$incdec_ptr79;
      HEAP8[($54)]=92;
      __label__ = 40; break;
    case 40: 
      var $55=HEAP32[(($pp73)>>2)];
      var $56=$p;
      var $cmp81=(($55)|0)==(($56)|0);
      if ($cmp81) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $57=$p;
      var $incdec_ptr84=(($57+1)|0);
      $p=$incdec_ptr84;
      var $58=HEAP8[($57)];
      var $59=$s;
      var $incdec_ptr85=(($59+1)|0);
      $s=$incdec_ptr85;
      HEAP8[($59)]=$58;
      __label__ = 43; break;
    case 42: 
      var $60=HEAP32[(($pp73)>>2)];
      $p=$60;
      __label__ = 43; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 33; break;
    case 45: 
      var $61=$p;
      var $incdec_ptr90=(($61+1)|0);
      $p=$incdec_ptr90;
      var $62=$s;
      HEAP8[($62)]=0;
      $tc=4;
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      __label__ = 89; break;
    case 48: 
      var $63=$p;
      var $64=HEAP8[($63)];
      var $conv94=(($64 << 24) >> 24);
      var $cmp95=(($conv94)|0)==46;
      if ($cmp95) { __label__ = 50; break; } else { __label__ = 49; break; }
    case 49: 
      var $65=$p;
      var $66=HEAP8[($65)];
      var $conv98=(($66 << 24) >> 24);
      var $call99=_isdigit($conv98);
      var $tobool100=(($call99)|0)!=0;
      if ($tobool100) { __label__ = 50; break; } else { __label__ = 55; break; }
    case 50: 
      var $67=$p;
      HEAP32[(($pp102)>>2)]=$67;
      var $call103=_my_strtod($pp102);
      (tempDoubleF64[0]=$call103,HEAP32[((((_G1)|0))>>2)]=tempDoubleI32[0],HEAP32[(((((_G1)|0))+(4))>>2)]=tempDoubleI32[1]);
      var $68=HEAP32[(($pp102)>>2)];
      $p=$68;
      var $69=$p;
      var $70=HEAP8[($69)];
      var $conv104=(($70 << 24) >> 24);
      var $cmp105=(($conv104)|0)==46;
      if ($cmp105) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      _syntax_error(((STRING_TABLE._EMSG_UNEXP_TOKEN)|0));
      throw "Reached an unreachable!"
    case 52: 
      $tc=536870912;
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      __label__ = 88; break;
    case 55: 
      $tl=((STRING_TABLE._tokenlist)|0);
      $tc=1;
      $ti=((_tokeninfo)|0);
      __label__ = 56; break;
    case 56: 
      var $71=$tl;
      var $72=HEAP8[($71)];
      var $tobool113=(($72 << 24) >> 24)!=0;
      if ($tobool113) { __label__ = 57; break; } else { __label__ = 67; break; }
    case 57: 
      var $73=$tl;
      var $incdec_ptr115=(($73+1)|0);
      $tl=$incdec_ptr115;
      var $74=HEAP8[($73)];
      var $conv116=(($74)&255);
      $l=$conv116;
      var $75=$l;
      var $cmp117=(($75)|0)==255;
      if ($cmp117) { __label__ = 58; break; } else { __label__ = 59; break; }
    case 58: 
      var $76=$tc;
      var $shl=$76 << 1;
      $tc=$shl;
      __label__ = 56; break;
    case 59: 
      var $77=$tc;
      var $78=$expected_addr;
      var $or=$78 | 16711808;
      var $or121=$or | 32768;
      var $and122=$77 & $or121;
      var $tobool123=(($and122)|0)!=0;
      if ($tobool123) { __label__ = 60; break; } else { __label__ = 66; break; }
    case 60: 
      var $79=$p;
      var $80=$tl;
      var $81=$l;
      var $call125=_strncmp($79, $80, $81);
      var $cmp126=(($call125)|0)==0;
      if ($cmp126) { __label__ = 61; break; } else { __label__ = 66; break; }
    case 61: 
      var $82=$tc;
      var $and129=$82 & 16711808;
      var $tobool130=(($and129)|0)!=0;
      if ($tobool130) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $83=$l;
      var $84=$p;
      var $arrayidx132=(($84+$83)|0);
      var $85=HEAP8[($arrayidx132)];
      var $conv133=(($85 << 24) >> 24);
      var $call134=_isalnum_($conv133);
      var $tobool135=(($call134)|0)!=0;
      if ($tobool135) { __label__ = 66; break; } else { __label__ = 63; break; }
    case 63: 
      var $86=$ti;
      var $87=HEAP32[(($86)>>2)];
      HEAP32[((((_G)|0))>>2)]=$87;
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $88=$l;
      var $89=$p;
      var $add_ptr=(($89+$88)|0);
      $p=$add_ptr;
      __label__ = 92; break;
    case 66: 
      var $90=$ti;
      var $incdec_ptr140=(($90+4)|0);
      $ti=$incdec_ptr140;
      var $91=$l;
      var $92=$tl;
      var $add_ptr141=(($92+$91)|0);
      $tl=$add_ptr141;
      __label__ = 56; break;
    case 67: 
      var $93=$p;
      var $94=HEAP8[($93)];
      var $conv143=(($94 << 24) >> 24);
      var $call144=_isalnum_($conv143);
      var $tobool145=(($call144)|0)!=0;
      if ($tobool145) { __label__ = 69; break; } else { __label__ = 68; break; }
    case 68: 
      _syntax_error(((STRING_TABLE._EMSG_UNEXP_TOKEN)|0));
      throw "Reached an unreachable!"
    case 69: 
      var $95=$p;
      var $incdec_ptr148=((($95)-(1))|0);
      $p=$incdec_ptr148;
      HEAP32[((((_G+8)|0))>>2)]=$incdec_ptr148;
      __label__ = 70; break;
    case 70: 
      var $96=$p;
      var $incdec_ptr150=(($96+1)|0);
      $p=$incdec_ptr150;
      var $97=HEAP8[($incdec_ptr150)];
      var $conv151=(($97 << 24) >> 24);
      var $call152=_isalnum_($conv151);
      var $tobool153=(($call152)|0)!=0;
      if ($tobool153) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $98=$p;
      var $99=HEAP8[($98)];
      var $100=$p;
      var $arrayidx155=((($100)-(1))|0);
      HEAP8[($arrayidx155)]=$99;
      __label__ = 70; break;
    case 72: 
      var $101=$p;
      var $arrayidx157=((($101)-(1))|0);
      HEAP8[($arrayidx157)]=0;
      $tc=33554432;
      var $102=$expected_addr;
      var $and158=$102 & 33554432;
      var $tobool159=(($and158)|0)!=0;
      if ($tobool159) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $103=$expected_addr;
      var $and161=$103 & 67108864;
      var $tobool162=(($and161)|0)!=0;
      if ($tobool162) { __label__ = 74; break; } else { __label__ = 75; break; }
    case 74: 
      var $104=$p;
      var $call164=_skip_spaces($104);
      $p=$call164;
      __label__ = 75; break;
    case 75: 
      var $105=$p;
      var $106=HEAP8[($105)];
      var $conv166=(($106 << 24) >> 24);
      var $cmp167=(($conv166)|0)==40;
      if ($cmp167) { __label__ = 76; break; } else { __label__ = 79; break; }
    case 76: 
      $tc=134217728;
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      __label__ = 87; break;
    case 79: 
      var $107=$p;
      var $108=HEAP8[($107)];
      var $conv173=(($108 << 24) >> 24);
      var $cmp174=(($conv173)|0)==91;
      if ($cmp174) { __label__ = 80; break; } else { __label__ = 83; break; }
    case 80: 
      var $109=$p;
      var $incdec_ptr177=(($109+1)|0);
      $p=$incdec_ptr177;
      $tc=67108864;
      __label__ = 81; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      __label__ = 86; break;
    case 83: 
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      __label__ = 90; break;
    case 90: 
      __label__ = 91; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      var $110=$p;
      HEAP32[((((_G1+100)|0))>>2)]=$110;
      __label__ = 93; break;
    case 93: 
      var $111=$old_g_pos;
      var $112=HEAP32[((((_G1+100)|0))>>2)];
      var $cmp190=(($111)|0)!=(($112)|0);
      if ($cmp190) { __label__ = 94; break; } else { __label__ = 97; break; }
    case 94: 
      var $113=HEAP32[((((_G1+116)|0))>>2)];
      var $inc193=((($113)+(1))|0);
      HEAP32[((((_G1+116)|0))>>2)]=$inc193;
      var $114=$old_g_pos;
      var $115=HEAP8[($114)];
      var $conv194=(($115 << 24) >> 24);
      var $cmp195=(($conv194)|0)==10;
      if ($cmp195) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      HEAP32[((((_G1+116)|0))>>2)]=0;
      __label__ = 96; break;
    case 96: 
      var $116=$old_g_pos;
      var $incdec_ptr199=(($116+1)|0);
      $old_g_pos=$incdec_ptr199;
      __label__ = 93; break;
    case 97: 
      var $117=HEAP32[((((_G+104)|0))>>2)];
      var $and201=$117 & 62400;
      var $tobool202=(($and201)|0)!=0;
      if ($tobool202) { __label__ = 98; break; } else { __label__ = 100; break; }
    case 98: 
      var $118=$tc;
      var $and204=$118 & 32768;
      var $tobool205=(($and204)|0)!=0;
      if ($tobool205) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      __label__ = 7; break;
    case 100: 
      var $119=HEAP32[((((_G+104)|0))>>2)];
      var $and208=$119 & 838862866;
      var $tobool209=(($and208)|0)!=0;
      if ($tobool209) { __label__ = 101; break; } else { __label__ = 104; break; }
    case 101: 
      var $120=$tc;
      var $and211=$120 & 1041761313;
      var $tobool212=(($and211)|0)!=0;
      if ($tobool212) { __label__ = 102; break; } else { __label__ = 104; break; }
    case 102: 
      var $121=$expected_addr;
      var $and214=$121 & 960;
      var $tobool215=(($and214)|0)!=0;
      if ($tobool215) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      HEAP8[(((_G+108)|0))]=1;
      var $122=$tc;
      HEAP32[((((_G+96)|0))>>2)]=$122;
      var $123=HEAP32[((((_G)|0))>>2)];
      HEAP32[((((_G+100)|0))>>2)]=$123;
      $tc=960;
      HEAP32[((((_G)|0))>>2)]=588190976;
      __label__ = 104; break;
    case 104: 
      var $124=$tc;
      HEAP32[((((_G+4)|0))>>2)]=$124;
      __label__ = 105; break;
    case 105: 
      __label__ = 106; break;
    case 106: 
      var $125=HEAP32[((((_G+4)|0))>>2)];
      HEAP32[((((_G+104)|0))>>2)]=$125;
      var $126=HEAP32[((((_G+104)|0))>>2)];
      var $127=$expected_addr;
      var $and220=$126 & $127;
      var $tobool221=(($and220)|0)!=0;
      if ($tobool221) { __label__ = 108; break; } else { __label__ = 107; break; }
    case 107: 
      var $128=HEAP32[((((_G+104)|0))>>2)];
      var $and223=$128 & 16809984;
      var $tobool224=(($and223)|0)!=0;
      var $cond=$tobool224 ? (((STRING_TABLE._EMSG_UNEXP_EOS)|0)) : (((STRING_TABLE._EMSG_UNEXP_TOKEN)|0));
      _syntax_error($cond);
      throw "Reached an unreachable!"
    case 108: 
      var $129=HEAP32[((((_G+104)|0))>>2)];
      STACKTOP = __stackBase__;
      return $129;
    default: assert(0, "bad label: " + __label__);
  }
}
_next_token["X"]=1;

function _rollback_token() {
  ;
  var __label__;

  HEAP8[(((_G1+113)|0))]=1;
  ;
  return;
}


function _chain_node($info) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $info_addr;
      var $n;
      $info_addr=$info;
      var $0=HEAP32[((((_G1+44)|0))>>2)];
      var $first=(($0)|0);
      var $1=HEAP32[(($first)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $call=_new_node(0);
      var $2=HEAP32[((((_G1+44)|0))>>2)];
      var $last=(($2+4)|0);
      HEAP32[(($last)>>2)]=$call;
      var $3=HEAP32[((((_G1+44)|0))>>2)];
      var $first1=(($3)|0);
      HEAP32[(($first1)>>2)]=$call;
      __label__ = 4; break;
    case 4: 
      var $4=HEAP32[((((_G1+44)|0))>>2)];
      var $programname=(($4+8)|0);
      var $5=HEAP32[(($programname)>>2)];
      var $6=HEAP32[((((_G1+76)|0))>>2)];
      var $cmp=(($5)|0)!=(($6)|0);
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=HEAP32[((((_G1+76)|0))>>2)];
      var $8=HEAP32[((((_G1+44)|0))>>2)];
      var $programname3=(($8+8)|0);
      HEAP32[(($programname3)>>2)]=$7;
      var $call4=_chain_node(768);
      $n=$call4;
      var $9=HEAP32[((((_G1+76)|0))>>2)];
      var $call5=_xstrdup($9);
      var $10=$n;
      var $l=(($10+8)|0);
      var $new_progname=$l;
      HEAP32[(($new_progname)>>2)]=$call5;
      __label__ = 6; break;
    case 6: 
      var $11=HEAP32[((((_G1+44)|0))>>2)];
      var $last7=(($11+4)|0);
      var $12=HEAP32[(($last7)>>2)];
      $n=$12;
      var $13=$info_addr;
      var $14=$n;
      var $info8=(($14)|0);
      HEAP32[(($info8)>>2)]=$13;
      var $call9=_new_node(10240);
      var $15=$n;
      var $a=(($15+32)|0);
      var $n10=$a;
      HEAP32[(($n10)>>2)]=$call9;
      var $16=HEAP32[((((_G1+44)|0))>>2)];
      var $last11=(($16+4)|0);
      HEAP32[(($last11)>>2)]=$call9;
      var $17=$n;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}
_chain_node["X"]=1;

function _new_node($info) {
  ;
  var __label__;

  var $info_addr;
  var $n;
  $info_addr=$info;
  var $call=_xzalloc(36);
  var $0=$call;
  $n=$0;
  var $1=$info_addr;
  var $2=$n;
  var $info1=(($2)|0);
  HEAP32[(($info1)>>2)]=$1;
  var $3=HEAP32[((((_G1+80)|0))>>2)];
  var $4=$n;
  var $lineno=(($4+4)|0);
  HEAP32[(($lineno)>>2)]=$3;
  var $5=$n;
  ;
  return $5;
}


function _chain_group() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $c;
      var $n;
      var $n2;
      var $n3;
      __label__ = 3; break;
    case 3: 
      var $call=_next_token(1042011173);
      $c=$call;
      __label__ = 4; break;
    case 4: 
      var $0=$c;
      var $and=$0 & 32768;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 5: 
      var $1=$c;
      var $and1=$1 & 4096;
      var $tobool2=(($and1)|0)!=0;
      if ($tobool2) { __label__ = 6; break; } else { __label__ = 18; break; }
    case 6: 
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $call6=_next_token(1042019365);
      var $cmp=(($call6)|0)!=8192;
      if ($cmp) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: 
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $2=HEAP32[((((_G+4)|0))>>2)];
      var $and10=$2 & 32768;
      var $tobool11=(($and10)|0)!=0;
      if ($tobool11) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 9; break;
    case 14: 
      _rollback_token();
      _chain_group();
      __label__ = 9; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      __label__ = 71; break;
    case 18: 
      var $3=$c;
      var $and16=$3 & 1041810469;
      var $tobool17=(($and16)|0)!=0;
      if ($tobool17) { __label__ = 19; break; } else { __label__ = 22; break; }
    case 19: 
      __label__ = 20; break;
    case 20: 
      __label__ = 21; break;
    case 21: 
      _rollback_token();
      _chain_expr(66048);
      __label__ = 70; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $4=HEAP32[((((_G)|0))>>2)];
      var $and26=$4 & 65280;
      if ((($and26)|0) == 12288) {
        __label__ = 25; break;
      }
      else if ((($and26)|0) == 13056) {
        __label__ = 31; break;
      }
      else if ((($and26)|0) == 12544) {
        __label__ = 34; break;
      }
      else if ((($and26)|0) == 12800) {
        __label__ = 37; break;
      }
      else if ((($and26)|0) == 1024 || (($and26)|0) == 1280) {
        __label__ = 47; break;
      }
      else if ((($and26)|0) == 2048) {
        __label__ = 54; break;
      }
      else if ((($and26)|0) == 2304) {
        __label__ = 57; break;
      }
      else {
      __label__ = 60; break;
      }
      
    case 25: 
      __label__ = 26; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $call30=_chain_node(67328);
      $n=$call30;
      var $call31=_condition();
      var $5=$n;
      var $l=(($5+8)|0);
      var $n32=$l;
      HEAP32[(($n32)>>2)]=$call31;
      _chain_group();
      var $call33=_chain_node(512);
      $n2=$call33;
      var $6=HEAP32[((((_G1+44)|0))>>2)];
      var $last=(($6+4)|0);
      var $7=HEAP32[(($last)>>2)];
      var $8=$n;
      var $r=(($8+28)|0);
      var $n34=$r;
      HEAP32[(($n34)>>2)]=$7;
      var $call35=_next_token(1042281509);
      var $cmp36=(($call35)|0)==262144;
      if ($cmp36) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      _chain_group();
      var $9=HEAP32[((((_G1+44)|0))>>2)];
      var $last38=(($9+4)|0);
      var $10=HEAP32[(($last38)>>2)];
      var $11=$n2;
      var $a=(($11+32)|0);
      var $n39=$a;
      HEAP32[(($n39)>>2)]=$10;
      __label__ = 30; break;
    case 29: 
      _rollback_token();
      __label__ = 30; break;
    case 30: 
      __label__ = 69; break;
    case 31: 
      __label__ = 32; break;
    case 32: 
      __label__ = 33; break;
    case 33: 
      var $call46=_condition();
      $n2=$call46;
      var $call47=_chain_loop(0);
      $n=$call47;
      var $12=$n2;
      var $13=$n;
      var $l48=(($13+8)|0);
      var $n49=$l48;
      HEAP32[(($n49)>>2)]=$12;
      __label__ = 69; break;
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $call54=_chain_node(512);
      $n2=$call54;
      var $call55=_chain_loop(0);
      $n=$call55;
      var $14=$n;
      var $a56=(($14+32)|0);
      var $n57=$a56;
      var $15=HEAP32[(($n57)>>2)];
      var $16=$n2;
      var $a58=(($16+32)|0);
      var $n59=$a58;
      HEAP32[(($n59)>>2)]=$15;
      var $call60=_next_token(131072);
      var $call61=_condition();
      var $17=$n;
      var $l62=(($17+8)|0);
      var $n63=$l62;
      HEAP32[(($n63)>>2)]=$call61;
      __label__ = 69; break;
    case 37: 
      __label__ = 38; break;
    case 38: 
      __label__ = 39; break;
    case 39: 
      var $call68=_next_token(1);
      var $call69=_parse_expr(16386);
      $n2=$call69;
      var $18=HEAP32[((((_G+4)|0))>>2)];
      var $and70=$18 & 2;
      var $tobool71=(($and70)|0)!=0;
      if ($tobool71) { __label__ = 40; break; } else { __label__ = 43; break; }
    case 40: 
      var $19=$n2;
      var $info=(($19)|0);
      var $20=HEAP32[(($info)>>2)];
      var $and73=$20 & 65280;
      var $cmp74=(($and73)|0)!=6912;
      if ($cmp74) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      _syntax_error(((STRING_TABLE._EMSG_UNEXP_TOKEN)|0));
      throw "Reached an unreachable!"
    case 42: 
      var $call77=_chain_node(198144);
      $n=$call77;
      var $21=$n2;
      var $l78=(($21+8)|0);
      var $n79=$l78;
      var $22=HEAP32[(($n79)>>2)];
      var $23=$n;
      var $l80=(($23+8)|0);
      var $n81=$l80;
      HEAP32[(($n81)>>2)]=$22;
      var $24=$n2;
      var $r82=(($24+28)|0);
      var $n83=$r82;
      var $25=HEAP32[(($n83)>>2)];
      var $26=$n;
      var $r84=(($26+28)|0);
      var $n85=$r84;
      HEAP32[(($n85)>>2)]=$25;
      var $call86=_chain_loop(0);
      $n=$call86;
      var $27=$n;
      var $info87=(($27)|0);
      HEAP32[(($info87)>>2)]=69120;
      var $28=$n2;
      var $l88=(($28+8)|0);
      var $n89=$l88;
      var $29=HEAP32[(($n89)>>2)];
      var $30=$n;
      var $l90=(($30+8)|0);
      var $n91=$l90;
      HEAP32[(($n91)>>2)]=$29;
      __label__ = 46; break;
    case 43: 
      var $call93=_chain_node(66048);
      $n=$call93;
      var $31=$n2;
      var $32=$n;
      var $l94=(($32+8)|0);
      var $n95=$l94;
      HEAP32[(($n95)>>2)]=$31;
      var $call96=_parse_expr(16384);
      $n2=$call96;
      var $call97=_parse_expr(2);
      $n3=$call97;
      var $33=$n3;
      var $call98=_chain_loop($33);
      $n=$call98;
      var $34=$n2;
      var $35=$n;
      var $l99=(($35+8)|0);
      var $n100=$l99;
      HEAP32[(($n100)>>2)]=$34;
      var $36=$n2;
      var $tobool101=(($36)|0)!=0;
      if ($tobool101) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $37=$n;
      var $info103=(($37)|0);
      HEAP32[(($info103)>>2)]=512;
      __label__ = 45; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 69; break;
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      var $38=HEAP32[((((_G)|0))>>2)];
      var $call110=_chain_node($38);
      $n=$call110;
      var $call111=_parse_expr(57352);
      var $39=$n;
      var $l112=(($39+8)|0);
      var $n113=$l112;
      HEAP32[(($n113)>>2)]=$call111;
      var $40=HEAP32[((((_G+4)|0))>>2)];
      var $and114=$40 & 8;
      var $tobool115=(($and114)|0)!=0;
      if ($tobool115) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $41=HEAP32[((((_G)|0))>>2)];
      var $42=$n;
      var $info117=(($42)|0);
      var $43=HEAP32[(($info117)>>2)];
      var $or=$43 | $41;
      HEAP32[(($info117)>>2)]=$or;
      var $call118=_parse_expr(57344);
      var $44=$n;
      var $r119=(($44+28)|0);
      var $n120=$r119;
      HEAP32[(($n120)>>2)]=$call118;
      __label__ = 51; break;
    case 51: 
      var $45=HEAP32[((((_G+4)|0))>>2)];
      var $and122=$45 & 8192;
      var $tobool123=(($and122)|0)!=0;
      if ($tobool123) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      _rollback_token();
      __label__ = 53; break;
    case 53: 
      __label__ = 69; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      var $call130=_chain_node(512);
      $n=$call130;
      var $46=HEAP32[((((_G1+48)|0))>>2)];
      var $47=$n;
      var $a131=(($47+32)|0);
      var $n132=$a131;
      HEAP32[(($n132)>>2)]=$46;
      __label__ = 69; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $call137=_chain_node(512);
      $n=$call137;
      var $48=HEAP32[((((_G1+52)|0))>>2)];
      var $49=$n;
      var $a138=(($49+32)|0);
      var $n139=$a138;
      HEAP32[(($n139)>>2)]=$48;
      __label__ = 69; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      var $50=HEAP32[((((_G)|0))>>2)];
      var $and143=$50 & 65280;
      var $cmp144=(($and143)|0)==2816;
      if ($cmp144) { __label__ = 63; break; } else { __label__ = 64; break; }
    case 63: 
      var $call146=_chain_notification(13, 0);
      __label__ = 64; break;
    case 64: 
      var $51=HEAP32[((((_G)|0))>>2)];
      var $and148=$51 & 65280;
      var $cmp149=(($and148)|0)==2560;
      if ($cmp149) { __label__ = 65; break; } else { __label__ = 66; break; }
    case 65: 
      var $call151=_chain_notification(15, 0);
      __label__ = 66; break;
    case 66: 
      var $52=HEAP32[((((_G)|0))>>2)];
      var $and153=$52 & 65280;
      var $cmp154=(($and153)|0)==3072;
      if ($cmp154) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $call156=_chain_notification(14, 0);
      __label__ = 68; break;
    case 68: 
      var $53=HEAP32[((((_G)|0))>>2)];
      _chain_expr($53);
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_chain_group["X"]=1;

function _parse_expr($iexp) {
  var __stackBase__  = STACKTOP; STACKTOP += 36; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $iexp_addr;
      var $sn=__stackBase__;
      var $cn;
      var $vn;
      var $glptr;
      var $tc;
      var $xtc;
      var $v;
      $iexp_addr=$iexp;
      $cn=$sn;
      __label__ = 3; break;
    case 3: 
      __label__ = 4; break;
    case 4: 
      var $info=(($sn)|0);
      HEAP32[(($info)>>2)]=2130706432;
      $glptr=0;
      var $r=(($sn+28)|0);
      var $n=$r;
      HEAP32[(($n)>>2)]=0;
      var $0=$iexp_addr;
      var $or=1041761317 | $0;
      $xtc=$or;
      __label__ = 5; break;
    case 5: 
      var $1=$xtc;
      var $call=_next_token($1);
      $tc=$call;
      var $2=$iexp_addr;
      var $and=$call & $2;
      var $tobool=(($and)|0)!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { __label__ = 6; break; } else { __label__ = 70; break; }
    case 6: 
      var $3=$glptr;
      var $tobool1=(($3)|0)!=0;
      if ($tobool1) { __label__ = 7; break; } else { __label__ = 11; break; }
    case 7: 
      var $4=HEAP32[((((_G)|0))>>2)];
      var $cmp=(($4)|0)==654513154;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      __label__ = 9; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $call4=_new_node(621745408);
      var $5=$glptr;
      var $l=(($5+8)|0);
      var $n5=$l;
      HEAP32[(($n5)>>2)]=$call4;
      $cn=$call4;
      var $6=$glptr;
      var $7=$cn;
      var $a=(($7+32)|0);
      var $n6=$a;
      HEAP32[(($n6)>>2)]=$6;
      $xtc=1041761313;
      $glptr=0;
      __label__ = 69; break;
    case 11: 
      var $8=$tc;
      var $and7=$8 & 976;
      var $tobool8=(($and7)|0)!=0;
      if ($tobool8) { __label__ = 12; break; } else { __label__ = 29; break; }
    case 12: 
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $9=$cn;
      $vn=$9;
      __label__ = 15; break;
    case 15: 
      var $10=HEAP32[((((_G)|0))>>2)];
      var $and13=$10 & 2130706432;
      var $11=$vn;
      var $a14=(($11+32)|0);
      var $n15=$a14;
      var $12=HEAP32[(($n15)>>2)];
      var $info16=(($12)|0);
      var $13=HEAP32[(($info16)>>2)];
      var $and17=$13 & 2113929216;
      var $cmp18=(($and13)>>>0) > (($and17)>>>0);
      if ($cmp18) { var $19 = 1;__label__ = 19; break; } else { __label__ = 16; break; }
    case 16: 
      var $14=HEAP32[((((_G)|0))>>2)];
      var $15=$vn;
      var $info19=(($15)|0);
      var $16=HEAP32[(($info19)>>2)];
      var $cmp20=(($14)|0)==(($16)|0);
      if ($cmp20) { __label__ = 17; break; } else { var $18 = 0;__label__ = 18; break; }
    case 17: 
      var $17=HEAP32[((((_G)|0))>>2)];
      var $and21=$17 & 65280;
      var $cmp22=(($and21)|0)==4608;
      var $18 = $cmp22;__label__ = 18; break;
    case 18: 
      var $18;
      var $19 = $18;__label__ = 19; break;
    case 19: 
      var $19;
      if ($19) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $20=$vn;
      var $a24=(($20+32)|0);
      var $n25=$a24;
      var $21=HEAP32[(($n25)>>2)];
      $vn=$21;
      __label__ = 15; break;
    case 21: 
      var $22=HEAP32[((((_G)|0))>>2)];
      var $and26=$22 & 65280;
      var $cmp27=(($and26)|0)==9472;
      if ($cmp27) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $23=HEAP32[((((_G)|0))>>2)];
      var $add=((($23)+(100663296))|0);
      HEAP32[((((_G)|0))>>2)]=$add;
      __label__ = 23; break;
    case 23: 
      var $24=HEAP32[((((_G)|0))>>2)];
      var $call29=_new_node($24);
      var $25=$vn;
      var $a30=(($25+32)|0);
      var $n31=$a30;
      var $26=HEAP32[(($n31)>>2)];
      var $r32=(($26+28)|0);
      var $n33=$r32;
      HEAP32[(($n33)>>2)]=$call29;
      $cn=$call29;
      var $27=$vn;
      var $a34=(($27+32)|0);
      var $n35=$a34;
      var $28=HEAP32[(($n35)>>2)];
      var $29=$cn;
      var $a36=(($29+32)|0);
      var $n37=$a36;
      HEAP32[(($n37)>>2)]=$28;
      var $30=$tc;
      var $and38=$30 & 960;
      var $tobool39=(($and38)|0)!=0;
      if ($tobool39) { __label__ = 24; break; } else { __label__ = 27; break; }
    case 24: 
      var $31=$vn;
      var $32=$cn;
      var $l41=(($32+8)|0);
      var $n42=$l41;
      HEAP32[(($n42)>>2)]=$31;
      $xtc=1041761317;
      var $33=HEAP32[((((_G)|0))>>2)];
      var $and43=$33 & 65280;
      var $cmp44=(($and43)|0)==8192;
      if ($cmp44) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $call46=_next_token(1048576);
      var $34=$cn;
      var $info47=(($34)|0);
      var $35=HEAP32[(($info47)>>2)];
      var $and48=$35 & -2130706433;
      HEAP32[(($info47)>>2)]=$and48;
      var $36=$iexp_addr;
      var $or49=1041762273 | $36;
      $xtc=$or49;
      __label__ = 26; break;
    case 26: 
      __label__ = 28; break;
    case 27: 
      var $37=$vn;
      var $38=$cn;
      var $r52=(($38+28)|0);
      var $n53=$r52;
      HEAP32[(($n53)>>2)]=$37;
      var $39=$iexp_addr;
      var $or54=1041762273 | $39;
      $xtc=$or54;
      __label__ = 28; break;
    case 28: 
      var $40=$cn;
      var $41=$vn;
      var $a56=(($41+32)|0);
      var $n57=$a56;
      HEAP32[(($n57)>>2)]=$40;
      __label__ = 68; break;
    case 29: 
      __label__ = 30; break;
    case 30: 
      __label__ = 31; break;
    case 31: 
      var $42=$cn;
      $vn=$42;
      var $43=HEAP32[((((_G)|0))>>2)];
      var $call61=_new_node($43);
      var $44=$vn;
      var $r62=(($44+28)|0);
      var $n63=$r62;
      HEAP32[(($n63)>>2)]=$call61;
      $cn=$call61;
      var $45=$vn;
      var $46=$cn;
      var $a64=(($46+32)|0);
      var $n65=$a64;
      HEAP32[(($n65)>>2)]=$45;
      $xtc=1041761317;
      var $47=$tc;
      var $and66=$47 & 1041760261;
      var $tobool67=(($and66)|0)!=0;
      if ($tobool67) { __label__ = 32; break; } else { __label__ = 67; break; }
    case 32: 
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $48=$iexp_addr;
      var $or71=1041762289 | $48;
      $xtc=$or71;
      var $49=$tc;
      if ((($49)|0) == 33554432 || (($49)|0) == 67108864) {
        __label__ = 35; break;
      }
      else if ((($49)|0) == 536870912 || (($49)|0) == 268435456) {
        __label__ = 43; break;
      }
      else if ((($49)|0) == 4) {
        __label__ = 49; break;
      }
      else if ((($49)|0) == 134217728) {
        __label__ = 52; break;
      }
      else if ((($49)|0) == 1) {
        __label__ = 55; break;
      }
      else if ((($49)|0) == 1048576) {
        __label__ = 60; break;
      }
      else if ((($49)|0) == 524288) {
        __label__ = 63; break;
      }
      else {
      __label__ = 66; break;
      }
      
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $50=$cn;
      var $info74=(($50)|0);
      HEAP32[(($info74)>>2)]=9984;
      var $51=HEAP32[((((_G1+64)|0))>>2)];
      var $52=HEAP32[((((_G+8)|0))>>2)];
      var $call75=_hash_search($51, $52);
      var $53=$call75;
      $v=$53;
      var $54=$v;
      var $cmp76=(($54)|0)!=0;
      if ($cmp76) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $55=$cn;
      var $info78=(($55)|0);
      HEAP32[(($info78)>>2)]=6144;
      var $56=$v;
      var $x=(($56+16)|0);
      var $aidx=$x;
      var $57=HEAP32[(($aidx)>>2)];
      var $58=$cn;
      var $l79=(($58+8)|0);
      var $aidx80=$l79;
      HEAP32[(($aidx80)>>2)]=$57;
      __label__ = 40; break;
    case 39: 
      var $59=HEAP32[((((_G1+60)|0))>>2)];
      var $60=HEAP32[((((_G+8)|0))>>2)];
      var $call82=_hash_find($59, $60);
      var $61=$call82;
      var $62=$cn;
      var $l83=(($62+8)|0);
      var $v84=$l83;
      HEAP32[(($v84)>>2)]=$61;
      __label__ = 40; break;
    case 40: 
      var $63=$tc;
      var $and86=$63 & 67108864;
      var $tobool87=(($and86)|0)!=0;
      if ($tobool87) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $64=$cn;
      var $info89=(($64)|0);
      var $65=HEAP32[(($info89)>>2)];
      var $or90=$65 | 655360;
      HEAP32[(($info89)>>2)]=$or90;
      var $call91=_parse_expr(2048);
      var $66=$cn;
      var $r92=(($66+28)|0);
      var $n93=$r92;
      HEAP32[(($n93)>>2)]=$call91;
      __label__ = 42; break;
    case 42: 
      __label__ = 66; break;
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $67=$cn;
      var $info98=(($67)|0);
      HEAP32[(($info98)>>2)]=9984;
      var $call99=_xzalloc(20);
      var $68=$call99;
      var $69=$cn;
      var $l100=(($69+8)|0);
      var $v101=$l100;
      HEAP32[(($v101)>>2)]=$68;
      $v=$68;
      var $70=$tc;
      var $and102=$70 & 536870912;
      var $tobool103=(($and102)|0)!=0;
      if ($tobool103) { __label__ = 46; break; } else { __label__ = 47; break; }
    case 46: 
      var $71=$v;
      var $72=(tempDoubleI32[0]=HEAP32[((((_G1)|0))>>2)],tempDoubleI32[1]=HEAP32[(((((_G1)|0))+(4))>>2)],tempDoubleF64[0]);
      var $call105=_setvar_i($71, $72);
      __label__ = 48; break;
    case 47: 
      var $73=$v;
      var $74=HEAP32[((((_G+8)|0))>>2)];
      var $call107=_setvar_s($73, $74);
      __label__ = 48; break;
    case 48: 
      __label__ = 66; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      __label__ = 51; break;
    case 51: 
      var $75=HEAP32[((((_G+8)|0))>>2)];
      var $76=$cn;
      var $call112=_xzalloc(32);
      var $77=$call112;
      _mk_re_node($75, $76, $77);
      __label__ = 66; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $78=$cn;
      var $info116=(($78)|0);
      HEAP32[(($info116)>>2)]=6400;
      var $79=HEAP32[((((_G1+72)|0))>>2)];
      var $80=HEAP32[((((_G+8)|0))>>2)];
      var $call117=_hash_find($79, $80);
      var $81=$call117;
      var $82=$cn;
      var $r118=(($82+28)|0);
      var $f=$r118;
      HEAP32[(($f)>>2)]=$81;
      var $call119=_condition();
      var $83=$cn;
      var $l120=(($83+8)|0);
      var $n121=$l120;
      HEAP32[(($n121)>>2)]=$call119;
      __label__ = 66; break;
    case 55: 
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $call125=_parse_expr(2);
      var $84=$vn;
      var $r126=(($84+28)|0);
      var $n127=$r126;
      HEAP32[(($n127)>>2)]=$call125;
      $cn=$call125;
      var $85=$cn;
      var $tobool128=(($85)|0)!=0;
      if ($tobool128) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      _syntax_error(((STRING_TABLE.__str55)|0));
      throw "Reached an unreachable!"
    case 59: 
      var $86=$vn;
      var $87=$cn;
      var $a131=(($87+32)|0);
      var $n132=$a131;
      HEAP32[(($n132)>>2)]=$86;
      __label__ = 66; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      __label__ = 62; break;
    case 62: 
      var $88=$cn;
      $glptr=$88;
      var $89=$iexp_addr;
      var $or136=1041762273 | $89;
      $xtc=$or136;
      __label__ = 66; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $call140=_condition();
      var $90=$cn;
      var $l141=(($90+8)|0);
      var $n142=$l141;
      HEAP32[(($n142)>>2)]=$call140;
      __label__ = 66; break;
    case 66: 
      __label__ = 67; break;
    case 67: 
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      __label__ = 5; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $r149=(($sn+28)|0);
      var $n150=$r149;
      var $91=HEAP32[(($n150)>>2)];
      STACKTOP = __stackBase__;
      return $91;
    default: assert(0, "bad label: " + __label__);
  }
}
_parse_expr["X"]=1;

function _skip_whitespace($s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      $s_addr=$s;
      __label__ = 3; break;
    case 3: 
      var $0=$s_addr;
      var $1=HEAP8[($0)];
      var $conv=(($1 << 24) >> 24);
      var $cmp=(($conv)|0)==32;
      if ($cmp) { var $4 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $2=$s_addr;
      var $3=HEAP8[($2)];
      var $conv2=(($3 << 24) >> 24);
      var $sub=((($conv2)-(9))|0);
      var $conv3=(($sub) & 255);
      var $conv4=(($conv3)&255);
      var $cmp5=(($conv4)|0) <= 4;
      var $4 = $cmp5;__label__ = 5; break;
    case 5: 
      var $4;
      if ($4) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $5=$s_addr;
      var $incdec_ptr=(($5+1)|0);
      $s_addr=$incdec_ptr;
      __label__ = 3; break;
    case 7: 
      var $6=$s_addr;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _utoa_to_buf($n, $buf, $buflen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $n_addr;
      var $buf_addr;
      var $buflen_addr;
      var $i;
      var $out;
      var $res;
      $n_addr=$n;
      $buf_addr=$buf;
      $buflen_addr=$buflen;
      var $0=$buflen_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 14; break; }
    case 3: 
      $out=0;
      $i=1000000000;
      __label__ = 4; break;
    case 4: 
      var $1=$i;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 13; break; }
    case 5: 
      var $2=$n_addr;
      var $3=$i;
      var $div=Math.floor(((($2)>>>0))/((($3)>>>0)));
      $res=$div;
      var $4=$n_addr;
      var $5=$i;
      var $rem=((($4)>>>0))%((($5)>>>0));
      $n_addr=$rem;
      var $6=$res;
      var $tobool2=(($6)|0)!=0;
      if ($tobool2) { __label__ = 8; break; } else { __label__ = 6; break; }
    case 6: 
      var $7=$out;
      var $tobool3=(($7)|0)!=0;
      if ($tobool3) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $8=$i;
      var $cmp=(($8)|0)==1;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 11; break; }
    case 8: 
      var $9=$buflen_addr;
      var $dec=((($9)-(1))|0);
      $buflen_addr=$dec;
      var $cmp6=(($dec)|0)==0;
      if ($cmp6) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 13; break;
    case 10: 
      var $10=$out;
      var $inc=((($10)+(1))|0);
      $out=$inc;
      var $11=$res;
      var $add=((($11)+(48))|0);
      var $conv=(($add) & 255);
      var $12=$buf_addr;
      var $incdec_ptr=(($12+1)|0);
      $buf_addr=$incdec_ptr;
      HEAP8[($12)]=$conv;
      __label__ = 11; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      var $13=$i;
      var $div9=Math.floor(((($13)>>>0))/(10));
      $i=$div9;
      __label__ = 4; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $14=$buf_addr;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}
_utoa_to_buf["X"]=1;

function _condition() {
  ;
  var __label__;

  var $call=_next_token(1);
  var $call1=_parse_expr(2);
  ;
  return $call1;
}


function _chain_expr($info) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $info_addr;
      var $n;
      $info_addr=$info;
      var $0=$info_addr;
      var $call=_chain_node($0);
      $n=$call;
      var $call1=_parse_expr(57344);
      var $1=$n;
      var $l=(($1+8)|0);
      var $n2=$l;
      HEAP32[(($n2)>>2)]=$call1;
      var $2=HEAP32[((((_G+4)|0))>>2)];
      var $and=$2 & 8192;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      _rollback_token();
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _chain_loop($nn) {
  ;
  var __label__;

  var $nn_addr;
  var $n;
  var $n2;
  var $save_brk;
  var $save_cont;
  $nn_addr=$nn;
  var $0=HEAP32[((((_G1+48)|0))>>2)];
  $save_brk=$0;
  var $1=HEAP32[((((_G1+52)|0))>>2)];
  $save_cont=$1;
  var $call=_chain_node(67328);
  $n=$call;
  var $call1=_new_node(512);
  HEAP32[((((_G1+52)|0))>>2)]=$call1;
  var $call2=_new_node(512);
  HEAP32[((((_G1+48)|0))>>2)]=$call2;
  _chain_group();
  var $call3=_chain_node(66048);
  $n2=$call3;
  var $2=$nn_addr;
  var $3=$n2;
  var $l=(($3+8)|0);
  var $n4=$l;
  HEAP32[(($n4)>>2)]=$2;
  var $4=$n;
  var $5=$n2;
  var $a=(($5+32)|0);
  var $n5=$a;
  HEAP32[(($n5)>>2)]=$4;
  var $6=$n2;
  var $7=HEAP32[((((_G1+52)|0))>>2)];
  var $a6=(($7+32)|0);
  var $n7=$a6;
  HEAP32[(($n7)>>2)]=$6;
  var $8=HEAP32[((((_G1+44)|0))>>2)];
  var $last=(($8+4)|0);
  var $9=HEAP32[(($last)>>2)];
  var $10=$n;
  var $r=(($10+28)|0);
  var $n8=$r;
  HEAP32[(($n8)>>2)]=$9;
  var $11=HEAP32[((((_G1+48)|0))>>2)];
  var $a9=(($11+32)|0);
  var $n10=$a9;
  HEAP32[(($n10)>>2)]=$9;
  var $12=$save_cont;
  HEAP32[((((_G1+52)|0))>>2)]=$12;
  var $13=$save_brk;
  HEAP32[((((_G1+48)|0))>>2)]=$13;
  var $14=$n;
  ;
  return $14;
}
_chain_loop["X"]=1;

function _nextchar($s) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $c;
      var $pps;
      $s_addr=$s;
      var $0=$s_addr;
      var $1=HEAP32[(($0)>>2)];
      var $incdec_ptr=(($1+1)|0);
      HEAP32[(($0)>>2)]=$incdec_ptr;
      var $2=HEAP8[($1)];
      $c=$2;
      var $3=$s_addr;
      var $4=HEAP32[(($3)>>2)];
      $pps=$4;
      var $5=$c;
      var $conv=(($5 << 24) >> 24);
      var $cmp=(($conv)|0)==92;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $6=$s_addr;
      var $call=_bb_process_escape_sequence($6);
      $c=$call;
      __label__ = 4; break;
    case 4: 
      var $7=$c;
      var $conv2=(($7 << 24) >> 24);
      var $cmp3=(($conv2)|0)==92;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $8=$s_addr;
      var $9=HEAP32[(($8)>>2)];
      var $10=$pps;
      var $cmp5=(($9)|0)==(($10)|0);
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $11=$s_addr;
      var $12=HEAP32[(($11)>>2)];
      var $13=HEAP8[($12)];
      $c=$13;
      var $14=$c;
      var $tobool=(($14 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $15=$s_addr;
      var $16=HEAP32[(($15)>>2)];
      var $incdec_ptr9=(($16+1)|0);
      HEAP32[(($15)>>2)]=$incdec_ptr9;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $17=$c;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isalnum_($c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $c_addr;
      $c_addr=$c;
      var $0=$c_addr;
      var $call=_isalnum($0);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { var $2 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$c_addr;
      var $cmp=(($1)|0)==95;
      var $2 = $cmp;__label__ = 4; break;
    case 4: 
      var $2;
      var $lor_ext=(($2)&1);
      ;
      return $lor_ext;
    default: assert(0, "bad label: " + __label__);
  }
}


function _hash_rebuild($hash) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $hash_addr;
      var $newsize;
      var $i;
      var $idx;
      var $newitems;
      var $hi;
      var $thi;
      $hash_addr=$hash;
      var $0=$hash_addr;
      var $nprime=(($0+8)|0);
      var $1=HEAP32[(($nprime)>>2)];
      var $cmp=(($1)|0)==5;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 12; break;
    case 4: 
      var $2=$hash_addr;
      var $nprime1=(($2+8)|0);
      var $3=HEAP32[(($nprime1)>>2)];
      var $inc=((($3)+(1))|0);
      HEAP32[(($nprime1)>>2)]=$inc;
      var $arrayidx=((_PRIMES+($3<<1))|0);
      var $4=HEAP16[(($arrayidx)>>1)];
      var $conv=(($4)&65535);
      $newsize=$conv;
      var $5=$newsize;
      var $mul=((($5<<2))|0);
      var $call=_xzalloc($mul);
      var $6=$call;
      $newitems=$6;
      $i=0;
      __label__ = 5; break;
    case 5: 
      var $7=$i;
      var $8=$hash_addr;
      var $csize=(($8+4)|0);
      var $9=HEAP32[(($csize)>>2)];
      var $cmp2=(($7)>>>0) < (($9)>>>0);
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 11; break; }
    case 6: 
      var $10=$i;
      var $11=$hash_addr;
      var $items=(($11+16)|0);
      var $12=HEAP32[(($items)>>2)];
      var $arrayidx4=(($12+($10<<2))|0);
      var $13=HEAP32[(($arrayidx4)>>2)];
      $hi=$13;
      __label__ = 7; break;
    case 7: 
      var $14=$hi;
      var $tobool=(($14)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $15=$hi;
      $thi=$15;
      var $16=$thi;
      var $next=(($16+24)|0);
      var $17=HEAP32[(($next)>>2)];
      $hi=$17;
      var $18=$thi;
      var $name=(($18+28)|0);
      var $arraydecay=(($name)|0);
      var $call5=_hashidx($arraydecay);
      var $19=$newsize;
      var $rem=((($call5)>>>0))%((($19)>>>0));
      $idx=$rem;
      var $20=$idx;
      var $21=$newitems;
      var $arrayidx6=(($21+($20<<2))|0);
      var $22=HEAP32[(($arrayidx6)>>2)];
      var $23=$thi;
      var $next7=(($23+24)|0);
      HEAP32[(($next7)>>2)]=$22;
      var $24=$thi;
      var $25=$idx;
      var $26=$newitems;
      var $arrayidx8=(($26+($25<<2))|0);
      HEAP32[(($arrayidx8)>>2)]=$24;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $27=$i;
      var $inc9=((($27)+(1))|0);
      $i=$inc9;
      __label__ = 5; break;
    case 11: 
      var $28=$hash_addr;
      var $items10=(($28+16)|0);
      var $29=HEAP32[(($items10)>>2)];
      var $30=$29;
      _free($30);
      var $31=$newsize;
      var $32=$hash_addr;
      var $csize11=(($32+4)|0);
      HEAP32[(($csize11)>>2)]=$31;
      var $33=$newitems;
      var $34=$hash_addr;
      var $items12=(($34+16)|0);
      HEAP32[(($items12)>>2)]=$33;
      __label__ = 12; break;
    case 12: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_hash_rebuild["X"]=1;

function _fopen_or_warn_stdin($filename) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $filename_addr;
      var $fp;
      $filename_addr=$filename;
      var $0=HEAP32[((_stdin)>>2)];
      $fp=$0;
      var $1=$filename_addr;
      var $cmp=(($1)|0)!=(((((STRING_TABLE._bb_msg_standard_input)|0)))|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $2=$filename_addr;
      var $arrayidx=(($2)|0);
      var $3=HEAP8[($arrayidx)];
      var $conv=(($3 << 24) >> 24);
      var $cmp1=(($conv)|0)!=45;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $4=$filename_addr;
      var $arrayidx3=(($4+1)|0);
      var $5=HEAP8[($arrayidx3)];
      var $conv4=(($5 << 24) >> 24);
      var $tobool=(($conv4)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$filename_addr;
      var $call=_fopen_or_warn($6, ((STRING_TABLE.__str56)|0));
      $fp=$call;
      __label__ = 6; break;
    case 6: 
      var $7=$fp;
      ;
      return $7;
    default: assert(0, "bad label: " + __label__);
  }
}


function _llist_add_to_end($list_head, $data) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $list_head_addr;
      var $data_addr;
      $list_head_addr=$list_head;
      $data_addr=$data;
      __label__ = 3; break;
    case 3: 
      var $0=$list_head_addr;
      var $1=HEAP32[(($0)>>2)];
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $2=$list_head_addr;
      var $3=HEAP32[(($2)>>2)];
      var $link=(($3)|0);
      $list_head_addr=$link;
      __label__ = 3; break;
    case 5: 
      var $call=_xzalloc(8);
      var $4=$call;
      var $5=$list_head_addr;
      HEAP32[(($5)>>2)]=$4;
      var $6=$data_addr;
      var $7=$list_head_addr;
      var $8=HEAP32[(($7)>>2)];
      var $data1=(($8+4)|0);
      HEAP32[(($data1)>>2)]=$6;
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _llist_pop($head) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $head_addr;
      var $data;
      var $temp;
      $head_addr=$head;
      $data=0;
      var $0=$head_addr;
      var $1=HEAP32[(($0)>>2)];
      $temp=$1;
      var $2=$temp;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$temp;
      var $data1=(($3+4)|0);
      var $4=HEAP32[(($data1)>>2)];
      $data=$4;
      var $5=$temp;
      var $link=(($5)|0);
      var $6=HEAP32[(($link)>>2)];
      var $7=$head_addr;
      HEAP32[(($7)>>2)]=$6;
      var $8=$temp;
      var $9=$8;
      _free($9);
      __label__ = 4; break;
    case 4: 
      var $10=$data;
      ;
      return $10;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fopen_or_warn($path, $mode) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $path_addr;
      var $mode_addr;
      var $fp;
      $path_addr=$path;
      $mode_addr=$mode;
      var $0=$path_addr;
      var $1=$mode_addr;
      var $call=_fopen($0, $1);
      $fp=$call;
      var $2=$fp;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $3=$path_addr;
      _bb_simple_perror_msg($3);
      __label__ = 4; break;
    case 4: 
      var $4=$fp;
      ;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fopen_for_read($path) {
  ;
  var __label__;

  var $path_addr;
  $path_addr=$path;
  var $0=$path_addr;
  var $call=_fopen($0, ((STRING_TABLE.__str63)|0));
  ;
  return $call;
}


function _xzalloc($size) {
  ;
  var __label__;

  var $size_addr;
  var $ptr;
  $size_addr=$size;
  var $0=$size_addr;
  var $call=_xmalloc($0);
  $ptr=$call;
  var $1=$ptr;
  var $2=$size_addr;
  _memset($1, 0, $2, 1);
  var $3=$ptr;
  ;
  return $3;
}


function _xstrndup($s, $n) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $n_addr;
      var $m;
      var $t;
      $s_addr=$s;
      $n_addr=$n;
      var $0=$n_addr;
      $m=$0;
      var $1=$s_addr;
      $t=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$m;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 7; break; }
    case 4: 
      var $3=$t;
      var $4=HEAP8[($3)];
      var $tobool1=(($4 << 24) >> 24)!=0;
      if ($tobool1) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      __label__ = 7; break;
    case 6: 
      var $5=$m;
      var $dec=((($5)-(1))|0);
      $m=$dec;
      var $6=$t;
      var $incdec_ptr=(($6+1)|0);
      $t=$incdec_ptr;
      __label__ = 3; break;
    case 7: 
      var $7=$m;
      var $8=$n_addr;
      var $sub=((($8)-($7))|0);
      $n_addr=$sub;
      var $9=$n_addr;
      var $add=((($9)+(1))|0);
      var $call=_xmalloc($add);
      $t=$call;
      var $10=$n_addr;
      var $11=$t;
      var $arrayidx=(($11+$10)|0);
      HEAP8[($arrayidx)]=0;
      var $12=$t;
      var $13=$s_addr;
      var $14=$n_addr;
      assert($14 % 1 === 0, 'memcpy given ' + $14 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($12, $13, $14, 1);
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fflush_all() {
  ;
  var __label__;

  var $call=_fflush(0);
  ;
  return $call;
}


function _itoa_to_buf($n, $buf, $buflen) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $n_addr;
      var $buf_addr;
      var $buflen_addr;
      $n_addr=$n;
      $buf_addr=$buf;
      $buflen_addr=$buflen;
      var $0=$buflen_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$buf_addr;
      $retval=$1;
      __label__ = 7; break;
    case 4: 
      var $2=$n_addr;
      var $cmp=(($2)|0) < 0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $3=$n_addr;
      var $sub=(((-$3))|0);
      $n_addr=$sub;
      var $4=$buf_addr;
      var $incdec_ptr=(($4+1)|0);
      $buf_addr=$incdec_ptr;
      HEAP8[($4)]=45;
      var $5=$buflen_addr;
      var $dec=((($5)-(1))|0);
      $buflen_addr=$dec;
      __label__ = 6; break;
    case 6: 
      var $6=$n_addr;
      var $7=$buf_addr;
      var $8=$buflen_addr;
      var $call=_utoa_to_buf($6, $7, $8);
      $retval=$call;
      __label__ = 7; break;
    case 7: 
      var $9=$retval;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _itoa($n) {
  ;
  var __label__;

  var $n_addr;
  $n_addr=$n;
  var $0=$n_addr;
  var $call=_itoa_to_buf($0, ((_local_buf)|0), 11);
  HEAP8[($call)]=0;
  ;
  return ((_local_buf)|0);
}


function _xfopen_stdin($filename) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $filename_addr;
      var $fp;
      $filename_addr=$filename;
      var $0=$filename_addr;
      var $call=_fopen_or_warn_stdin($0);
      $fp=$call;
      var $1=$fp;
      var $tobool=(($1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$fp;
      ;
      return $2;
    case 4: 
      _xfunc_die();
      throw "Reached an unreachable!"
    default: assert(0, "bad label: " + __label__);
  }
}


function _xmalloc($size) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $size_addr;
      var $ptr;
      $size_addr=$size;
      var $0=$size_addr;
      var $call=_malloc($0);
      $ptr=$call;
      var $1=$ptr;
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$size_addr;
      var $cmp1=(($2)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      _bb_error_msg_and_die(((STRING_TABLE.__str70)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE._bb_msg_memory_exhausted)|0),tempInt));
      throw "Reached an unreachable!"
    case 5: 
      var $3=$ptr;
      STACKTOP = __stackBase__;
      return $3;
    default: assert(0, "bad label: " + __label__);
  }
}


function _xrealloc($ptr, $size) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $ptr_addr;
      var $size_addr;
      $ptr_addr=$ptr;
      $size_addr=$size;
      var $0=$ptr_addr;
      var $1=$size_addr;
      var $call=_realloc($0, $1);
      $ptr_addr=$call;
      var $2=$ptr_addr;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $3=$size_addr;
      var $cmp1=(($3)|0)!=0;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      _bb_error_msg_and_die(((STRING_TABLE.__str70)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE._bb_msg_memory_exhausted)|0),tempInt));
      throw "Reached an unreachable!"
    case 5: 
      var $4=$ptr_addr;
      STACKTOP = __stackBase__;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _xstrdup($s) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $s_addr;
      var $t;
      $s_addr=$s;
      var $0=$s_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 7; break;
    case 4: 
      var $1=$s_addr;
      var $call=_strdup($1);
      $t=$call;
      var $2=$t;
      var $cmp1=(($2)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      _bb_error_msg_and_die(((STRING_TABLE.__str70)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE._bb_msg_memory_exhausted)|0),tempInt));
      throw "Reached an unreachable!"
    case 6: 
      var $3=$t;
      $retval=$3;
      __label__ = 7; break;
    case 7: 
      var $4=$retval;
      STACKTOP = __stackBase__;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _xfopen($path, $mode) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $path_addr;
      var $mode_addr;
      var $fp;
      $path_addr=$path;
      $mode_addr=$mode;
      var $0=$path_addr;
      var $1=$mode_addr;
      var $call=_fopen($0, $1);
      $fp=$call;
      var $2=$fp;
      var $cmp=(($2)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $3=$path_addr;
      _bb_perror_msg_and_die(((STRING_TABLE.__str171)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$3,tempInt));
      throw "Reached an unreachable!"
    case 4: 
      var $4=$fp;
      STACKTOP = __stackBase__;
      return $4;
    default: assert(0, "bad label: " + __label__);
  }
}


function _xasprintf($format) {
  var __stackBase__  = STACKTOP; STACKTOP += 8; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $format_addr;
      var $p=__stackBase__;
      var $r;
      var $string_ptr=(__stackBase__)+(4);
      $format_addr=$format;
      var $p1=$p;
      HEAP32[(($p1)>>2)]=arguments[_xasprintf.length];
      var $0=$format_addr;
      var $1=HEAP32[(($p)>>2)];
      var $call=_vasprintf($string_ptr, $0, $1);
      $r=$call;
      var $p2=$p;
      ;
      var $2=$r;
      var $cmp=(($2)|0) < 0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      _bb_error_msg_and_die(((STRING_TABLE.__str70)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=((STRING_TABLE._bb_msg_memory_exhausted)|0),tempInt));
      throw "Reached an unreachable!"
    case 4: 
      var $3=HEAP32[(($string_ptr)>>2)];
      STACKTOP = __stackBase__;
      return $3;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bb_process_escape_sequence($ptr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $ptr_addr;
      var $q;
      var $num_digits;
      var $n;
      var $base;
      var $r;
      var $d;
      var $p;
      $ptr_addr=$ptr;
      $n=0;
      $num_digits=0;
      $base=8;
      var $0=$ptr_addr;
      var $1=HEAP32[(($0)>>2)];
      $q=$1;
      var $2=$q;
      var $3=HEAP8[($2)];
      var $conv=(($3 << 24) >> 24);
      var $cmp=(($conv)|0)==120;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$q;
      var $incdec_ptr=(($4+1)|0);
      $q=$incdec_ptr;
      $base=16;
      var $5=$num_digits;
      var $inc=((($5)+(1))|0);
      $num_digits=$inc;
      __label__ = 4; break;
    case 4: 
      __label__ = 5; break;
    case 5: 
      var $6=$q;
      var $7=HEAP8[($6)];
      var $conv2=(($7 << 24) >> 24);
      var $or=$conv2 | 32;
      var $conv3=(($or) & 255);
      var $conv4=(($conv3)&255);
      var $sub=((($conv4)-(48))|0);
      $d=$sub;
      var $8=$d;
      var $cmp5=(($8)>>>0) >= 10;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $9=$d;
      var $add=((($9)-(39))|0);
      $d=$add;
      __label__ = 7; break;
    case 7: 
      var $10=$d;
      var $11=$base;
      var $cmp9=(($10)>>>0) >= (($11)>>>0);
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 13; break; }
    case 8: 
      var $12=$base;
      var $cmp12=(($12)|0)==16;
      if ($cmp12) { __label__ = 9; break; } else { __label__ = 12; break; }
    case 9: 
      var $13=$num_digits;
      var $dec=((($13)-(1))|0);
      $num_digits=$dec;
      var $14=$num_digits;
      var $cmp15=(($14)|0)==0;
      if ($cmp15) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      $retval=92;
      __label__ = 25; break;
    case 11: 
      __label__ = 12; break;
    case 12: 
      __label__ = 17; break;
    case 13: 
      var $15=$n;
      var $16=$base;
      var $mul=((($15)*($16))|0);
      var $17=$d;
      var $add21=((($mul)+($17))|0);
      $r=$add21;
      var $18=$r;
      var $cmp22=(($18)>>>0) > 255;
      if ($cmp22) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      __label__ = 17; break;
    case 15: 
      var $19=$r;
      $n=$19;
      var $20=$q;
      var $incdec_ptr26=(($20+1)|0);
      $q=$incdec_ptr26;
      __label__ = 16; break;
    case 16: 
      var $21=$num_digits;
      var $inc27=((($21)+(1))|0);
      $num_digits=$inc27;
      var $cmp28=(($inc27)>>>0) < 3;
      if ($cmp28) { __label__ = 5; break; } else { __label__ = 17; break; }
    case 17: 
      var $22=$num_digits;
      var $cmp30=(($22)|0)==0;
      if ($cmp30) { __label__ = 18; break; } else { __label__ = 24; break; }
    case 18: 
      $p=((STRING_TABLE._bb_process_escape_sequence_charmap)|0);
      __label__ = 19; break;
    case 19: 
      var $23=$p;
      var $24=HEAP8[($23)];
      var $conv34=(($24 << 24) >> 24);
      var $25=$q;
      var $26=HEAP8[($25)];
      var $conv35=(($26 << 24) >> 24);
      var $cmp36=(($conv34)|0)==(($conv35)|0);
      if ($cmp36) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $27=$q;
      var $incdec_ptr39=(($27+1)|0);
      $q=$incdec_ptr39;
      __label__ = 23; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $28=$p;
      var $incdec_ptr42=(($28+1)|0);
      $p=$incdec_ptr42;
      var $29=HEAP8[($incdec_ptr42)];
      var $conv43=(($29 << 24) >> 24);
      var $cmp44=(($conv43)|0)!=0;
      if ($cmp44) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 23: 
      var $30=$p;
      var $arrayidx=(($30+10)|0);
      var $31=HEAP8[($arrayidx)];
      var $conv47=(($31 << 24) >> 24);
      $n=$conv47;
      __label__ = 24; break;
    case 24: 
      var $32=$q;
      var $33=$ptr_addr;
      HEAP32[(($33)>>2)]=$32;
      var $34=$n;
      var $conv49=(($34) & 255);
      $retval=$conv49;
      __label__ = 25; break;
    case 25: 
      var $35=$retval;
      ;
      return $35;
    default: assert(0, "bad label: " + __label__);
  }
}
_bb_process_escape_sequence["X"]=1;

function _bb_verror_msg($s, $p, $strerr) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $p_addr;
      var $strerr_addr;
      var $msg=__stackBase__;
      var $msg1;
      var $applet_len;
      var $strerr_len;
      var $msgeol_len;
      var $used;
      $s_addr=$s;
      $p_addr=$p;
      $strerr_addr=$strerr;
      var $0=HEAP8[(_logmode)];
      var $tobool=(($0 << 24) >> 24)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      __label__ = 21; break;
    case 4: 
      var $1=$s_addr;
      var $tobool1=(($1)|0)!=0;
      if ($tobool1) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      $s_addr=((__str1121)|0);
      __label__ = 6; break;
    case 6: 
      var $2=$s_addr;
      var $3=$p_addr;
      var $call=_vasprintf($msg, $2, $3);
      $used=$call;
      var $4=$used;
      var $cmp=(($4)|0) < 0;
      if ($cmp) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 21; break;
    case 8: 
      var $5=HEAP32[((_applet_name)>>2)];
      var $call6=_strlen($5);
      var $add=((($call6)+(2))|0);
      $applet_len=$add;
      var $6=$strerr_addr;
      var $tobool7=(($6)|0)!=0;
      if ($tobool7) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $7=$strerr_addr;
      var $call8=_strlen($7);
      var $cond = $call8;__label__ = 11; break;
    case 10: 
      var $cond = 0;__label__ = 11; break;
    case 11: 
      var $cond;
      $strerr_len=$cond;
      var $8=HEAP32[((_msg_eol)>>2)];
      var $call9=_strlen($8);
      $msgeol_len=$call9;
      var $9=HEAP32[(($msg)>>2)];
      var $10=$applet_len;
      var $11=$used;
      var $add10=((($10)+($11))|0);
      var $12=$strerr_len;
      var $add11=((($add10)+($12))|0);
      var $13=$msgeol_len;
      var $add12=((($add11)+($13))|0);
      var $add13=((($add12)+(3))|0);
      var $call14=_realloc($9, $add13);
      $msg1=$call14;
      var $14=$msg1;
      var $tobool15=(($14)|0)!=0;
      if ($tobool15) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $15=$used;
      var $inc=((($15)+(1))|0);
      $used=$inc;
      var $16=HEAP32[(($msg)>>2)];
      var $arrayidx=(($16+$15)|0);
      HEAP8[($arrayidx)]=10;
      $applet_len=0;
      __label__ = 18; break;
    case 13: 
      var $17=$msg1;
      HEAP32[(($msg)>>2)]=$17;
      var $18=HEAP32[(($msg)>>2)];
      var $19=$applet_len;
      var $add_ptr=(($18+$19)|0);
      var $20=HEAP32[(($msg)>>2)];
      var $21=$used;
      _llvm_memmove_p0i8_p0i8_i32($add_ptr, $20, $21, 1, 0);
      var $22=$applet_len;
      var $23=$used;
      var $add17=((($23)+($22))|0);
      $used=$add17;
      var $24=HEAP32[(($msg)>>2)];
      var $25=HEAP32[((_applet_name)>>2)];
      var $call18=_strcpy($24, $25);
      var $26=$applet_len;
      var $sub=((($26)-(2))|0);
      var $27=HEAP32[(($msg)>>2)];
      var $arrayidx19=(($27+$sub)|0);
      HEAP8[($arrayidx19)]=58;
      var $28=$applet_len;
      var $sub20=((($28)-(1))|0);
      var $29=HEAP32[(($msg)>>2)];
      var $arrayidx21=(($29+$sub20)|0);
      HEAP8[($arrayidx21)]=32;
      var $30=$strerr_addr;
      var $tobool22=(($30)|0)!=0;
      if ($tobool22) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $31=$s_addr;
      var $arrayidx24=(($31)|0);
      var $32=HEAP8[($arrayidx24)];
      var $tobool25=(($32 << 24) >> 24)!=0;
      if ($tobool25) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $33=$used;
      var $inc27=((($33)+(1))|0);
      $used=$inc27;
      var $34=HEAP32[(($msg)>>2)];
      var $arrayidx28=(($34+$33)|0);
      HEAP8[($arrayidx28)]=58;
      var $35=$used;
      var $inc29=((($35)+(1))|0);
      $used=$inc29;
      var $36=HEAP32[(($msg)>>2)];
      var $arrayidx30=(($36+$35)|0);
      HEAP8[($arrayidx30)]=32;
      __label__ = 16; break;
    case 16: 
      var $37=$used;
      var $38=HEAP32[(($msg)>>2)];
      var $arrayidx32=(($38+$37)|0);
      var $39=$strerr_addr;
      var $call33=_strcpy($arrayidx32, $39);
      var $40=$strerr_len;
      var $41=$used;
      var $add34=((($41)+($40))|0);
      $used=$add34;
      __label__ = 17; break;
    case 17: 
      var $42=$used;
      var $43=HEAP32[(($msg)>>2)];
      var $arrayidx36=(($43+$42)|0);
      var $44=HEAP32[((_msg_eol)>>2)];
      var $call37=_strcpy($arrayidx36, $44);
      var $45=$msgeol_len;
      var $46=$used;
      var $add38=((($46)+($45))|0);
      $used=$add38;
      __label__ = 18; break;
    case 18: 
      var $47=HEAP8[(_logmode)];
      var $conv=(($47 << 24) >> 24);
      var $and=$conv & 1;
      var $tobool40=(($and)|0)!=0;
      if ($tobool40) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $call42=_fflush_all();
      var $48=HEAP32[(($msg)>>2)];
      var $49=$used;
      var $call43=_full_write(3, $48, $49);
      __label__ = 20; break;
    case 20: 
      var $50=HEAP32[(($msg)>>2)];
      _free($50);
      __label__ = 21; break;
    case 21: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_bb_verror_msg["X"]=1;

function _bb_error_msg($s) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $s_addr;
  var $p=__stackBase__;
  $s_addr=$s;
  var $p1=$p;
  HEAP32[(($p1)>>2)]=arguments[_bb_error_msg.length];
  var $0=$s_addr;
  var $1=HEAP32[(($p)>>2)];
  _bb_verror_msg($0, $1, 0);
  var $p2=$p;
  ;
  STACKTOP = __stackBase__;
  return;
}


function _bb_perror_msg($s) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $p=__stackBase__;
      $s_addr=$s;
      var $p1=$p;
      HEAP32[(($p1)>>2)]=arguments[_bb_perror_msg.length];
      var $0=$s_addr;
      var $1=HEAP32[(($p)>>2)];
      var $call=___errno();
      var $2=HEAP32[(($call)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $call2=___errno();
      var $3=HEAP32[(($call2)>>2)];
      var $call3=_strerror($3);
      var $cond = $call3;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      _bb_verror_msg($0, $1, $cond);
      var $p4=$p;
      ;
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bb_simple_perror_msg($s) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $s_addr;
  $s_addr=$s;
  var $0=$s_addr;
  _bb_perror_msg(((STRING_TABLE.__str130)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$0,tempInt));
  STACKTOP = __stackBase__;
  return;
}


function _safe_read($fd, $buf, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $fd_addr;
      var $buf_addr;
      var $count_addr;
      var $n;
      $fd_addr=$fd;
      $buf_addr=$buf;
      $count_addr=$count;
      __label__ = 3; break;
    case 3: 
      var $0=$fd_addr;
      var $1=$buf_addr;
      var $2=$count_addr;
      var $call=_read($0, $1, $2);
      $n=$call;
      __label__ = 4; break;
    case 4: 
      var $3=$n;
      var $cmp=(($3)|0) < 0;
      if ($cmp) { __label__ = 5; break; } else { var $5 = 0;__label__ = 6; break; }
    case 5: 
      var $call1=___errno();
      var $4=HEAP32[(($call1)>>2)];
      var $cmp2=(($4)|0)==4;
      var $5 = $cmp2;__label__ = 6; break;
    case 6: 
      var $5;
      if ($5) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 7: 
      var $6=$n;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _full_write($fd, $buf, $len) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $fd_addr;
      var $buf_addr;
      var $len_addr;
      var $cc;
      var $total;
      $fd_addr=$fd;
      $buf_addr=$buf;
      $len_addr=$len;
      $total=0;
      __label__ = 3; break;
    case 3: 
      var $0=$len_addr;
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 4; break; } else { __label__ = 9; break; }
    case 4: 
      var $1=$fd_addr;
      var $2=$buf_addr;
      var $3=$len_addr;
      var $call=_safe_write($1, $2, $3);
      $cc=$call;
      var $4=$cc;
      var $cmp=(($4)|0) < 0;
      if ($cmp) { __label__ = 5; break; } else { __label__ = 8; break; }
    case 5: 
      var $5=$total;
      var $tobool1=(($5)|0)!=0;
      if ($tobool1) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $6=$total;
      $retval=$6;
      __label__ = 10; break;
    case 7: 
      var $7=$cc;
      $retval=$7;
      __label__ = 10; break;
    case 8: 
      var $8=$cc;
      var $9=$total;
      var $add=((($9)+($8))|0);
      $total=$add;
      var $10=$buf_addr;
      var $11=$cc;
      var $add_ptr=(($10+$11)|0);
      $buf_addr=$add_ptr;
      var $12=$cc;
      var $13=$len_addr;
      var $sub=((($13)-($12))|0);
      $len_addr=$sub;
      __label__ = 3; break;
    case 9: 
      var $14=$total;
      $retval=$14;
      __label__ = 10; break;
    case 10: 
      var $15=$retval;
      ;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}


function _safe_write($fd, $buf, $count) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $fd_addr;
      var $buf_addr;
      var $count_addr;
      var $n;
      $fd_addr=$fd;
      $buf_addr=$buf;
      $count_addr=$count;
      __label__ = 3; break;
    case 3: 
      var $0=$fd_addr;
      var $1=$buf_addr;
      var $2=$count_addr;
      var $call=_write($0, $1, $2);
      $n=$call;
      __label__ = 4; break;
    case 4: 
      var $3=$n;
      var $cmp=(($3)|0) < 0;
      if ($cmp) { __label__ = 5; break; } else { var $5 = 0;__label__ = 6; break; }
    case 5: 
      var $call1=___errno();
      var $4=HEAP32[(($call1)>>2)];
      var $cmp2=(($4)|0)==4;
      var $5 = $cmp2;__label__ = 6; break;
    case 6: 
      var $5;
      if ($5) { __label__ = 3; break; } else { __label__ = 7; break; }
    case 7: 
      var $6=$n;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _vasprintf($string_ptr, $format, $p) {
  var __stackBase__  = STACKTOP; STACKTOP += 136; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $string_ptr_addr;
      var $format_addr;
      var $p_addr=__stackBase__;
      var $r;
      var $p2=(__stackBase__)+(4);
      var $buf=(__stackBase__)+(8);
      $string_ptr_addr=$string_ptr;
      $format_addr=$format;
      HEAP32[(($p_addr)>>2)]=$p;
      var $0=$p2;
      var $1=$p_addr;
      _llvm_va_copy($0, $1);
      var $arraydecay=(($buf)|0);
      var $2=$format_addr;
      var $3=HEAP32[(($p_addr)>>2)];
      var $call=_vsnprintf($arraydecay, 128, $2, $3);
      $r=$call;
      var $p_addr1=$p_addr;
      ;
      var $4=$r;
      var $cmp=(($4)|0) < 128;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $p22=$p2;
      ;
      var $arraydecay3=(($buf)|0);
      var $call4=_xstrdup($arraydecay3);
      var $5=$string_ptr_addr;
      HEAP32[(($5)>>2)]=$call4;
      var $6=$r;
      $retval=$6;
      __label__ = 5; break;
    case 4: 
      var $7=$r;
      var $add=((($7)+(1))|0);
      var $call5=_xmalloc($add);
      var $8=$string_ptr_addr;
      HEAP32[(($8)>>2)]=$call5;
      var $9=$string_ptr_addr;
      var $10=HEAP32[(($9)>>2)];
      var $11=$r;
      var $add6=((($11)+(1))|0);
      var $12=$format_addr;
      var $13=HEAP32[(($p2)>>2)];
      var $call7=_vsnprintf($10, $add6, $12, $13);
      $r=$call7;
      var $p28=$p2;
      ;
      var $14=$r;
      $retval=$14;
      __label__ = 5; break;
    case 5: 
      var $15=$retval;
      STACKTOP = __stackBase__;
      return $15;
    default: assert(0, "bad label: " + __label__);
  }
}
_vasprintf["X"]=1;

function _regcomp_or_errmsg($preg, $regex, $cflags) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $preg_addr;
      var $regex_addr;
      var $cflags_addr;
      var $ret;
      var $errmsgsz;
      var $errmsg;
      $preg_addr=$preg;
      $regex_addr=$regex;
      $cflags_addr=$cflags;
      var $0=$preg_addr;
      var $1=$regex_addr;
      var $2=$cflags_addr;
      var $call=_regcomp($0, $1, $2);
      $ret=$call;
      var $3=$ret;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$ret;
      var $5=$preg_addr;
      var $call1=_regerror($4, $5, 0, 0);
      $errmsgsz=$call1;
      var $6=$errmsgsz;
      var $call2=_xmalloc($6);
      $errmsg=$call2;
      var $7=$ret;
      var $8=$preg_addr;
      var $9=$errmsg;
      var $10=$errmsgsz;
      var $call3=_regerror($7, $8, $9, $10);
      var $11=$errmsg;
      $retval=$11;
      __label__ = 5; break;
    case 4: 
      $retval=0;
      __label__ = 5; break;
    case 5: 
      var $12=$retval;
      ;
      return $12;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bb_error_msg_and_die($s) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $p=__stackBase__;
      $s_addr=$s;
      var $p1=$p;
      HEAP32[(($p1)>>2)]=arguments[_bb_error_msg_and_die.length];
      var $0=$s_addr;
      var $1=HEAP32[(($p)>>2)];
      _bb_verror_msg($0, $1, 0);
      var $p2=$p;
      ;
      _xfunc_die();
      throw "Reached an unreachable!"
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bb_perror_msg_and_die($s) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      var $p=__stackBase__;
      $s_addr=$s;
      var $p1=$p;
      HEAP32[(($p1)>>2)]=arguments[_bb_perror_msg_and_die.length];
      var $0=$s_addr;
      var $1=HEAP32[(($p)>>2)];
      var $call=___errno();
      var $2=HEAP32[(($call)>>2)];
      var $tobool=(($2)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $call2=___errno();
      var $3=HEAP32[(($call2)>>2)];
      var $call3=_strerror($3);
      var $cond = $call3;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      _bb_verror_msg($0, $1, $cond);
      var $p4=$p;
      ;
      _xfunc_die();
      throw "Reached an unreachable!"
    case 6: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bb_simple_perror_msg_and_die($s) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $s_addr;
      $s_addr=$s;
      var $0=$s_addr;
      _bb_perror_msg_and_die(((STRING_TABLE.__str130)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$0,tempInt));
      throw "Reached an unreachable!"
    case 3: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _xfunc_die() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $0=HEAP32[((_die_sleep)>>2)];
      var $tobool=(($0)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $1=HEAP32[((_die_sleep)>>2)];
      var $call=_sleep($1);
      __label__ = 4; break;
    case 4: 
      _exit(1);
      throw "Reached an unreachable!"
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _xregcomp($preg, $regex, $cflags) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $preg_addr;
      var $regex_addr;
      var $cflags_addr;
      var $errmsg;
      $preg_addr=$preg;
      $regex_addr=$regex;
      $cflags_addr=$cflags;
      var $0=$preg_addr;
      var $1=$regex_addr;
      var $2=$cflags_addr;
      var $call=_regcomp_or_errmsg($0, $1, $2);
      $errmsg=$call;
      var $3=$errmsg;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$regex_addr;
      var $5=$errmsg;
      _bb_error_msg_and_die(((STRING_TABLE.__str161)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$4,HEAP32[(((tempInt)+(4))>>2)]=$5,tempInt));
      throw "Reached an unreachable!"
    case 4: 
      STACKTOP = __stackBase__;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bb_show_usage() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $0=HEAP32[((_stdout)>>2)];
      var $call=_fputs(((STRING_TABLE.__str5177)|0), $0);
      _exit(1);
      throw "Reached an unreachable!"
    case 3: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _fixed_getopt32($argv, $options, $opt_F, $list_v, $list_f) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $argv_addr;
      var $options_addr;
      var $opt_F_addr;
      var $list_v_addr;
      var $list_f_addr;
      var $argc;
      var $c;
      var $flags;
      $argv_addr=$argv;
      $options_addr=$options;
      $opt_F_addr=$opt_F;
      $list_v_addr=$list_v;
      $list_f_addr=$list_f;
      var $0=$options_addr;
      var $call=_strcmp($0, ((STRING_TABLE.__str6178)|0));
      var $cmp=(($call)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      _bb_simple_perror_msg_and_die(((STRING_TABLE.__str7179)|0));
      throw "Reached an unreachable!"
    case 4: 
      $argc=1;
      __label__ = 5; break;
    case 5: 
      var $1=$argc;
      var $2=$argv_addr;
      var $arrayidx=(($2+($1<<2))|0);
      var $3=HEAP32[(($arrayidx)>>2)];
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $4=$argc;
      var $5=$argc;
      var $6=$argv_addr;
      var $arrayidx1=(($6+($5<<2))|0);
      var $7=HEAP32[(($arrayidx1)>>2)];
      var $8=$argc;
      var $inc=((($8)+(1))|0);
      $argc=$inc;
      __label__ = 5; break;
    case 7: 
      $flags=0;
      __label__ = 8; break;
    case 8: 
      var $9=$argc;
      var $10=$argv_addr;
      var $11=$options_addr;
      var $call3=_getopt($9, $10, $11);
      $c=$call3;
      var $cmp4=(($call3)|0)!=-1;
      if ($cmp4) { __label__ = 9; break; } else { __label__ = 16; break; }
    case 9: 
      var $12=$c;
      var $13=$c;
      if ((($13)|0) == 70) {
        __label__ = 10; break;
      }
      else if ((($13)|0) == 118) {
        __label__ = 11; break;
      }
      else if ((($13)|0) == 102) {
        __label__ = 12; break;
      }
      else if ((($13)|0) == 87) {
        __label__ = 13; break;
      }
      else {
      __label__ = 14; break;
      }
      
    case 10: 
      var $14=$flags;
      var $xor=$14 ^ 1;
      $flags=$xor;
      var $15=HEAP32[((_optarg)>>2)];
      $opt_F_addr=$15;
      var $16=$opt_F_addr;
      __label__ = 15; break;
    case 11: 
      var $17=$flags;
      var $xor7=$17 ^ 2;
      $flags=$xor7;
      var $18=HEAP32[((_optarg)>>2)];
      var $19=$list_v_addr;
      var $20=$19;
      var $21=HEAP32[((_optarg)>>2)];
      _llist_add_to_end($20, $21);
      __label__ = 15; break;
    case 12: 
      var $22=$flags;
      var $xor9=$22 ^ 4;
      $flags=$xor9;
      var $23=HEAP32[((_optarg)>>2)];
      var $24=$list_f_addr;
      var $25=$24;
      var $26=HEAP32[((_optarg)>>2)];
      _llist_add_to_end($25, $26);
      __label__ = 15; break;
    case 13: 
      var $27=$flags;
      var $xor11=$27 ^ 8;
      $flags=$xor11;
      __label__ = 15; break;
    case 14: 
      _bb_simple_perror_msg_and_die(((STRING_TABLE.__str14186)|0));
      throw "Reached an unreachable!"
    case 15: 
      __label__ = 8; break;
    case 16: 
      var $28=$flags;
      ;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}
_fixed_getopt32["X"]=1;

function _regerror($errcode, $preg, $errbuf, $errbuf_size) {
  var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $errcode_addr;
      var $preg_addr;
      var $errbuf_addr;
      var $errbuf_size_addr;
      var $r;
      var $len;
      var $target;
      var $s;
      var $convbuf=__stackBase__;
      $errcode_addr=$errcode;
      $preg_addr=$preg;
      $errbuf_addr=$errbuf;
      $errbuf_size_addr=$errbuf_size;
      var $0=$errcode_addr;
      var $and=$0 & -257;
      $target=$and;
      var $1=$errcode_addr;
      var $cmp=(($1)|0)==255;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$preg_addr;
      var $arraydecay=(($convbuf)|0);
      var $call=_regatoi($2, $arraydecay);
      $s=$call;
      __label__ = 17; break;
    case 4: 
      $r=((_rerrs)|0);
      __label__ = 5; break;
    case 5: 
      var $3=$r;
      var $code=(($3)|0);
      var $4=HEAP32[(($code)>>2)];
      var $cmp1=(($4)|0)!=0;
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $5=$r;
      var $code2=(($5)|0);
      var $6=HEAP32[(($code2)>>2)];
      var $7=$target;
      var $cmp3=(($6)|0)==(($7)|0);
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 10; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $8=$r;
      var $incdec_ptr=(($8+12)|0);
      $r=$incdec_ptr;
      __label__ = 5; break;
    case 10: 
      var $9=$errcode_addr;
      var $and5=$9 & 256;
      var $tobool=(($and5)|0)!=0;
      if ($tobool) { __label__ = 11; break; } else { __label__ = 15; break; }
    case 11: 
      var $10=$r;
      var $code7=(($10)|0);
      var $11=HEAP32[(($code7)>>2)];
      var $cmp8=(($11)|0)!=0;
      if ($cmp8) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $arraydecay10=(($convbuf)|0);
      var $12=$r;
      var $name=(($12+4)|0);
      var $13=HEAP32[(($name)>>2)];
      var $call11=_strcpy($arraydecay10, $13);
      __label__ = 14; break;
    case 13: 
      var $arraydecay13=(($convbuf)|0);
      var $14=$target;
      var $call14=_sprintf($arraydecay13, ((STRING_TABLE.__str197)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$14,tempInt));
      __label__ = 14; break;
    case 14: 
      var $arraydecay16=(($convbuf)|0);
      $s=$arraydecay16;
      __label__ = 16; break;
    case 15: 
      var $15=$r;
      var $explain=(($15+8)|0);
      var $16=HEAP32[(($explain)>>2)];
      $s=$16;
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $17=$s;
      var $call20=_strlen($17);
      var $add=((($call20)+(1))|0);
      $len=$add;
      var $18=$errbuf_size_addr;
      var $cmp21=(($18)>>>0) > 0;
      if ($cmp21) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $19=$errbuf_size_addr;
      var $20=$len;
      var $cmp23=(($19)>>>0) > (($20)>>>0);
      if ($cmp23) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $21=$errbuf_addr;
      var $22=$s;
      var $call25=_strcpy($21, $22);
      __label__ = 21; break;
    case 20: 
      var $23=$errbuf_addr;
      var $24=$s;
      var $25=$errbuf_size_addr;
      var $sub=((($25)-(1))|0);
      var $call27=_strncpy($23, $24, $sub);
      var $26=$errbuf_size_addr;
      var $sub28=((($26)-(1))|0);
      var $27=$errbuf_addr;
      var $arrayidx=(($27+$sub28)|0);
      HEAP8[($arrayidx)]=0;
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $28=$len;
      STACKTOP = __stackBase__;
      return $28;
    default: assert(0, "bad label: " + __label__);
  }
}
_regerror["X"]=1;

function _regatoi($preg, $localbuf) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $preg_addr;
      var $localbuf_addr;
      var $r;
      $preg_addr=$preg;
      $localbuf_addr=$localbuf;
      $r=((_rerrs)|0);
      __label__ = 3; break;
    case 3: 
      var $0=$r;
      var $code=(($0)|0);
      var $1=HEAP32[(($code)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $2=$r;
      var $name=(($2+4)|0);
      var $3=HEAP32[(($name)>>2)];
      var $4=$preg_addr;
      var $re_endp=(($4+8)|0);
      var $5=HEAP32[(($re_endp)>>2)];
      var $call=_strcmp($3, $5);
      var $cmp1=(($call)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 8; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $6=$r;
      var $incdec_ptr=(($6+12)|0);
      $r=$incdec_ptr;
      __label__ = 3; break;
    case 8: 
      var $7=$r;
      var $code2=(($7)|0);
      var $8=HEAP32[(($code2)>>2)];
      var $cmp3=(($8)|0)==0;
      if ($cmp3) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=((STRING_TABLE.__str1198)|0);
      __label__ = 11; break;
    case 10: 
      var $9=$localbuf_addr;
      var $10=$r;
      var $code6=(($10)|0);
      var $11=HEAP32[(($code6)>>2)];
      var $call7=_sprintf($9, ((STRING_TABLE.__str2199)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$11,tempInt));
      var $12=$localbuf_addr;
      $retval=$12;
      __label__ = 11; break;
    case 11: 
      var $13=$retval;
      STACKTOP = __stackBase__;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _regfree($preg) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $preg_addr;
      var $g;
      $preg_addr=$preg;
      var $0=$preg_addr;
      var $re_magic=(($0)|0);
      var $1=HEAP32[(($re_magic)>>2)];
      var $cmp=(($1)|0)!=62053;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 20; break;
    case 4: 
      var $2=$preg_addr;
      var $re_g=(($2+12)|0);
      var $3=HEAP32[(($re_g)>>2)];
      $g=$3;
      var $4=$g;
      var $cmp1=(($4)|0)==0;
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 5; break; }
    case 5: 
      var $5=$g;
      var $magic=(($5)|0);
      var $6=HEAP32[(($magic)>>2)];
      var $cmp2=(($6)|0)!=53829;
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      __label__ = 20; break;
    case 7: 
      var $7=$preg_addr;
      var $re_magic5=(($7)|0);
      HEAP32[(($re_magic5)>>2)]=0;
      var $8=$g;
      var $magic6=(($8)|0);
      HEAP32[(($magic6)>>2)]=0;
      var $9=$g;
      var $strip=(($9+4)|0);
      var $10=HEAP32[(($strip)>>2)];
      var $cmp7=(($10)|0)!=0;
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $11=$g;
      var $strip9=(($11+4)|0);
      var $12=HEAP32[(($strip9)>>2)];
      var $13=$12;
      _free($13);
      __label__ = 9; break;
    case 9: 
      var $14=$g;
      var $sets=(($14+16)|0);
      var $15=HEAP32[(($sets)>>2)];
      var $cmp11=(($15)|0)!=0;
      if ($cmp11) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $16=$g;
      var $sets13=(($16+16)|0);
      var $17=HEAP32[(($sets13)>>2)];
      var $18=$17;
      _free($18);
      __label__ = 11; break;
    case 11: 
      var $19=$g;
      var $setbits=(($19+20)|0);
      var $20=HEAP32[(($setbits)>>2)];
      var $cmp15=(($20)|0)!=0;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $21=$g;
      var $setbits17=(($21+20)|0);
      var $22=HEAP32[(($setbits17)>>2)];
      _free($22);
      __label__ = 13; break;
    case 13: 
      var $23=$g;
      var $must=(($23+60)|0);
      var $24=HEAP32[(($must)>>2)];
      var $cmp19=(($24)|0)!=0;
      if ($cmp19) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $25=$g;
      var $must21=(($25+60)|0);
      var $26=HEAP32[(($must21)>>2)];
      _free($26);
      __label__ = 15; break;
    case 15: 
      var $27=$g;
      var $charjump=(($27+68)|0);
      var $28=HEAP32[(($charjump)>>2)];
      var $cmp23=(($28)|0)!=0;
      if ($cmp23) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $29=$g;
      var $charjump25=(($29+68)|0);
      var $30=HEAP32[(($charjump25)>>2)];
      var $arrayidx=((($30)-(512))|0);
      var $31=$arrayidx;
      _free($31);
      __label__ = 17; break;
    case 17: 
      var $32=$g;
      var $matchjump=(($32+72)|0);
      var $33=HEAP32[(($matchjump)>>2)];
      var $cmp27=(($33)|0)!=0;
      if ($cmp27) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $34=$g;
      var $matchjump29=(($34+72)|0);
      var $35=HEAP32[(($matchjump29)>>2)];
      var $36=$35;
      _free($36);
      __label__ = 19; break;
    case 19: 
      var $37=$g;
      var $38=$37;
      _free($38);
      __label__ = 20; break;
    case 20: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_regfree["X"]=1;

function _regcomp($preg, $pattern, $cflags) {
  var __stackBase__  = STACKTOP; STACKTOP += 112; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $preg_addr;
      var $pattern_addr;
      var $cflags_addr;
      var $pa=__stackBase__;
      var $g;
      var $p;
      var $i;
      var $len;
      $preg_addr=$preg;
      $pattern_addr=$pattern;
      $cflags_addr=$cflags;
      $p=$pa;
      var $0=$cflags_addr;
      var $and=$0 & -129;
      $cflags_addr=$and;
      var $1=$cflags_addr;
      var $and1=$1 & 1;
      var $tobool=(($and1)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $2=$cflags_addr;
      var $and2=$2 & 16;
      var $tobool3=(($and2)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=16;
      __label__ = 34; break;
    case 5: 
      var $3=$cflags_addr;
      var $and4=$3 & 32;
      var $tobool5=(($and4)|0)!=0;
      if ($tobool5) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $4=$preg_addr;
      var $re_endp=(($4+8)|0);
      var $5=HEAP32[(($re_endp)>>2)];
      var $6=$pattern_addr;
      var $cmp=(($5)>>>0) < (($6)>>>0);
      if ($cmp) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $retval=16;
      __label__ = 34; break;
    case 8: 
      var $7=$preg_addr;
      var $re_endp9=(($7+8)|0);
      var $8=HEAP32[(($re_endp9)>>2)];
      var $9=$pattern_addr;
      var $sub_ptr_lhs_cast=$8;
      var $sub_ptr_rhs_cast=$9;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $len=$sub_ptr_sub;
      __label__ = 10; break;
    case 9: 
      var $10=$pattern_addr;
      var $call=_strlen($10);
      $len=$call;
      __label__ = 10; break;
    case 10: 
      var $call11=_malloc(351);
      var $11=$call11;
      $g=$11;
      var $12=$g;
      var $cmp12=(($12)|0)==0;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      $retval=12;
      __label__ = 34; break;
    case 12: 
      var $13=$len;
      var $div=Math.floor(((($13)>>>0))/(2));
      var $mul=((($div)*(3))|0);
      var $add=((($mul)+(1))|0);
      var $14=$p;
      var $ssize=(($14+16)|0);
      HEAP32[(($ssize)>>2)]=$add;
      var $15=$p;
      var $ssize15=(($15+16)|0);
      var $16=HEAP32[(($ssize15)>>2)];
      var $mul16=((($16<<2))|0);
      var $call17=_malloc($mul16);
      var $17=$call17;
      var $18=$p;
      var $strip=(($18+12)|0);
      HEAP32[(($strip)>>2)]=$17;
      var $19=$p;
      var $slen=(($19+20)|0);
      HEAP32[(($slen)>>2)]=0;
      var $20=$p;
      var $strip18=(($20+12)|0);
      var $21=HEAP32[(($strip18)>>2)];
      var $cmp19=(($21)|0)==0;
      if ($cmp19) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $22=$g;
      var $23=$22;
      _free($23);
      $retval=12;
      __label__ = 34; break;
    case 14: 
      var $24=$g;
      var $25=$p;
      var $g22=(($25+28)|0);
      HEAP32[(($g22)>>2)]=$24;
      var $26=$pattern_addr;
      var $27=$p;
      var $next=(($27)|0);
      HEAP32[(($next)>>2)]=$26;
      var $28=$p;
      var $next23=(($28)|0);
      var $29=HEAP32[(($next23)>>2)];
      var $30=$len;
      var $add_ptr=(($29+$30)|0);
      var $31=$p;
      var $end=(($31+4)|0);
      HEAP32[(($end)>>2)]=$add_ptr;
      var $32=$p;
      var $error=(($32+8)|0);
      HEAP32[(($error)>>2)]=0;
      var $33=$p;
      var $ncsalloc=(($33+24)|0);
      HEAP32[(($ncsalloc)>>2)]=0;
      $i=0;
      __label__ = 15; break;
    case 15: 
      var $34=$i;
      var $cmp24=(($34)|0) < 10;
      if ($cmp24) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $35=$i;
      var $36=$p;
      var $pbegin=(($36+32)|0);
      var $arrayidx=(($pbegin+($35<<2))|0);
      HEAP32[(($arrayidx)>>2)]=0;
      var $37=$i;
      var $38=$p;
      var $pend=(($38+72)|0);
      var $arrayidx25=(($pend+($37<<2))|0);
      HEAP32[(($arrayidx25)>>2)]=0;
      __label__ = 17; break;
    case 17: 
      var $39=$i;
      var $inc=((($39)+(1))|0);
      $i=$inc;
      __label__ = 15; break;
    case 18: 
      var $40=$g;
      var $csetsize=(($40+8)|0);
      HEAP32[(($csetsize)>>2)]=256;
      var $41=$g;
      var $sets=(($41+16)|0);
      HEAP32[(($sets)>>2)]=0;
      var $42=$g;
      var $setbits=(($42+20)|0);
      HEAP32[(($setbits)>>2)]=0;
      var $43=$g;
      var $ncsets=(($43+12)|0);
      HEAP32[(($ncsets)>>2)]=0;
      var $44=$cflags_addr;
      var $45=$g;
      var $cflags26=(($45+24)|0);
      HEAP32[(($cflags26)>>2)]=$44;
      var $46=$g;
      var $iflags=(($46+40)|0);
      HEAP32[(($iflags)>>2)]=0;
      var $47=$g;
      var $nbol=(($47+44)|0);
      HEAP32[(($nbol)>>2)]=0;
      var $48=$g;
      var $neol=(($48+48)|0);
      HEAP32[(($neol)>>2)]=0;
      var $49=$g;
      var $must=(($49+60)|0);
      HEAP32[(($must)>>2)]=0;
      var $50=$g;
      var $moffset=(($50+64)|0);
      HEAP32[(($moffset)>>2)]=-1;
      var $51=$g;
      var $charjump=(($51+68)|0);
      HEAP32[(($charjump)>>2)]=0;
      var $52=$g;
      var $matchjump=(($52+72)|0);
      HEAP32[(($matchjump)>>2)]=0;
      var $53=$g;
      var $mlen=(($53+76)|0);
      HEAP32[(($mlen)>>2)]=0;
      var $54=$g;
      var $nsub=(($54+80)|0);
      HEAP32[(($nsub)>>2)]=0;
      var $55=$g;
      var $ncategories=(($55+52)|0);
      HEAP32[(($ncategories)>>2)]=1;
      var $56=$g;
      var $catspace=(($56+92)|0);
      var $arrayidx27=(($catspace+128)|0);
      var $57=$g;
      var $categories=(($57+56)|0);
      HEAP32[(($categories)>>2)]=$arrayidx27;
      var $58=$g;
      var $catspace28=(($58+92)|0);
      var $arraydecay=(($catspace28)|0);
      _memset($arraydecay, 0, 256, 1);
      var $59=$g;
      var $backrefs=(($59+84)|0);
      HEAP32[(($backrefs)>>2)]=0;
      var $60=$p;
      _doemit($60, 134217728, 0);
      var $61=$p;
      var $slen29=(($61+20)|0);
      var $62=HEAP32[(($slen29)>>2)];
      var $sub=((($62)-(1))|0);
      var $63=$g;
      var $firststate=(($63+32)|0);
      HEAP32[(($firststate)>>2)]=$sub;
      var $64=$cflags_addr;
      var $and30=$64 & 1;
      var $tobool31=(($and30)|0)!=0;
      if ($tobool31) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $65=$p;
      _p_ere($65, 128);
      __label__ = 24; break;
    case 20: 
      var $66=$cflags_addr;
      var $and34=$66 & 16;
      var $tobool35=(($and34)|0)!=0;
      if ($tobool35) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $67=$p;
      _p_str($67);
      __label__ = 23; break;
    case 22: 
      var $68=$p;
      _p_bre($68, 128, 128);
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      var $69=$p;
      _doemit($69, 134217728, 0);
      var $70=$p;
      var $slen40=(($70+20)|0);
      var $71=HEAP32[(($slen40)>>2)];
      var $sub41=((($71)-(1))|0);
      var $72=$g;
      var $laststate=(($72+36)|0);
      HEAP32[(($laststate)>>2)]=$sub41;
      var $73=$p;
      var $74=$g;
      _categorize($73, $74);
      var $75=$p;
      var $76=$g;
      _stripsnug($75, $76);
      var $77=$p;
      var $78=$g;
      _findmust($77, $78);
      var $79=$g;
      var $mlen42=(($79+76)|0);
      var $80=HEAP32[(($mlen42)>>2)];
      var $cmp43=(($80)|0) > 3;
      if ($cmp43) { __label__ = 25; break; } else { __label__ = 29; break; }
    case 25: 
      var $81=$p;
      var $82=$g;
      _computejumps($81, $82);
      var $83=$p;
      var $84=$g;
      _computematchjumps($83, $84);
      var $85=$g;
      var $matchjump45=(($85+72)|0);
      var $86=HEAP32[(($matchjump45)>>2)];
      var $cmp46=(($86)|0)==0;
      if ($cmp46) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $87=$g;
      var $charjump48=(($87+68)|0);
      var $88=HEAP32[(($charjump48)>>2)];
      var $cmp49=(($88)|0)!=0;
      if ($cmp49) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $89=$g;
      var $charjump51=(($89+68)|0);
      var $90=HEAP32[(($charjump51)>>2)];
      var $91=$90;
      _free($91);
      var $92=$g;
      var $charjump52=(($92+68)|0);
      HEAP32[(($charjump52)>>2)]=0;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $93=$p;
      var $94=$g;
      var $call55=_pluscount($93, $94);
      var $95=$g;
      var $nplus=(($95+88)|0);
      HEAP32[(($nplus)>>2)]=$call55;
      var $96=$g;
      var $magic=(($96)|0);
      HEAP32[(($magic)>>2)]=53829;
      var $97=$g;
      var $nsub56=(($97+80)|0);
      var $98=HEAP32[(($nsub56)>>2)];
      var $99=$preg_addr;
      var $re_nsub=(($99+4)|0);
      HEAP32[(($re_nsub)>>2)]=$98;
      var $100=$g;
      var $101=$preg_addr;
      var $re_g=(($101+12)|0);
      HEAP32[(($re_g)>>2)]=$100;
      var $102=$preg_addr;
      var $re_magic=(($102)|0);
      HEAP32[(($re_magic)>>2)]=62053;
      var $103=$g;
      var $iflags57=(($103+40)|0);
      var $104=HEAP32[(($iflags57)>>2)];
      var $and58=$104 & 4;
      var $tobool59=(($and58)|0)!=0;
      if ($tobool59) { __label__ = 30; break; } else { __label__ = 31; break; }
    case 30: 
      var $105=$p;
      var $call61=_seterr($105, 15);
      __label__ = 31; break;
    case 31: 
      var $106=$p;
      var $error63=(($106+8)|0);
      var $107=HEAP32[(($error63)>>2)];
      var $cmp64=(($107)|0)!=0;
      if ($cmp64) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $108=$preg_addr;
      _regfree($108);
      __label__ = 33; break;
    case 33: 
      var $109=$p;
      var $error67=(($109+8)|0);
      var $110=HEAP32[(($error67)>>2)];
      $retval=$110;
      __label__ = 34; break;
    case 34: 
      var $111=$retval;
      STACKTOP = __stackBase__;
      return $111;
    default: assert(0, "bad label: " + __label__);
  }
}
_regcomp["X"]=1;

function _doemit($p, $op, $opnd) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $op_addr;
      var $opnd_addr;
      $p_addr=$p;
      $op_addr=$op;
      $opnd_addr=$opnd;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 7; break;
    case 4: 
      var $2=$p_addr;
      var $slen=(($2+20)|0);
      var $3=HEAP32[(($slen)>>2)];
      var $4=$p_addr;
      var $ssize=(($4+16)|0);
      var $5=HEAP32[(($ssize)>>2)];
      var $cmp1=(($3)|0) >= (($5)|0);
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$p_addr;
      var $7=$p_addr;
      var $ssize3=(($7+16)|0);
      var $8=HEAP32[(($ssize3)>>2)];
      var $add=((($8)+(1))|0);
      var $div=((((($add)|0))/(2))&-1);
      var $mul=((($div)*(3))|0);
      _enlarge($6, $mul);
      __label__ = 6; break;
    case 6: 
      var $9=$op_addr;
      var $10=$opnd_addr;
      var $or=$9 | $10;
      var $11=$p_addr;
      var $slen5=(($11+20)|0);
      var $12=HEAP32[(($slen5)>>2)];
      var $inc=((($12)+(1))|0);
      HEAP32[(($slen5)>>2)]=$inc;
      var $13=$p_addr;
      var $strip=(($13+12)|0);
      var $14=HEAP32[(($strip)>>2)];
      var $arrayidx=(($14+($12<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$or;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_ere($p, $stop) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $stop_addr;
      var $c;
      var $prevback;
      var $prevfwd;
      var $conc;
      var $first;
      $p_addr=$p;
      $stop_addr=$stop;
      $first=1;
      __label__ = 3; break;
    case 3: 
      var $0=$p_addr;
      var $slen=(($0+20)|0);
      var $1=HEAP32[(($slen)>>2)];
      $conc=$1;
      __label__ = 4; break;
    case 4: 
      var $2=$p_addr;
      var $next=(($2)|0);
      var $3=HEAP32[(($next)>>2)];
      var $4=$p_addr;
      var $end=(($4+4)|0);
      var $5=HEAP32[(($end)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 5; break; } else { var $11 = 0;__label__ = 7; break; }
    case 5: 
      var $6=$p_addr;
      var $next1=(($6)|0);
      var $7=HEAP32[(($next1)>>2)];
      var $8=HEAP8[($7)];
      $c=$8;
      var $conv=(($8 << 24) >> 24);
      var $cmp2=(($conv)|0)!=124;
      if ($cmp2) { __label__ = 6; break; } else { var $11 = 0;__label__ = 7; break; }
    case 6: 
      var $9=$c;
      var $conv4=(($9 << 24) >> 24);
      var $10=$stop_addr;
      var $cmp5=(($conv4)|0)!=(($10)|0);
      var $11 = $cmp5;__label__ = 7; break;
    case 7: 
      var $11;
      if ($11) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $12=$p_addr;
      _p_ere_exp($12);
      __label__ = 4; break;
    case 9: 
      var $13=$p_addr;
      var $slen7=(($13+20)|0);
      var $14=HEAP32[(($slen7)>>2)];
      var $15=$conc;
      var $cmp8=(($14)|0)!=(($15)|0);
      if ($cmp8) { var $17 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $16=$p_addr;
      var $call=_seterr($16, 14);
      var $tobool=(($call)|0)!=0;
      var $17 = $tobool;__label__ = 11; break;
    case 11: 
      var $17;
      var $lor_ext=(($17)&1);
      var $18=$p_addr;
      var $next10=(($18)|0);
      var $19=HEAP32[(($next10)>>2)];
      var $20=$p_addr;
      var $end11=(($20+4)|0);
      var $21=HEAP32[(($end11)>>2)];
      var $cmp12=(($19)>>>0) < (($21)>>>0);
      if ($cmp12) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $22=$p_addr;
      var $next15=(($22)|0);
      var $23=HEAP32[(($next15)>>2)];
      var $24=HEAP8[($23)];
      var $conv16=(($24 << 24) >> 24);
      var $cmp17=(($conv16)|0)==124;
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $25=$p_addr;
      var $next19=(($25)|0);
      var $26=HEAP32[(($next19)>>2)];
      var $incdec_ptr=(($26+1)|0);
      HEAP32[(($next19)>>2)]=$incdec_ptr;
      if (1) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 14: 
      if (0) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      __label__ = 19; break;
    case 16: 
      var $27=$first;
      var $tobool20=(($27)|0)!=0;
      if ($tobool20) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $28=$p_addr;
      var $29=$p_addr;
      var $slen22=(($29+20)|0);
      var $30=HEAP32[(($slen22)>>2)];
      var $31=$conc;
      var $sub=((($30)-($31))|0);
      var $add=((($sub)+(1))|0);
      var $32=$conc;
      _doinsert($28, 2013265920, $add, $32);
      var $33=$conc;
      $prevfwd=$33;
      var $34=$conc;
      $prevback=$34;
      $first=0;
      __label__ = 18; break;
    case 18: 
      var $35=$p_addr;
      var $36=$p_addr;
      var $slen24=(($36+20)|0);
      var $37=HEAP32[(($slen24)>>2)];
      var $38=$prevback;
      var $sub25=((($37)-($38))|0);
      _doemit($35, -2147483648, $sub25);
      var $39=$p_addr;
      var $slen26=(($39+20)|0);
      var $40=HEAP32[(($slen26)>>2)];
      var $sub27=((($40)-(1))|0);
      $prevback=$sub27;
      var $41=$p_addr;
      var $42=$prevfwd;
      var $43=$p_addr;
      var $slen28=(($43+20)|0);
      var $44=HEAP32[(($slen28)>>2)];
      var $45=$prevfwd;
      var $sub29=((($44)-($45))|0);
      _dofwd($41, $42, $sub29);
      var $46=$p_addr;
      var $slen30=(($46+20)|0);
      var $47=HEAP32[(($slen30)>>2)];
      $prevfwd=$47;
      var $48=$p_addr;
      _doemit($48, -2013265920, 0);
      __label__ = 3; break;
    case 19: 
      var $49=$first;
      var $tobool31=(($49)|0)!=0;
      if ($tobool31) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $50=$p_addr;
      var $51=$prevfwd;
      var $52=$p_addr;
      var $slen33=(($52+20)|0);
      var $53=HEAP32[(($slen33)>>2)];
      var $54=$prevfwd;
      var $sub34=((($53)-($54))|0);
      _dofwd($50, $51, $sub34);
      var $55=$p_addr;
      var $56=$p_addr;
      var $slen35=(($56+20)|0);
      var $57=HEAP32[(($slen35)>>2)];
      var $58=$prevback;
      var $sub36=((($57)-($58))|0);
      _doemit($55, -1879048192, $sub36);
      __label__ = 21; break;
    case 21: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_ere["X"]=1;

function _p_str($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      $p_addr=$p;
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      var $2=$p_addr;
      var $end=(($2+4)|0);
      var $3=HEAP32[(($end)>>2)];
      var $cmp=(($1)>>>0) < (($3)>>>0);
      if ($cmp) { var $5 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$p_addr;
      var $call=_seterr($4, 14);
      var $tobool=(($call)|0)!=0;
      var $5 = $tobool;__label__ = 4; break;
    case 4: 
      var $5;
      var $lor_ext=(($5)&1);
      __label__ = 5; break;
    case 5: 
      var $6=$p_addr;
      var $next1=(($6)|0);
      var $7=HEAP32[(($next1)>>2)];
      var $8=$p_addr;
      var $end2=(($8+4)|0);
      var $9=HEAP32[(($end2)>>2)];
      var $cmp3=(($7)>>>0) < (($9)>>>0);
      if ($cmp3) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$p_addr;
      var $11=$p_addr;
      var $next4=(($11)|0);
      var $12=HEAP32[(($next4)>>2)];
      var $incdec_ptr=(($12+1)|0);
      HEAP32[(($next4)>>2)]=$incdec_ptr;
      var $13=HEAP8[($12)];
      var $conv=(($13 << 24) >> 24);
      _ordinary($10, $conv);
      __label__ = 5; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_bre($p, $end1, $end2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $end1_addr;
      var $end2_addr;
      var $start;
      var $first;
      var $wasdollar;
      $p_addr=$p;
      $end1_addr=$end1;
      $end2_addr=$end2;
      var $0=$p_addr;
      var $slen=(($0+20)|0);
      var $1=HEAP32[(($slen)>>2)];
      $start=$1;
      $first=1;
      $wasdollar=0;
      var $2=$p_addr;
      var $next=(($2)|0);
      var $3=HEAP32[(($next)>>2)];
      var $4=$p_addr;
      var $end=(($4+4)|0);
      var $5=HEAP32[(($end)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $6=$p_addr;
      var $next1=(($6)|0);
      var $7=HEAP32[(($next1)>>2)];
      var $8=HEAP8[($7)];
      var $conv=(($8 << 24) >> 24);
      var $cmp2=(($conv)|0)==94;
      if ($cmp2) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $9=$p_addr;
      var $next4=(($9)|0);
      var $10=HEAP32[(($next4)>>2)];
      var $incdec_ptr=(($10+1)|0);
      HEAP32[(($next4)>>2)]=$incdec_ptr;
      if (1) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 5: 
      if (0) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $11=$p_addr;
      _doemit($11, 402653184, 0);
      var $12=$p_addr;
      var $g=(($12+28)|0);
      var $13=HEAP32[(($g)>>2)];
      var $iflags=(($13+40)|0);
      var $14=HEAP32[(($iflags)>>2)];
      var $or=$14 | 1;
      HEAP32[(($iflags)>>2)]=$or;
      var $15=$p_addr;
      var $g5=(($15+28)|0);
      var $16=HEAP32[(($g5)>>2)];
      var $nbol=(($16+44)|0);
      var $17=HEAP32[(($nbol)>>2)];
      var $inc=((($17)+(1))|0);
      HEAP32[(($nbol)>>2)]=$inc;
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $18=$p_addr;
      var $next6=(($18)|0);
      var $19=HEAP32[(($next6)>>2)];
      var $20=$p_addr;
      var $end7=(($20+4)|0);
      var $21=HEAP32[(($end7)>>2)];
      var $cmp8=(($19)>>>0) < (($21)>>>0);
      if ($cmp8) { __label__ = 9; break; } else { var $39 = 0;__label__ = 14; break; }
    case 9: 
      var $22=$p_addr;
      var $next10=(($22)|0);
      var $23=HEAP32[(($next10)>>2)];
      var $24=$p_addr;
      var $end11=(($24+4)|0);
      var $25=HEAP32[(($end11)>>2)];
      var $cmp12=(($23)>>>0) < (($25)>>>0);
      if ($cmp12) { __label__ = 10; break; } else { var $38 = 0;__label__ = 13; break; }
    case 10: 
      var $26=$p_addr;
      var $next15=(($26)|0);
      var $27=HEAP32[(($next15)>>2)];
      var $add_ptr=(($27+1)|0);
      var $28=$p_addr;
      var $end16=(($28+4)|0);
      var $29=HEAP32[(($end16)>>2)];
      var $cmp17=(($add_ptr)>>>0) < (($29)>>>0);
      if ($cmp17) { __label__ = 11; break; } else { var $38 = 0;__label__ = 13; break; }
    case 11: 
      var $30=$p_addr;
      var $next20=(($30)|0);
      var $31=HEAP32[(($next20)>>2)];
      var $32=HEAP8[($31)];
      var $conv21=(($32 << 24) >> 24);
      var $33=$end1_addr;
      var $cmp22=(($conv21)|0)==(($33)|0);
      if ($cmp22) { __label__ = 12; break; } else { var $38 = 0;__label__ = 13; break; }
    case 12: 
      var $34=$p_addr;
      var $next25=(($34)|0);
      var $35=HEAP32[(($next25)>>2)];
      var $add_ptr26=(($35+1)|0);
      var $36=HEAP8[($add_ptr26)];
      var $conv27=(($36 << 24) >> 24);
      var $37=$end2_addr;
      var $cmp28=(($conv27)|0)==(($37)|0);
      var $38 = $cmp28;__label__ = 13; break;
    case 13: 
      var $38;
      var $lnot=$38 ^ 1;
      var $39 = $lnot;__label__ = 14; break;
    case 14: 
      var $39;
      if ($39) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $40=$p_addr;
      var $41=$first;
      var $call=_p_simp_re($40, $41);
      $wasdollar=$call;
      $first=0;
      __label__ = 8; break;
    case 16: 
      var $42=$wasdollar;
      var $tobool=(($42)|0)!=0;
      if ($tobool) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $43=$p_addr;
      var $slen32=(($43+20)|0);
      var $44=HEAP32[(($slen32)>>2)];
      var $sub=((($44)-(1))|0);
      HEAP32[(($slen32)>>2)]=$sub;
      var $45=$p_addr;
      _doemit($45, 536870912, 0);
      var $46=$p_addr;
      var $g33=(($46+28)|0);
      var $47=HEAP32[(($g33)>>2)];
      var $iflags34=(($47+40)|0);
      var $48=HEAP32[(($iflags34)>>2)];
      var $or35=$48 | 2;
      HEAP32[(($iflags34)>>2)]=$or35;
      var $49=$p_addr;
      var $g36=(($49+28)|0);
      var $50=HEAP32[(($g36)>>2)];
      var $neol=(($50+48)|0);
      var $51=HEAP32[(($neol)>>2)];
      var $inc37=((($51)+(1))|0);
      HEAP32[(($neol)>>2)]=$inc37;
      __label__ = 18; break;
    case 18: 
      var $52=$p_addr;
      var $slen39=(($52+20)|0);
      var $53=HEAP32[(($slen39)>>2)];
      var $54=$start;
      var $cmp40=(($53)|0)!=(($54)|0);
      if ($cmp40) { var $56 = 1;__label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $55=$p_addr;
      var $call42=_seterr($55, 14);
      var $tobool43=(($call42)|0)!=0;
      var $56 = $tobool43;__label__ = 20; break;
    case 20: 
      var $56;
      var $lor_ext=(($56)&1);
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_bre["X"]=1;

function _categorize($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $g_addr;
      var $cats;
      var $c;
      var $c2;
      var $cat;
      $p_addr=$p;
      $g_addr=$g;
      var $0=$g_addr;
      var $categories=(($0+56)|0);
      var $1=HEAP32[(($categories)>>2)];
      $cats=$1;
      var $2=$p_addr;
      var $error=(($2+8)|0);
      var $3=HEAP32[(($error)>>2)];
      var $cmp=(($3)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 18; break;
    case 4: 
      $c=-128;
      __label__ = 5; break;
    case 5: 
      var $4=$c;
      var $cmp1=(($4)|0) <= 127;
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 18; break; }
    case 6: 
      var $5=$c;
      var $6=$cats;
      var $arrayidx=(($6+$5)|0);
      var $7=HEAP8[($arrayidx)];
      var $conv=(($7)&255);
      var $cmp2=(($conv)|0)==0;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 16; break; }
    case 7: 
      var $8=$g_addr;
      var $9=$c;
      var $call=_isinsets($8, $9);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 8; break; } else { __label__ = 16; break; }
    case 8: 
      var $10=$g_addr;
      var $ncategories=(($10+52)|0);
      var $11=HEAP32[(($ncategories)>>2)];
      var $inc=((($11)+(1))|0);
      HEAP32[(($ncategories)>>2)]=$inc;
      var $conv5=(($11) & 255);
      $cat=$conv5;
      var $12=$cat;
      var $13=$c;
      var $14=$cats;
      var $arrayidx6=(($14+$13)|0);
      HEAP8[($arrayidx6)]=$12;
      var $15=$c;
      var $add=((($15)+(1))|0);
      $c2=$add;
      __label__ = 9; break;
    case 9: 
      var $16=$c2;
      var $cmp8=(($16)|0) <= 127;
      if ($cmp8) { __label__ = 10; break; } else { __label__ = 15; break; }
    case 10: 
      var $17=$c2;
      var $18=$cats;
      var $arrayidx11=(($18+$17)|0);
      var $19=HEAP8[($arrayidx11)];
      var $conv12=(($19)&255);
      var $cmp13=(($conv12)|0)==0;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 13; break; }
    case 11: 
      var $20=$g_addr;
      var $21=$c;
      var $22=$c2;
      var $call16=_samesets($20, $21, $22);
      var $tobool17=(($call16)|0)!=0;
      if ($tobool17) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $23=$cat;
      var $24=$c2;
      var $25=$cats;
      var $arrayidx19=(($25+$24)|0);
      HEAP8[($arrayidx19)]=$23;
      __label__ = 13; break;
    case 13: 
      __label__ = 14; break;
    case 14: 
      var $26=$c2;
      var $inc21=((($26)+(1))|0);
      $c2=$inc21;
      __label__ = 9; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      __label__ = 17; break;
    case 17: 
      var $27=$c;
      var $inc24=((($27)+(1))|0);
      $c=$inc24;
      __label__ = 5; break;
    case 18: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_categorize["X"]=1;

function _stripsnug($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $g_addr;
      $p_addr=$p;
      $g_addr=$g;
      var $0=$p_addr;
      var $slen=(($0+20)|0);
      var $1=HEAP32[(($slen)>>2)];
      var $2=$g_addr;
      var $nstates=(($2+28)|0);
      HEAP32[(($nstates)>>2)]=$1;
      var $3=$p_addr;
      var $strip=(($3+12)|0);
      var $4=HEAP32[(($strip)>>2)];
      var $5=$4;
      var $6=$p_addr;
      var $slen1=(($6+20)|0);
      var $7=HEAP32[(($slen1)>>2)];
      var $mul=((($7<<2))|0);
      var $call=_realloc($5, $mul);
      var $8=$call;
      var $9=$g_addr;
      var $strip2=(($9+4)|0);
      HEAP32[(($strip2)>>2)]=$8;
      var $10=$g_addr;
      var $strip3=(($10+4)|0);
      var $11=HEAP32[(($strip3)>>2)];
      var $cmp=(($11)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $12=$p_addr;
      var $call4=_seterr($12, 12);
      var $13=$p_addr;
      var $strip5=(($13+12)|0);
      var $14=HEAP32[(($strip5)>>2)];
      var $15=$g_addr;
      var $strip6=(($15+4)|0);
      HEAP32[(($strip6)>>2)]=$14;
      __label__ = 4; break;
    case 4: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _findmust($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $g_addr;
      var $scan;
      var $start;
      var $newstart;
      var $newlen;
      var $s;
      var $cp;
      var $i;
      var $offset;
      var $cs;
      var $mccs;
      $p_addr=$p;
      $g_addr=$g;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 79; break;
    case 4: 
      $mccs=0;
      $cs=0;
      __label__ = 5; break;
    case 5: 
      var $2=$cs;
      var $3=$g_addr;
      var $ncsets=(($3+12)|0);
      var $4=HEAP32[(($ncsets)>>2)];
      var $cmp1=(($2)|0) < (($4)|0);
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 10; break; }
    case 6: 
      var $5=$cs;
      var $6=$g_addr;
      var $sets=(($6+16)|0);
      var $7=HEAP32[(($sets)>>2)];
      var $arrayidx=(($7+($5<<4))|0);
      var $multis=(($arrayidx+12)|0);
      var $8=HEAP32[(($multis)>>2)];
      var $cmp2=(($8)|0)!=0;
      if ($cmp2) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      $mccs=1;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      var $9=$cs;
      var $inc=((($9)+(1))|0);
      $cs=$inc;
      __label__ = 5; break;
    case 10: 
      $newlen=0;
      $offset=0;
      var $10=$g_addr;
      var $moffset=(($10+64)|0);
      HEAP32[(($moffset)>>2)]=0;
      var $11=$g_addr;
      var $strip=(($11+4)|0);
      var $12=HEAP32[(($strip)>>2)];
      var $add_ptr=(($12+4)|0);
      $scan=$add_ptr;
      __label__ = 11; break;
    case 11: 
      var $13=$scan;
      var $incdec_ptr=(($13+4)|0);
      $scan=$incdec_ptr;
      var $14=HEAP32[(($13)>>2)];
      $s=$14;
      var $15=$s;
      var $and=$15 & -134217728;
      if ((($and)|0) == 268435456) {
        __label__ = 12; break;
      }
      else if ((($and)|0) == 1207959552 || (($and)|0) == 1744830464 || (($and)|0) == 1879048192) {
        __label__ = 15; break;
      }
      else if ((($and)|0) == 1476395008 || (($and)|0) == 2013265920) {
        __label__ = 16; break;
      }
      else if ((($and)|0) == -1744830464 || (($and)|0) == -1610612736 || (($and)|0) == 402653184 || (($and)|0) == 536870912 || (($and)|0) == 1610612736 || (($and)|0) == -1879048192 || (($and)|0) == 134217728) {
        __label__ = 26; break;
      }
      else if ((($and)|0) == 671088640) {
        __label__ = 35; break;
      }
      else if ((($and)|0) == 805306368) {
        __label__ = 46; break;
      }
      else {
      __label__ = 59; break;
      }
      
    case 12: 
      var $16=$newlen;
      var $cmp5=(($16)|0)==0;
      if ($cmp5) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $17=$scan;
      var $add_ptr7=((($17)-(4))|0);
      $newstart=$add_ptr7;
      __label__ = 14; break;
    case 14: 
      var $18=$newlen;
      var $inc9=((($18)+(1))|0);
      $newlen=$inc9;
      __label__ = 65; break;
    case 15: 
      __label__ = 65; break;
    case 16: 
      var $19=$scan;
      var $20=$offset;
      var $21=$mccs;
      var $call=_altoffset($19, $20, $21);
      $offset=$call;
      var $22=$scan;
      var $incdec_ptr12=((($22)-(4))|0);
      $scan=$incdec_ptr12;
      __label__ = 17; break;
    case 17: 
      var $23=$s;
      var $and14=$23 & 134217727;
      var $24=$scan;
      var $add_ptr15=(($24+($and14<<2))|0);
      $scan=$add_ptr15;
      var $25=$scan;
      var $26=HEAP32[(($25)>>2)];
      $s=$26;
      var $27=$s;
      var $and16=$27 & -134217728;
      var $cmp17=(($and16)|0)!=1610612736;
      if ($cmp17) { __label__ = 18; break; } else { __label__ = 21; break; }
    case 18: 
      var $28=$s;
      var $and18=$28 & -134217728;
      var $cmp19=(($and18)|0)!=-1879048192;
      if ($cmp19) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $29=$s;
      var $and21=$29 & -134217728;
      var $cmp22=(($and21)|0)!=-2013265920;
      if ($cmp22) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $30=$g_addr;
      var $iflags=(($30+40)|0);
      var $31=HEAP32[(($iflags)>>2)];
      var $or=$31 | 4;
      HEAP32[(($iflags)>>2)]=$or;
      __label__ = 79; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $32=$s;
      var $and25=$32 & -134217728;
      var $cmp26=(($and25)|0)!=1610612736;
      if ($cmp26) { __label__ = 23; break; } else { var $34 = 0;__label__ = 24; break; }
    case 23: 
      var $33=$s;
      var $and27=$33 & -134217728;
      var $cmp28=(($and27)|0)!=-1879048192;
      var $34 = $cmp28;__label__ = 24; break;
    case 24: 
      var $34;
      if ($34) { __label__ = 17; break; } else { __label__ = 25; break; }
    case 25: 
      __label__ = 26; break;
    case 26: 
      var $35=$newlen;
      var $36=$g_addr;
      var $mlen=(($36+76)|0);
      var $37=HEAP32[(($mlen)>>2)];
      var $cmp30=(($35)|0) > (($37)|0);
      if ($cmp30) { __label__ = 27; break; } else { __label__ = 31; break; }
    case 27: 
      var $38=$newstart;
      $start=$38;
      var $39=$newlen;
      var $40=$g_addr;
      var $mlen32=(($40+76)|0);
      HEAP32[(($mlen32)>>2)]=$39;
      var $41=$offset;
      var $cmp33=(($41)|0) > -1;
      if ($cmp33) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $42=$offset;
      var $43=$g_addr;
      var $moffset35=(($43+64)|0);
      var $44=HEAP32[(($moffset35)>>2)];
      var $add=((($44)+($42))|0);
      HEAP32[(($moffset35)>>2)]=$add;
      var $45=$newlen;
      $offset=$45;
      __label__ = 30; break;
    case 29: 
      var $46=$offset;
      var $47=$g_addr;
      var $moffset36=(($47+64)|0);
      HEAP32[(($moffset36)>>2)]=$46;
      __label__ = 30; break;
    case 30: 
      __label__ = 34; break;
    case 31: 
      var $48=$offset;
      var $cmp39=(($48)|0) > -1;
      if ($cmp39) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      var $49=$newlen;
      var $50=$offset;
      var $add41=((($50)+($49))|0);
      $offset=$add41;
      __label__ = 33; break;
    case 33: 
      __label__ = 34; break;
    case 34: 
      $newlen=0;
      __label__ = 65; break;
    case 35: 
      var $51=$newlen;
      var $52=$g_addr;
      var $mlen45=(($52+76)|0);
      var $53=HEAP32[(($mlen45)>>2)];
      var $cmp46=(($51)|0) > (($53)|0);
      if ($cmp46) { __label__ = 36; break; } else { __label__ = 40; break; }
    case 36: 
      var $54=$newstart;
      $start=$54;
      var $55=$newlen;
      var $56=$g_addr;
      var $mlen48=(($56+76)|0);
      HEAP32[(($mlen48)>>2)]=$55;
      var $57=$offset;
      var $cmp49=(($57)|0) > -1;
      if ($cmp49) { __label__ = 37; break; } else { __label__ = 38; break; }
    case 37: 
      var $58=$offset;
      var $59=$g_addr;
      var $moffset51=(($59+64)|0);
      var $60=HEAP32[(($moffset51)>>2)];
      var $add52=((($60)+($58))|0);
      HEAP32[(($moffset51)>>2)]=$add52;
      var $61=$newlen;
      $offset=$61;
      __label__ = 39; break;
    case 38: 
      var $62=$offset;
      var $63=$g_addr;
      var $moffset54=(($63+64)|0);
      HEAP32[(($moffset54)>>2)]=$62;
      __label__ = 39; break;
    case 39: 
      __label__ = 43; break;
    case 40: 
      var $64=$offset;
      var $cmp57=(($64)|0) > -1;
      if ($cmp57) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $65=$newlen;
      var $66=$offset;
      var $add59=((($66)+($65))|0);
      $offset=$add59;
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $67=$offset;
      var $cmp62=(($67)|0) > -1;
      if ($cmp62) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $68=$offset;
      var $inc64=((($68)+(1))|0);
      $offset=$inc64;
      __label__ = 45; break;
    case 45: 
      $newlen=0;
      __label__ = 65; break;
    case 46: 
      var $69=$newlen;
      var $70=$g_addr;
      var $mlen67=(($70+76)|0);
      var $71=HEAP32[(($mlen67)>>2)];
      var $cmp68=(($69)|0) > (($71)|0);
      if ($cmp68) { __label__ = 47; break; } else { __label__ = 51; break; }
    case 47: 
      var $72=$newstart;
      $start=$72;
      var $73=$newlen;
      var $74=$g_addr;
      var $mlen70=(($74+76)|0);
      HEAP32[(($mlen70)>>2)]=$73;
      var $75=$offset;
      var $cmp71=(($75)|0) > -1;
      if ($cmp71) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $76=$offset;
      var $77=$g_addr;
      var $moffset73=(($77+64)|0);
      var $78=HEAP32[(($moffset73)>>2)];
      var $add74=((($78)+($76))|0);
      HEAP32[(($moffset73)>>2)]=$add74;
      var $79=$newlen;
      $offset=$79;
      __label__ = 50; break;
    case 49: 
      var $80=$offset;
      var $81=$g_addr;
      var $moffset76=(($81+64)|0);
      HEAP32[(($moffset76)>>2)]=$80;
      __label__ = 50; break;
    case 50: 
      __label__ = 54; break;
    case 51: 
      var $82=$offset;
      var $cmp79=(($82)|0) > -1;
      if ($cmp79) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $83=$newlen;
      var $84=$offset;
      var $add81=((($84)+($83))|0);
      $offset=$add81;
      __label__ = 53; break;
    case 53: 
      __label__ = 54; break;
    case 54: 
      var $85=$offset;
      var $cmp84=(($85)|0) > -1;
      if ($cmp84) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $86=$offset;
      var $inc86=((($86)+(1))|0);
      $offset=$inc86;
      __label__ = 56; break;
    case 56: 
      $newlen=0;
      var $87=$mccs;
      var $tobool=(($87)|0)!=0;
      if ($tobool) { __label__ = 57; break; } else { __label__ = 58; break; }
    case 57: 
      $offset=-1;
      __label__ = 58; break;
    case 58: 
      __label__ = 65; break;
    case 59: 
      var $88=$newlen;
      var $89=$g_addr;
      var $mlen90=(($89+76)|0);
      var $90=HEAP32[(($mlen90)>>2)];
      var $cmp91=(($88)|0) > (($90)|0);
      if ($cmp91) { __label__ = 60; break; } else { __label__ = 64; break; }
    case 60: 
      var $91=$newstart;
      $start=$91;
      var $92=$newlen;
      var $93=$g_addr;
      var $mlen93=(($93+76)|0);
      HEAP32[(($mlen93)>>2)]=$92;
      var $94=$offset;
      var $cmp94=(($94)|0) > -1;
      if ($cmp94) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $95=$offset;
      var $96=$g_addr;
      var $moffset96=(($96+64)|0);
      var $97=HEAP32[(($moffset96)>>2)];
      var $add97=((($97)+($95))|0);
      HEAP32[(($moffset96)>>2)]=$add97;
      __label__ = 63; break;
    case 62: 
      var $98=$offset;
      var $99=$g_addr;
      var $moffset99=(($99+64)|0);
      HEAP32[(($moffset99)>>2)]=$98;
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      $offset=-1;
      $newlen=0;
      __label__ = 65; break;
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $100=$s;
      var $and103=$100 & -134217728;
      var $cmp104=(($and103)|0)!=134217728;
      if ($cmp104) { __label__ = 11; break; } else { __label__ = 67; break; }
    case 67: 
      var $101=$g_addr;
      var $mlen106=(($101+76)|0);
      var $102=HEAP32[(($mlen106)>>2)];
      var $cmp107=(($102)|0)==0;
      if ($cmp107) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $103=$g_addr;
      var $moffset109=(($103+64)|0);
      HEAP32[(($moffset109)>>2)]=-1;
      __label__ = 79; break;
    case 69: 
      var $104=$g_addr;
      var $mlen111=(($104+76)|0);
      var $105=HEAP32[(($mlen111)>>2)];
      var $add112=((($105)+(1))|0);
      var $call113=_malloc($add112);
      var $106=$g_addr;
      var $must=(($106+60)|0);
      HEAP32[(($must)>>2)]=$call113;
      var $107=$g_addr;
      var $must114=(($107+60)|0);
      var $108=HEAP32[(($must114)>>2)];
      var $cmp115=(($108)|0)==0;
      if ($cmp115) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $109=$g_addr;
      var $mlen117=(($109+76)|0);
      HEAP32[(($mlen117)>>2)]=0;
      var $110=$g_addr;
      var $moffset118=(($110+64)|0);
      HEAP32[(($moffset118)>>2)]=-1;
      __label__ = 79; break;
    case 71: 
      var $111=$g_addr;
      var $must120=(($111+60)|0);
      var $112=HEAP32[(($must120)>>2)];
      $cp=$112;
      var $113=$start;
      $scan=$113;
      var $114=$g_addr;
      var $mlen121=(($114+76)|0);
      var $115=HEAP32[(($mlen121)>>2)];
      $i=$115;
      __label__ = 72; break;
    case 72: 
      var $116=$i;
      var $cmp123=(($116)|0) > 0;
      if ($cmp123) { __label__ = 73; break; } else { __label__ = 78; break; }
    case 73: 
      __label__ = 74; break;
    case 74: 
      var $117=$scan;
      var $incdec_ptr125=(($117+4)|0);
      $scan=$incdec_ptr125;
      var $118=HEAP32[(($117)>>2)];
      $s=$118;
      var $and126=$118 & -134217728;
      var $cmp127=(($and126)|0)!=268435456;
      if ($cmp127) { __label__ = 75; break; } else { __label__ = 76; break; }
    case 75: 
      __label__ = 74; break;
    case 76: 
      var $119=$s;
      var $and128=$119 & 134217727;
      var $conv=(($and128) & 255);
      var $120=$cp;
      var $incdec_ptr129=(($120+1)|0);
      $cp=$incdec_ptr129;
      HEAP8[($120)]=$conv;
      __label__ = 77; break;
    case 77: 
      var $121=$i;
      var $dec=((($121)-(1))|0);
      $i=$dec;
      __label__ = 72; break;
    case 78: 
      var $122=$cp;
      var $incdec_ptr132=(($122+1)|0);
      $cp=$incdec_ptr132;
      HEAP8[($122)]=0;
      __label__ = 79; break;
    case 79: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_findmust["X"]=1;

function _pluscount($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $g_addr;
      var $scan;
      var $s;
      var $plusnest;
      var $maxnest;
      $p_addr=$p;
      $g_addr=$g;
      $plusnest=0;
      $maxnest=0;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 15; break;
    case 4: 
      var $2=$g_addr;
      var $strip=(($2+4)|0);
      var $3=HEAP32[(($strip)>>2)];
      var $add_ptr=(($3+4)|0);
      $scan=$add_ptr;
      __label__ = 5; break;
    case 5: 
      var $4=$scan;
      var $incdec_ptr=(($4+4)|0);
      $scan=$incdec_ptr;
      var $5=HEAP32[(($4)>>2)];
      $s=$5;
      var $6=$s;
      var $and=$6 & -134217728;
      if ((($and)|0) == 1207959552) {
        __label__ = 6; break;
      }
      else if ((($and)|0) == 1342177280) {
        __label__ = 7; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 6: 
      var $7=$plusnest;
      var $inc=((($7)+(1))|0);
      $plusnest=$inc;
      __label__ = 10; break;
    case 7: 
      var $8=$plusnest;
      var $9=$maxnest;
      var $cmp2=(($8)|0) > (($9)|0);
      if ($cmp2) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $10=$plusnest;
      $maxnest=$10;
      __label__ = 9; break;
    case 9: 
      var $11=$plusnest;
      var $dec=((($11)-(1))|0);
      $plusnest=$dec;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $12=$s;
      var $and5=$12 & -134217728;
      var $cmp6=(($and5)|0)!=134217728;
      if ($cmp6) { __label__ = 5; break; } else { __label__ = 12; break; }
    case 12: 
      var $13=$plusnest;
      var $cmp7=(($13)|0)!=0;
      if ($cmp7) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $14=$g_addr;
      var $iflags=(($14+40)|0);
      var $15=HEAP32[(($iflags)>>2)];
      var $or=$15 | 4;
      HEAP32[(($iflags)>>2)]=$or;
      __label__ = 14; break;
    case 14: 
      var $16=$maxnest;
      $retval=$16;
      __label__ = 15; break;
    case 15: 
      var $17=$retval;
      ;
      return $17;
    default: assert(0, "bad label: " + __label__);
  }
}
_pluscount["X"]=1;

function _seterr($p, $e) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $e_addr;
      $p_addr=$p;
      $e_addr=$e;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$e_addr;
      var $3=$p_addr;
      var $error1=(($3+8)|0);
      HEAP32[(($error1)>>2)]=$2;
      __label__ = 4; break;
    case 4: 
      var $4=$p_addr;
      var $next=(($4)|0);
      HEAP32[(($next)>>2)]=((_nuls)|0);
      var $5=$p_addr;
      var $end=(($5+4)|0);
      HEAP32[(($end)>>2)]=((_nuls)|0);
      ;
      return 0;
    default: assert(0, "bad label: " + __label__);
  }
}


function _isinsets($g, $c) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $g_addr;
      var $c_addr;
      var $col;
      var $i;
      var $ncols;
      var $uc;
      $g_addr=$g;
      $c_addr=$c;
      var $0=$g_addr;
      var $ncsets=(($0+12)|0);
      var $1=HEAP32[(($ncsets)>>2)];
      var $add=((($1)+(7))|0);
      var $div=((((($add)|0))/(8))&-1);
      $ncols=$div;
      var $2=$c_addr;
      var $conv=(($2) & 255);
      var $conv1=(($conv)&255);
      $uc=$conv1;
      $i=0;
      var $3=$g_addr;
      var $setbits=(($3+20)|0);
      var $4=HEAP32[(($setbits)>>2)];
      $col=$4;
      __label__ = 3; break;
    case 3: 
      var $5=$i;
      var $6=$ncols;
      var $cmp=(($5)|0) < (($6)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $7=$uc;
      var $8=$col;
      var $arrayidx=(($8+$7)|0);
      var $9=HEAP8[($arrayidx)];
      var $conv3=(($9)&255);
      var $cmp4=(($conv3)|0)!=0;
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=1;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $10=$i;
      var $inc=((($10)+(1))|0);
      $i=$inc;
      var $11=$g_addr;
      var $csetsize=(($11+8)|0);
      var $12=HEAP32[(($csetsize)>>2)];
      var $13=$col;
      var $add_ptr=(($13+$12)|0);
      $col=$add_ptr;
      __label__ = 3; break;
    case 8: 
      $retval=0;
      __label__ = 9; break;
    case 9: 
      var $14=$retval;
      ;
      return $14;
    default: assert(0, "bad label: " + __label__);
  }
}
_isinsets["X"]=1;

function _computejumps($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $g_addr;
      var $ch;
      var $mindex;
      $p_addr=$p;
      $g_addr=$g;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 14; break;
    case 4: 
      var $call=_malloc(1028);
      var $2=$call;
      var $3=$g_addr;
      var $charjump=(($3+68)|0);
      HEAP32[(($charjump)>>2)]=$2;
      var $4=$g_addr;
      var $charjump1=(($4+68)|0);
      var $5=HEAP32[(($charjump1)>>2)];
      var $cmp2=(($5)|0)==0;
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      __label__ = 14; break;
    case 6: 
      var $6=$g_addr;
      var $charjump5=(($6+68)|0);
      var $7=HEAP32[(($charjump5)>>2)];
      var $arrayidx=(($7+512)|0);
      var $8=$g_addr;
      var $charjump6=(($8+68)|0);
      HEAP32[(($charjump6)>>2)]=$arrayidx;
      $ch=-128;
      __label__ = 7; break;
    case 7: 
      var $9=$ch;
      var $cmp7=(($9)|0) < 128;
      if ($cmp7) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $10=$g_addr;
      var $mlen=(($10+76)|0);
      var $11=HEAP32[(($mlen)>>2)];
      var $12=$ch;
      var $13=$g_addr;
      var $charjump8=(($13+68)|0);
      var $14=HEAP32[(($charjump8)>>2)];
      var $arrayidx9=(($14+($12<<2))|0);
      HEAP32[(($arrayidx9)>>2)]=$11;
      __label__ = 9; break;
    case 9: 
      var $15=$ch;
      var $inc=((($15)+(1))|0);
      $ch=$inc;
      __label__ = 7; break;
    case 10: 
      $mindex=0;
      __label__ = 11; break;
    case 11: 
      var $16=$mindex;
      var $17=$g_addr;
      var $mlen11=(($17+76)|0);
      var $18=HEAP32[(($mlen11)>>2)];
      var $cmp12=(($16)|0) < (($18)|0);
      if ($cmp12) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $19=$g_addr;
      var $mlen14=(($19+76)|0);
      var $20=HEAP32[(($mlen14)>>2)];
      var $21=$mindex;
      var $sub=((($20)-($21))|0);
      var $sub15=((($sub)-(1))|0);
      var $22=$mindex;
      var $23=$g_addr;
      var $must=(($23+60)|0);
      var $24=HEAP32[(($must)>>2)];
      var $arrayidx16=(($24+$22)|0);
      var $25=HEAP8[($arrayidx16)];
      var $idxprom=(($25 << 24) >> 24);
      var $26=$g_addr;
      var $charjump17=(($26+68)|0);
      var $27=HEAP32[(($charjump17)>>2)];
      var $arrayidx18=(($27+($idxprom<<2))|0);
      HEAP32[(($arrayidx18)>>2)]=$sub15;
      __label__ = 13; break;
    case 13: 
      var $28=$mindex;
      var $inc20=((($28)+(1))|0);
      $mindex=$inc20;
      __label__ = 11; break;
    case 14: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_computejumps["X"]=1;

function _computematchjumps($p, $g) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $g_addr;
      var $mindex;
      var $suffix;
      var $ssuffix;
      var $pmatches;
      $p_addr=$p;
      $g_addr=$g;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 45; break;
    case 4: 
      var $2=$g_addr;
      var $mlen=(($2+76)|0);
      var $3=HEAP32[(($mlen)>>2)];
      var $mul=((($3<<2))|0);
      var $call=_malloc($mul);
      var $4=$call;
      $pmatches=$4;
      var $5=$pmatches;
      var $cmp1=(($5)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$g_addr;
      var $matchjump=(($6+72)|0);
      HEAP32[(($matchjump)>>2)]=0;
      __label__ = 45; break;
    case 6: 
      var $7=$g_addr;
      var $mlen4=(($7+76)|0);
      var $8=HEAP32[(($mlen4)>>2)];
      var $mul5=((($8<<2))|0);
      var $call6=_malloc($mul5);
      var $9=$call6;
      var $10=$g_addr;
      var $matchjump7=(($10+72)|0);
      HEAP32[(($matchjump7)>>2)]=$9;
      var $11=$g_addr;
      var $matchjump8=(($11+72)|0);
      var $12=HEAP32[(($matchjump8)>>2)];
      var $cmp9=(($12)|0)==0;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      __label__ = 45; break;
    case 8: 
      $mindex=0;
      __label__ = 9; break;
    case 9: 
      var $13=$mindex;
      var $14=$g_addr;
      var $mlen12=(($14+76)|0);
      var $15=HEAP32[(($mlen12)>>2)];
      var $cmp13=(($13)|0) < (($15)|0);
      if ($cmp13) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $16=$g_addr;
      var $mlen14=(($16+76)|0);
      var $17=HEAP32[(($mlen14)>>2)];
      var $mul15=((($17<<1))|0);
      var $18=$mindex;
      var $sub=((($mul15)-($18))|0);
      var $sub16=((($sub)-(1))|0);
      var $19=$mindex;
      var $20=$g_addr;
      var $matchjump17=(($20+72)|0);
      var $21=HEAP32[(($matchjump17)>>2)];
      var $arrayidx=(($21+($19<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$sub16;
      __label__ = 11; break;
    case 11: 
      var $22=$mindex;
      var $inc=((($22)+(1))|0);
      $mindex=$inc;
      __label__ = 9; break;
    case 12: 
      var $23=$g_addr;
      var $mlen18=(($23+76)|0);
      var $24=HEAP32[(($mlen18)>>2)];
      var $sub19=((($24)-(1))|0);
      $mindex=$sub19;
      var $25=$g_addr;
      var $mlen20=(($25+76)|0);
      var $26=HEAP32[(($mlen20)>>2)];
      $suffix=$26;
      __label__ = 13; break;
    case 13: 
      var $27=$mindex;
      var $cmp22=(($27)|0) >= 0;
      if ($cmp22) { __label__ = 14; break; } else { __label__ = 24; break; }
    case 14: 
      var $28=$suffix;
      var $29=$mindex;
      var $30=$pmatches;
      var $arrayidx24=(($30+($29<<2))|0);
      HEAP32[(($arrayidx24)>>2)]=$28;
      __label__ = 15; break;
    case 15: 
      var $31=$suffix;
      var $32=$g_addr;
      var $mlen25=(($32+76)|0);
      var $33=HEAP32[(($mlen25)>>2)];
      var $cmp26=(($31)|0) < (($33)|0);
      if ($cmp26) { __label__ = 16; break; } else { var $42 = 0;__label__ = 17; break; }
    case 16: 
      var $34=$mindex;
      var $35=$g_addr;
      var $must=(($35+60)|0);
      var $36=HEAP32[(($must)>>2)];
      var $arrayidx27=(($36+$34)|0);
      var $37=HEAP8[($arrayidx27)];
      var $conv=(($37 << 24) >> 24);
      var $38=$suffix;
      var $39=$g_addr;
      var $must28=(($39+60)|0);
      var $40=HEAP32[(($must28)>>2)];
      var $arrayidx29=(($40+$38)|0);
      var $41=HEAP8[($arrayidx29)];
      var $conv30=(($41 << 24) >> 24);
      var $cmp31=(($conv)|0)!=(($conv30)|0);
      var $42 = $cmp31;__label__ = 17; break;
    case 17: 
      var $42;
      if ($42) { __label__ = 18; break; } else { __label__ = 22; break; }
    case 18: 
      var $43=$suffix;
      var $44=$g_addr;
      var $matchjump33=(($44+72)|0);
      var $45=HEAP32[(($matchjump33)>>2)];
      var $arrayidx34=(($45+($43<<2))|0);
      var $46=HEAP32[(($arrayidx34)>>2)];
      var $47=$g_addr;
      var $mlen35=(($47+76)|0);
      var $48=HEAP32[(($mlen35)>>2)];
      var $49=$mindex;
      var $sub36=((($48)-($49))|0);
      var $sub37=((($sub36)-(1))|0);
      var $cmp38=(($46)|0) < (($sub37)|0);
      if ($cmp38) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $50=$suffix;
      var $51=$g_addr;
      var $matchjump40=(($51+72)|0);
      var $52=HEAP32[(($matchjump40)>>2)];
      var $arrayidx41=(($52+($50<<2))|0);
      var $53=HEAP32[(($arrayidx41)>>2)];
      var $cond = $53;__label__ = 21; break;
    case 20: 
      var $54=$g_addr;
      var $mlen42=(($54+76)|0);
      var $55=HEAP32[(($mlen42)>>2)];
      var $56=$mindex;
      var $sub43=((($55)-($56))|0);
      var $sub44=((($sub43)-(1))|0);
      var $cond = $sub44;__label__ = 21; break;
    case 21: 
      var $cond;
      var $57=$suffix;
      var $58=$g_addr;
      var $matchjump45=(($58+72)|0);
      var $59=HEAP32[(($matchjump45)>>2)];
      var $arrayidx46=(($59+($57<<2))|0);
      HEAP32[(($arrayidx46)>>2)]=$cond;
      var $60=$suffix;
      var $61=$pmatches;
      var $arrayidx47=(($61+($60<<2))|0);
      var $62=HEAP32[(($arrayidx47)>>2)];
      $suffix=$62;
      __label__ = 15; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $63=$mindex;
      var $dec=((($63)-(1))|0);
      $mindex=$dec;
      var $64=$suffix;
      var $dec49=((($64)-(1))|0);
      $suffix=$dec49;
      __label__ = 13; break;
    case 24: 
      $mindex=0;
      __label__ = 25; break;
    case 25: 
      var $65=$mindex;
      var $66=$suffix;
      var $cmp52=(($65)|0) <= (($66)|0);
      if ($cmp52) { __label__ = 26; break; } else { __label__ = 31; break; }
    case 26: 
      var $67=$mindex;
      var $68=$g_addr;
      var $matchjump55=(($68+72)|0);
      var $69=HEAP32[(($matchjump55)>>2)];
      var $arrayidx56=(($69+($67<<2))|0);
      var $70=HEAP32[(($arrayidx56)>>2)];
      var $71=$g_addr;
      var $mlen57=(($71+76)|0);
      var $72=HEAP32[(($mlen57)>>2)];
      var $73=$suffix;
      var $add=((($72)+($73))|0);
      var $74=$mindex;
      var $sub58=((($add)-($74))|0);
      var $cmp59=(($70)|0) < (($sub58)|0);
      if ($cmp59) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $75=$mindex;
      var $76=$g_addr;
      var $matchjump62=(($76+72)|0);
      var $77=HEAP32[(($matchjump62)>>2)];
      var $arrayidx63=(($77+($75<<2))|0);
      var $78=HEAP32[(($arrayidx63)>>2)];
      var $cond69 = $78;__label__ = 29; break;
    case 28: 
      var $79=$g_addr;
      var $mlen65=(($79+76)|0);
      var $80=HEAP32[(($mlen65)>>2)];
      var $81=$suffix;
      var $add66=((($80)+($81))|0);
      var $82=$mindex;
      var $sub67=((($add66)-($82))|0);
      var $cond69 = $sub67;__label__ = 29; break;
    case 29: 
      var $cond69;
      var $83=$mindex;
      var $84=$g_addr;
      var $matchjump70=(($84+72)|0);
      var $85=HEAP32[(($matchjump70)>>2)];
      var $arrayidx71=(($85+($83<<2))|0);
      HEAP32[(($arrayidx71)>>2)]=$cond69;
      __label__ = 30; break;
    case 30: 
      var $86=$mindex;
      var $inc73=((($86)+(1))|0);
      $mindex=$inc73;
      __label__ = 25; break;
    case 31: 
      var $87=$suffix;
      var $88=$pmatches;
      var $arrayidx75=(($88+($87<<2))|0);
      var $89=HEAP32[(($arrayidx75)>>2)];
      $ssuffix=$89;
      __label__ = 32; break;
    case 32: 
      var $90=$suffix;
      var $91=$g_addr;
      var $mlen77=(($91+76)|0);
      var $92=HEAP32[(($mlen77)>>2)];
      var $cmp78=(($90)|0) < (($92)|0);
      if ($cmp78) { __label__ = 33; break; } else { __label__ = 44; break; }
    case 33: 
      __label__ = 34; break;
    case 34: 
      var $93=$suffix;
      var $94=$ssuffix;
      var $cmp82=(($93)|0) <= (($94)|0);
      if ($cmp82) { __label__ = 35; break; } else { var $98 = 0;__label__ = 36; break; }
    case 35: 
      var $95=$suffix;
      var $96=$g_addr;
      var $mlen85=(($96+76)|0);
      var $97=HEAP32[(($mlen85)>>2)];
      var $cmp86=(($95)|0) < (($97)|0);
      var $98 = $cmp86;__label__ = 36; break;
    case 36: 
      var $98;
      if ($98) { __label__ = 37; break; } else { __label__ = 41; break; }
    case 37: 
      var $99=$suffix;
      var $100=$g_addr;
      var $matchjump90=(($100+72)|0);
      var $101=HEAP32[(($matchjump90)>>2)];
      var $arrayidx91=(($101+($99<<2))|0);
      var $102=HEAP32[(($arrayidx91)>>2)];
      var $103=$g_addr;
      var $mlen92=(($103+76)|0);
      var $104=HEAP32[(($mlen92)>>2)];
      var $105=$ssuffix;
      var $add93=((($104)+($105))|0);
      var $106=$suffix;
      var $sub94=((($add93)-($106))|0);
      var $cmp95=(($102)|0) < (($sub94)|0);
      if ($cmp95) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $107=$suffix;
      var $108=$g_addr;
      var $matchjump98=(($108+72)|0);
      var $109=HEAP32[(($matchjump98)>>2)];
      var $arrayidx99=(($109+($107<<2))|0);
      var $110=HEAP32[(($arrayidx99)>>2)];
      var $cond105 = $110;__label__ = 40; break;
    case 39: 
      var $111=$g_addr;
      var $mlen101=(($111+76)|0);
      var $112=HEAP32[(($mlen101)>>2)];
      var $113=$ssuffix;
      var $add102=((($112)+($113))|0);
      var $114=$suffix;
      var $sub103=((($add102)-($114))|0);
      var $cond105 = $sub103;__label__ = 40; break;
    case 40: 
      var $cond105;
      var $115=$suffix;
      var $116=$g_addr;
      var $matchjump106=(($116+72)|0);
      var $117=HEAP32[(($matchjump106)>>2)];
      var $arrayidx107=(($117+($115<<2))|0);
      HEAP32[(($arrayidx107)>>2)]=$cond105;
      var $118=$suffix;
      var $inc108=((($118)+(1))|0);
      $suffix=$inc108;
      __label__ = 34; break;
    case 41: 
      var $119=$suffix;
      var $120=$g_addr;
      var $mlen110=(($120+76)|0);
      var $121=HEAP32[(($mlen110)>>2)];
      var $cmp111=(($119)|0) < (($121)|0);
      if ($cmp111) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $122=$ssuffix;
      var $123=$pmatches;
      var $arrayidx114=(($123+($122<<2))|0);
      var $124=HEAP32[(($arrayidx114)>>2)];
      $ssuffix=$124;
      __label__ = 43; break;
    case 43: 
      __label__ = 32; break;
    case 44: 
      var $125=$pmatches;
      var $126=$125;
      _free($126);
      __label__ = 45; break;
    case 45: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_computematchjumps["X"]=1;

function _altoffset($scan, $offset, $mccs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $scan_addr;
      var $offset_addr;
      var $mccs_addr;
      var $largest;
      var $try;
      var $s;
      $scan_addr=$scan;
      $offset_addr=$offset;
      $mccs_addr=$mccs;
      var $0=$offset_addr;
      var $cmp=(($0)|0)==-1;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=-1;
      __label__ = 36; break;
    case 4: 
      $largest=0;
      $try=0;
      var $1=$scan_addr;
      var $incdec_ptr=(($1+4)|0);
      $scan_addr=$incdec_ptr;
      var $2=HEAP32[(($1)>>2)];
      $s=$2;
      __label__ = 5; break;
    case 5: 
      var $3=$s;
      var $and=$3 & -134217728;
      var $cmp1=(($and)|0)!=1610612736;
      if ($cmp1) { __label__ = 6; break; } else { var $5 = 0;__label__ = 7; break; }
    case 6: 
      var $4=$s;
      var $and2=$4 & -134217728;
      var $cmp3=(($and2)|0)!=-1879048192;
      var $5 = $cmp3;__label__ = 7; break;
    case 7: 
      var $5;
      if ($5) { __label__ = 8; break; } else { __label__ = 33; break; }
    case 8: 
      var $6=$s;
      var $and4=$6 & -134217728;
      if ((($and4)|0) == -2147483648) {
        __label__ = 9; break;
      }
      else if ((($and4)|0) == 1476395008 || (($and4)|0) == 2013265920) {
        __label__ = 12; break;
      }
      else if ((($and4)|0) == 805306368) {
        __label__ = 24; break;
      }
      else if ((($and4)|0) == 268435456 || (($and4)|0) == 671088640) {
        __label__ = 27; break;
      }
      else if ((($and4)|0) == -1744830464 || (($and4)|0) == -1610612736 || (($and4)|0) == 1744830464 || (($and4)|0) == 1879048192 || (($and4)|0) == -2013265920) {
        __label__ = 28; break;
      }
      else {
      __label__ = 29; break;
      }
      
    case 9: 
      var $7=$try;
      var $8=$largest;
      var $cmp5=(($7)|0) > (($8)|0);
      if ($cmp5) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $9=$try;
      $largest=$9;
      __label__ = 11; break;
    case 11: 
      $try=0;
      __label__ = 30; break;
    case 12: 
      var $10=$scan_addr;
      var $11=$try;
      var $12=$mccs_addr;
      var $call=_altoffset($10, $11, $12);
      $try=$call;
      var $13=$try;
      var $cmp9=(($13)|0)==-1;
      if ($cmp9) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      $retval=-1;
      __label__ = 36; break;
    case 14: 
      var $14=$scan_addr;
      var $incdec_ptr12=((($14)-(4))|0);
      $scan_addr=$incdec_ptr12;
      __label__ = 15; break;
    case 15: 
      var $15=$s;
      var $and13=$15 & 134217727;
      var $16=$scan_addr;
      var $add_ptr=(($16+($and13<<2))|0);
      $scan_addr=$add_ptr;
      var $17=$scan_addr;
      var $18=HEAP32[(($17)>>2)];
      $s=$18;
      var $19=$s;
      var $and14=$19 & -134217728;
      var $cmp15=(($and14)|0)!=1610612736;
      if ($cmp15) { __label__ = 16; break; } else { __label__ = 19; break; }
    case 16: 
      var $20=$s;
      var $and16=$20 & -134217728;
      var $cmp17=(($and16)|0)!=-1879048192;
      if ($cmp17) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $21=$s;
      var $and19=$21 & -134217728;
      var $cmp20=(($and19)|0)!=-2013265920;
      if ($cmp20) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      $retval=-1;
      __label__ = 36; break;
    case 19: 
      __label__ = 20; break;
    case 20: 
      var $22=$s;
      var $and23=$22 & -134217728;
      var $cmp24=(($and23)|0)!=1610612736;
      if ($cmp24) { __label__ = 21; break; } else { var $24 = 0;__label__ = 22; break; }
    case 21: 
      var $23=$s;
      var $and26=$23 & -134217728;
      var $cmp27=(($and26)|0)!=-1879048192;
      var $24 = $cmp27;__label__ = 22; break;
    case 22: 
      var $24;
      if ($24) { __label__ = 15; break; } else { __label__ = 23; break; }
    case 23: 
      var $25=$scan_addr;
      var $incdec_ptr29=(($25+4)|0);
      $scan_addr=$incdec_ptr29;
      __label__ = 30; break;
    case 24: 
      var $26=$mccs_addr;
      var $tobool=(($26)|0)!=0;
      if ($tobool) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      $retval=-1;
      __label__ = 36; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $27=$try;
      var $inc=((($27)+(1))|0);
      $try=$inc;
      __label__ = 28; break;
    case 28: 
      __label__ = 30; break;
    case 29: 
      $try=-1;
      __label__ = 30; break;
    case 30: 
      var $28=$try;
      var $cmp35=(($28)|0)==-1;
      if ($cmp35) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      $retval=-1;
      __label__ = 36; break;
    case 32: 
      var $29=$scan_addr;
      var $incdec_ptr38=(($29+4)|0);
      $scan_addr=$incdec_ptr38;
      var $30=HEAP32[(($29)>>2)];
      $s=$30;
      __label__ = 5; break;
    case 33: 
      var $31=$try;
      var $32=$largest;
      var $cmp39=(($31)|0) > (($32)|0);
      if ($cmp39) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $33=$try;
      $largest=$33;
      __label__ = 35; break;
    case 35: 
      var $34=$largest;
      var $35=$offset_addr;
      var $add=((($34)+($35))|0);
      $retval=$add;
      __label__ = 36; break;
    case 36: 
      var $36=$retval;
      ;
      return $36;
    default: assert(0, "bad label: " + __label__);
  }
}
_altoffset["X"]=1;

function _enlarge($p, $size) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $size_addr;
      var $sp;
      $p_addr=$p;
      $size_addr=$size;
      var $0=$p_addr;
      var $ssize=(($0+16)|0);
      var $1=HEAP32[(($ssize)>>2)];
      var $2=$size_addr;
      var $cmp=(($1)|0) >= (($2)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 7; break;
    case 4: 
      var $3=$p_addr;
      var $strip=(($3+12)|0);
      var $4=HEAP32[(($strip)>>2)];
      var $5=$4;
      var $6=$size_addr;
      var $mul=((($6<<2))|0);
      var $call=_realloc($5, $mul);
      var $7=$call;
      $sp=$7;
      var $8=$sp;
      var $cmp1=(($8)|0)==0;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$p_addr;
      var $call3=_seterr($9, 12);
      __label__ = 7; break;
    case 6: 
      var $10=$sp;
      var $11=$p_addr;
      var $strip5=(($11+12)|0);
      HEAP32[(($strip5)>>2)]=$10;
      var $12=$size_addr;
      var $13=$p_addr;
      var $ssize6=(($13+16)|0);
      HEAP32[(($ssize6)>>2)]=$12;
      __label__ = 7; break;
    case 7: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _samesets($g, $c1, $c2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $g_addr;
      var $c1_addr;
      var $c2_addr;
      var $col;
      var $i;
      var $ncols;
      var $uc1;
      var $uc2;
      $g_addr=$g;
      $c1_addr=$c1;
      $c2_addr=$c2;
      var $0=$g_addr;
      var $ncsets=(($0+12)|0);
      var $1=HEAP32[(($ncsets)>>2)];
      var $add=((($1)+(7))|0);
      var $div=((((($add)|0))/(8))&-1);
      $ncols=$div;
      var $2=$c1_addr;
      var $conv=(($2) & 255);
      var $conv1=(($conv)&255);
      $uc1=$conv1;
      var $3=$c2_addr;
      var $conv2=(($3) & 255);
      var $conv3=(($conv2)&255);
      $uc2=$conv3;
      $i=0;
      var $4=$g_addr;
      var $setbits=(($4+20)|0);
      var $5=HEAP32[(($setbits)>>2)];
      $col=$5;
      __label__ = 3; break;
    case 3: 
      var $6=$i;
      var $7=$ncols;
      var $cmp=(($6)|0) < (($7)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $8=$uc1;
      var $9=$col;
      var $arrayidx=(($9+$8)|0);
      var $10=HEAP8[($arrayidx)];
      var $conv5=(($10)&255);
      var $11=$uc2;
      var $12=$col;
      var $arrayidx6=(($12+$11)|0);
      var $13=HEAP8[($arrayidx6)];
      var $conv7=(($13)&255);
      var $cmp8=(($conv5)|0)!=(($conv7)|0);
      if ($cmp8) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      $retval=0;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $14=$i;
      var $inc=((($14)+(1))|0);
      $i=$inc;
      var $15=$g_addr;
      var $csetsize=(($15+8)|0);
      var $16=HEAP32[(($csetsize)>>2)];
      var $17=$col;
      var $add_ptr=(($17+$16)|0);
      $col=$add_ptr;
      __label__ = 3; break;
    case 8: 
      $retval=1;
      __label__ = 9; break;
    case 9: 
      var $18=$retval;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_samesets["X"]=1;

function _p_simp_re($p, $starordinary) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $starordinary_addr;
      var $c;
      var $count;
      var $count2;
      var $pos;
      var $i;
      var $subno;
      $p_addr=$p;
      $starordinary_addr=$starordinary;
      var $0=$p_addr;
      var $slen=(($0+20)|0);
      var $1=HEAP32[(($slen)>>2)];
      $pos=$1;
      var $2=$p_addr;
      var $next=(($2)|0);
      var $3=HEAP32[(($next)>>2)];
      var $incdec_ptr=(($3+1)|0);
      HEAP32[(($next)>>2)]=$incdec_ptr;
      var $4=HEAP8[($3)];
      var $conv=(($4 << 24) >> 24);
      $c=$conv;
      var $5=$c;
      var $cmp=(($5)|0)==92;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $6=$p_addr;
      var $next2=(($6)|0);
      var $7=HEAP32[(($next2)>>2)];
      var $8=$p_addr;
      var $end=(($8+4)|0);
      var $9=HEAP32[(($end)>>2)];
      var $cmp3=(($7)>>>0) < (($9)>>>0);
      if ($cmp3) { var $11 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $10=$p_addr;
      var $call=_seterr($10, 5);
      var $tobool=(($call)|0)!=0;
      var $11 = $tobool;__label__ = 5; break;
    case 5: 
      var $11;
      var $lor_ext=(($11)&1);
      var $12=$p_addr;
      var $next5=(($12)|0);
      var $13=HEAP32[(($next5)>>2)];
      var $incdec_ptr6=(($13+1)|0);
      HEAP32[(($next5)>>2)]=$incdec_ptr6;
      var $14=HEAP8[($13)];
      var $conv7=(($14 << 24) >> 24);
      var $or=256 | $conv7;
      $c=$or;
      __label__ = 6; break;
    case 6: 
      var $15=$c;
      if ((($15)|0) == 46) {
        __label__ = 7; break;
      }
      else if ((($15)|0) == 91) {
        __label__ = 11; break;
      }
      else if ((($15)|0) == 379) {
        __label__ = 12; break;
      }
      else if ((($15)|0) == 296) {
        __label__ = 13; break;
      }
      else if ((($15)|0) == 297 || (($15)|0) == 381) {
        __label__ = 31; break;
      }
      else if ((($15)|0) == 305 || (($15)|0) == 306 || (($15)|0) == 307 || (($15)|0) == 308 || (($15)|0) == 309 || (($15)|0) == 310 || (($15)|0) == 311 || (($15)|0) == 312 || (($15)|0) == 313) {
        __label__ = 32; break;
      }
      else if ((($15)|0) == 42) {
        __label__ = 36; break;
      }
      else {
      __label__ = 39; break;
      }
      
    case 7: 
      var $16=$p_addr;
      var $g=(($16+28)|0);
      var $17=HEAP32[(($g)>>2)];
      var $cflags=(($17+24)|0);
      var $18=HEAP32[(($cflags)>>2)];
      var $and=$18 & 8;
      var $tobool8=(($and)|0)!=0;
      if ($tobool8) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $19=$p_addr;
      _nonnewline($19);
      __label__ = 10; break;
    case 9: 
      var $20=$p_addr;
      _doemit($20, 671088640, 0);
      __label__ = 10; break;
    case 10: 
      __label__ = 40; break;
    case 11: 
      var $21=$p_addr;
      _p_bracket($21);
      __label__ = 40; break;
    case 12: 
      var $22=$p_addr;
      var $call13=_seterr($22, 13);
      __label__ = 40; break;
    case 13: 
      var $23=$p_addr;
      var $g15=(($23+28)|0);
      var $24=HEAP32[(($g15)>>2)];
      var $nsub=(($24+80)|0);
      var $25=HEAP32[(($nsub)>>2)];
      var $inc=((($25)+(1))|0);
      HEAP32[(($nsub)>>2)]=$inc;
      var $26=$p_addr;
      var $g16=(($26+28)|0);
      var $27=HEAP32[(($g16)>>2)];
      var $nsub17=(($27+80)|0);
      var $28=HEAP32[(($nsub17)>>2)];
      $subno=$28;
      var $29=$subno;
      var $cmp18=(($29)|0) < 10;
      if ($cmp18) { __label__ = 14; break; } else { __label__ = 15; break; }
    case 14: 
      var $30=$p_addr;
      var $slen21=(($30+20)|0);
      var $31=HEAP32[(($slen21)>>2)];
      var $32=$subno;
      var $33=$p_addr;
      var $pbegin=(($33+32)|0);
      var $arrayidx=(($pbegin+($32<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$31;
      __label__ = 15; break;
    case 15: 
      var $34=$p_addr;
      var $35=$subno;
      _doemit($34, 1744830464, $35);
      var $36=$p_addr;
      var $next23=(($36)|0);
      var $37=HEAP32[(($next23)>>2)];
      var $38=$p_addr;
      var $end24=(($38+4)|0);
      var $39=HEAP32[(($end24)>>2)];
      var $cmp25=(($37)>>>0) < (($39)>>>0);
      if ($cmp25) { __label__ = 16; break; } else { __label__ = 21; break; }
    case 16: 
      var $40=$p_addr;
      var $next27=(($40)|0);
      var $41=HEAP32[(($next27)>>2)];
      var $42=$p_addr;
      var $end28=(($42+4)|0);
      var $43=HEAP32[(($end28)>>2)];
      var $cmp29=(($41)>>>0) < (($43)>>>0);
      if ($cmp29) { __label__ = 17; break; } else { __label__ = 20; break; }
    case 17: 
      var $44=$p_addr;
      var $next32=(($44)|0);
      var $45=HEAP32[(($next32)>>2)];
      var $add_ptr=(($45+1)|0);
      var $46=$p_addr;
      var $end33=(($46+4)|0);
      var $47=HEAP32[(($end33)>>2)];
      var $cmp34=(($add_ptr)>>>0) < (($47)>>>0);
      if ($cmp34) { __label__ = 18; break; } else { __label__ = 20; break; }
    case 18: 
      var $48=$p_addr;
      var $next37=(($48)|0);
      var $49=HEAP32[(($next37)>>2)];
      var $50=HEAP8[($49)];
      var $conv38=(($50 << 24) >> 24);
      var $cmp39=(($conv38)|0)==92;
      if ($cmp39) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $51=$p_addr;
      var $next42=(($51)|0);
      var $52=HEAP32[(($next42)>>2)];
      var $add_ptr43=(($52+1)|0);
      var $53=HEAP8[($add_ptr43)];
      var $conv44=(($53 << 24) >> 24);
      var $cmp45=(($conv44)|0)==41;
      if ($cmp45) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $54=$p_addr;
      _p_bre($54, 92, 41);
      __label__ = 21; break;
    case 21: 
      var $55=$subno;
      var $cmp49=(($55)|0) < 10;
      if ($cmp49) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $56=$p_addr;
      var $slen52=(($56+20)|0);
      var $57=HEAP32[(($slen52)>>2)];
      var $58=$subno;
      var $59=$p_addr;
      var $pend=(($59+72)|0);
      var $arrayidx53=(($pend+($58<<2))|0);
      HEAP32[(($arrayidx53)>>2)]=$57;
      __label__ = 23; break;
    case 23: 
      var $60=$p_addr;
      var $61=$subno;
      _doemit($60, 1879048192, $61);
      var $62=$p_addr;
      var $next55=(($62)|0);
      var $63=HEAP32[(($next55)>>2)];
      var $64=$p_addr;
      var $end56=(($64+4)|0);
      var $65=HEAP32[(($end56)>>2)];
      var $cmp57=(($63)>>>0) < (($65)>>>0);
      if ($cmp57) { __label__ = 24; break; } else { __label__ = 28; break; }
    case 24: 
      var $66=$p_addr;
      var $next60=(($66)|0);
      var $67=HEAP32[(($next60)>>2)];
      var $add_ptr61=(($67+1)|0);
      var $68=$p_addr;
      var $end62=(($68+4)|0);
      var $69=HEAP32[(($end62)>>2)];
      var $cmp63=(($add_ptr61)>>>0) < (($69)>>>0);
      if ($cmp63) { __label__ = 25; break; } else { __label__ = 28; break; }
    case 25: 
      var $70=$p_addr;
      var $next66=(($70)|0);
      var $71=HEAP32[(($next66)>>2)];
      var $72=HEAP8[($71)];
      var $conv67=(($72 << 24) >> 24);
      var $cmp68=(($conv67)|0)==92;
      if ($cmp68) { __label__ = 26; break; } else { __label__ = 28; break; }
    case 26: 
      var $73=$p_addr;
      var $next71=(($73)|0);
      var $74=HEAP32[(($next71)>>2)];
      var $add_ptr72=(($74+1)|0);
      var $75=HEAP8[($add_ptr72)];
      var $conv73=(($75 << 24) >> 24);
      var $cmp74=(($conv73)|0)==41;
      if ($cmp74) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $76=$p_addr;
      var $next76=(($76)|0);
      var $77=HEAP32[(($next76)>>2)];
      var $add_ptr77=(($77+2)|0);
      HEAP32[(($next76)>>2)]=$add_ptr77;
      if (1) { var $79 = 1;__label__ = 30; break; } else { __label__ = 29; break; }
    case 28: 
      if (0) { var $79 = 1;__label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $78=$p_addr;
      var $call79=_seterr($78, 8);
      var $tobool80=(($call79)|0)!=0;
      var $79 = $tobool80;__label__ = 30; break;
    case 30: 
      var $79;
      var $lor_ext82=(($79)&1);
      __label__ = 40; break;
    case 31: 
      var $80=$p_addr;
      var $call84=_seterr($80, 8);
      __label__ = 40; break;
    case 32: 
      var $81=$c;
      var $and86=$81 & -257;
      var $sub=((($and86)-(48))|0);
      $i=$sub;
      var $82=$i;
      var $83=$p_addr;
      var $pend87=(($83+72)|0);
      var $arrayidx88=(($pend87+($82<<2))|0);
      var $84=HEAP32[(($arrayidx88)>>2)];
      var $cmp89=(($84)|0)!=0;
      if ($cmp89) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $85=$p_addr;
      var $86=$i;
      _doemit($85, 939524096, $86);
      var $87=$p_addr;
      var $88=$i;
      var $89=$p_addr;
      var $pbegin92=(($89+32)|0);
      var $arrayidx93=(($pbegin92+($88<<2))|0);
      var $90=HEAP32[(($arrayidx93)>>2)];
      var $add=((($90)+(1))|0);
      var $91=$i;
      var $92=$p_addr;
      var $pend94=(($92+72)|0);
      var $arrayidx95=(($pend94+($91<<2))|0);
      var $93=HEAP32[(($arrayidx95)>>2)];
      var $call96=_dupl($87, $add, $93);
      var $94=$p_addr;
      var $95=$i;
      _doemit($94, 1073741824, $95);
      __label__ = 35; break;
    case 34: 
      var $96=$p_addr;
      var $call98=_seterr($96, 6);
      __label__ = 35; break;
    case 35: 
      var $97=$p_addr;
      var $g100=(($97+28)|0);
      var $98=HEAP32[(($g100)>>2)];
      var $backrefs=(($98+84)|0);
      HEAP32[(($backrefs)>>2)]=1;
      __label__ = 40; break;
    case 36: 
      var $99=$starordinary_addr;
      var $tobool102=(($99)|0)!=0;
      if ($tobool102) { var $101 = 1;__label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $100=$p_addr;
      var $call104=_seterr($100, 13);
      var $tobool105=(($call104)|0)!=0;
      var $101 = $tobool105;__label__ = 38; break;
    case 38: 
      var $101;
      var $lor_ext107=(($101)&1);
      __label__ = 39; break;
    case 39: 
      var $102=$p_addr;
      var $103=$c;
      var $conv108=(($103) & 255);
      var $conv109=(($conv108 << 24) >> 24);
      _ordinary($102, $conv109);
      __label__ = 40; break;
    case 40: 
      var $104=$p_addr;
      var $next110=(($104)|0);
      var $105=HEAP32[(($next110)>>2)];
      var $106=$p_addr;
      var $end111=(($106+4)|0);
      var $107=HEAP32[(($end111)>>2)];
      var $cmp112=(($105)>>>0) < (($107)>>>0);
      if ($cmp112) { __label__ = 41; break; } else { __label__ = 43; break; }
    case 41: 
      var $108=$p_addr;
      var $next115=(($108)|0);
      var $109=HEAP32[(($next115)>>2)];
      var $110=HEAP8[($109)];
      var $conv116=(($110 << 24) >> 24);
      var $cmp117=(($conv116)|0)==42;
      if ($cmp117) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      var $111=$p_addr;
      var $next120=(($111)|0);
      var $112=HEAP32[(($next120)>>2)];
      var $incdec_ptr121=(($112+1)|0);
      HEAP32[(($next120)>>2)]=$incdec_ptr121;
      if (1) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 43: 
      if (0) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $113=$p_addr;
      var $114=$p_addr;
      var $slen124=(($114+20)|0);
      var $115=HEAP32[(($slen124)>>2)];
      var $116=$pos;
      var $sub125=((($115)-($116))|0);
      var $add126=((($sub125)+(1))|0);
      var $117=$pos;
      _doinsert($113, 1207959552, $add126, $117);
      var $118=$p_addr;
      var $119=$p_addr;
      var $slen127=(($119+20)|0);
      var $120=HEAP32[(($slen127)>>2)];
      var $121=$pos;
      var $sub128=((($120)-($121))|0);
      _doemit($118, 1342177280, $sub128);
      var $122=$p_addr;
      var $123=$p_addr;
      var $slen129=(($123+20)|0);
      var $124=HEAP32[(($slen129)>>2)];
      var $125=$pos;
      var $sub130=((($124)-($125))|0);
      var $add131=((($sub130)+(1))|0);
      var $126=$pos;
      _doinsert($122, 1476395008, $add131, $126);
      var $127=$p_addr;
      var $128=$p_addr;
      var $slen132=(($128+20)|0);
      var $129=HEAP32[(($slen132)>>2)];
      var $130=$pos;
      var $sub133=((($129)-($130))|0);
      _doemit($127, 1610612736, $sub133);
      __label__ = 86; break;
    case 45: 
      var $131=$p_addr;
      var $next135=(($131)|0);
      var $132=HEAP32[(($next135)>>2)];
      var $133=$p_addr;
      var $end136=(($133+4)|0);
      var $134=HEAP32[(($end136)>>2)];
      var $cmp137=(($132)>>>0) < (($134)>>>0);
      if ($cmp137) { __label__ = 46; break; } else { __label__ = 50; break; }
    case 46: 
      var $135=$p_addr;
      var $next140=(($135)|0);
      var $136=HEAP32[(($next140)>>2)];
      var $add_ptr141=(($136+1)|0);
      var $137=$p_addr;
      var $end142=(($137+4)|0);
      var $138=HEAP32[(($end142)>>2)];
      var $cmp143=(($add_ptr141)>>>0) < (($138)>>>0);
      if ($cmp143) { __label__ = 47; break; } else { __label__ = 50; break; }
    case 47: 
      var $139=$p_addr;
      var $next146=(($139)|0);
      var $140=HEAP32[(($next146)>>2)];
      var $141=HEAP8[($140)];
      var $conv147=(($141 << 24) >> 24);
      var $cmp148=(($conv147)|0)==92;
      if ($cmp148) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $142=$p_addr;
      var $next151=(($142)|0);
      var $143=HEAP32[(($next151)>>2)];
      var $add_ptr152=(($143+1)|0);
      var $144=HEAP8[($add_ptr152)];
      var $conv153=(($144 << 24) >> 24);
      var $cmp154=(($conv153)|0)==123;
      if ($cmp154) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $145=$p_addr;
      var $next157=(($145)|0);
      var $146=HEAP32[(($next157)>>2)];
      var $add_ptr158=(($146+2)|0);
      HEAP32[(($next157)>>2)]=$add_ptr158;
      if (1) { __label__ = 51; break; } else { __label__ = 82; break; }
    case 50: 
      if (0) { __label__ = 51; break; } else { __label__ = 82; break; }
    case 51: 
      var $147=$p_addr;
      var $call161=_p_count($147);
      $count=$call161;
      var $148=$p_addr;
      var $next162=(($148)|0);
      var $149=HEAP32[(($next162)>>2)];
      var $150=$p_addr;
      var $end163=(($150+4)|0);
      var $151=HEAP32[(($end163)>>2)];
      var $cmp164=(($149)>>>0) < (($151)>>>0);
      if ($cmp164) { __label__ = 52; break; } else { __label__ = 54; break; }
    case 52: 
      var $152=$p_addr;
      var $next167=(($152)|0);
      var $153=HEAP32[(($next167)>>2)];
      var $154=HEAP8[($153)];
      var $conv168=(($154 << 24) >> 24);
      var $cmp169=(($conv168)|0)==44;
      if ($cmp169) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $155=$p_addr;
      var $next172=(($155)|0);
      var $156=HEAP32[(($next172)>>2)];
      var $incdec_ptr173=(($156+1)|0);
      HEAP32[(($next172)>>2)]=$incdec_ptr173;
      if (1) { __label__ = 55; break; } else { __label__ = 62; break; }
    case 54: 
      if (0) { __label__ = 55; break; } else { __label__ = 62; break; }
    case 55: 
      var $157=$p_addr;
      var $next176=(($157)|0);
      var $158=HEAP32[(($next176)>>2)];
      var $159=$p_addr;
      var $end177=(($159+4)|0);
      var $160=HEAP32[(($end177)>>2)];
      var $cmp178=(($158)>>>0) < (($160)>>>0);
      if ($cmp178) { __label__ = 56; break; } else { __label__ = 60; break; }
    case 56: 
      var $161=$p_addr;
      var $next181=(($161)|0);
      var $162=HEAP32[(($next181)>>2)];
      var $163=HEAP8[($162)];
      var $conv182=(($163)&255);
      var $call183=_isdigit($conv182);
      var $tobool184=(($call183)|0)!=0;
      if ($tobool184) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $164=$p_addr;
      var $call186=_p_count($164);
      $count2=$call186;
      var $165=$count;
      var $166=$count2;
      var $cmp187=(($165)|0) <= (($166)|0);
      if ($cmp187) { var $168 = 1;__label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $167=$p_addr;
      var $call190=_seterr($167, 10);
      var $tobool191=(($call190)|0)!=0;
      var $168 = $tobool191;__label__ = 59; break;
    case 59: 
      var $168;
      var $lor_ext193=(($168)&1);
      __label__ = 61; break;
    case 60: 
      $count2=256;
      __label__ = 61; break;
    case 61: 
      __label__ = 63; break;
    case 62: 
      var $169=$count;
      $count2=$169;
      __label__ = 63; break;
    case 63: 
      var $170=$p_addr;
      var $171=$pos;
      var $172=$count;
      var $173=$count2;
      _repeat($170, $171, $172, $173);
      var $174=$p_addr;
      var $next198=(($174)|0);
      var $175=HEAP32[(($next198)>>2)];
      var $176=$p_addr;
      var $end199=(($176+4)|0);
      var $177=HEAP32[(($end199)>>2)];
      var $cmp200=(($175)>>>0) < (($177)>>>0);
      if ($cmp200) { __label__ = 64; break; } else { __label__ = 68; break; }
    case 64: 
      var $178=$p_addr;
      var $next203=(($178)|0);
      var $179=HEAP32[(($next203)>>2)];
      var $add_ptr204=(($179+1)|0);
      var $180=$p_addr;
      var $end205=(($180+4)|0);
      var $181=HEAP32[(($end205)>>2)];
      var $cmp206=(($add_ptr204)>>>0) < (($181)>>>0);
      if ($cmp206) { __label__ = 65; break; } else { __label__ = 68; break; }
    case 65: 
      var $182=$p_addr;
      var $next209=(($182)|0);
      var $183=HEAP32[(($next209)>>2)];
      var $184=HEAP8[($183)];
      var $conv210=(($184 << 24) >> 24);
      var $cmp211=(($conv210)|0)==92;
      if ($cmp211) { __label__ = 66; break; } else { __label__ = 68; break; }
    case 66: 
      var $185=$p_addr;
      var $next214=(($185)|0);
      var $186=HEAP32[(($next214)>>2)];
      var $add_ptr215=(($186+1)|0);
      var $187=HEAP8[($add_ptr215)];
      var $conv216=(($187 << 24) >> 24);
      var $cmp217=(($conv216)|0)==125;
      if ($cmp217) { __label__ = 67; break; } else { __label__ = 68; break; }
    case 67: 
      var $188=$p_addr;
      var $next220=(($188)|0);
      var $189=HEAP32[(($next220)>>2)];
      var $add_ptr221=(($189+2)|0);
      HEAP32[(($next220)>>2)]=$add_ptr221;
      if (1) { __label__ = 81; break; } else { __label__ = 69; break; }
    case 68: 
      if (0) { __label__ = 81; break; } else { __label__ = 69; break; }
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $190=$p_addr;
      var $next224=(($190)|0);
      var $191=HEAP32[(($next224)>>2)];
      var $192=$p_addr;
      var $end225=(($192+4)|0);
      var $193=HEAP32[(($end225)>>2)];
      var $cmp226=(($191)>>>0) < (($193)>>>0);
      if ($cmp226) { __label__ = 71; break; } else { var $209 = 0;__label__ = 76; break; }
    case 71: 
      var $194=$p_addr;
      var $next228=(($194)|0);
      var $195=HEAP32[(($next228)>>2)];
      var $196=$p_addr;
      var $end229=(($196+4)|0);
      var $197=HEAP32[(($end229)>>2)];
      var $cmp230=(($195)>>>0) < (($197)>>>0);
      if ($cmp230) { __label__ = 72; break; } else { var $208 = 0;__label__ = 75; break; }
    case 72: 
      var $198=$p_addr;
      var $next233=(($198)|0);
      var $199=HEAP32[(($next233)>>2)];
      var $add_ptr234=(($199+1)|0);
      var $200=$p_addr;
      var $end235=(($200+4)|0);
      var $201=HEAP32[(($end235)>>2)];
      var $cmp236=(($add_ptr234)>>>0) < (($201)>>>0);
      if ($cmp236) { __label__ = 73; break; } else { var $208 = 0;__label__ = 75; break; }
    case 73: 
      var $202=$p_addr;
      var $next239=(($202)|0);
      var $203=HEAP32[(($next239)>>2)];
      var $204=HEAP8[($203)];
      var $conv240=(($204 << 24) >> 24);
      var $cmp241=(($conv240)|0)==92;
      if ($cmp241) { __label__ = 74; break; } else { var $208 = 0;__label__ = 75; break; }
    case 74: 
      var $205=$p_addr;
      var $next244=(($205)|0);
      var $206=HEAP32[(($next244)>>2)];
      var $add_ptr245=(($206+1)|0);
      var $207=HEAP8[($add_ptr245)];
      var $conv246=(($207 << 24) >> 24);
      var $cmp247=(($conv246)|0)==125;
      var $208 = $cmp247;__label__ = 75; break;
    case 75: 
      var $208;
      var $lnot=$208 ^ 1;
      var $209 = $lnot;__label__ = 76; break;
    case 76: 
      var $209;
      if ($209) { __label__ = 77; break; } else { __label__ = 78; break; }
    case 77: 
      var $210=$p_addr;
      var $next250=(($210)|0);
      var $211=HEAP32[(($next250)>>2)];
      var $incdec_ptr251=(($211+1)|0);
      HEAP32[(($next250)>>2)]=$incdec_ptr251;
      __label__ = 70; break;
    case 78: 
      var $212=$p_addr;
      var $next252=(($212)|0);
      var $213=HEAP32[(($next252)>>2)];
      var $214=$p_addr;
      var $end253=(($214+4)|0);
      var $215=HEAP32[(($end253)>>2)];
      var $cmp254=(($213)>>>0) < (($215)>>>0);
      if ($cmp254) { var $217 = 1;__label__ = 80; break; } else { __label__ = 79; break; }
    case 79: 
      var $216=$p_addr;
      var $call257=_seterr($216, 9);
      var $tobool258=(($call257)|0)!=0;
      var $217 = $tobool258;__label__ = 80; break;
    case 80: 
      var $217;
      var $lor_ext260=(($217)&1);
      var $218=$p_addr;
      var $call261=_seterr($218, 10);
      __label__ = 81; break;
    case 81: 
      __label__ = 85; break;
    case 82: 
      var $219=$c;
      var $cmp264=(($219)|0)==36;
      if ($cmp264) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      $retval=1;
      __label__ = 87; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      $retval=0;
      __label__ = 87; break;
    case 87: 
      var $220=$retval;
      ;
      return $220;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_simp_re["X"]=1;

function _nonnewline($p) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $p_addr;
  var $oldnext;
  var $oldend;
  var $bracket=__stackBase__;
  $p_addr=$p;
  var $0=$p_addr;
  var $next=(($0)|0);
  var $1=HEAP32[(($next)>>2)];
  $oldnext=$1;
  var $2=$p_addr;
  var $end=(($2+4)|0);
  var $3=HEAP32[(($end)>>2)];
  $oldend=$3;
  var $arraydecay=(($bracket)|0);
  var $4=$p_addr;
  var $next1=(($4)|0);
  HEAP32[(($next1)>>2)]=$arraydecay;
  var $arraydecay2=(($bracket)|0);
  var $add_ptr=(($arraydecay2+3)|0);
  var $5=$p_addr;
  var $end3=(($5+4)|0);
  HEAP32[(($end3)>>2)]=$add_ptr;
  var $arrayidx=(($bracket)|0);
  HEAP8[($arrayidx)]=94;
  var $arrayidx4=(($bracket+1)|0);
  HEAP8[($arrayidx4)]=10;
  var $arrayidx5=(($bracket+2)|0);
  HEAP8[($arrayidx5)]=93;
  var $arrayidx6=(($bracket+3)|0);
  HEAP8[($arrayidx6)]=0;
  var $6=$p_addr;
  _p_bracket($6);
  var $7=$oldnext;
  var $8=$p_addr;
  var $next7=(($8)|0);
  HEAP32[(($next7)>>2)]=$7;
  var $9=$oldend;
  var $10=$p_addr;
  var $end8=(($10+4)|0);
  HEAP32[(($end8)>>2)]=$9;
  STACKTOP = __stackBase__;
  return;
}


function _p_bracket($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $cs;
      var $invert;
      var $i;
      var $ci;
      var $i192;
      $p_addr=$p;
      var $0=$p_addr;
      var $call=_allocset($0);
      $cs=$call;
      $invert=0;
      var $1=$p_addr;
      var $next=(($1)|0);
      var $2=HEAP32[(($next)>>2)];
      var $add_ptr=(($2+5)|0);
      var $3=$p_addr;
      var $end=(($3+4)|0);
      var $4=HEAP32[(($end)>>2)];
      var $cmp=(($add_ptr)>>>0) < (($4)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 5; break; }
    case 3: 
      var $5=$p_addr;
      var $next1=(($5)|0);
      var $6=HEAP32[(($next1)>>2)];
      var $call2=_strncmp($6, ((STRING_TABLE.__str238)|0), 6);
      var $cmp3=(($call2)|0)==0;
      if ($cmp3) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $7=$p_addr;
      _doemit($7, -1744830464, 0);
      var $8=$p_addr;
      var $next4=(($8)|0);
      var $9=HEAP32[(($next4)>>2)];
      var $add_ptr5=(($9+6)|0);
      HEAP32[(($next4)>>2)]=$add_ptr5;
      __label__ = 73; break;
    case 5: 
      var $10=$p_addr;
      var $next6=(($10)|0);
      var $11=HEAP32[(($next6)>>2)];
      var $add_ptr7=(($11+5)|0);
      var $12=$p_addr;
      var $end8=(($12+4)|0);
      var $13=HEAP32[(($end8)>>2)];
      var $cmp9=(($add_ptr7)>>>0) < (($13)>>>0);
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 8; break; }
    case 6: 
      var $14=$p_addr;
      var $next11=(($14)|0);
      var $15=HEAP32[(($next11)>>2)];
      var $call12=_strncmp($15, ((STRING_TABLE.__str1239)|0), 6);
      var $cmp13=(($call12)|0)==0;
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $16=$p_addr;
      _doemit($16, -1610612736, 0);
      var $17=$p_addr;
      var $next15=(($17)|0);
      var $18=HEAP32[(($next15)>>2)];
      var $add_ptr16=(($18+6)|0);
      HEAP32[(($next15)>>2)]=$add_ptr16;
      __label__ = 73; break;
    case 8: 
      var $19=$p_addr;
      var $next18=(($19)|0);
      var $20=HEAP32[(($next18)>>2)];
      var $21=$p_addr;
      var $end19=(($21+4)|0);
      var $22=HEAP32[(($end19)>>2)];
      var $cmp20=(($20)>>>0) < (($22)>>>0);
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 11; break; }
    case 9: 
      var $23=$p_addr;
      var $next22=(($23)|0);
      var $24=HEAP32[(($next22)>>2)];
      var $25=HEAP8[($24)];
      var $conv=(($25 << 24) >> 24);
      var $cmp23=(($conv)|0)==94;
      if ($cmp23) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $26=$p_addr;
      var $next25=(($26)|0);
      var $27=HEAP32[(($next25)>>2)];
      var $incdec_ptr=(($27+1)|0);
      HEAP32[(($next25)>>2)]=$incdec_ptr;
      if (1) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 11: 
      if (0) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $28=$invert;
      var $inc=((($28)+(1))|0);
      $invert=$inc;
      __label__ = 13; break;
    case 13: 
      var $29=$p_addr;
      var $next28=(($29)|0);
      var $30=HEAP32[(($next28)>>2)];
      var $31=$p_addr;
      var $end29=(($31+4)|0);
      var $32=HEAP32[(($end29)>>2)];
      var $cmp30=(($30)>>>0) < (($32)>>>0);
      if ($cmp30) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $33=$p_addr;
      var $next33=(($33)|0);
      var $34=HEAP32[(($next33)>>2)];
      var $35=HEAP8[($34)];
      var $conv34=(($35 << 24) >> 24);
      var $cmp35=(($conv34)|0)==93;
      if ($cmp35) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $36=$p_addr;
      var $next38=(($36)|0);
      var $37=HEAP32[(($next38)>>2)];
      var $incdec_ptr39=(($37+1)|0);
      HEAP32[(($next38)>>2)]=$incdec_ptr39;
      if (1) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 16: 
      if (0) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $38=$cs;
      var $mask=(($38+4)|0);
      var $39=HEAP8[($mask)];
      var $conv42=(($39)&255);
      var $40=$cs;
      var $ptr=(($40)|0);
      var $41=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($41+93)|0);
      var $42=HEAP8[($arrayidx)];
      var $conv43=(($42)&255);
      var $or=$conv43 | $conv42;
      var $conv44=(($or) & 255);
      HEAP8[($arrayidx)]=$conv44;
      var $43=$cs;
      var $hash=(($43+6)|0);
      var $44=HEAP16[(($hash)>>1)];
      var $conv45=(($44 << 16) >> 16);
      var $add=((($conv45)+(93))|0);
      var $conv46=(($add) & 65535);
      HEAP16[(($hash)>>1)]=$conv46;
      __label__ = 24; break;
    case 18: 
      var $45=$p_addr;
      var $next47=(($45)|0);
      var $46=HEAP32[(($next47)>>2)];
      var $47=$p_addr;
      var $end48=(($47+4)|0);
      var $48=HEAP32[(($end48)>>2)];
      var $cmp49=(($46)>>>0) < (($48)>>>0);
      if ($cmp49) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $49=$p_addr;
      var $next52=(($49)|0);
      var $50=HEAP32[(($next52)>>2)];
      var $51=HEAP8[($50)];
      var $conv53=(($51 << 24) >> 24);
      var $cmp54=(($conv53)|0)==45;
      if ($cmp54) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $52=$p_addr;
      var $next57=(($52)|0);
      var $53=HEAP32[(($next57)>>2)];
      var $incdec_ptr58=(($53+1)|0);
      HEAP32[(($next57)>>2)]=$incdec_ptr58;
      if (1) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 21: 
      if (0) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $54=$cs;
      var $mask61=(($54+4)|0);
      var $55=HEAP8[($mask61)];
      var $conv62=(($55)&255);
      var $56=$cs;
      var $ptr63=(($56)|0);
      var $57=HEAP32[(($ptr63)>>2)];
      var $arrayidx64=(($57+45)|0);
      var $58=HEAP8[($arrayidx64)];
      var $conv65=(($58)&255);
      var $or66=$conv65 | $conv62;
      var $conv67=(($or66) & 255);
      HEAP8[($arrayidx64)]=$conv67;
      var $59=$cs;
      var $hash68=(($59+6)|0);
      var $60=HEAP16[(($hash68)>>1)];
      var $conv69=(($60 << 16) >> 16);
      var $add70=((($conv69)+(45))|0);
      var $conv71=(($add70) & 65535);
      HEAP16[(($hash68)>>1)]=$conv71;
      __label__ = 23; break;
    case 23: 
      __label__ = 24; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $61=$p_addr;
      var $next74=(($61)|0);
      var $62=HEAP32[(($next74)>>2)];
      var $63=$p_addr;
      var $end75=(($63+4)|0);
      var $64=HEAP32[(($end75)>>2)];
      var $cmp76=(($62)>>>0) < (($64)>>>0);
      if ($cmp76) { __label__ = 26; break; } else { var $83 = 0;__label__ = 32; break; }
    case 26: 
      var $65=$p_addr;
      var $next79=(($65)|0);
      var $66=HEAP32[(($next79)>>2)];
      var $67=HEAP8[($66)];
      var $conv80=(($67 << 24) >> 24);
      var $cmp81=(($conv80)|0)!=93;
      if ($cmp81) { __label__ = 27; break; } else { var $83 = 0;__label__ = 32; break; }
    case 27: 
      var $68=$p_addr;
      var $next83=(($68)|0);
      var $69=HEAP32[(($next83)>>2)];
      var $70=$p_addr;
      var $end84=(($70+4)|0);
      var $71=HEAP32[(($end84)>>2)];
      var $cmp85=(($69)>>>0) < (($71)>>>0);
      if ($cmp85) { __label__ = 28; break; } else { var $82 = 0;__label__ = 31; break; }
    case 28: 
      var $72=$p_addr;
      var $next88=(($72)|0);
      var $73=HEAP32[(($next88)>>2)];
      var $add_ptr89=(($73+1)|0);
      var $74=$p_addr;
      var $end90=(($74+4)|0);
      var $75=HEAP32[(($end90)>>2)];
      var $cmp91=(($add_ptr89)>>>0) < (($75)>>>0);
      if ($cmp91) { __label__ = 29; break; } else { var $82 = 0;__label__ = 31; break; }
    case 29: 
      var $76=$p_addr;
      var $next94=(($76)|0);
      var $77=HEAP32[(($next94)>>2)];
      var $78=HEAP8[($77)];
      var $conv95=(($78 << 24) >> 24);
      var $cmp96=(($conv95)|0)==45;
      if ($cmp96) { __label__ = 30; break; } else { var $82 = 0;__label__ = 31; break; }
    case 30: 
      var $79=$p_addr;
      var $next99=(($79)|0);
      var $80=HEAP32[(($next99)>>2)];
      var $add_ptr100=(($80+1)|0);
      var $81=HEAP8[($add_ptr100)];
      var $conv101=(($81 << 24) >> 24);
      var $cmp102=(($conv101)|0)==93;
      var $82 = $cmp102;__label__ = 31; break;
    case 31: 
      var $82;
      var $lnot=$82 ^ 1;
      var $83 = $lnot;__label__ = 32; break;
    case 32: 
      var $83;
      if ($83) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      var $84=$p_addr;
      var $85=$cs;
      _p_b_term($84, $85);
      __label__ = 25; break;
    case 34: 
      var $86=$p_addr;
      var $next105=(($86)|0);
      var $87=HEAP32[(($next105)>>2)];
      var $88=$p_addr;
      var $end106=(($88+4)|0);
      var $89=HEAP32[(($end106)>>2)];
      var $cmp107=(($87)>>>0) < (($89)>>>0);
      if ($cmp107) { __label__ = 35; break; } else { __label__ = 37; break; }
    case 35: 
      var $90=$p_addr;
      var $next110=(($90)|0);
      var $91=HEAP32[(($next110)>>2)];
      var $92=HEAP8[($91)];
      var $conv111=(($92 << 24) >> 24);
      var $cmp112=(($conv111)|0)==45;
      if ($cmp112) { __label__ = 36; break; } else { __label__ = 37; break; }
    case 36: 
      var $93=$p_addr;
      var $next115=(($93)|0);
      var $94=HEAP32[(($next115)>>2)];
      var $incdec_ptr116=(($94+1)|0);
      HEAP32[(($next115)>>2)]=$incdec_ptr116;
      if (1) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 37: 
      if (0) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $95=$cs;
      var $mask119=(($95+4)|0);
      var $96=HEAP8[($mask119)];
      var $conv120=(($96)&255);
      var $97=$cs;
      var $ptr121=(($97)|0);
      var $98=HEAP32[(($ptr121)>>2)];
      var $arrayidx122=(($98+45)|0);
      var $99=HEAP8[($arrayidx122)];
      var $conv123=(($99)&255);
      var $or124=$conv123 | $conv120;
      var $conv125=(($or124) & 255);
      HEAP8[($arrayidx122)]=$conv125;
      var $100=$cs;
      var $hash126=(($100+6)|0);
      var $101=HEAP16[(($hash126)>>1)];
      var $conv127=(($101 << 16) >> 16);
      var $add128=((($conv127)+(45))|0);
      var $conv129=(($add128) & 65535);
      HEAP16[(($hash126)>>1)]=$conv129;
      __label__ = 39; break;
    case 39: 
      var $102=$p_addr;
      var $next131=(($102)|0);
      var $103=HEAP32[(($next131)>>2)];
      var $104=$p_addr;
      var $end132=(($104+4)|0);
      var $105=HEAP32[(($end132)>>2)];
      var $cmp133=(($103)>>>0) < (($105)>>>0);
      if ($cmp133) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      var $106=$p_addr;
      var $next136=(($106)|0);
      var $107=HEAP32[(($next136)>>2)];
      var $incdec_ptr137=(($107+1)|0);
      HEAP32[(($next136)>>2)]=$incdec_ptr137;
      var $108=HEAP8[($107)];
      var $conv138=(($108 << 24) >> 24);
      var $cmp139=(($conv138)|0)==93;
      if ($cmp139) { var $110 = 1;__label__ = 42; break; } else { __label__ = 41; break; }
    case 41: 
      var $109=$p_addr;
      var $call141=_seterr($109, 7);
      var $tobool=(($call141)|0)!=0;
      var $110 = $tobool;__label__ = 42; break;
    case 42: 
      var $110;
      var $lor_ext=(($110)&1);
      var $111=$p_addr;
      var $error=(($111+8)|0);
      var $112=HEAP32[(($error)>>2)];
      var $cmp142=(($112)|0)!=0;
      if ($cmp142) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      __label__ = 73; break;
    case 44: 
      var $113=$p_addr;
      var $g=(($113+28)|0);
      var $114=HEAP32[(($g)>>2)];
      var $cflags=(($114+24)|0);
      var $115=HEAP32[(($cflags)>>2)];
      var $and=$115 & 2;
      var $tobool146=(($and)|0)!=0;
      if ($tobool146) { __label__ = 45; break; } else { __label__ = 57; break; }
    case 45: 
      var $116=$p_addr;
      var $g148=(($116+28)|0);
      var $117=HEAP32[(($g148)>>2)];
      var $csetsize=(($117+8)|0);
      var $118=HEAP32[(($csetsize)>>2)];
      var $sub=((($118)-(1))|0);
      $i=$sub;
      __label__ = 46; break;
    case 46: 
      var $119=$i;
      var $cmp149=(($119)|0) >= 0;
      if ($cmp149) { __label__ = 47; break; } else { __label__ = 54; break; }
    case 47: 
      var $120=$i;
      var $conv151=(($120) & 255);
      var $idxprom=(($conv151)&255);
      var $121=$cs;
      var $ptr152=(($121)|0);
      var $122=HEAP32[(($ptr152)>>2)];
      var $arrayidx153=(($122+$idxprom)|0);
      var $123=HEAP8[($arrayidx153)];
      var $conv154=(($123)&255);
      var $124=$cs;
      var $mask155=(($124+4)|0);
      var $125=HEAP8[($mask155)];
      var $conv156=(($125)&255);
      var $and157=$conv154 & $conv156;
      var $tobool158=(($and157)|0)!=0;
      if ($tobool158) { __label__ = 48; break; } else { __label__ = 52; break; }
    case 48: 
      var $126=$i;
      var $call160=_isalpha($126);
      var $tobool161=(($call160)|0)!=0;
      if ($tobool161) { __label__ = 49; break; } else { __label__ = 52; break; }
    case 49: 
      var $127=$i;
      var $call163=_othercase($127);
      var $conv164=(($call163 << 24) >> 24);
      $ci=$conv164;
      var $128=$ci;
      var $129=$i;
      var $cmp165=(($128)|0)!=(($129)|0);
      if ($cmp165) { __label__ = 50; break; } else { __label__ = 51; break; }
    case 50: 
      var $130=$cs;
      var $mask168=(($130+4)|0);
      var $131=HEAP8[($mask168)];
      var $conv169=(($131)&255);
      var $132=$ci;
      var $conv170=(($132) & 255);
      var $idxprom171=(($conv170)&255);
      var $133=$cs;
      var $ptr172=(($133)|0);
      var $134=HEAP32[(($ptr172)>>2)];
      var $arrayidx173=(($134+$idxprom171)|0);
      var $135=HEAP8[($arrayidx173)];
      var $conv174=(($135)&255);
      var $or175=$conv174 | $conv169;
      var $conv176=(($or175) & 255);
      HEAP8[($arrayidx173)]=$conv176;
      var $136=$ci;
      var $conv177=(($136) & 255);
      var $conv178=(($conv177)&255);
      var $137=$cs;
      var $hash179=(($137+6)|0);
      var $138=HEAP16[(($hash179)>>1)];
      var $conv180=(($138 << 16) >> 16);
      var $add181=((($conv180)+($conv178))|0);
      var $conv182=(($add181) & 65535);
      HEAP16[(($hash179)>>1)]=$conv182;
      __label__ = 51; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $139=$i;
      var $dec=((($139)-(1))|0);
      $i=$dec;
      __label__ = 46; break;
    case 54: 
      var $140=$cs;
      var $multis=(($140+12)|0);
      var $141=HEAP32[(($multis)>>2)];
      var $cmp185=(($141)|0)!=0;
      if ($cmp185) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $142=$p_addr;
      var $143=$cs;
      _mccase($142, $143);
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $144=$invert;
      var $tobool190=(($144)|0)!=0;
      if ($tobool190) { __label__ = 58; break; } else { __label__ = 70; break; }
    case 58: 
      var $145=$p_addr;
      var $g193=(($145+28)|0);
      var $146=HEAP32[(($g193)>>2)];
      var $csetsize194=(($146+8)|0);
      var $147=HEAP32[(($csetsize194)>>2)];
      var $sub195=((($147)-(1))|0);
      $i192=$sub195;
      __label__ = 59; break;
    case 59: 
      var $148=$i192;
      var $cmp197=(($148)|0) >= 0;
      if ($cmp197) { __label__ = 60; break; } else { __label__ = 65; break; }
    case 60: 
      var $149=$i192;
      var $conv200=(($149) & 255);
      var $idxprom201=(($conv200)&255);
      var $150=$cs;
      var $ptr202=(($150)|0);
      var $151=HEAP32[(($ptr202)>>2)];
      var $arrayidx203=(($151+$idxprom201)|0);
      var $152=HEAP8[($arrayidx203)];
      var $conv204=(($152)&255);
      var $153=$cs;
      var $mask205=(($153+4)|0);
      var $154=HEAP8[($mask205)];
      var $conv206=(($154)&255);
      var $and207=$conv204 & $conv206;
      var $tobool208=(($and207)|0)!=0;
      if ($tobool208) { __label__ = 61; break; } else { __label__ = 62; break; }
    case 61: 
      var $155=$cs;
      var $mask210=(($155+4)|0);
      var $156=HEAP8[($mask210)];
      var $conv211=(($156)&255);
      var $neg=$conv211 ^ -1;
      var $157=$i192;
      var $conv212=(($157) & 255);
      var $idxprom213=(($conv212)&255);
      var $158=$cs;
      var $ptr214=(($158)|0);
      var $159=HEAP32[(($ptr214)>>2)];
      var $arrayidx215=(($159+$idxprom213)|0);
      var $160=HEAP8[($arrayidx215)];
      var $conv216=(($160)&255);
      var $and217=$conv216 & $neg;
      var $conv218=(($and217) & 255);
      HEAP8[($arrayidx215)]=$conv218;
      var $161=$i192;
      var $conv219=(($161) & 255);
      var $conv220=(($conv219)&255);
      var $162=$cs;
      var $hash221=(($162+6)|0);
      var $163=HEAP16[(($hash221)>>1)];
      var $conv222=(($163 << 16) >> 16);
      var $sub223=((($conv222)-($conv220))|0);
      var $conv224=(($sub223) & 65535);
      HEAP16[(($hash221)>>1)]=$conv224;
      __label__ = 63; break;
    case 62: 
      var $164=$cs;
      var $mask226=(($164+4)|0);
      var $165=HEAP8[($mask226)];
      var $conv227=(($165)&255);
      var $166=$i192;
      var $conv228=(($166) & 255);
      var $idxprom229=(($conv228)&255);
      var $167=$cs;
      var $ptr230=(($167)|0);
      var $168=HEAP32[(($ptr230)>>2)];
      var $arrayidx231=(($168+$idxprom229)|0);
      var $169=HEAP8[($arrayidx231)];
      var $conv232=(($169)&255);
      var $or233=$conv232 | $conv227;
      var $conv234=(($or233) & 255);
      HEAP8[($arrayidx231)]=$conv234;
      var $170=$i192;
      var $conv235=(($170) & 255);
      var $conv236=(($conv235)&255);
      var $171=$cs;
      var $hash237=(($171+6)|0);
      var $172=HEAP16[(($hash237)>>1)];
      var $conv238=(($172 << 16) >> 16);
      var $add239=((($conv238)+($conv236))|0);
      var $conv240=(($add239) & 65535);
      HEAP16[(($hash237)>>1)]=$conv240;
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $173=$i192;
      var $dec243=((($173)-(1))|0);
      $i192=$dec243;
      __label__ = 59; break;
    case 65: 
      var $174=$p_addr;
      var $g245=(($174+28)|0);
      var $175=HEAP32[(($g245)>>2)];
      var $cflags246=(($175+24)|0);
      var $176=HEAP32[(($cflags246)>>2)];
      var $and247=$176 & 8;
      var $tobool248=(($and247)|0)!=0;
      if ($tobool248) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $177=$cs;
      var $mask250=(($177+4)|0);
      var $178=HEAP8[($mask250)];
      var $conv251=(($178)&255);
      var $neg252=$conv251 ^ -1;
      var $179=$cs;
      var $ptr253=(($179)|0);
      var $180=HEAP32[(($ptr253)>>2)];
      var $arrayidx254=(($180+10)|0);
      var $181=HEAP8[($arrayidx254)];
      var $conv255=(($181)&255);
      var $and256=$conv255 & $neg252;
      var $conv257=(($and256) & 255);
      HEAP8[($arrayidx254)]=$conv257;
      var $182=$cs;
      var $hash258=(($182+6)|0);
      var $183=HEAP16[(($hash258)>>1)];
      var $conv259=(($183 << 16) >> 16);
      var $sub260=((($conv259)-(10))|0);
      var $conv261=(($sub260) & 65535);
      HEAP16[(($hash258)>>1)]=$conv261;
      __label__ = 67; break;
    case 67: 
      var $184=$cs;
      var $multis263=(($184+12)|0);
      var $185=HEAP32[(($multis263)>>2)];
      var $cmp264=(($185)|0)!=0;
      if ($cmp264) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $186=$p_addr;
      var $187=$cs;
      _mcinvert($186, $187);
      __label__ = 69; break;
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $188=$p_addr;
      var $189=$cs;
      var $call269=_nch($188, $189);
      var $cmp270=(($call269)|0)==1;
      if ($cmp270) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $190=$p_addr;
      var $191=$p_addr;
      var $192=$cs;
      var $call273=_firstch($191, $192);
      _ordinary($190, $call273);
      var $193=$p_addr;
      var $194=$cs;
      _freeset($193, $194);
      __label__ = 73; break;
    case 72: 
      var $195=$p_addr;
      var $196=$p_addr;
      var $197=$cs;
      var $call275=_freezeset($196, $197);
      _doemit($195, 805306368, $call275);
      __label__ = 73; break;
    case 73: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_bracket["X"]=1;

function _dupl($p, $start, $finish) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $start_addr;
      var $finish_addr;
      var $ret;
      var $len;
      $p_addr=$p;
      $start_addr=$start;
      $finish_addr=$finish;
      var $0=$p_addr;
      var $slen=(($0+20)|0);
      var $1=HEAP32[(($slen)>>2)];
      $ret=$1;
      var $2=$finish_addr;
      var $3=$start_addr;
      var $sub=((($2)-($3))|0);
      $len=$sub;
      var $4=$len;
      var $cmp=(($4)|0)==0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $5=$ret;
      $retval=$5;
      __label__ = 5; break;
    case 4: 
      var $6=$p_addr;
      var $7=$p_addr;
      var $ssize=(($7+16)|0);
      var $8=HEAP32[(($ssize)>>2)];
      var $9=$len;
      var $add=((($8)+($9))|0);
      _enlarge($6, $add);
      var $10=$p_addr;
      var $strip=(($10+12)|0);
      var $11=HEAP32[(($strip)>>2)];
      var $12=$p_addr;
      var $slen1=(($12+20)|0);
      var $13=HEAP32[(($slen1)>>2)];
      var $add_ptr=(($11+($13<<2))|0);
      var $14=$add_ptr;
      var $15=$p_addr;
      var $strip2=(($15+12)|0);
      var $16=HEAP32[(($strip2)>>2)];
      var $17=$start_addr;
      var $add_ptr3=(($16+($17<<2))|0);
      var $18=$add_ptr3;
      var $19=$len;
      var $mul=((($19<<2))|0);
      assert($mul % 1 === 0, 'memcpy given ' + $mul + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($14, $18, $mul, 1);
      var $20=$len;
      var $21=$p_addr;
      var $slen4=(($21+20)|0);
      var $22=HEAP32[(($slen4)>>2)];
      var $add5=((($22)+($20))|0);
      HEAP32[(($slen4)>>2)]=$add5;
      var $23=$ret;
      $retval=$23;
      __label__ = 5; break;
    case 5: 
      var $24=$retval;
      ;
      return $24;
    default: assert(0, "bad label: " + __label__);
  }
}
_dupl["X"]=1;

function _ordinary($p, $ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $ch_addr;
      var $cap;
      $p_addr=$p;
      $ch_addr=$ch;
      var $0=$p_addr;
      var $g=(($0+28)|0);
      var $1=HEAP32[(($g)>>2)];
      var $categories=(($1+56)|0);
      var $2=HEAP32[(($categories)>>2)];
      $cap=$2;
      var $3=$p_addr;
      var $g1=(($3+28)|0);
      var $4=HEAP32[(($g1)>>2)];
      var $cflags=(($4+24)|0);
      var $5=HEAP32[(($cflags)>>2)];
      var $and=$5 & 2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 6; break; }
    case 3: 
      var $6=$ch_addr;
      var $conv=(($6) & 255);
      var $conv2=(($conv)&255);
      var $call=_isalpha($conv2);
      var $tobool3=(($call)|0)!=0;
      if ($tobool3) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $7=$ch_addr;
      var $call5=_othercase($7);
      var $conv6=(($call5 << 24) >> 24);
      var $8=$ch_addr;
      var $cmp=(($conv6)|0)!=(($8)|0);
      if ($cmp) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $9=$p_addr;
      var $10=$ch_addr;
      _bothcases($9, $10);
      __label__ = 9; break;
    case 6: 
      var $11=$p_addr;
      var $12=$ch_addr;
      var $conv8=(($12) & 255);
      var $conv9=(($conv8)&255);
      _doemit($11, 268435456, $conv9);
      var $13=$ch_addr;
      var $14=$cap;
      var $arrayidx=(($14+$13)|0);
      var $15=HEAP8[($arrayidx)];
      var $conv10=(($15)&255);
      var $cmp11=(($conv10)|0)==0;
      if ($cmp11) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $16=$p_addr;
      var $g14=(($16+28)|0);
      var $17=HEAP32[(($g14)>>2)];
      var $ncategories=(($17+52)|0);
      var $18=HEAP32[(($ncategories)>>2)];
      var $inc=((($18)+(1))|0);
      HEAP32[(($ncategories)>>2)]=$inc;
      var $conv15=(($18) & 255);
      var $19=$ch_addr;
      var $20=$cap;
      var $arrayidx16=(($20+$19)|0);
      HEAP8[($arrayidx16)]=$conv15;
      __label__ = 8; break;
    case 8: 
      __label__ = 9; break;
    case 9: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_ordinary["X"]=1;

function _doinsert($p, $op, $opnd, $pos) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $op_addr;
      var $opnd_addr;
      var $pos_addr;
      var $sn;
      var $s;
      var $i;
      $p_addr=$p;
      $op_addr=$op;
      $opnd_addr=$opnd;
      $pos_addr=$pos;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 13; break;
    case 4: 
      var $2=$p_addr;
      var $slen=(($2+20)|0);
      var $3=HEAP32[(($slen)>>2)];
      $sn=$3;
      var $4=$p_addr;
      var $5=$op_addr;
      var $6=$opnd_addr;
      _doemit($4, $5, $6);
      var $7=$sn;
      var $8=$p_addr;
      var $strip=(($8+12)|0);
      var $9=HEAP32[(($strip)>>2)];
      var $arrayidx=(($9+($7<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $s=$10;
      $i=1;
      __label__ = 5; break;
    case 5: 
      var $11=$i;
      var $cmp1=(($11)|0) < 10;
      if ($cmp1) { __label__ = 6; break; } else { __label__ = 12; break; }
    case 6: 
      var $12=$i;
      var $13=$p_addr;
      var $pbegin=(($13+32)|0);
      var $arrayidx2=(($pbegin+($12<<2))|0);
      var $14=HEAP32[(($arrayidx2)>>2)];
      var $15=$pos_addr;
      var $cmp3=(($14)|0) >= (($15)|0);
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $16=$i;
      var $17=$p_addr;
      var $pbegin5=(($17+32)|0);
      var $arrayidx6=(($pbegin5+($16<<2))|0);
      var $18=HEAP32[(($arrayidx6)>>2)];
      var $inc=((($18)+(1))|0);
      HEAP32[(($arrayidx6)>>2)]=$inc;
      __label__ = 8; break;
    case 8: 
      var $19=$i;
      var $20=$p_addr;
      var $pend=(($20+72)|0);
      var $arrayidx8=(($pend+($19<<2))|0);
      var $21=HEAP32[(($arrayidx8)>>2)];
      var $22=$pos_addr;
      var $cmp9=(($21)|0) >= (($22)|0);
      if ($cmp9) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $23=$i;
      var $24=$p_addr;
      var $pend11=(($24+72)|0);
      var $arrayidx12=(($pend11+($23<<2))|0);
      var $25=HEAP32[(($arrayidx12)>>2)];
      var $inc13=((($25)+(1))|0);
      HEAP32[(($arrayidx12)>>2)]=$inc13;
      __label__ = 10; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $26=$i;
      var $inc15=((($26)+(1))|0);
      $i=$inc15;
      __label__ = 5; break;
    case 12: 
      var $27=$pos_addr;
      var $add=((($27)+(1))|0);
      var $28=$p_addr;
      var $strip16=(($28+12)|0);
      var $29=HEAP32[(($strip16)>>2)];
      var $arrayidx17=(($29+($add<<2))|0);
      var $30=$arrayidx17;
      var $31=$pos_addr;
      var $32=$p_addr;
      var $strip18=(($32+12)|0);
      var $33=HEAP32[(($strip18)>>2)];
      var $arrayidx19=(($33+($31<<2))|0);
      var $34=$arrayidx19;
      var $35=$p_addr;
      var $slen20=(($35+20)|0);
      var $36=HEAP32[(($slen20)>>2)];
      var $37=$pos_addr;
      var $sub=((($36)-($37))|0);
      var $sub21=((($sub)-(1))|0);
      var $mul=((($sub21<<2))|0);
      _llvm_memmove_p0i8_p0i8_i32($30, $34, $mul, 1, 0);
      var $38=$s;
      var $39=$pos_addr;
      var $40=$p_addr;
      var $strip22=(($40+12)|0);
      var $41=HEAP32[(($strip22)>>2)];
      var $arrayidx23=(($41+($39<<2))|0);
      HEAP32[(($arrayidx23)>>2)]=$38;
      __label__ = 13; break;
    case 13: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_doinsert["X"]=1;

function _dofwd($p, $pos, $value) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $pos_addr;
      var $value_addr;
      $p_addr=$p;
      $pos_addr=$pos;
      $value_addr=$value;
      var $0=$p_addr;
      var $error=(($0+8)|0);
      var $1=HEAP32[(($error)>>2)];
      var $cmp=(($1)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 5; break;
    case 4: 
      var $2=$pos_addr;
      var $3=$p_addr;
      var $strip=(($3+12)|0);
      var $4=HEAP32[(($strip)>>2)];
      var $arrayidx=(($4+($2<<2))|0);
      var $5=HEAP32[(($arrayidx)>>2)];
      var $and=$5 & -134217728;
      var $6=$value_addr;
      var $or=$and | $6;
      var $7=$pos_addr;
      var $8=$p_addr;
      var $strip1=(($8+12)|0);
      var $9=HEAP32[(($strip1)>>2)];
      var $arrayidx2=(($9+($7<<2))|0);
      HEAP32[(($arrayidx2)>>2)]=$or;
      __label__ = 5; break;
    case 5: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _p_count($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $count;
      var $ndigits;
      $p_addr=$p;
      $count=0;
      $ndigits=0;
      __label__ = 3; break;
    case 3: 
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      var $2=$p_addr;
      var $end=(($2+4)|0);
      var $3=HEAP32[(($end)>>2)];
      var $cmp=(($1)>>>0) < (($3)>>>0);
      if ($cmp) { __label__ = 4; break; } else { var $8 = 0;__label__ = 6; break; }
    case 4: 
      var $4=$p_addr;
      var $next1=(($4)|0);
      var $5=HEAP32[(($next1)>>2)];
      var $6=HEAP8[($5)];
      var $conv=(($6)&255);
      var $call=_isdigit($conv);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { var $8 = 0;__label__ = 6; break; }
    case 5: 
      var $7=$count;
      var $cmp2=(($7)|0) <= 255;
      var $8 = $cmp2;__label__ = 6; break;
    case 6: 
      var $8;
      if ($8) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $9=$count;
      var $mul=((($9)*(10))|0);
      var $10=$p_addr;
      var $next4=(($10)|0);
      var $11=HEAP32[(($next4)>>2)];
      var $incdec_ptr=(($11+1)|0);
      HEAP32[(($next4)>>2)]=$incdec_ptr;
      var $12=HEAP8[($11)];
      var $conv5=(($12 << 24) >> 24);
      var $sub=((($conv5)-(48))|0);
      var $add=((($mul)+($sub))|0);
      $count=$add;
      var $13=$ndigits;
      var $inc=((($13)+(1))|0);
      $ndigits=$inc;
      __label__ = 3; break;
    case 8: 
      var $14=$ndigits;
      var $cmp6=(($14)|0) > 0;
      if ($cmp6) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      var $15=$count;
      var $cmp9=(($15)|0) <= 255;
      if ($cmp9) { var $17 = 1;__label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $16=$p_addr;
      var $call11=_seterr($16, 10);
      var $tobool12=(($call11)|0)!=0;
      var $17 = $tobool12;__label__ = 11; break;
    case 11: 
      var $17;
      var $lor_ext=(($17)&1);
      var $18=$count;
      ;
      return $18;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_count["X"]=1;

function _repeat($p, $start, $from, $to) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $start_addr;
      var $from_addr;
      var $to_addr;
      var $finish;
      var $copy;
      $p_addr=$p;
      $start_addr=$start;
      $from_addr=$from;
      $to_addr=$to;
      var $0=$p_addr;
      var $slen=(($0+20)|0);
      var $1=HEAP32[(($slen)>>2)];
      $finish=$1;
      var $2=$p_addr;
      var $error=(($2+8)|0);
      var $3=HEAP32[(($error)>>2)];
      var $cmp=(($3)|0)!=0;
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      __label__ = 19; break;
    case 4: 
      var $4=$from_addr;
      var $cmp1=(($4)|0) <= 1;
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $5=$from_addr;
      var $cond3 = $5;__label__ = 7; break;
    case 6: 
      var $6=$from_addr;
      var $cmp2=(($6)|0)==256;
      var $cond=$cmp2 ? 3 : 2;
      var $cond3 = $cond;__label__ = 7; break;
    case 7: 
      var $cond3;
      var $mul=((($cond3<<3))|0);
      var $7=$to_addr;
      var $cmp4=(($7)|0) <= 1;
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $8=$to_addr;
      var $cond10 = $8;__label__ = 10; break;
    case 9: 
      var $9=$to_addr;
      var $cmp7=(($9)|0)==256;
      var $cond8=$cmp7 ? 3 : 2;
      var $cond10 = $cond8;__label__ = 10; break;
    case 10: 
      var $cond10;
      var $add=((($mul)+($cond10))|0);
      if ((($add)|0) == 0) {
        __label__ = 11; break;
      }
      else if ((($add)|0) == 1 || (($add)|0) == 2 || (($add)|0) == 3) {
        __label__ = 12; break;
      }
      else if ((($add)|0) == 9) {
        __label__ = 13; break;
      }
      else if ((($add)|0) == 10) {
        __label__ = 14; break;
      }
      else if ((($add)|0) == 11) {
        __label__ = 15; break;
      }
      else if ((($add)|0) == 18) {
        __label__ = 16; break;
      }
      else if ((($add)|0) == 19) {
        __label__ = 17; break;
      }
      else {
      __label__ = 18; break;
      }
      
    case 11: 
      var $10=$finish;
      var $11=$start_addr;
      var $sub=((($10)-($11))|0);
      var $12=$p_addr;
      var $slen11=(($12+20)|0);
      var $13=HEAP32[(($slen11)>>2)];
      var $sub12=((($13)-($sub))|0);
      HEAP32[(($slen11)>>2)]=$sub12;
      __label__ = 19; break;
    case 12: 
      var $14=$p_addr;
      var $15=$p_addr;
      var $slen14=(($15+20)|0);
      var $16=HEAP32[(($slen14)>>2)];
      var $17=$start_addr;
      var $sub15=((($16)-($17))|0);
      var $add16=((($sub15)+(1))|0);
      var $18=$start_addr;
      _doinsert($14, 2013265920, $add16, $18);
      var $19=$p_addr;
      var $20=$start_addr;
      var $add17=((($20)+(1))|0);
      var $21=$to_addr;
      _repeat($19, $add17, 1, $21);
      var $22=$p_addr;
      var $23=$p_addr;
      var $slen18=(($23+20)|0);
      var $24=HEAP32[(($slen18)>>2)];
      var $25=$start_addr;
      var $sub19=((($24)-($25))|0);
      _doemit($22, -2147483648, $sub19);
      var $26=$p_addr;
      var $27=$start_addr;
      var $28=$p_addr;
      var $slen20=(($28+20)|0);
      var $29=HEAP32[(($slen20)>>2)];
      var $30=$start_addr;
      var $sub21=((($29)-($30))|0);
      _dofwd($26, $27, $sub21);
      var $31=$p_addr;
      _doemit($31, -2013265920, 0);
      var $32=$p_addr;
      var $33=$p_addr;
      var $slen22=(($33+20)|0);
      var $34=HEAP32[(($slen22)>>2)];
      var $sub23=((($34)-(1))|0);
      var $35=$p_addr;
      var $slen24=(($35+20)|0);
      var $36=HEAP32[(($slen24)>>2)];
      var $37=$p_addr;
      var $slen25=(($37+20)|0);
      var $38=HEAP32[(($slen25)>>2)];
      var $sub26=((($38)-(1))|0);
      var $sub27=((($36)-($sub26))|0);
      _dofwd($32, $sub23, $sub27);
      var $39=$p_addr;
      var $40=$p_addr;
      var $slen28=(($40+20)|0);
      var $41=HEAP32[(($slen28)>>2)];
      var $42=$p_addr;
      var $slen29=(($42+20)|0);
      var $43=HEAP32[(($slen29)>>2)];
      var $sub30=((($43)-(2))|0);
      var $sub31=((($41)-($sub30))|0);
      _doemit($39, -1879048192, $sub31);
      __label__ = 19; break;
    case 13: 
      __label__ = 19; break;
    case 14: 
      var $44=$p_addr;
      var $45=$p_addr;
      var $slen34=(($45+20)|0);
      var $46=HEAP32[(($slen34)>>2)];
      var $47=$start_addr;
      var $sub35=((($46)-($47))|0);
      var $add36=((($sub35)+(1))|0);
      var $48=$start_addr;
      _doinsert($44, 2013265920, $add36, $48);
      var $49=$p_addr;
      var $50=$p_addr;
      var $slen37=(($50+20)|0);
      var $51=HEAP32[(($slen37)>>2)];
      var $52=$start_addr;
      var $sub38=((($51)-($52))|0);
      _doemit($49, -2147483648, $sub38);
      var $53=$p_addr;
      var $54=$start_addr;
      var $55=$p_addr;
      var $slen39=(($55+20)|0);
      var $56=HEAP32[(($slen39)>>2)];
      var $57=$start_addr;
      var $sub40=((($56)-($57))|0);
      _dofwd($53, $54, $sub40);
      var $58=$p_addr;
      _doemit($58, -2013265920, 0);
      var $59=$p_addr;
      var $60=$p_addr;
      var $slen41=(($60+20)|0);
      var $61=HEAP32[(($slen41)>>2)];
      var $sub42=((($61)-(1))|0);
      var $62=$p_addr;
      var $slen43=(($62+20)|0);
      var $63=HEAP32[(($slen43)>>2)];
      var $64=$p_addr;
      var $slen44=(($64+20)|0);
      var $65=HEAP32[(($slen44)>>2)];
      var $sub45=((($65)-(1))|0);
      var $sub46=((($63)-($sub45))|0);
      _dofwd($59, $sub42, $sub46);
      var $66=$p_addr;
      var $67=$p_addr;
      var $slen47=(($67+20)|0);
      var $68=HEAP32[(($slen47)>>2)];
      var $69=$p_addr;
      var $slen48=(($69+20)|0);
      var $70=HEAP32[(($slen48)>>2)];
      var $sub49=((($70)-(2))|0);
      var $sub50=((($68)-($sub49))|0);
      _doemit($66, -1879048192, $sub50);
      var $71=$p_addr;
      var $72=$start_addr;
      var $add51=((($72)+(1))|0);
      var $73=$finish;
      var $add52=((($73)+(1))|0);
      var $call=_dupl($71, $add51, $add52);
      $copy=$call;
      var $74=$p_addr;
      var $75=$copy;
      var $76=$to_addr;
      var $sub53=((($76)-(1))|0);
      _repeat($74, $75, 1, $sub53);
      __label__ = 19; break;
    case 15: 
      var $77=$p_addr;
      var $78=$p_addr;
      var $slen55=(($78+20)|0);
      var $79=HEAP32[(($slen55)>>2)];
      var $80=$start_addr;
      var $sub56=((($79)-($80))|0);
      var $add57=((($sub56)+(1))|0);
      var $81=$start_addr;
      _doinsert($77, 1207959552, $add57, $81);
      var $82=$p_addr;
      var $83=$p_addr;
      var $slen58=(($83+20)|0);
      var $84=HEAP32[(($slen58)>>2)];
      var $85=$start_addr;
      var $sub59=((($84)-($85))|0);
      _doemit($82, 1342177280, $sub59);
      __label__ = 19; break;
    case 16: 
      var $86=$p_addr;
      var $87=$start_addr;
      var $88=$finish;
      var $call61=_dupl($86, $87, $88);
      $copy=$call61;
      var $89=$p_addr;
      var $90=$copy;
      var $91=$from_addr;
      var $sub62=((($91)-(1))|0);
      var $92=$to_addr;
      var $sub63=((($92)-(1))|0);
      _repeat($89, $90, $sub62, $sub63);
      __label__ = 19; break;
    case 17: 
      var $93=$p_addr;
      var $94=$start_addr;
      var $95=$finish;
      var $call65=_dupl($93, $94, $95);
      $copy=$call65;
      var $96=$p_addr;
      var $97=$copy;
      var $98=$from_addr;
      var $sub66=((($98)-(1))|0);
      var $99=$to_addr;
      _repeat($96, $97, $sub66, $99);
      __label__ = 19; break;
    case 18: 
      var $100=$p_addr;
      var $call67=_seterr($100, 15);
      __label__ = 19; break;
    case 19: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_repeat["X"]=1;

function _othercase($ch) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $ch_addr;
      $ch_addr=$ch;
      var $0=$ch_addr;
      var $conv=(($0) & 255);
      var $conv1=(($conv)&255);
      $ch_addr=$conv1;
      var $1=$ch_addr;
      var $call=_isupper($1);
      var $tobool=(($call)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $2=$ch_addr;
      var $call2=_tolower($2);
      var $conv3=(($call2) & 255);
      $retval=$conv3;
      __label__ = 7; break;
    case 4: 
      var $3=$ch_addr;
      var $call4=_islower($3);
      var $tobool5=(($call4)|0)!=0;
      if ($tobool5) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $4=$ch_addr;
      var $call7=_toupper($4);
      var $conv8=(($call7) & 255);
      $retval=$conv8;
      __label__ = 7; break;
    case 6: 
      var $5=$ch_addr;
      var $conv10=(($5) & 255);
      $retval=$conv10;
      __label__ = 7; break;
    case 7: 
      var $6=$retval;
      ;
      return $6;
    default: assert(0, "bad label: " + __label__);
  }
}


function _bothcases($p, $ch) {
  var __stackBase__  = STACKTOP; STACKTOP += 4; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $p_addr;
  var $ch_addr;
  var $oldnext;
  var $oldend;
  var $bracket=__stackBase__;
  $p_addr=$p;
  $ch_addr=$ch;
  var $0=$p_addr;
  var $next=(($0)|0);
  var $1=HEAP32[(($next)>>2)];
  $oldnext=$1;
  var $2=$p_addr;
  var $end=(($2+4)|0);
  var $3=HEAP32[(($end)>>2)];
  $oldend=$3;
  var $4=$ch_addr;
  var $conv=(($4) & 255);
  var $conv1=(($conv)&255);
  $ch_addr=$conv1;
  var $arraydecay=(($bracket)|0);
  var $5=$p_addr;
  var $next2=(($5)|0);
  HEAP32[(($next2)>>2)]=$arraydecay;
  var $arraydecay3=(($bracket)|0);
  var $add_ptr=(($arraydecay3+2)|0);
  var $6=$p_addr;
  var $end4=(($6+4)|0);
  HEAP32[(($end4)>>2)]=$add_ptr;
  var $7=$ch_addr;
  var $conv5=(($7) & 255);
  var $arrayidx=(($bracket)|0);
  HEAP8[($arrayidx)]=$conv5;
  var $arrayidx6=(($bracket+1)|0);
  HEAP8[($arrayidx6)]=93;
  var $arrayidx7=(($bracket+2)|0);
  HEAP8[($arrayidx7)]=0;
  var $8=$p_addr;
  _p_bracket($8);
  var $9=$oldnext;
  var $10=$p_addr;
  var $next8=(($10)|0);
  HEAP32[(($next8)>>2)]=$9;
  var $11=$oldend;
  var $12=$p_addr;
  var $end9=(($12+4)|0);
  HEAP32[(($end9)>>2)]=$11;
  STACKTOP = __stackBase__;
  return;
}


function _allocset($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $no;
      var $nc;
      var $nbytes;
      var $cs;
      var $css;
      var $i;
      $p_addr=$p;
      var $0=$p_addr;
      var $g=(($0+28)|0);
      var $1=HEAP32[(($g)>>2)];
      var $ncsets=(($1+12)|0);
      var $2=HEAP32[(($ncsets)>>2)];
      var $inc=((($2)+(1))|0);
      HEAP32[(($ncsets)>>2)]=$inc;
      $no=$2;
      var $3=$p_addr;
      var $g1=(($3+28)|0);
      var $4=HEAP32[(($g1)>>2)];
      var $csetsize=(($4+8)|0);
      var $5=HEAP32[(($csetsize)>>2)];
      $css=$5;
      var $6=$no;
      var $7=$p_addr;
      var $ncsalloc=(($7+24)|0);
      var $8=HEAP32[(($ncsalloc)>>2)];
      var $cmp=(($6)|0) >= (($8)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 18; break; }
    case 3: 
      var $9=$p_addr;
      var $ncsalloc2=(($9+24)|0);
      var $10=HEAP32[(($ncsalloc2)>>2)];
      var $add=((($10)+(8))|0);
      HEAP32[(($ncsalloc2)>>2)]=$add;
      var $11=$p_addr;
      var $ncsalloc3=(($11+24)|0);
      var $12=HEAP32[(($ncsalloc3)>>2)];
      $nc=$12;
      var $13=$nc;
      var $div=Math.floor(((($13)>>>0))/(8));
      var $14=$css;
      var $mul=((($div)*($14))|0);
      $nbytes=$mul;
      var $15=$p_addr;
      var $g4=(($15+28)|0);
      var $16=HEAP32[(($g4)>>2)];
      var $sets=(($16+16)|0);
      var $17=HEAP32[(($sets)>>2)];
      var $cmp5=(($17)|0)==0;
      if ($cmp5) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      var $18=$nc;
      var $mul7=((($18<<4))|0);
      var $call=_malloc($mul7);
      var $19=$call;
      var $20=$p_addr;
      var $g8=(($20+28)|0);
      var $21=HEAP32[(($g8)>>2)];
      var $sets9=(($21+16)|0);
      HEAP32[(($sets9)>>2)]=$19;
      __label__ = 6; break;
    case 5: 
      var $22=$p_addr;
      var $g10=(($22+28)|0);
      var $23=HEAP32[(($g10)>>2)];
      var $sets11=(($23+16)|0);
      var $24=HEAP32[(($sets11)>>2)];
      var $25=$24;
      var $26=$nc;
      var $mul12=((($26<<4))|0);
      var $call13=_realloc($25, $mul12);
      var $27=$call13;
      var $28=$p_addr;
      var $g14=(($28+28)|0);
      var $29=HEAP32[(($g14)>>2)];
      var $sets15=(($29+16)|0);
      HEAP32[(($sets15)>>2)]=$27;
      __label__ = 6; break;
    case 6: 
      var $30=$p_addr;
      var $g16=(($30+28)|0);
      var $31=HEAP32[(($g16)>>2)];
      var $setbits=(($31+20)|0);
      var $32=HEAP32[(($setbits)>>2)];
      var $cmp17=(($32)|0)==0;
      if ($cmp17) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $33=$nbytes;
      var $call19=_malloc($33);
      var $34=$p_addr;
      var $g20=(($34+28)|0);
      var $35=HEAP32[(($g20)>>2)];
      var $setbits21=(($35+20)|0);
      HEAP32[(($setbits21)>>2)]=$call19;
      __label__ = 13; break;
    case 8: 
      var $36=$p_addr;
      var $g23=(($36+28)|0);
      var $37=HEAP32[(($g23)>>2)];
      var $setbits24=(($37+20)|0);
      var $38=HEAP32[(($setbits24)>>2)];
      var $39=$nbytes;
      var $call25=_realloc($38, $39);
      var $40=$p_addr;
      var $g26=(($40+28)|0);
      var $41=HEAP32[(($g26)>>2)];
      var $setbits27=(($41+20)|0);
      HEAP32[(($setbits27)>>2)]=$call25;
      $i=0;
      __label__ = 9; break;
    case 9: 
      var $42=$i;
      var $43=$no;
      var $cmp28=(($42)|0) < (($43)|0);
      if ($cmp28) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $44=$p_addr;
      var $g29=(($44+28)|0);
      var $45=HEAP32[(($g29)>>2)];
      var $setbits30=(($45+20)|0);
      var $46=HEAP32[(($setbits30)>>2)];
      var $47=$css;
      var $48=$i;
      var $div31=((((($48)|0))/(8))&-1);
      var $mul32=((($47)*($div31))|0);
      var $add_ptr=(($46+$mul32)|0);
      var $49=$i;
      var $50=$p_addr;
      var $g33=(($50+28)|0);
      var $51=HEAP32[(($g33)>>2)];
      var $sets34=(($51+16)|0);
      var $52=HEAP32[(($sets34)>>2)];
      var $arrayidx=(($52+($49<<4))|0);
      var $ptr=(($arrayidx)|0);
      HEAP32[(($ptr)>>2)]=$add_ptr;
      __label__ = 11; break;
    case 11: 
      var $53=$i;
      var $inc35=((($53)+(1))|0);
      $i=$inc35;
      __label__ = 9; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $54=$p_addr;
      var $g37=(($54+28)|0);
      var $55=HEAP32[(($g37)>>2)];
      var $sets38=(($55+16)|0);
      var $56=HEAP32[(($sets38)>>2)];
      var $cmp39=(($56)|0)!=0;
      if ($cmp39) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $57=$p_addr;
      var $g40=(($57+28)|0);
      var $58=HEAP32[(($g40)>>2)];
      var $setbits41=(($58+20)|0);
      var $59=HEAP32[(($setbits41)>>2)];
      var $cmp42=(($59)|0)!=0;
      if ($cmp42) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $60=$p_addr;
      var $g44=(($60+28)|0);
      var $61=HEAP32[(($g44)>>2)];
      var $setbits45=(($61+20)|0);
      var $62=HEAP32[(($setbits45)>>2)];
      var $63=$nbytes;
      var $64=$css;
      var $sub=((($63)-($64))|0);
      var $add_ptr46=(($62+$sub)|0);
      var $65=$css;
      _memset($add_ptr46, 0, $65, 1);
      __label__ = 17; break;
    case 16: 
      $no=0;
      var $66=$p_addr;
      var $call48=_seterr($66, 12);
      __label__ = 17; break;
    case 17: 
      __label__ = 18; break;
    case 18: 
      var $67=$no;
      var $68=$p_addr;
      var $g51=(($68+28)|0);
      var $69=HEAP32[(($g51)>>2)];
      var $sets52=(($69+16)|0);
      var $70=HEAP32[(($sets52)>>2)];
      var $arrayidx53=(($70+($67<<4))|0);
      $cs=$arrayidx53;
      var $71=$p_addr;
      var $g54=(($71+28)|0);
      var $72=HEAP32[(($g54)>>2)];
      var $setbits55=(($72+20)|0);
      var $73=HEAP32[(($setbits55)>>2)];
      var $74=$css;
      var $75=$no;
      var $div56=((((($75)|0))/(8))&-1);
      var $mul57=((($74)*($div56))|0);
      var $add_ptr58=(($73+$mul57)|0);
      var $76=$cs;
      var $ptr59=(($76)|0);
      HEAP32[(($ptr59)>>2)]=$add_ptr58;
      var $77=$no;
      var $rem=((($77)|0))%(8);
      var $shl=1 << $rem;
      var $conv=(($shl) & 255);
      var $78=$cs;
      var $mask=(($78+4)|0);
      HEAP8[($mask)]=$conv;
      var $79=$cs;
      var $hash=(($79+6)|0);
      HEAP16[(($hash)>>1)]=0;
      var $80=$cs;
      var $smultis=(($80+8)|0);
      HEAP32[(($smultis)>>2)]=0;
      var $81=$cs;
      var $multis=(($81+12)|0);
      HEAP32[(($multis)>>2)]=0;
      var $82=$cs;
      ;
      return $82;
    default: assert(0, "bad label: " + __label__);
  }
}
_allocset["X"]=1;

function _mccase($p, $cs) {
  ;
  var __label__;

  var $p_addr;
  var $cs_addr;
  $p_addr=$p;
  $cs_addr=$cs;
  ;
  return;
}


function _mcinvert($p, $cs) {
  ;
  var __label__;

  var $p_addr;
  var $cs_addr;
  $p_addr=$p;
  $cs_addr=$cs;
  ;
  return;
}


function _nch($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $cs_addr;
      var $i;
      var $css;
      var $n;
      $p_addr=$p;
      $cs_addr=$cs;
      var $0=$p_addr;
      var $g=(($0+28)|0);
      var $1=HEAP32[(($g)>>2)];
      var $csetsize=(($1+8)|0);
      var $2=HEAP32[(($csetsize)>>2)];
      $css=$2;
      $n=0;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $4=$css;
      var $cmp=(($3)>>>0) < (($4)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $5=$i;
      var $conv=(($5) & 255);
      var $idxprom=(($conv)&255);
      var $6=$cs_addr;
      var $ptr=(($6)|0);
      var $7=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($7+$idxprom)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv1=(($8)&255);
      var $9=$cs_addr;
      var $mask=(($9+4)|0);
      var $10=HEAP8[($mask)];
      var $conv2=(($10)&255);
      var $and=$conv1 & $conv2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$n;
      var $inc=((($11)+(1))|0);
      $n=$inc;
      __label__ = 6; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $12=$i;
      var $inc3=((($12)+(1))|0);
      $i=$inc3;
      __label__ = 3; break;
    case 8: 
      var $13=$n;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _firstch($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $cs_addr;
      var $i;
      var $css;
      $p_addr=$p;
      $cs_addr=$cs;
      var $0=$p_addr;
      var $g=(($0+28)|0);
      var $1=HEAP32[(($g)>>2)];
      var $csetsize=(($1+8)|0);
      var $2=HEAP32[(($csetsize)>>2)];
      $css=$2;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $3=$i;
      var $4=$css;
      var $cmp=(($3)>>>0) < (($4)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 8; break; }
    case 4: 
      var $5=$i;
      var $conv=(($5) & 255);
      var $idxprom=(($conv)&255);
      var $6=$cs_addr;
      var $ptr=(($6)|0);
      var $7=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($7+$idxprom)|0);
      var $8=HEAP8[($arrayidx)];
      var $conv1=(($8)&255);
      var $9=$cs_addr;
      var $mask=(($9+4)|0);
      var $10=HEAP8[($mask)];
      var $conv2=(($10)&255);
      var $and=$conv1 & $conv2;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $11=$i;
      var $conv3=(($11) & 255);
      var $conv4=(($conv3 << 24) >> 24);
      $retval=$conv4;
      __label__ = 9; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $12=$i;
      var $inc=((($12)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 8: 
      $retval=0;
      __label__ = 9; break;
    case 9: 
      var $13=$retval;
      ;
      return $13;
    default: assert(0, "bad label: " + __label__);
  }
}


function _freeset($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $cs_addr;
      var $i;
      var $top;
      var $css;
      $p_addr=$p;
      $cs_addr=$cs;
      var $0=$p_addr;
      var $g=(($0+28)|0);
      var $1=HEAP32[(($g)>>2)];
      var $ncsets=(($1+12)|0);
      var $2=HEAP32[(($ncsets)>>2)];
      var $3=$p_addr;
      var $g1=(($3+28)|0);
      var $4=HEAP32[(($g1)>>2)];
      var $sets=(($4+16)|0);
      var $5=HEAP32[(($sets)>>2)];
      var $arrayidx=(($5+($2<<4))|0);
      $top=$arrayidx;
      var $6=$p_addr;
      var $g2=(($6+28)|0);
      var $7=HEAP32[(($g2)>>2)];
      var $csetsize=(($7+8)|0);
      var $8=HEAP32[(($csetsize)>>2)];
      $css=$8;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $9=$i;
      var $10=$css;
      var $cmp=(($9)>>>0) < (($10)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $11=$cs_addr;
      var $mask=(($11+4)|0);
      var $12=HEAP8[($mask)];
      var $conv=(($12)&255);
      var $neg=$conv ^ -1;
      var $13=$i;
      var $conv3=(($13) & 255);
      var $idxprom=(($conv3)&255);
      var $14=$cs_addr;
      var $ptr=(($14)|0);
      var $15=HEAP32[(($ptr)>>2)];
      var $arrayidx4=(($15+$idxprom)|0);
      var $16=HEAP8[($arrayidx4)];
      var $conv5=(($16)&255);
      var $and=$conv5 & $neg;
      var $conv6=(($and) & 255);
      HEAP8[($arrayidx4)]=$conv6;
      var $17=$i;
      var $conv7=(($17) & 255);
      var $conv8=(($conv7)&255);
      var $18=$cs_addr;
      var $hash=(($18+6)|0);
      var $19=HEAP16[(($hash)>>1)];
      var $conv9=(($19 << 16) >> 16);
      var $sub=((($conv9)-($conv8))|0);
      var $conv10=(($sub) & 65535);
      HEAP16[(($hash)>>1)]=$conv10;
      __label__ = 5; break;
    case 5: 
      var $20=$i;
      var $inc=((($20)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      var $21=$cs_addr;
      var $22=$top;
      var $add_ptr=((($22)-(16))|0);
      var $cmp11=(($21)|0)==(($add_ptr)|0);
      if ($cmp11) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $23=$p_addr;
      var $g13=(($23+28)|0);
      var $24=HEAP32[(($g13)>>2)];
      var $ncsets14=(($24+12)|0);
      var $25=HEAP32[(($ncsets14)>>2)];
      var $dec=((($25)-(1))|0);
      HEAP32[(($ncsets14)>>2)]=$dec;
      __label__ = 8; break;
    case 8: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_freeset["X"]=1;

function _p_b_term($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $cs_addr;
      var $c;
      var $start;
      var $finish;
      var $i;
      $p_addr=$p;
      $cs_addr=$cs;
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      var $2=$p_addr;
      var $end=(($2+4)|0);
      var $3=HEAP32[(($end)>>2)];
      var $cmp=(($1)>>>0) < (($3)>>>0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $4=$p_addr;
      var $next1=(($4)|0);
      var $5=HEAP32[(($next1)>>2)];
      var $6=HEAP8[($5)];
      var $conv=(($6 << 24) >> 24);
      var $cond = $conv;__label__ = 5; break;
    case 4: 
      var $cond = 0;__label__ = 5; break;
    case 5: 
      var $cond;
      if ((($cond)|0) == 91) {
        __label__ = 6; break;
      }
      else if ((($cond)|0) == 45) {
        __label__ = 10; break;
      }
      else {
      __label__ = 11; break;
      }
      
    case 6: 
      var $7=$p_addr;
      var $next2=(($7)|0);
      var $8=HEAP32[(($next2)>>2)];
      var $add_ptr=(($8+1)|0);
      var $9=$p_addr;
      var $end3=(($9+4)|0);
      var $10=HEAP32[(($end3)>>2)];
      var $cmp4=(($add_ptr)>>>0) < (($10)>>>0);
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$p_addr;
      var $next7=(($11)|0);
      var $12=HEAP32[(($next7)>>2)];
      var $add_ptr8=(($12+1)|0);
      var $13=HEAP8[($add_ptr8)];
      var $conv9=(($13 << 24) >> 24);
      var $cond12 = $conv9;__label__ = 9; break;
    case 8: 
      var $cond12 = 0;__label__ = 9; break;
    case 9: 
      var $cond12;
      var $conv13=(($cond12) & 255);
      $c=$conv13;
      __label__ = 12; break;
    case 10: 
      var $14=$p_addr;
      var $call=_seterr($14, 11);
      __label__ = 77; break;
    case 11: 
      $c=0;
      __label__ = 12; break;
    case 12: 
      var $15=$c;
      var $conv15=(($15 << 24) >> 24);
      if ((($conv15)|0) == 58) {
        __label__ = 13; break;
      }
      else if ((($conv15)|0) == 61) {
        __label__ = 28; break;
      }
      else {
      __label__ = 43; break;
      }
      
    case 13: 
      var $16=$p_addr;
      var $next17=(($16)|0);
      var $17=HEAP32[(($next17)>>2)];
      var $add_ptr18=(($17+2)|0);
      HEAP32[(($next17)>>2)]=$add_ptr18;
      var $18=$p_addr;
      var $next19=(($18)|0);
      var $19=HEAP32[(($next19)>>2)];
      var $20=$p_addr;
      var $end20=(($20+4)|0);
      var $21=HEAP32[(($end20)>>2)];
      var $cmp21=(($19)>>>0) < (($21)>>>0);
      if ($cmp21) { var $23 = 1;__label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $22=$p_addr;
      var $call23=_seterr($22, 7);
      var $tobool=(($call23)|0)!=0;
      var $23 = $tobool;__label__ = 15; break;
    case 15: 
      var $23;
      var $lor_ext=(($23)&1);
      var $24=$p_addr;
      var $next24=(($24)|0);
      var $25=HEAP32[(($next24)>>2)];
      var $26=HEAP8[($25)];
      $c=$26;
      var $27=$c;
      var $conv25=(($27 << 24) >> 24);
      var $cmp26=(($conv25)|0)!=45;
      if ($cmp26) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $28=$c;
      var $conv28=(($28 << 24) >> 24);
      var $cmp29=(($conv28)|0)!=93;
      if ($cmp29) { var $30 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $29=$p_addr;
      var $call32=_seterr($29, 4);
      var $tobool33=(($call32)|0)!=0;
      var $30 = $tobool33;__label__ = 18; break;
    case 18: 
      var $30;
      var $lor_ext35=(($30)&1);
      var $31=$p_addr;
      var $32=$cs_addr;
      _p_b_cclass($31, $32);
      var $33=$p_addr;
      var $next36=(($33)|0);
      var $34=HEAP32[(($next36)>>2)];
      var $35=$p_addr;
      var $end37=(($35+4)|0);
      var $36=HEAP32[(($end37)>>2)];
      var $cmp38=(($34)>>>0) < (($36)>>>0);
      if ($cmp38) { var $38 = 1;__label__ = 20; break; } else { __label__ = 19; break; }
    case 19: 
      var $37=$p_addr;
      var $call41=_seterr($37, 7);
      var $tobool42=(($call41)|0)!=0;
      var $38 = $tobool42;__label__ = 20; break;
    case 20: 
      var $38;
      var $lor_ext44=(($38)&1);
      var $39=$p_addr;
      var $next45=(($39)|0);
      var $40=HEAP32[(($next45)>>2)];
      var $41=$p_addr;
      var $end46=(($41+4)|0);
      var $42=HEAP32[(($end46)>>2)];
      var $cmp47=(($40)>>>0) < (($42)>>>0);
      if ($cmp47) { __label__ = 21; break; } else { __label__ = 25; break; }
    case 21: 
      var $43=$p_addr;
      var $next50=(($43)|0);
      var $44=HEAP32[(($next50)>>2)];
      var $add_ptr51=(($44+1)|0);
      var $45=$p_addr;
      var $end52=(($45+4)|0);
      var $46=HEAP32[(($end52)>>2)];
      var $cmp53=(($add_ptr51)>>>0) < (($46)>>>0);
      if ($cmp53) { __label__ = 22; break; } else { __label__ = 25; break; }
    case 22: 
      var $47=$p_addr;
      var $next56=(($47)|0);
      var $48=HEAP32[(($next56)>>2)];
      var $49=HEAP8[($48)];
      var $conv57=(($49 << 24) >> 24);
      var $cmp58=(($conv57)|0)==58;
      if ($cmp58) { __label__ = 23; break; } else { __label__ = 25; break; }
    case 23: 
      var $50=$p_addr;
      var $next61=(($50)|0);
      var $51=HEAP32[(($next61)>>2)];
      var $add_ptr62=(($51+1)|0);
      var $52=HEAP8[($add_ptr62)];
      var $conv63=(($52 << 24) >> 24);
      var $cmp64=(($conv63)|0)==93;
      if ($cmp64) { __label__ = 24; break; } else { __label__ = 25; break; }
    case 24: 
      var $53=$p_addr;
      var $next67=(($53)|0);
      var $54=HEAP32[(($next67)>>2)];
      var $add_ptr68=(($54+2)|0);
      HEAP32[(($next67)>>2)]=$add_ptr68;
      if (1) { var $56 = 1;__label__ = 27; break; } else { __label__ = 26; break; }
    case 25: 
      if (0) { var $56 = 1;__label__ = 27; break; } else { __label__ = 26; break; }
    case 26: 
      var $55=$p_addr;
      var $call71=_seterr($55, 4);
      var $tobool72=(($call71)|0)!=0;
      var $56 = $tobool72;__label__ = 27; break;
    case 27: 
      var $56;
      var $lor_ext74=(($56)&1);
      __label__ = 77; break;
    case 28: 
      var $57=$p_addr;
      var $next76=(($57)|0);
      var $58=HEAP32[(($next76)>>2)];
      var $add_ptr77=(($58+2)|0);
      HEAP32[(($next76)>>2)]=$add_ptr77;
      var $59=$p_addr;
      var $next78=(($59)|0);
      var $60=HEAP32[(($next78)>>2)];
      var $61=$p_addr;
      var $end79=(($61+4)|0);
      var $62=HEAP32[(($end79)>>2)];
      var $cmp80=(($60)>>>0) < (($62)>>>0);
      if ($cmp80) { var $64 = 1;__label__ = 30; break; } else { __label__ = 29; break; }
    case 29: 
      var $63=$p_addr;
      var $call83=_seterr($63, 7);
      var $tobool84=(($call83)|0)!=0;
      var $64 = $tobool84;__label__ = 30; break;
    case 30: 
      var $64;
      var $lor_ext86=(($64)&1);
      var $65=$p_addr;
      var $next87=(($65)|0);
      var $66=HEAP32[(($next87)>>2)];
      var $67=HEAP8[($66)];
      $c=$67;
      var $68=$c;
      var $conv88=(($68 << 24) >> 24);
      var $cmp89=(($conv88)|0)!=45;
      if ($cmp89) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      var $69=$c;
      var $conv92=(($69 << 24) >> 24);
      var $cmp93=(($conv92)|0)!=93;
      if ($cmp93) { var $71 = 1;__label__ = 33; break; } else { __label__ = 32; break; }
    case 32: 
      var $70=$p_addr;
      var $call96=_seterr($70, 3);
      var $tobool97=(($call96)|0)!=0;
      var $71 = $tobool97;__label__ = 33; break;
    case 33: 
      var $71;
      var $lor_ext99=(($71)&1);
      var $72=$p_addr;
      var $73=$cs_addr;
      _p_b_eclass($72, $73);
      var $74=$p_addr;
      var $next100=(($74)|0);
      var $75=HEAP32[(($next100)>>2)];
      var $76=$p_addr;
      var $end101=(($76+4)|0);
      var $77=HEAP32[(($end101)>>2)];
      var $cmp102=(($75)>>>0) < (($77)>>>0);
      if ($cmp102) { var $79 = 1;__label__ = 35; break; } else { __label__ = 34; break; }
    case 34: 
      var $78=$p_addr;
      var $call105=_seterr($78, 7);
      var $tobool106=(($call105)|0)!=0;
      var $79 = $tobool106;__label__ = 35; break;
    case 35: 
      var $79;
      var $lor_ext108=(($79)&1);
      var $80=$p_addr;
      var $next109=(($80)|0);
      var $81=HEAP32[(($next109)>>2)];
      var $82=$p_addr;
      var $end110=(($82+4)|0);
      var $83=HEAP32[(($end110)>>2)];
      var $cmp111=(($81)>>>0) < (($83)>>>0);
      if ($cmp111) { __label__ = 36; break; } else { __label__ = 40; break; }
    case 36: 
      var $84=$p_addr;
      var $next114=(($84)|0);
      var $85=HEAP32[(($next114)>>2)];
      var $add_ptr115=(($85+1)|0);
      var $86=$p_addr;
      var $end116=(($86+4)|0);
      var $87=HEAP32[(($end116)>>2)];
      var $cmp117=(($add_ptr115)>>>0) < (($87)>>>0);
      if ($cmp117) { __label__ = 37; break; } else { __label__ = 40; break; }
    case 37: 
      var $88=$p_addr;
      var $next120=(($88)|0);
      var $89=HEAP32[(($next120)>>2)];
      var $90=HEAP8[($89)];
      var $conv121=(($90 << 24) >> 24);
      var $cmp122=(($conv121)|0)==61;
      if ($cmp122) { __label__ = 38; break; } else { __label__ = 40; break; }
    case 38: 
      var $91=$p_addr;
      var $next125=(($91)|0);
      var $92=HEAP32[(($next125)>>2)];
      var $add_ptr126=(($92+1)|0);
      var $93=HEAP8[($add_ptr126)];
      var $conv127=(($93 << 24) >> 24);
      var $cmp128=(($conv127)|0)==93;
      if ($cmp128) { __label__ = 39; break; } else { __label__ = 40; break; }
    case 39: 
      var $94=$p_addr;
      var $next131=(($94)|0);
      var $95=HEAP32[(($next131)>>2)];
      var $add_ptr132=(($95+2)|0);
      HEAP32[(($next131)>>2)]=$add_ptr132;
      if (1) { var $97 = 1;__label__ = 42; break; } else { __label__ = 41; break; }
    case 40: 
      if (0) { var $97 = 1;__label__ = 42; break; } else { __label__ = 41; break; }
    case 41: 
      var $96=$p_addr;
      var $call135=_seterr($96, 3);
      var $tobool136=(($call135)|0)!=0;
      var $97 = $tobool136;__label__ = 42; break;
    case 42: 
      var $97;
      var $lor_ext138=(($97)&1);
      __label__ = 77; break;
    case 43: 
      var $98=$p_addr;
      var $call140=_p_b_symbol($98);
      $start=$call140;
      var $99=$p_addr;
      var $next141=(($99)|0);
      var $100=HEAP32[(($next141)>>2)];
      var $101=$p_addr;
      var $end142=(($101+4)|0);
      var $102=HEAP32[(($end142)>>2)];
      var $cmp143=(($100)>>>0) < (($102)>>>0);
      if ($cmp143) { __label__ = 44; break; } else { __label__ = 54; break; }
    case 44: 
      var $103=$p_addr;
      var $next146=(($103)|0);
      var $104=HEAP32[(($next146)>>2)];
      var $105=HEAP8[($104)];
      var $conv147=(($105 << 24) >> 24);
      var $cmp148=(($conv147)|0)==45;
      if ($cmp148) { __label__ = 45; break; } else { __label__ = 54; break; }
    case 45: 
      var $106=$p_addr;
      var $next151=(($106)|0);
      var $107=HEAP32[(($next151)>>2)];
      var $add_ptr152=(($107+1)|0);
      var $108=$p_addr;
      var $end153=(($108+4)|0);
      var $109=HEAP32[(($end153)>>2)];
      var $cmp154=(($add_ptr152)>>>0) < (($109)>>>0);
      if ($cmp154) { __label__ = 46; break; } else { __label__ = 54; break; }
    case 46: 
      var $110=$p_addr;
      var $next157=(($110)|0);
      var $111=HEAP32[(($next157)>>2)];
      var $add_ptr158=(($111+1)|0);
      var $112=HEAP8[($add_ptr158)];
      var $conv159=(($112 << 24) >> 24);
      var $cmp160=(($conv159)|0)!=93;
      if ($cmp160) { __label__ = 47; break; } else { __label__ = 54; break; }
    case 47: 
      var $113=$p_addr;
      var $next162=(($113)|0);
      var $114=HEAP32[(($next162)>>2)];
      var $incdec_ptr=(($114+1)|0);
      HEAP32[(($next162)>>2)]=$incdec_ptr;
      var $115=$p_addr;
      var $next163=(($115)|0);
      var $116=HEAP32[(($next163)>>2)];
      var $117=$p_addr;
      var $end164=(($117+4)|0);
      var $118=HEAP32[(($end164)>>2)];
      var $cmp165=(($116)>>>0) < (($118)>>>0);
      if ($cmp165) { __label__ = 48; break; } else { __label__ = 50; break; }
    case 48: 
      var $119=$p_addr;
      var $next168=(($119)|0);
      var $120=HEAP32[(($next168)>>2)];
      var $121=HEAP8[($120)];
      var $conv169=(($121 << 24) >> 24);
      var $cmp170=(($conv169)|0)==45;
      if ($cmp170) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $122=$p_addr;
      var $next173=(($122)|0);
      var $123=HEAP32[(($next173)>>2)];
      var $incdec_ptr174=(($123+1)|0);
      HEAP32[(($next173)>>2)]=$incdec_ptr174;
      if (1) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 50: 
      if (0) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      $finish=45;
      __label__ = 53; break;
    case 52: 
      var $124=$p_addr;
      var $call177=_p_b_symbol($124);
      $finish=$call177;
      __label__ = 53; break;
    case 53: 
      __label__ = 55; break;
    case 54: 
      var $125=$start;
      $finish=$125;
      __label__ = 55; break;
    case 55: 
      var $126=$start;
      var $conv180=(($126 << 24) >> 24);
      var $127=$finish;
      var $conv181=(($127 << 24) >> 24);
      var $cmp182=(($conv180)|0)==(($conv181)|0);
      if ($cmp182) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $128=$cs_addr;
      var $mask=(($128+4)|0);
      var $129=HEAP8[($mask)];
      var $conv185=(($129)&255);
      var $130=$start;
      var $idxprom=(($130)&255);
      var $131=$cs_addr;
      var $ptr=(($131)|0);
      var $132=HEAP32[(($ptr)>>2)];
      var $arrayidx=(($132+$idxprom)|0);
      var $133=HEAP8[($arrayidx)];
      var $conv186=(($133)&255);
      var $or=$conv186 | $conv185;
      var $conv187=(($or) & 255);
      HEAP8[($arrayidx)]=$conv187;
      var $134=$start;
      var $conv188=(($134)&255);
      var $135=$cs_addr;
      var $hash=(($135+6)|0);
      var $136=HEAP16[(($hash)>>1)];
      var $conv189=(($136 << 16) >> 16);
      var $add=((($conv189)+($conv188))|0);
      var $conv190=(($add) & 65535);
      HEAP16[(($hash)>>1)]=$conv190;
      __label__ = 76; break;
    case 57: 
      var $137=HEAP32[((___collate_load_error)>>2)];
      var $tobool192=(($137)|0)!=0;
      if ($tobool192) { __label__ = 58; break; } else { __label__ = 65; break; }
    case 58: 
      var $138=$start;
      var $conv194=(($138)&255);
      var $139=$finish;
      var $conv195=(($139)&255);
      var $cmp196=(($conv194)|0) <= (($conv195)|0);
      if ($cmp196) { var $141 = 1;__label__ = 60; break; } else { __label__ = 59; break; }
    case 59: 
      var $140=$p_addr;
      var $call199=_seterr($140, 11);
      var $tobool200=(($call199)|0)!=0;
      var $141 = $tobool200;__label__ = 60; break;
    case 60: 
      var $141;
      var $lor_ext202=(($141)&1);
      var $142=$start;
      var $conv203=(($142)&255);
      $i=$conv203;
      __label__ = 61; break;
    case 61: 
      var $143=$i;
      var $144=$finish;
      var $conv204=(($144)&255);
      var $cmp205=(($143)|0) <= (($conv204)|0);
      if ($cmp205) { __label__ = 62; break; } else { __label__ = 64; break; }
    case 62: 
      var $145=$cs_addr;
      var $mask207=(($145+4)|0);
      var $146=HEAP8[($mask207)];
      var $conv208=(($146)&255);
      var $147=$i;
      var $conv209=(($147) & 255);
      var $idxprom210=(($conv209)&255);
      var $148=$cs_addr;
      var $ptr211=(($148)|0);
      var $149=HEAP32[(($ptr211)>>2)];
      var $arrayidx212=(($149+$idxprom210)|0);
      var $150=HEAP8[($arrayidx212)];
      var $conv213=(($150)&255);
      var $or214=$conv213 | $conv208;
      var $conv215=(($or214) & 255);
      HEAP8[($arrayidx212)]=$conv215;
      var $151=$i;
      var $conv216=(($151) & 255);
      var $conv217=(($conv216)&255);
      var $152=$cs_addr;
      var $hash218=(($152+6)|0);
      var $153=HEAP16[(($hash218)>>1)];
      var $conv219=(($153 << 16) >> 16);
      var $add220=((($conv219)+($conv217))|0);
      var $conv221=(($add220) & 65535);
      HEAP16[(($hash218)>>1)]=$conv221;
      __label__ = 63; break;
    case 63: 
      var $154=$i;
      var $inc=((($154)+(1))|0);
      $i=$inc;
      __label__ = 61; break;
    case 64: 
      __label__ = 75; break;
    case 65: 
      var $155=$start;
      var $conv223=(($155 << 24) >> 24);
      var $156=$finish;
      var $conv224=(($156 << 24) >> 24);
      var $call225=___collate_range_cmp($conv223, $conv224);
      var $cmp226=(($call225)|0) <= 0;
      if ($cmp226) { var $158 = 1;__label__ = 67; break; } else { __label__ = 66; break; }
    case 66: 
      var $157=$p_addr;
      var $call229=_seterr($157, 11);
      var $tobool230=(($call229)|0)!=0;
      var $158 = $tobool230;__label__ = 67; break;
    case 67: 
      var $158;
      var $lor_ext232=(($158)&1);
      $i=-128;
      __label__ = 68; break;
    case 68: 
      var $159=$i;
      var $cmp234=(($159)|0) <= 127;
      if ($cmp234) { __label__ = 69; break; } else { __label__ = 74; break; }
    case 69: 
      var $160=$start;
      var $conv237=(($160 << 24) >> 24);
      var $161=$i;
      var $call238=___collate_range_cmp($conv237, $161);
      var $cmp239=(($call238)|0) <= 0;
      if ($cmp239) { __label__ = 70; break; } else { __label__ = 72; break; }
    case 70: 
      var $162=$i;
      var $163=$finish;
      var $conv242=(($163 << 24) >> 24);
      var $call243=___collate_range_cmp($162, $conv242);
      var $cmp244=(($call243)|0) <= 0;
      if ($cmp244) { __label__ = 71; break; } else { __label__ = 72; break; }
    case 71: 
      var $164=$cs_addr;
      var $mask247=(($164+4)|0);
      var $165=HEAP8[($mask247)];
      var $conv248=(($165)&255);
      var $166=$i;
      var $conv249=(($166) & 255);
      var $idxprom250=(($conv249)&255);
      var $167=$cs_addr;
      var $ptr251=(($167)|0);
      var $168=HEAP32[(($ptr251)>>2)];
      var $arrayidx252=(($168+$idxprom250)|0);
      var $169=HEAP8[($arrayidx252)];
      var $conv253=(($169)&255);
      var $or254=$conv253 | $conv248;
      var $conv255=(($or254) & 255);
      HEAP8[($arrayidx252)]=$conv255;
      var $170=$i;
      var $conv256=(($170) & 255);
      var $conv257=(($conv256)&255);
      var $171=$cs_addr;
      var $hash258=(($171+6)|0);
      var $172=HEAP16[(($hash258)>>1)];
      var $conv259=(($172 << 16) >> 16);
      var $add260=((($conv259)+($conv257))|0);
      var $conv261=(($add260) & 65535);
      HEAP16[(($hash258)>>1)]=$conv261;
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      var $173=$i;
      var $inc264=((($173)+(1))|0);
      $i=$inc264;
      __label__ = 68; break;
    case 74: 
      __label__ = 75; break;
    case 75: 
      __label__ = 76; break;
    case 76: 
      __label__ = 77; break;
    case 77: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_term["X"]=1;

function _freezeset($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $cs_addr;
      var $h;
      var $i;
      var $top;
      var $cs2;
      var $css;
      $p_addr=$p;
      $cs_addr=$cs;
      var $0=$cs_addr;
      var $hash=(($0+6)|0);
      var $1=HEAP16[(($hash)>>1)];
      $h=$1;
      var $2=$p_addr;
      var $g=(($2+28)|0);
      var $3=HEAP32[(($g)>>2)];
      var $ncsets=(($3+12)|0);
      var $4=HEAP32[(($ncsets)>>2)];
      var $5=$p_addr;
      var $g1=(($5+28)|0);
      var $6=HEAP32[(($g1)>>2)];
      var $sets=(($6+16)|0);
      var $7=HEAP32[(($sets)>>2)];
      var $arrayidx=(($7+($4<<4))|0);
      $top=$arrayidx;
      var $8=$p_addr;
      var $g2=(($8+28)|0);
      var $9=HEAP32[(($g2)>>2)];
      var $csetsize=(($9+8)|0);
      var $10=HEAP32[(($csetsize)>>2)];
      $css=$10;
      var $11=$p_addr;
      var $g3=(($11+28)|0);
      var $12=HEAP32[(($g3)>>2)];
      var $sets4=(($12+16)|0);
      var $13=HEAP32[(($sets4)>>2)];
      var $arrayidx5=(($13)|0);
      $cs2=$arrayidx5;
      __label__ = 3; break;
    case 3: 
      var $14=$cs2;
      var $15=$top;
      var $cmp=(($14)>>>0) < (($15)>>>0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 17; break; }
    case 4: 
      var $16=$cs2;
      var $hash6=(($16+6)|0);
      var $17=HEAP16[(($hash6)>>1)];
      var $conv=(($17 << 16) >> 16);
      var $18=$h;
      var $conv7=(($18 << 16) >> 16);
      var $cmp8=(($conv)|0)==(($conv7)|0);
      if ($cmp8) { __label__ = 5; break; } else { __label__ = 15; break; }
    case 5: 
      var $19=$cs2;
      var $20=$cs_addr;
      var $cmp10=(($19)|0)!=(($20)|0);
      if ($cmp10) { __label__ = 6; break; } else { __label__ = 15; break; }
    case 6: 
      $i=0;
      __label__ = 7; break;
    case 7: 
      var $21=$i;
      var $22=$css;
      var $cmp13=(($21)>>>0) < (($22)>>>0);
      if ($cmp13) { __label__ = 8; break; } else { __label__ = 12; break; }
    case 8: 
      var $23=$i;
      var $conv16=(($23) & 255);
      var $idxprom=(($conv16)&255);
      var $24=$cs2;
      var $ptr=(($24)|0);
      var $25=HEAP32[(($ptr)>>2)];
      var $arrayidx17=(($25+$idxprom)|0);
      var $26=HEAP8[($arrayidx17)];
      var $conv18=(($26)&255);
      var $27=$cs2;
      var $mask=(($27+4)|0);
      var $28=HEAP8[($mask)];
      var $conv19=(($28)&255);
      var $and=$conv18 & $conv19;
      var $tobool=(($and)|0)!=0;
      var $lnot=$tobool ^ 1;
      var $lnot20=$lnot ^ 1;
      var $lnot_ext=(($lnot20)&1);
      var $29=$i;
      var $conv21=(($29) & 255);
      var $idxprom22=(($conv21)&255);
      var $30=$cs_addr;
      var $ptr23=(($30)|0);
      var $31=HEAP32[(($ptr23)>>2)];
      var $arrayidx24=(($31+$idxprom22)|0);
      var $32=HEAP8[($arrayidx24)];
      var $conv25=(($32)&255);
      var $33=$cs_addr;
      var $mask26=(($33+4)|0);
      var $34=HEAP8[($mask26)];
      var $conv27=(($34)&255);
      var $and28=$conv25 & $conv27;
      var $tobool29=(($and28)|0)!=0;
      var $lnot30=$tobool29 ^ 1;
      var $lnot32=$lnot30 ^ 1;
      var $lnot_ext33=(($lnot32)&1);
      var $cmp34=(($lnot_ext)|0)!=(($lnot_ext33)|0);
      if ($cmp34) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      __label__ = 12; break;
    case 10: 
      __label__ = 11; break;
    case 11: 
      var $35=$i;
      var $inc=((($35)+(1))|0);
      $i=$inc;
      __label__ = 7; break;
    case 12: 
      var $36=$i;
      var $37=$css;
      var $cmp37=(($36)|0)==(($37)|0);
      if ($cmp37) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      __label__ = 17; break;
    case 14: 
      __label__ = 15; break;
    case 15: 
      __label__ = 16; break;
    case 16: 
      var $38=$cs2;
      var $incdec_ptr=(($38+16)|0);
      $cs2=$incdec_ptr;
      __label__ = 3; break;
    case 17: 
      var $39=$cs2;
      var $40=$top;
      var $cmp44=(($39)>>>0) < (($40)>>>0);
      if ($cmp44) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $41=$p_addr;
      var $42=$cs_addr;
      _freeset($41, $42);
      var $43=$cs2;
      $cs_addr=$43;
      __label__ = 19; break;
    case 19: 
      var $44=$cs_addr;
      var $45=$p_addr;
      var $g48=(($45+28)|0);
      var $46=HEAP32[(($g48)>>2)];
      var $sets49=(($46+16)|0);
      var $47=HEAP32[(($sets49)>>2)];
      var $sub_ptr_lhs_cast=$44;
      var $sub_ptr_rhs_cast=$47;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $sub_ptr_div=((((($sub_ptr_sub)|0))/(16))&-1);
      ;
      return $sub_ptr_div;
    default: assert(0, "bad label: " + __label__);
  }
}
_freezeset["X"]=1;

function _p_b_cclass($p, $cs) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $cs_addr;
      var $c;
      var $sp;
      var $cp;
      var $len;
      $p_addr=$p;
      $cs_addr=$cs;
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      $sp=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$p_addr;
      var $next1=(($2)|0);
      var $3=HEAP32[(($next1)>>2)];
      var $4=$p_addr;
      var $end=(($4+4)|0);
      var $5=HEAP32[(($end)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 4; break; } else { var $9 = 0;__label__ = 5; break; }
    case 4: 
      var $6=$p_addr;
      var $next2=(($6)|0);
      var $7=HEAP32[(($next2)>>2)];
      var $8=HEAP8[($7)];
      var $conv=(($8)&255);
      var $call=_isalpha($conv);
      var $tobool=(($call)|0)!=0;
      var $9 = $tobool;__label__ = 5; break;
    case 5: 
      var $9;
      if ($9) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $10=$p_addr;
      var $next3=(($10)|0);
      var $11=HEAP32[(($next3)>>2)];
      var $incdec_ptr=(($11+1)|0);
      HEAP32[(($next3)>>2)]=$incdec_ptr;
      __label__ = 3; break;
    case 7: 
      var $12=$p_addr;
      var $next4=(($12)|0);
      var $13=HEAP32[(($next4)>>2)];
      var $14=$sp;
      var $sub_ptr_lhs_cast=$13;
      var $sub_ptr_rhs_cast=$14;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $len=$sub_ptr_sub;
      $cp=((_cclasses)|0);
      __label__ = 8; break;
    case 8: 
      var $15=$cp;
      var $name=(($15)|0);
      var $16=HEAP32[(($name)>>2)];
      var $cmp5=(($16)|0)!=0;
      if ($cmp5) { __label__ = 9; break; } else { __label__ = 14; break; }
    case 9: 
      var $17=$cp;
      var $name7=(($17)|0);
      var $18=HEAP32[(($name7)>>2)];
      var $19=$sp;
      var $20=$len;
      var $call8=_strncmp($18, $19, $20);
      var $cmp9=(($call8)|0)==0;
      if ($cmp9) { __label__ = 10; break; } else { __label__ = 12; break; }
    case 10: 
      var $21=$len;
      var $22=$cp;
      var $name11=(($22)|0);
      var $23=HEAP32[(($name11)>>2)];
      var $arrayidx=(($23+$21)|0);
      var $24=HEAP8[($arrayidx)];
      var $conv12=(($24 << 24) >> 24);
      var $cmp13=(($conv12)|0)==0;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      __label__ = 14; break;
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $25=$cp;
      var $incdec_ptr15=(($25+8)|0);
      $cp=$incdec_ptr15;
      __label__ = 8; break;
    case 14: 
      var $26=$cp;
      var $name16=(($26)|0);
      var $27=HEAP32[(($name16)>>2)];
      var $cmp17=(($27)|0)==0;
      if ($cmp17) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $28=$p_addr;
      var $call20=_seterr($28, 4);
      __label__ = 101; break;
    case 16: 
      var $29=$cp;
      var $fidx=(($29+4)|0);
      var $30=HEAP32[(($fidx)>>2)];
      if ((($30)|0) == 0) {
        __label__ = 17; break;
      }
      else if ((($30)|0) == 1) {
        __label__ = 24; break;
      }
      else if ((($30)|0) == 2) {
        __label__ = 31; break;
      }
      else if ((($30)|0) == 3) {
        __label__ = 38; break;
      }
      else if ((($30)|0) == 4) {
        __label__ = 45; break;
      }
      else if ((($30)|0) == 5) {
        __label__ = 52; break;
      }
      else if ((($30)|0) == 6) {
        __label__ = 59; break;
      }
      else if ((($30)|0) == 7) {
        __label__ = 66; break;
      }
      else if ((($30)|0) == 8) {
        __label__ = 73; break;
      }
      else if ((($30)|0) == 9) {
        __label__ = 80; break;
      }
      else if ((($30)|0) == 10) {
        __label__ = 87; break;
      }
      else if ((($30)|0) == 11) {
        __label__ = 94; break;
      }
      else {
      __label__ = 101; break;
      }
      
    case 17: 
      $c=-128;
      __label__ = 18; break;
    case 18: 
      var $31=$c;
      var $cmp23=(($31)|0) <= 127;
      if ($cmp23) { __label__ = 19; break; } else { __label__ = 23; break; }
    case 19: 
      var $32=$c;
      var $conv26=(($32) & 255);
      var $conv27=(($conv26)&255);
      var $call28=_isalnum($conv27);
      var $tobool29=(($call28)|0)!=0;
      if ($tobool29) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $33=$cs_addr;
      var $mask=(($33+4)|0);
      var $34=HEAP8[($mask)];
      var $conv31=(($34)&255);
      var $35=$c;
      var $conv32=(($35) & 255);
      var $idxprom=(($conv32)&255);
      var $36=$cs_addr;
      var $ptr=(($36)|0);
      var $37=HEAP32[(($ptr)>>2)];
      var $arrayidx33=(($37+$idxprom)|0);
      var $38=HEAP8[($arrayidx33)];
      var $conv34=(($38)&255);
      var $or=$conv34 | $conv31;
      var $conv35=(($or) & 255);
      HEAP8[($arrayidx33)]=$conv35;
      var $39=$c;
      var $conv36=(($39) & 255);
      var $conv37=(($conv36)&255);
      var $40=$cs_addr;
      var $hash=(($40+6)|0);
      var $41=HEAP16[(($hash)>>1)];
      var $conv38=(($41 << 16) >> 16);
      var $add=((($conv38)+($conv37))|0);
      var $conv39=(($add) & 65535);
      HEAP16[(($hash)>>1)]=$conv39;
      __label__ = 21; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $42=$c;
      var $inc=((($42)+(1))|0);
      $c=$inc;
      __label__ = 18; break;
    case 23: 
      __label__ = 101; break;
    case 24: 
      $c=-128;
      __label__ = 25; break;
    case 25: 
      var $43=$c;
      var $cmp45=(($43)|0) <= 127;
      if ($cmp45) { __label__ = 26; break; } else { __label__ = 30; break; }
    case 26: 
      var $44=$c;
      var $conv48=(($44) & 255);
      var $conv49=(($conv48)&255);
      var $call50=_isalpha($conv49);
      var $tobool51=(($call50)|0)!=0;
      if ($tobool51) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $45=$cs_addr;
      var $mask53=(($45+4)|0);
      var $46=HEAP8[($mask53)];
      var $conv54=(($46)&255);
      var $47=$c;
      var $conv55=(($47) & 255);
      var $idxprom56=(($conv55)&255);
      var $48=$cs_addr;
      var $ptr57=(($48)|0);
      var $49=HEAP32[(($ptr57)>>2)];
      var $arrayidx58=(($49+$idxprom56)|0);
      var $50=HEAP8[($arrayidx58)];
      var $conv59=(($50)&255);
      var $or60=$conv59 | $conv54;
      var $conv61=(($or60) & 255);
      HEAP8[($arrayidx58)]=$conv61;
      var $51=$c;
      var $conv62=(($51) & 255);
      var $conv63=(($conv62)&255);
      var $52=$cs_addr;
      var $hash64=(($52+6)|0);
      var $53=HEAP16[(($hash64)>>1)];
      var $conv65=(($53 << 16) >> 16);
      var $add66=((($conv65)+($conv63))|0);
      var $conv67=(($add66) & 65535);
      HEAP16[(($hash64)>>1)]=$conv67;
      __label__ = 28; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $54=$c;
      var $inc70=((($54)+(1))|0);
      $c=$inc70;
      __label__ = 25; break;
    case 30: 
      __label__ = 101; break;
    case 31: 
      $c=-128;
      __label__ = 32; break;
    case 32: 
      var $55=$c;
      var $cmp74=(($55)|0) <= 127;
      if ($cmp74) { __label__ = 33; break; } else { __label__ = 37; break; }
    case 33: 
      var $56=$c;
      var $conv77=(($56) & 255);
      var $conv78=(($conv77)&255);
      var $call79=_isblank($conv78);
      var $tobool80=(($call79)|0)!=0;
      if ($tobool80) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $57=$cs_addr;
      var $mask82=(($57+4)|0);
      var $58=HEAP8[($mask82)];
      var $conv83=(($58)&255);
      var $59=$c;
      var $conv84=(($59) & 255);
      var $idxprom85=(($conv84)&255);
      var $60=$cs_addr;
      var $ptr86=(($60)|0);
      var $61=HEAP32[(($ptr86)>>2)];
      var $arrayidx87=(($61+$idxprom85)|0);
      var $62=HEAP8[($arrayidx87)];
      var $conv88=(($62)&255);
      var $or89=$conv88 | $conv83;
      var $conv90=(($or89) & 255);
      HEAP8[($arrayidx87)]=$conv90;
      var $63=$c;
      var $conv91=(($63) & 255);
      var $conv92=(($conv91)&255);
      var $64=$cs_addr;
      var $hash93=(($64+6)|0);
      var $65=HEAP16[(($hash93)>>1)];
      var $conv94=(($65 << 16) >> 16);
      var $add95=((($conv94)+($conv92))|0);
      var $conv96=(($add95) & 65535);
      HEAP16[(($hash93)>>1)]=$conv96;
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      var $66=$c;
      var $inc99=((($66)+(1))|0);
      $c=$inc99;
      __label__ = 32; break;
    case 37: 
      __label__ = 101; break;
    case 38: 
      $c=-128;
      __label__ = 39; break;
    case 39: 
      var $67=$c;
      var $cmp103=(($67)|0) <= 127;
      if ($cmp103) { __label__ = 40; break; } else { __label__ = 44; break; }
    case 40: 
      var $68=$c;
      var $conv106=(($68) & 255);
      var $conv107=(($conv106)&255);
      var $call108=_iscntrl($conv107);
      var $tobool109=(($call108)|0)!=0;
      if ($tobool109) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $69=$cs_addr;
      var $mask111=(($69+4)|0);
      var $70=HEAP8[($mask111)];
      var $conv112=(($70)&255);
      var $71=$c;
      var $conv113=(($71) & 255);
      var $idxprom114=(($conv113)&255);
      var $72=$cs_addr;
      var $ptr115=(($72)|0);
      var $73=HEAP32[(($ptr115)>>2)];
      var $arrayidx116=(($73+$idxprom114)|0);
      var $74=HEAP8[($arrayidx116)];
      var $conv117=(($74)&255);
      var $or118=$conv117 | $conv112;
      var $conv119=(($or118) & 255);
      HEAP8[($arrayidx116)]=$conv119;
      var $75=$c;
      var $conv120=(($75) & 255);
      var $conv121=(($conv120)&255);
      var $76=$cs_addr;
      var $hash122=(($76+6)|0);
      var $77=HEAP16[(($hash122)>>1)];
      var $conv123=(($77 << 16) >> 16);
      var $add124=((($conv123)+($conv121))|0);
      var $conv125=(($add124) & 65535);
      HEAP16[(($hash122)>>1)]=$conv125;
      __label__ = 42; break;
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $78=$c;
      var $inc128=((($78)+(1))|0);
      $c=$inc128;
      __label__ = 39; break;
    case 44: 
      __label__ = 101; break;
    case 45: 
      $c=-128;
      __label__ = 46; break;
    case 46: 
      var $79=$c;
      var $cmp132=(($79)|0) <= 127;
      if ($cmp132) { __label__ = 47; break; } else { __label__ = 51; break; }
    case 47: 
      var $80=$c;
      var $conv135=(($80) & 255);
      var $conv136=(($conv135)&255);
      var $call137=_isdigit($conv136);
      var $tobool138=(($call137)|0)!=0;
      if ($tobool138) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $81=$cs_addr;
      var $mask140=(($81+4)|0);
      var $82=HEAP8[($mask140)];
      var $conv141=(($82)&255);
      var $83=$c;
      var $conv142=(($83) & 255);
      var $idxprom143=(($conv142)&255);
      var $84=$cs_addr;
      var $ptr144=(($84)|0);
      var $85=HEAP32[(($ptr144)>>2)];
      var $arrayidx145=(($85+$idxprom143)|0);
      var $86=HEAP8[($arrayidx145)];
      var $conv146=(($86)&255);
      var $or147=$conv146 | $conv141;
      var $conv148=(($or147) & 255);
      HEAP8[($arrayidx145)]=$conv148;
      var $87=$c;
      var $conv149=(($87) & 255);
      var $conv150=(($conv149)&255);
      var $88=$cs_addr;
      var $hash151=(($88+6)|0);
      var $89=HEAP16[(($hash151)>>1)];
      var $conv152=(($89 << 16) >> 16);
      var $add153=((($conv152)+($conv150))|0);
      var $conv154=(($add153) & 65535);
      HEAP16[(($hash151)>>1)]=$conv154;
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break;
    case 50: 
      var $90=$c;
      var $inc157=((($90)+(1))|0);
      $c=$inc157;
      __label__ = 46; break;
    case 51: 
      __label__ = 101; break;
    case 52: 
      $c=-128;
      __label__ = 53; break;
    case 53: 
      var $91=$c;
      var $cmp161=(($91)|0) <= 127;
      if ($cmp161) { __label__ = 54; break; } else { __label__ = 58; break; }
    case 54: 
      var $92=$c;
      var $conv164=(($92) & 255);
      var $conv165=(($conv164)&255);
      var $call166=_isgraph($conv165);
      var $tobool167=(($call166)|0)!=0;
      if ($tobool167) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $93=$cs_addr;
      var $mask169=(($93+4)|0);
      var $94=HEAP8[($mask169)];
      var $conv170=(($94)&255);
      var $95=$c;
      var $conv171=(($95) & 255);
      var $idxprom172=(($conv171)&255);
      var $96=$cs_addr;
      var $ptr173=(($96)|0);
      var $97=HEAP32[(($ptr173)>>2)];
      var $arrayidx174=(($97+$idxprom172)|0);
      var $98=HEAP8[($arrayidx174)];
      var $conv175=(($98)&255);
      var $or176=$conv175 | $conv170;
      var $conv177=(($or176) & 255);
      HEAP8[($arrayidx174)]=$conv177;
      var $99=$c;
      var $conv178=(($99) & 255);
      var $conv179=(($conv178)&255);
      var $100=$cs_addr;
      var $hash180=(($100+6)|0);
      var $101=HEAP16[(($hash180)>>1)];
      var $conv181=(($101 << 16) >> 16);
      var $add182=((($conv181)+($conv179))|0);
      var $conv183=(($add182) & 65535);
      HEAP16[(($hash180)>>1)]=$conv183;
      __label__ = 56; break;
    case 56: 
      __label__ = 57; break;
    case 57: 
      var $102=$c;
      var $inc186=((($102)+(1))|0);
      $c=$inc186;
      __label__ = 53; break;
    case 58: 
      __label__ = 101; break;
    case 59: 
      $c=-128;
      __label__ = 60; break;
    case 60: 
      var $103=$c;
      var $cmp190=(($103)|0) <= 127;
      if ($cmp190) { __label__ = 61; break; } else { __label__ = 65; break; }
    case 61: 
      var $104=$c;
      var $conv193=(($104) & 255);
      var $conv194=(($conv193)&255);
      var $call195=_islower($conv194);
      var $tobool196=(($call195)|0)!=0;
      if ($tobool196) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $105=$cs_addr;
      var $mask198=(($105+4)|0);
      var $106=HEAP8[($mask198)];
      var $conv199=(($106)&255);
      var $107=$c;
      var $conv200=(($107) & 255);
      var $idxprom201=(($conv200)&255);
      var $108=$cs_addr;
      var $ptr202=(($108)|0);
      var $109=HEAP32[(($ptr202)>>2)];
      var $arrayidx203=(($109+$idxprom201)|0);
      var $110=HEAP8[($arrayidx203)];
      var $conv204=(($110)&255);
      var $or205=$conv204 | $conv199;
      var $conv206=(($or205) & 255);
      HEAP8[($arrayidx203)]=$conv206;
      var $111=$c;
      var $conv207=(($111) & 255);
      var $conv208=(($conv207)&255);
      var $112=$cs_addr;
      var $hash209=(($112+6)|0);
      var $113=HEAP16[(($hash209)>>1)];
      var $conv210=(($113 << 16) >> 16);
      var $add211=((($conv210)+($conv208))|0);
      var $conv212=(($add211) & 65535);
      HEAP16[(($hash209)>>1)]=$conv212;
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $114=$c;
      var $inc215=((($114)+(1))|0);
      $c=$inc215;
      __label__ = 60; break;
    case 65: 
      __label__ = 101; break;
    case 66: 
      $c=-128;
      __label__ = 67; break;
    case 67: 
      var $115=$c;
      var $cmp219=(($115)|0) <= 127;
      if ($cmp219) { __label__ = 68; break; } else { __label__ = 72; break; }
    case 68: 
      var $116=$c;
      var $conv222=(($116) & 255);
      var $conv223=(($conv222)&255);
      var $call224=_isprint($conv223);
      var $tobool225=(($call224)|0)!=0;
      if ($tobool225) { __label__ = 69; break; } else { __label__ = 70; break; }
    case 69: 
      var $117=$cs_addr;
      var $mask227=(($117+4)|0);
      var $118=HEAP8[($mask227)];
      var $conv228=(($118)&255);
      var $119=$c;
      var $conv229=(($119) & 255);
      var $idxprom230=(($conv229)&255);
      var $120=$cs_addr;
      var $ptr231=(($120)|0);
      var $121=HEAP32[(($ptr231)>>2)];
      var $arrayidx232=(($121+$idxprom230)|0);
      var $122=HEAP8[($arrayidx232)];
      var $conv233=(($122)&255);
      var $or234=$conv233 | $conv228;
      var $conv235=(($or234) & 255);
      HEAP8[($arrayidx232)]=$conv235;
      var $123=$c;
      var $conv236=(($123) & 255);
      var $conv237=(($conv236)&255);
      var $124=$cs_addr;
      var $hash238=(($124+6)|0);
      var $125=HEAP16[(($hash238)>>1)];
      var $conv239=(($125 << 16) >> 16);
      var $add240=((($conv239)+($conv237))|0);
      var $conv241=(($add240) & 65535);
      HEAP16[(($hash238)>>1)]=$conv241;
      __label__ = 70; break;
    case 70: 
      __label__ = 71; break;
    case 71: 
      var $126=$c;
      var $inc244=((($126)+(1))|0);
      $c=$inc244;
      __label__ = 67; break;
    case 72: 
      __label__ = 101; break;
    case 73: 
      $c=-128;
      __label__ = 74; break;
    case 74: 
      var $127=$c;
      var $cmp248=(($127)|0) <= 127;
      if ($cmp248) { __label__ = 75; break; } else { __label__ = 79; break; }
    case 75: 
      var $128=$c;
      var $conv251=(($128) & 255);
      var $conv252=(($conv251)&255);
      var $call253=_ispunct($conv252);
      var $tobool254=(($call253)|0)!=0;
      if ($tobool254) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      var $129=$cs_addr;
      var $mask256=(($129+4)|0);
      var $130=HEAP8[($mask256)];
      var $conv257=(($130)&255);
      var $131=$c;
      var $conv258=(($131) & 255);
      var $idxprom259=(($conv258)&255);
      var $132=$cs_addr;
      var $ptr260=(($132)|0);
      var $133=HEAP32[(($ptr260)>>2)];
      var $arrayidx261=(($133+$idxprom259)|0);
      var $134=HEAP8[($arrayidx261)];
      var $conv262=(($134)&255);
      var $or263=$conv262 | $conv257;
      var $conv264=(($or263) & 255);
      HEAP8[($arrayidx261)]=$conv264;
      var $135=$c;
      var $conv265=(($135) & 255);
      var $conv266=(($conv265)&255);
      var $136=$cs_addr;
      var $hash267=(($136+6)|0);
      var $137=HEAP16[(($hash267)>>1)];
      var $conv268=(($137 << 16) >> 16);
      var $add269=((($conv268)+($conv266))|0);
      var $conv270=(($add269) & 65535);
      HEAP16[(($hash267)>>1)]=$conv270;
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break;
    case 78: 
      var $138=$c;
      var $inc273=((($138)+(1))|0);
      $c=$inc273;
      __label__ = 74; break;
    case 79: 
      __label__ = 101; break;
    case 80: 
      $c=-128;
      __label__ = 81; break;
    case 81: 
      var $139=$c;
      var $cmp277=(($139)|0) <= 127;
      if ($cmp277) { __label__ = 82; break; } else { __label__ = 86; break; }
    case 82: 
      var $140=$c;
      var $conv280=(($140) & 255);
      var $conv281=(($conv280)&255);
      var $call282=_isspace($conv281);
      var $tobool283=(($call282)|0)!=0;
      if ($tobool283) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $141=$cs_addr;
      var $mask285=(($141+4)|0);
      var $142=HEAP8[($mask285)];
      var $conv286=(($142)&255);
      var $143=$c;
      var $conv287=(($143) & 255);
      var $idxprom288=(($conv287)&255);
      var $144=$cs_addr;
      var $ptr289=(($144)|0);
      var $145=HEAP32[(($ptr289)>>2)];
      var $arrayidx290=(($145+$idxprom288)|0);
      var $146=HEAP8[($arrayidx290)];
      var $conv291=(($146)&255);
      var $or292=$conv291 | $conv286;
      var $conv293=(($or292) & 255);
      HEAP8[($arrayidx290)]=$conv293;
      var $147=$c;
      var $conv294=(($147) & 255);
      var $conv295=(($conv294)&255);
      var $148=$cs_addr;
      var $hash296=(($148+6)|0);
      var $149=HEAP16[(($hash296)>>1)];
      var $conv297=(($149 << 16) >> 16);
      var $add298=((($conv297)+($conv295))|0);
      var $conv299=(($add298) & 65535);
      HEAP16[(($hash296)>>1)]=$conv299;
      __label__ = 84; break;
    case 84: 
      __label__ = 85; break;
    case 85: 
      var $150=$c;
      var $inc302=((($150)+(1))|0);
      $c=$inc302;
      __label__ = 81; break;
    case 86: 
      __label__ = 101; break;
    case 87: 
      $c=-128;
      __label__ = 88; break;
    case 88: 
      var $151=$c;
      var $cmp306=(($151)|0) <= 127;
      if ($cmp306) { __label__ = 89; break; } else { __label__ = 93; break; }
    case 89: 
      var $152=$c;
      var $conv309=(($152) & 255);
      var $conv310=(($conv309)&255);
      var $call311=_isupper($conv310);
      var $tobool312=(($call311)|0)!=0;
      if ($tobool312) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $153=$cs_addr;
      var $mask314=(($153+4)|0);
      var $154=HEAP8[($mask314)];
      var $conv315=(($154)&255);
      var $155=$c;
      var $conv316=(($155) & 255);
      var $idxprom317=(($conv316)&255);
      var $156=$cs_addr;
      var $ptr318=(($156)|0);
      var $157=HEAP32[(($ptr318)>>2)];
      var $arrayidx319=(($157+$idxprom317)|0);
      var $158=HEAP8[($arrayidx319)];
      var $conv320=(($158)&255);
      var $or321=$conv320 | $conv315;
      var $conv322=(($or321) & 255);
      HEAP8[($arrayidx319)]=$conv322;
      var $159=$c;
      var $conv323=(($159) & 255);
      var $conv324=(($conv323)&255);
      var $160=$cs_addr;
      var $hash325=(($160+6)|0);
      var $161=HEAP16[(($hash325)>>1)];
      var $conv326=(($161 << 16) >> 16);
      var $add327=((($conv326)+($conv324))|0);
      var $conv328=(($add327) & 65535);
      HEAP16[(($hash325)>>1)]=$conv328;
      __label__ = 91; break;
    case 91: 
      __label__ = 92; break;
    case 92: 
      var $162=$c;
      var $inc331=((($162)+(1))|0);
      $c=$inc331;
      __label__ = 88; break;
    case 93: 
      __label__ = 101; break;
    case 94: 
      $c=-128;
      __label__ = 95; break;
    case 95: 
      var $163=$c;
      var $cmp335=(($163)|0) <= 127;
      if ($cmp335) { __label__ = 96; break; } else { __label__ = 100; break; }
    case 96: 
      var $164=$c;
      var $conv338=(($164) & 255);
      var $conv339=(($conv338)&255);
      var $call340=_isxdigit($conv339);
      var $tobool341=(($call340)|0)!=0;
      if ($tobool341) { __label__ = 97; break; } else { __label__ = 98; break; }
    case 97: 
      var $165=$cs_addr;
      var $mask343=(($165+4)|0);
      var $166=HEAP8[($mask343)];
      var $conv344=(($166)&255);
      var $167=$c;
      var $conv345=(($167) & 255);
      var $idxprom346=(($conv345)&255);
      var $168=$cs_addr;
      var $ptr347=(($168)|0);
      var $169=HEAP32[(($ptr347)>>2)];
      var $arrayidx348=(($169+$idxprom346)|0);
      var $170=HEAP8[($arrayidx348)];
      var $conv349=(($170)&255);
      var $or350=$conv349 | $conv344;
      var $conv351=(($or350) & 255);
      HEAP8[($arrayidx348)]=$conv351;
      var $171=$c;
      var $conv352=(($171) & 255);
      var $conv353=(($conv352)&255);
      var $172=$cs_addr;
      var $hash354=(($172+6)|0);
      var $173=HEAP16[(($hash354)>>1)];
      var $conv355=(($173 << 16) >> 16);
      var $add356=((($conv355)+($conv353))|0);
      var $conv357=(($add356) & 65535);
      HEAP16[(($hash354)>>1)]=$conv357;
      __label__ = 98; break;
    case 98: 
      __label__ = 99; break;
    case 99: 
      var $174=$c;
      var $inc360=((($174)+(1))|0);
      $c=$inc360;
      __label__ = 95; break;
    case 100: 
      __label__ = 101; break;
    case 101: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_cclass["X"]=1;

function _p_b_eclass($p, $cs) {
  ;
  var __label__;

  var $p_addr;
  var $cs_addr;
  var $c;
  $p_addr=$p;
  $cs_addr=$cs;
  var $0=$p_addr;
  var $call=_p_b_coll_elem($0, 61);
  $c=$call;
  var $1=$cs_addr;
  var $mask=(($1+4)|0);
  var $2=HEAP8[($mask)];
  var $conv=(($2)&255);
  var $3=$c;
  var $idxprom=(($3)&255);
  var $4=$cs_addr;
  var $ptr=(($4)|0);
  var $5=HEAP32[(($ptr)>>2)];
  var $arrayidx=(($5+$idxprom)|0);
  var $6=HEAP8[($arrayidx)];
  var $conv1=(($6)&255);
  var $or=$conv1 | $conv;
  var $conv2=(($or) & 255);
  HEAP8[($arrayidx)]=$conv2;
  var $7=$c;
  var $conv3=(($7)&255);
  var $8=$cs_addr;
  var $hash=(($8+6)|0);
  var $9=HEAP16[(($hash)>>1)];
  var $conv4=(($9 << 16) >> 16);
  var $add=((($conv4)+($conv3))|0);
  var $conv5=(($add) & 65535);
  HEAP16[(($hash)>>1)]=$conv5;
  ;
  return;
}


function _p_b_symbol($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $value;
      $p_addr=$p;
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      var $2=$p_addr;
      var $end=(($2+4)|0);
      var $3=HEAP32[(($end)>>2)];
      var $cmp=(($1)>>>0) < (($3)>>>0);
      if ($cmp) { var $5 = 1;__label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$p_addr;
      var $call=_seterr($4, 7);
      var $tobool=(($call)|0)!=0;
      var $5 = $tobool;__label__ = 4; break;
    case 4: 
      var $5;
      var $lor_ext=(($5)&1);
      var $6=$p_addr;
      var $next1=(($6)|0);
      var $7=HEAP32[(($next1)>>2)];
      var $8=$p_addr;
      var $end2=(($8+4)|0);
      var $9=HEAP32[(($end2)>>2)];
      var $cmp3=(($7)>>>0) < (($9)>>>0);
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 9; break; }
    case 5: 
      var $10=$p_addr;
      var $next4=(($10)|0);
      var $11=HEAP32[(($next4)>>2)];
      var $add_ptr=(($11+1)|0);
      var $12=$p_addr;
      var $end5=(($12+4)|0);
      var $13=HEAP32[(($end5)>>2)];
      var $cmp6=(($add_ptr)>>>0) < (($13)>>>0);
      if ($cmp6) { __label__ = 6; break; } else { __label__ = 9; break; }
    case 6: 
      var $14=$p_addr;
      var $next8=(($14)|0);
      var $15=HEAP32[(($next8)>>2)];
      var $16=HEAP8[($15)];
      var $conv=(($16 << 24) >> 24);
      var $cmp9=(($conv)|0)==91;
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 9; break; }
    case 7: 
      var $17=$p_addr;
      var $next12=(($17)|0);
      var $18=HEAP32[(($next12)>>2)];
      var $add_ptr13=(($18+1)|0);
      var $19=HEAP8[($add_ptr13)];
      var $conv14=(($19 << 24) >> 24);
      var $cmp15=(($conv14)|0)==46;
      if ($cmp15) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $20=$p_addr;
      var $next17=(($20)|0);
      var $21=HEAP32[(($next17)>>2)];
      var $add_ptr18=(($21+2)|0);
      HEAP32[(($next17)>>2)]=$add_ptr18;
      if (1) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 9: 
      if (0) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $22=$p_addr;
      var $next19=(($22)|0);
      var $23=HEAP32[(($next19)>>2)];
      var $incdec_ptr=(($23+1)|0);
      HEAP32[(($next19)>>2)]=$incdec_ptr;
      var $24=HEAP8[($23)];
      $retval=$24;
      __label__ = 19; break;
    case 11: 
      var $25=$p_addr;
      var $call20=_p_b_coll_elem($25, 46);
      $value=$call20;
      var $26=$p_addr;
      var $next21=(($26)|0);
      var $27=HEAP32[(($next21)>>2)];
      var $28=$p_addr;
      var $end22=(($28+4)|0);
      var $29=HEAP32[(($end22)>>2)];
      var $cmp23=(($27)>>>0) < (($29)>>>0);
      if ($cmp23) { __label__ = 12; break; } else { __label__ = 16; break; }
    case 12: 
      var $30=$p_addr;
      var $next26=(($30)|0);
      var $31=HEAP32[(($next26)>>2)];
      var $add_ptr27=(($31+1)|0);
      var $32=$p_addr;
      var $end28=(($32+4)|0);
      var $33=HEAP32[(($end28)>>2)];
      var $cmp29=(($add_ptr27)>>>0) < (($33)>>>0);
      if ($cmp29) { __label__ = 13; break; } else { __label__ = 16; break; }
    case 13: 
      var $34=$p_addr;
      var $next32=(($34)|0);
      var $35=HEAP32[(($next32)>>2)];
      var $36=HEAP8[($35)];
      var $conv33=(($36 << 24) >> 24);
      var $cmp34=(($conv33)|0)==46;
      if ($cmp34) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $37=$p_addr;
      var $next37=(($37)|0);
      var $38=HEAP32[(($next37)>>2)];
      var $add_ptr38=(($38+1)|0);
      var $39=HEAP8[($add_ptr38)];
      var $conv39=(($39 << 24) >> 24);
      var $cmp40=(($conv39)|0)==93;
      if ($cmp40) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $40=$p_addr;
      var $next43=(($40)|0);
      var $41=HEAP32[(($next43)>>2)];
      var $add_ptr44=(($41+2)|0);
      HEAP32[(($next43)>>2)]=$add_ptr44;
      if (1) { var $43 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 16: 
      if (0) { var $43 = 1;__label__ = 18; break; } else { __label__ = 17; break; }
    case 17: 
      var $42=$p_addr;
      var $call47=_seterr($42, 3);
      var $tobool48=(($call47)|0)!=0;
      var $43 = $tobool48;__label__ = 18; break;
    case 18: 
      var $43;
      var $lor_ext50=(($43)&1);
      var $44=$value;
      $retval=$44;
      __label__ = 19; break;
    case 19: 
      var $45=$retval;
      ;
      return $45;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_symbol["X"]=1;

function _p_b_coll_elem($p, $endc) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $p_addr;
      var $endc_addr;
      var $sp;
      var $cp;
      var $len;
      $p_addr=$p;
      $endc_addr=$endc;
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      $sp=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$p_addr;
      var $next1=(($2)|0);
      var $3=HEAP32[(($next1)>>2)];
      var $4=$p_addr;
      var $end=(($4+4)|0);
      var $5=HEAP32[(($end)>>2)];
      var $cmp=(($3)>>>0) < (($5)>>>0);
      if ($cmp) { __label__ = 4; break; } else { var $22 = 0;__label__ = 9; break; }
    case 4: 
      var $6=$p_addr;
      var $next2=(($6)|0);
      var $7=HEAP32[(($next2)>>2)];
      var $8=$p_addr;
      var $end3=(($8+4)|0);
      var $9=HEAP32[(($end3)>>2)];
      var $cmp4=(($7)>>>0) < (($9)>>>0);
      if ($cmp4) { __label__ = 5; break; } else { var $21 = 0;__label__ = 8; break; }
    case 5: 
      var $10=$p_addr;
      var $next5=(($10)|0);
      var $11=HEAP32[(($next5)>>2)];
      var $add_ptr=(($11+1)|0);
      var $12=$p_addr;
      var $end6=(($12+4)|0);
      var $13=HEAP32[(($end6)>>2)];
      var $cmp7=(($add_ptr)>>>0) < (($13)>>>0);
      if ($cmp7) { __label__ = 6; break; } else { var $21 = 0;__label__ = 8; break; }
    case 6: 
      var $14=$p_addr;
      var $next9=(($14)|0);
      var $15=HEAP32[(($next9)>>2)];
      var $16=HEAP8[($15)];
      var $conv=(($16 << 24) >> 24);
      var $17=$endc_addr;
      var $cmp10=(($conv)|0)==(($17)|0);
      if ($cmp10) { __label__ = 7; break; } else { var $21 = 0;__label__ = 8; break; }
    case 7: 
      var $18=$p_addr;
      var $next13=(($18)|0);
      var $19=HEAP32[(($next13)>>2)];
      var $add_ptr14=(($19+1)|0);
      var $20=HEAP8[($add_ptr14)];
      var $conv15=(($20 << 24) >> 24);
      var $cmp16=(($conv15)|0)==93;
      var $21 = $cmp16;__label__ = 8; break;
    case 8: 
      var $21;
      var $lnot=$21 ^ 1;
      var $22 = $lnot;__label__ = 9; break;
    case 9: 
      var $22;
      if ($22) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $23=$p_addr;
      var $next19=(($23)|0);
      var $24=HEAP32[(($next19)>>2)];
      var $incdec_ptr=(($24+1)|0);
      HEAP32[(($next19)>>2)]=$incdec_ptr;
      __label__ = 3; break;
    case 11: 
      var $25=$p_addr;
      var $next20=(($25)|0);
      var $26=HEAP32[(($next20)>>2)];
      var $27=$p_addr;
      var $end21=(($27+4)|0);
      var $28=HEAP32[(($end21)>>2)];
      var $cmp22=(($26)>>>0) < (($28)>>>0);
      if ($cmp22) { __label__ = 13; break; } else { __label__ = 12; break; }
    case 12: 
      var $29=$p_addr;
      var $call=_seterr($29, 7);
      $retval=0;
      __label__ = 23; break;
    case 13: 
      var $30=$p_addr;
      var $next24=(($30)|0);
      var $31=HEAP32[(($next24)>>2)];
      var $32=$sp;
      var $sub_ptr_lhs_cast=$31;
      var $sub_ptr_rhs_cast=$32;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      $len=$sub_ptr_sub;
      $cp=((_cnames)|0);
      __label__ = 14; break;
    case 14: 
      var $33=$cp;
      var $name=(($33)|0);
      var $34=HEAP32[(($name)>>2)];
      var $cmp25=(($34)|0)!=0;
      if ($cmp25) { __label__ = 15; break; } else { __label__ = 20; break; }
    case 15: 
      var $35=$cp;
      var $name27=(($35)|0);
      var $36=HEAP32[(($name27)>>2)];
      var $37=$sp;
      var $38=$len;
      var $call28=_strncmp($36, $37, $38);
      var $cmp29=(($call28)|0)==0;
      if ($cmp29) { __label__ = 16; break; } else { __label__ = 18; break; }
    case 16: 
      var $39=$len;
      var $40=$cp;
      var $name32=(($40)|0);
      var $41=HEAP32[(($name32)>>2)];
      var $arrayidx=(($41+$39)|0);
      var $42=HEAP8[($arrayidx)];
      var $conv33=(($42 << 24) >> 24);
      var $cmp34=(($conv33)|0)==0;
      if ($cmp34) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $43=$cp;
      var $code=(($43+4)|0);
      var $44=HEAP8[($code)];
      $retval=$44;
      __label__ = 23; break;
    case 18: 
      __label__ = 19; break;
    case 19: 
      var $45=$cp;
      var $incdec_ptr38=(($45+8)|0);
      $cp=$incdec_ptr38;
      __label__ = 14; break;
    case 20: 
      var $46=$len;
      var $cmp39=(($46)|0)==1;
      if ($cmp39) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $47=$sp;
      var $48=HEAP8[($47)];
      $retval=$48;
      __label__ = 23; break;
    case 22: 
      var $49=$p_addr;
      var $call43=_seterr($49, 3);
      $retval=0;
      __label__ = 23; break;
    case 23: 
      var $50=$retval;
      ;
      return $50;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_b_coll_elem["X"]=1;

function _p_ere_exp($p) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $p_addr;
      var $c;
      var $pos;
      var $count;
      var $count2;
      var $subno;
      var $wascaret;
      $p_addr=$p;
      $wascaret=0;
      var $0=$p_addr;
      var $next=(($0)|0);
      var $1=HEAP32[(($next)>>2)];
      var $incdec_ptr=(($1+1)|0);
      HEAP32[(($next)>>2)]=$incdec_ptr;
      var $2=HEAP8[($1)];
      $c=$2;
      var $3=$p_addr;
      var $slen=(($3+20)|0);
      var $4=HEAP32[(($slen)>>2)];
      $pos=$4;
      var $5=$c;
      var $conv=(($5 << 24) >> 24);
      if ((($conv)|0) == 40) {
        __label__ = 3; break;
      }
      else if ((($conv)|0) == 41) {
        __label__ = 16; break;
      }
      else if ((($conv)|0) == 94) {
        __label__ = 17; break;
      }
      else if ((($conv)|0) == 36) {
        __label__ = 18; break;
      }
      else if ((($conv)|0) == 124) {
        __label__ = 19; break;
      }
      else if ((($conv)|0) == 42 || (($conv)|0) == 43 || (($conv)|0) == 63) {
        __label__ = 20; break;
      }
      else if ((($conv)|0) == 46) {
        __label__ = 21; break;
      }
      else if ((($conv)|0) == 91) {
        __label__ = 25; break;
      }
      else if ((($conv)|0) == 92) {
        __label__ = 26; break;
      }
      else if ((($conv)|0) == 123) {
        __label__ = 29; break;
      }
      else {
      __label__ = 33; break;
      }
      
    case 3: 
      var $6=$p_addr;
      var $next1=(($6)|0);
      var $7=HEAP32[(($next1)>>2)];
      var $8=$p_addr;
      var $end=(($8+4)|0);
      var $9=HEAP32[(($end)>>2)];
      var $cmp=(($7)>>>0) < (($9)>>>0);
      if ($cmp) { var $11 = 1;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $10=$p_addr;
      var $call=_seterr($10, 8);
      var $tobool=(($call)|0)!=0;
      var $11 = $tobool;__label__ = 5; break;
    case 5: 
      var $11;
      var $lor_ext=(($11)&1);
      var $12=$p_addr;
      var $g=(($12+28)|0);
      var $13=HEAP32[(($g)>>2)];
      var $nsub=(($13+80)|0);
      var $14=HEAP32[(($nsub)>>2)];
      var $inc=((($14)+(1))|0);
      HEAP32[(($nsub)>>2)]=$inc;
      var $15=$p_addr;
      var $g3=(($15+28)|0);
      var $16=HEAP32[(($g3)>>2)];
      var $nsub4=(($16+80)|0);
      var $17=HEAP32[(($nsub4)>>2)];
      $subno=$17;
      var $18=$subno;
      var $cmp5=(($18)|0) < 10;
      if ($cmp5) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      var $19=$p_addr;
      var $slen7=(($19+20)|0);
      var $20=HEAP32[(($slen7)>>2)];
      var $21=$subno;
      var $22=$p_addr;
      var $pbegin=(($22+32)|0);
      var $arrayidx=(($pbegin+($21<<2))|0);
      HEAP32[(($arrayidx)>>2)]=$20;
      __label__ = 7; break;
    case 7: 
      var $23=$p_addr;
      var $24=$subno;
      _doemit($23, 1744830464, $24);
      var $25=$p_addr;
      var $next8=(($25)|0);
      var $26=HEAP32[(($next8)>>2)];
      var $27=$p_addr;
      var $end9=(($27+4)|0);
      var $28=HEAP32[(($end9)>>2)];
      var $cmp10=(($26)>>>0) < (($28)>>>0);
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $29=$p_addr;
      var $next12=(($29)|0);
      var $30=HEAP32[(($next12)>>2)];
      var $31=HEAP8[($30)];
      var $conv13=(($31 << 24) >> 24);
      var $cmp14=(($conv13)|0)==41;
      if ($cmp14) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $32=$p_addr;
      _p_ere($32, 41);
      __label__ = 10; break;
    case 10: 
      var $33=$subno;
      var $cmp18=(($33)|0) < 10;
      if ($cmp18) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $34=$p_addr;
      var $slen21=(($34+20)|0);
      var $35=HEAP32[(($slen21)>>2)];
      var $36=$subno;
      var $37=$p_addr;
      var $pend=(($37+72)|0);
      var $arrayidx22=(($pend+($36<<2))|0);
      HEAP32[(($arrayidx22)>>2)]=$35;
      __label__ = 12; break;
    case 12: 
      var $38=$p_addr;
      var $39=$subno;
      _doemit($38, 1879048192, $39);
      var $40=$p_addr;
      var $next24=(($40)|0);
      var $41=HEAP32[(($next24)>>2)];
      var $42=$p_addr;
      var $end25=(($42+4)|0);
      var $43=HEAP32[(($end25)>>2)];
      var $cmp26=(($41)>>>0) < (($43)>>>0);
      if ($cmp26) { __label__ = 13; break; } else { __label__ = 14; break; }
    case 13: 
      var $44=$p_addr;
      var $next29=(($44)|0);
      var $45=HEAP32[(($next29)>>2)];
      var $incdec_ptr30=(($45+1)|0);
      HEAP32[(($next29)>>2)]=$incdec_ptr30;
      var $46=HEAP8[($45)];
      var $conv31=(($46 << 24) >> 24);
      var $cmp32=(($conv31)|0)==41;
      if ($cmp32) { var $48 = 1;__label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $47=$p_addr;
      var $call35=_seterr($47, 8);
      var $tobool36=(($call35)|0)!=0;
      var $48 = $tobool36;__label__ = 15; break;
    case 15: 
      var $48;
      var $lor_ext38=(($48)&1);
      __label__ = 34; break;
    case 16: 
      var $49=$p_addr;
      var $call40=_seterr($49, 8);
      __label__ = 34; break;
    case 17: 
      var $50=$p_addr;
      _doemit($50, 402653184, 0);
      var $51=$p_addr;
      var $g42=(($51+28)|0);
      var $52=HEAP32[(($g42)>>2)];
      var $iflags=(($52+40)|0);
      var $53=HEAP32[(($iflags)>>2)];
      var $or=$53 | 1;
      HEAP32[(($iflags)>>2)]=$or;
      var $54=$p_addr;
      var $g43=(($54+28)|0);
      var $55=HEAP32[(($g43)>>2)];
      var $nbol=(($55+44)|0);
      var $56=HEAP32[(($nbol)>>2)];
      var $inc44=((($56)+(1))|0);
      HEAP32[(($nbol)>>2)]=$inc44;
      $wascaret=1;
      __label__ = 34; break;
    case 18: 
      var $57=$p_addr;
      _doemit($57, 536870912, 0);
      var $58=$p_addr;
      var $g46=(($58+28)|0);
      var $59=HEAP32[(($g46)>>2)];
      var $iflags47=(($59+40)|0);
      var $60=HEAP32[(($iflags47)>>2)];
      var $or48=$60 | 2;
      HEAP32[(($iflags47)>>2)]=$or48;
      var $61=$p_addr;
      var $g49=(($61+28)|0);
      var $62=HEAP32[(($g49)>>2)];
      var $neol=(($62+48)|0);
      var $63=HEAP32[(($neol)>>2)];
      var $inc50=((($63)+(1))|0);
      HEAP32[(($neol)>>2)]=$inc50;
      __label__ = 34; break;
    case 19: 
      var $64=$p_addr;
      var $call52=_seterr($64, 14);
      __label__ = 34; break;
    case 20: 
      var $65=$p_addr;
      var $call54=_seterr($65, 13);
      __label__ = 34; break;
    case 21: 
      var $66=$p_addr;
      var $g56=(($66+28)|0);
      var $67=HEAP32[(($g56)>>2)];
      var $cflags=(($67+24)|0);
      var $68=HEAP32[(($cflags)>>2)];
      var $and=$68 & 8;
      var $tobool57=(($and)|0)!=0;
      if ($tobool57) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $69=$p_addr;
      _nonnewline($69);
      __label__ = 24; break;
    case 23: 
      var $70=$p_addr;
      _doemit($70, 671088640, 0);
      __label__ = 24; break;
    case 24: 
      __label__ = 34; break;
    case 25: 
      var $71=$p_addr;
      _p_bracket($71);
      __label__ = 34; break;
    case 26: 
      var $72=$p_addr;
      var $next62=(($72)|0);
      var $73=HEAP32[(($next62)>>2)];
      var $74=$p_addr;
      var $end63=(($74+4)|0);
      var $75=HEAP32[(($end63)>>2)];
      var $cmp64=(($73)>>>0) < (($75)>>>0);
      if ($cmp64) { var $77 = 1;__label__ = 28; break; } else { __label__ = 27; break; }
    case 27: 
      var $76=$p_addr;
      var $call67=_seterr($76, 5);
      var $tobool68=(($call67)|0)!=0;
      var $77 = $tobool68;__label__ = 28; break;
    case 28: 
      var $77;
      var $lor_ext70=(($77)&1);
      var $78=$p_addr;
      var $next71=(($78)|0);
      var $79=HEAP32[(($next71)>>2)];
      var $incdec_ptr72=(($79+1)|0);
      HEAP32[(($next71)>>2)]=$incdec_ptr72;
      var $80=HEAP8[($79)];
      $c=$80;
      var $81=$p_addr;
      var $82=$c;
      var $conv73=(($82 << 24) >> 24);
      _ordinary($81, $conv73);
      __label__ = 34; break;
    case 29: 
      var $83=$p_addr;
      var $next75=(($83)|0);
      var $84=HEAP32[(($next75)>>2)];
      var $85=$p_addr;
      var $end76=(($85+4)|0);
      var $86=HEAP32[(($end76)>>2)];
      var $cmp77=(($84)>>>0) < (($86)>>>0);
      if ($cmp77) { __label__ = 30; break; } else { var $91 = 1;__label__ = 32; break; }
    case 30: 
      var $87=$p_addr;
      var $next79=(($87)|0);
      var $88=HEAP32[(($next79)>>2)];
      var $89=HEAP8[($88)];
      var $conv80=(($89)&255);
      var $call81=_isdigit($conv80);
      var $tobool82=(($call81)|0)!=0;
      if ($tobool82) { __label__ = 31; break; } else { var $91 = 1;__label__ = 32; break; }
    case 31: 
      var $90=$p_addr;
      var $call84=_seterr($90, 13);
      var $tobool85=(($call84)|0)!=0;
      var $91 = $tobool85;__label__ = 32; break;
    case 32: 
      var $91;
      var $lor_ext87=(($91)&1);
      __label__ = 33; break;
    case 33: 
      var $92=$p_addr;
      var $93=$c;
      var $conv88=(($93 << 24) >> 24);
      _ordinary($92, $conv88);
      __label__ = 34; break;
    case 34: 
      var $94=$p_addr;
      var $next89=(($94)|0);
      var $95=HEAP32[(($next89)>>2)];
      var $96=$p_addr;
      var $end90=(($96+4)|0);
      var $97=HEAP32[(($end90)>>2)];
      var $cmp91=(($95)>>>0) < (($97)>>>0);
      if ($cmp91) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      __label__ = 83; break;
    case 36: 
      var $98=$p_addr;
      var $next95=(($98)|0);
      var $99=HEAP32[(($next95)>>2)];
      var $100=HEAP8[($99)];
      $c=$100;
      var $101=$c;
      var $conv96=(($101 << 24) >> 24);
      var $cmp97=(($conv96)|0)==42;
      if ($cmp97) { __label__ = 43; break; } else { __label__ = 37; break; }
    case 37: 
      var $102=$c;
      var $conv100=(($102 << 24) >> 24);
      var $cmp101=(($conv100)|0)==43;
      if ($cmp101) { __label__ = 43; break; } else { __label__ = 38; break; }
    case 38: 
      var $103=$c;
      var $conv104=(($103 << 24) >> 24);
      var $cmp105=(($conv104)|0)==63;
      if ($cmp105) { __label__ = 43; break; } else { __label__ = 39; break; }
    case 39: 
      var $104=$c;
      var $conv108=(($104 << 24) >> 24);
      var $cmp109=(($conv108)|0)==123;
      if ($cmp109) { __label__ = 40; break; } else { __label__ = 42; break; }
    case 40: 
      var $105=$p_addr;
      var $next112=(($105)|0);
      var $106=HEAP32[(($next112)>>2)];
      var $add_ptr=(($106+1)|0);
      var $107=$p_addr;
      var $end113=(($107+4)|0);
      var $108=HEAP32[(($end113)>>2)];
      var $cmp114=(($add_ptr)>>>0) < (($108)>>>0);
      if ($cmp114) { __label__ = 41; break; } else { __label__ = 42; break; }
    case 41: 
      var $109=$p_addr;
      var $next117=(($109)|0);
      var $110=HEAP32[(($next117)>>2)];
      var $add_ptr118=(($110+1)|0);
      var $111=HEAP8[($add_ptr118)];
      var $conv119=(($111)&255);
      var $call120=_isdigit($conv119);
      var $tobool121=(($call120)|0)!=0;
      if ($tobool121) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      __label__ = 83; break;
    case 43: 
      var $112=$p_addr;
      var $next124=(($112)|0);
      var $113=HEAP32[(($next124)>>2)];
      var $incdec_ptr125=(($113+1)|0);
      HEAP32[(($next124)>>2)]=$incdec_ptr125;
      var $114=$wascaret;
      var $tobool126=(($114)|0)!=0;
      if ($tobool126) { __label__ = 44; break; } else { var $116 = 1;__label__ = 45; break; }
    case 44: 
      var $115=$p_addr;
      var $call128=_seterr($115, 13);
      var $tobool129=(($call128)|0)!=0;
      var $116 = $tobool129;__label__ = 45; break;
    case 45: 
      var $116;
      var $lor_ext131=(($116)&1);
      var $117=$c;
      var $conv132=(($117 << 24) >> 24);
      if ((($conv132)|0) == 42) {
        __label__ = 46; break;
      }
      else if ((($conv132)|0) == 43) {
        __label__ = 47; break;
      }
      else if ((($conv132)|0) == 63) {
        __label__ = 48; break;
      }
      else if ((($conv132)|0) == 123) {
        __label__ = 49; break;
      }
      else {
      __label__ = 73; break;
      }
      
    case 46: 
      var $118=$p_addr;
      var $119=$p_addr;
      var $slen134=(($119+20)|0);
      var $120=HEAP32[(($slen134)>>2)];
      var $121=$pos;
      var $sub=((($120)-($121))|0);
      var $add=((($sub)+(1))|0);
      var $122=$pos;
      _doinsert($118, 1207959552, $add, $122);
      var $123=$p_addr;
      var $124=$p_addr;
      var $slen135=(($124+20)|0);
      var $125=HEAP32[(($slen135)>>2)];
      var $126=$pos;
      var $sub136=((($125)-($126))|0);
      _doemit($123, 1342177280, $sub136);
      var $127=$p_addr;
      var $128=$p_addr;
      var $slen137=(($128+20)|0);
      var $129=HEAP32[(($slen137)>>2)];
      var $130=$pos;
      var $sub138=((($129)-($130))|0);
      var $add139=((($sub138)+(1))|0);
      var $131=$pos;
      _doinsert($127, 1476395008, $add139, $131);
      var $132=$p_addr;
      var $133=$p_addr;
      var $slen140=(($133+20)|0);
      var $134=HEAP32[(($slen140)>>2)];
      var $135=$pos;
      var $sub141=((($134)-($135))|0);
      _doemit($132, 1610612736, $sub141);
      __label__ = 73; break;
    case 47: 
      var $136=$p_addr;
      var $137=$p_addr;
      var $slen143=(($137+20)|0);
      var $138=HEAP32[(($slen143)>>2)];
      var $139=$pos;
      var $sub144=((($138)-($139))|0);
      var $add145=((($sub144)+(1))|0);
      var $140=$pos;
      _doinsert($136, 1207959552, $add145, $140);
      var $141=$p_addr;
      var $142=$p_addr;
      var $slen146=(($142+20)|0);
      var $143=HEAP32[(($slen146)>>2)];
      var $144=$pos;
      var $sub147=((($143)-($144))|0);
      _doemit($141, 1342177280, $sub147);
      __label__ = 73; break;
    case 48: 
      var $145=$p_addr;
      var $146=$p_addr;
      var $slen149=(($146+20)|0);
      var $147=HEAP32[(($slen149)>>2)];
      var $148=$pos;
      var $sub150=((($147)-($148))|0);
      var $add151=((($sub150)+(1))|0);
      var $149=$pos;
      _doinsert($145, 2013265920, $add151, $149);
      var $150=$p_addr;
      var $151=$p_addr;
      var $slen152=(($151+20)|0);
      var $152=HEAP32[(($slen152)>>2)];
      var $153=$pos;
      var $sub153=((($152)-($153))|0);
      _doemit($150, -2147483648, $sub153);
      var $154=$p_addr;
      var $155=$pos;
      var $156=$p_addr;
      var $slen154=(($156+20)|0);
      var $157=HEAP32[(($slen154)>>2)];
      var $158=$pos;
      var $sub155=((($157)-($158))|0);
      _dofwd($154, $155, $sub155);
      var $159=$p_addr;
      _doemit($159, -2013265920, 0);
      var $160=$p_addr;
      var $161=$p_addr;
      var $slen156=(($161+20)|0);
      var $162=HEAP32[(($slen156)>>2)];
      var $sub157=((($162)-(1))|0);
      var $163=$p_addr;
      var $slen158=(($163+20)|0);
      var $164=HEAP32[(($slen158)>>2)];
      var $165=$p_addr;
      var $slen159=(($165+20)|0);
      var $166=HEAP32[(($slen159)>>2)];
      var $sub160=((($166)-(1))|0);
      var $sub161=((($164)-($sub160))|0);
      _dofwd($160, $sub157, $sub161);
      var $167=$p_addr;
      var $168=$p_addr;
      var $slen162=(($168+20)|0);
      var $169=HEAP32[(($slen162)>>2)];
      var $170=$p_addr;
      var $slen163=(($170+20)|0);
      var $171=HEAP32[(($slen163)>>2)];
      var $sub164=((($171)-(2))|0);
      var $sub165=((($169)-($sub164))|0);
      _doemit($167, -1879048192, $sub165);
      __label__ = 73; break;
    case 49: 
      var $172=$p_addr;
      var $call167=_p_count($172);
      $count=$call167;
      var $173=$p_addr;
      var $next168=(($173)|0);
      var $174=HEAP32[(($next168)>>2)];
      var $175=$p_addr;
      var $end169=(($175+4)|0);
      var $176=HEAP32[(($end169)>>2)];
      var $cmp170=(($174)>>>0) < (($176)>>>0);
      if ($cmp170) { __label__ = 50; break; } else { __label__ = 52; break; }
    case 50: 
      var $177=$p_addr;
      var $next173=(($177)|0);
      var $178=HEAP32[(($next173)>>2)];
      var $179=HEAP8[($178)];
      var $conv174=(($179 << 24) >> 24);
      var $cmp175=(($conv174)|0)==44;
      if ($cmp175) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $180=$p_addr;
      var $next177=(($180)|0);
      var $181=HEAP32[(($next177)>>2)];
      var $incdec_ptr178=(($181+1)|0);
      HEAP32[(($next177)>>2)]=$incdec_ptr178;
      if (1) { __label__ = 53; break; } else { __label__ = 59; break; }
    case 52: 
      if (0) { __label__ = 53; break; } else { __label__ = 59; break; }
    case 53: 
      var $182=$p_addr;
      var $next180=(($182)|0);
      var $183=HEAP32[(($next180)>>2)];
      var $184=HEAP8[($183)];
      var $conv181=(($184)&255);
      var $call182=_isdigit($conv181);
      var $tobool183=(($call182)|0)!=0;
      if ($tobool183) { __label__ = 54; break; } else { __label__ = 57; break; }
    case 54: 
      var $185=$p_addr;
      var $call185=_p_count($185);
      $count2=$call185;
      var $186=$count;
      var $187=$count2;
      var $cmp186=(($186)|0) <= (($187)|0);
      if ($cmp186) { var $189 = 1;__label__ = 56; break; } else { __label__ = 55; break; }
    case 55: 
      var $188=$p_addr;
      var $call189=_seterr($188, 10);
      var $tobool190=(($call189)|0)!=0;
      var $189 = $tobool190;__label__ = 56; break;
    case 56: 
      var $189;
      var $lor_ext192=(($189)&1);
      __label__ = 58; break;
    case 57: 
      $count2=256;
      __label__ = 58; break;
    case 58: 
      __label__ = 60; break;
    case 59: 
      var $190=$count;
      $count2=$190;
      __label__ = 60; break;
    case 60: 
      var $191=$p_addr;
      var $192=$pos;
      var $193=$count;
      var $194=$count2;
      _repeat($191, $192, $193, $194);
      var $195=$p_addr;
      var $next197=(($195)|0);
      var $196=HEAP32[(($next197)>>2)];
      var $197=$p_addr;
      var $end198=(($197+4)|0);
      var $198=HEAP32[(($end198)>>2)];
      var $cmp199=(($196)>>>0) < (($198)>>>0);
      if ($cmp199) { __label__ = 61; break; } else { __label__ = 63; break; }
    case 61: 
      var $199=$p_addr;
      var $next202=(($199)|0);
      var $200=HEAP32[(($next202)>>2)];
      var $201=HEAP8[($200)];
      var $conv203=(($201 << 24) >> 24);
      var $cmp204=(($conv203)|0)==125;
      if ($cmp204) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $202=$p_addr;
      var $next207=(($202)|0);
      var $203=HEAP32[(($next207)>>2)];
      var $incdec_ptr208=(($203+1)|0);
      HEAP32[(($next207)>>2)]=$incdec_ptr208;
      if (1) { __label__ = 72; break; } else { __label__ = 64; break; }
    case 63: 
      if (0) { __label__ = 72; break; } else { __label__ = 64; break; }
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $204=$p_addr;
      var $next211=(($204)|0);
      var $205=HEAP32[(($next211)>>2)];
      var $206=$p_addr;
      var $end212=(($206+4)|0);
      var $207=HEAP32[(($end212)>>2)];
      var $cmp213=(($205)>>>0) < (($207)>>>0);
      if ($cmp213) { __label__ = 66; break; } else { var $211 = 0;__label__ = 67; break; }
    case 66: 
      var $208=$p_addr;
      var $next215=(($208)|0);
      var $209=HEAP32[(($next215)>>2)];
      var $210=HEAP8[($209)];
      var $conv216=(($210 << 24) >> 24);
      var $cmp217=(($conv216)|0)!=125;
      var $211 = $cmp217;__label__ = 67; break;
    case 67: 
      var $211;
      if ($211) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $212=$p_addr;
      var $next219=(($212)|0);
      var $213=HEAP32[(($next219)>>2)];
      var $incdec_ptr220=(($213+1)|0);
      HEAP32[(($next219)>>2)]=$incdec_ptr220;
      __label__ = 65; break;
    case 69: 
      var $214=$p_addr;
      var $next221=(($214)|0);
      var $215=HEAP32[(($next221)>>2)];
      var $216=$p_addr;
      var $end222=(($216+4)|0);
      var $217=HEAP32[(($end222)>>2)];
      var $cmp223=(($215)>>>0) < (($217)>>>0);
      if ($cmp223) { var $219 = 1;__label__ = 71; break; } else { __label__ = 70; break; }
    case 70: 
      var $218=$p_addr;
      var $call226=_seterr($218, 9);
      var $tobool227=(($call226)|0)!=0;
      var $219 = $tobool227;__label__ = 71; break;
    case 71: 
      var $219;
      var $lor_ext229=(($219)&1);
      var $220=$p_addr;
      var $call230=_seterr($220, 10);
      __label__ = 72; break;
    case 72: 
      __label__ = 73; break;
    case 73: 
      var $221=$p_addr;
      var $next233=(($221)|0);
      var $222=HEAP32[(($next233)>>2)];
      var $223=$p_addr;
      var $end234=(($223+4)|0);
      var $224=HEAP32[(($end234)>>2)];
      var $cmp235=(($222)>>>0) < (($224)>>>0);
      if ($cmp235) { __label__ = 75; break; } else { __label__ = 74; break; }
    case 74: 
      __label__ = 83; break;
    case 75: 
      var $225=$p_addr;
      var $next239=(($225)|0);
      var $226=HEAP32[(($next239)>>2)];
      var $227=HEAP8[($226)];
      $c=$227;
      var $228=$c;
      var $conv240=(($228 << 24) >> 24);
      var $cmp241=(($conv240)|0)==42;
      if ($cmp241) { __label__ = 82; break; } else { __label__ = 76; break; }
    case 76: 
      var $229=$c;
      var $conv244=(($229 << 24) >> 24);
      var $cmp245=(($conv244)|0)==43;
      if ($cmp245) { __label__ = 82; break; } else { __label__ = 77; break; }
    case 77: 
      var $230=$c;
      var $conv248=(($230 << 24) >> 24);
      var $cmp249=(($conv248)|0)==63;
      if ($cmp249) { __label__ = 82; break; } else { __label__ = 78; break; }
    case 78: 
      var $231=$c;
      var $conv252=(($231 << 24) >> 24);
      var $cmp253=(($conv252)|0)==123;
      if ($cmp253) { __label__ = 79; break; } else { __label__ = 81; break; }
    case 79: 
      var $232=$p_addr;
      var $next256=(($232)|0);
      var $233=HEAP32[(($next256)>>2)];
      var $add_ptr257=(($233+1)|0);
      var $234=$p_addr;
      var $end258=(($234+4)|0);
      var $235=HEAP32[(($end258)>>2)];
      var $cmp259=(($add_ptr257)>>>0) < (($235)>>>0);
      if ($cmp259) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $236=$p_addr;
      var $next262=(($236)|0);
      var $237=HEAP32[(($next262)>>2)];
      var $add_ptr263=(($237+1)|0);
      var $238=HEAP8[($add_ptr263)];
      var $conv264=(($238)&255);
      var $call265=_isdigit($conv264);
      var $tobool266=(($call265)|0)!=0;
      if ($tobool266) { __label__ = 82; break; } else { __label__ = 81; break; }
    case 81: 
      __label__ = 83; break;
    case 82: 
      var $239=$p_addr;
      var $call269=_seterr($239, 13);
      __label__ = 83; break;
    case 83: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}
_p_ere_exp["X"]=1;

function ___collate_range_cmp($c1, $c2) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $c1_addr;
      var $c2_addr;
      var $ret;
      $c1_addr=$c1;
      $c2_addr=$c2;
      var $0=$c1_addr;
      var $and=$0 & 255;
      $c1_addr=$and;
      var $1=$c2_addr;
      var $and1=$1 & 255;
      $c2_addr=$and1;
      var $2=$c1_addr;
      var $3=$c2_addr;
      var $cmp=(($2)|0)==(($3)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $retval=0;
      __label__ = 7; break;
    case 4: 
      var $4=$c1_addr;
      var $conv=(($4) & 255);
      HEAP8[(((___collate_range_cmp_s1)|0))]=$conv;
      var $5=$c2_addr;
      var $conv2=(($5) & 255);
      HEAP8[(((___collate_range_cmp_s2)|0))]=$conv2;
      var $call=_strcoll(((___collate_range_cmp_s1)|0), ((___collate_range_cmp_s2)|0));
      $ret=$call;
      var $cmp3=(($call)|0)!=0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $6=$ret;
      $retval=$6;
      __label__ = 7; break;
    case 6: 
      var $7=$c1_addr;
      var $8=$c2_addr;
      var $sub=((($7)-($8))|0);
      $retval=$sub;
      __label__ = 7; break;
    case 7: 
      var $9=$retval;
      ;
      return $9;
    default: assert(0, "bad label: " + __label__);
  }
}


function _regexec($preg, $string, $nmatch, $pmatch, $eflags) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $preg_addr;
      var $string_addr;
      var $nmatch_addr;
      var $pmatch_addr;
      var $eflags_addr;
      var $g;
      $preg_addr=$preg;
      $string_addr=$string;
      $nmatch_addr=$nmatch;
      $pmatch_addr=$pmatch;
      $eflags_addr=$eflags;
      var $0=$preg_addr;
      var $re_g=(($0+12)|0);
      var $1=HEAP32[(($re_g)>>2)];
      $g=$1;
      var $2=$preg_addr;
      var $re_magic=(($2)|0);
      var $3=HEAP32[(($re_magic)>>2)];
      var $cmp=(($3)|0)!=62053;
      if ($cmp) { __label__ = 4; break; } else { __label__ = 3; break; }
    case 3: 
      var $4=$g;
      var $magic=(($4)|0);
      var $5=HEAP32[(($magic)>>2)];
      var $cmp1=(($5)|0)!=53829;
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; }
    case 4: 
      $retval=2;
      __label__ = 11; break;
    case 5: 
      var $6=$g;
      var $iflags=(($6+40)|0);
      var $7=HEAP32[(($iflags)>>2)];
      var $and=$7 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 7; break; }
    case 6: 
      $retval=2;
      __label__ = 11; break;
    case 7: 
      var $8=$eflags_addr;
      var $and4=$8 & 7;
      $eflags_addr=$and4;
      var $9=$g;
      var $nstates=(($9+28)|0);
      var $10=HEAP32[(($nstates)>>2)];
      var $cmp5=(($10)>>>0) <= 32;
      if ($cmp5) { __label__ = 8; break; } else { __label__ = 10; break; }
    case 8: 
      var $11=$eflags_addr;
      var $and6=$11 & 512;
      var $tobool7=(($and6)|0)!=0;
      if ($tobool7) { __label__ = 10; break; } else { __label__ = 9; break; }
    case 9: 
      var $12=$g;
      var $13=$string_addr;
      var $14=$nmatch_addr;
      var $15=$pmatch_addr;
      var $16=$eflags_addr;
      var $call=_smatcher($12, $13, $14, $15, $16);
      $retval=$call;
      __label__ = 11; break;
    case 10: 
      var $17=$g;
      var $18=$string_addr;
      var $19=$nmatch_addr;
      var $20=$pmatch_addr;
      var $21=$eflags_addr;
      var $call9=_lmatcher($17, $18, $19, $20, $21);
      $retval=$call9;
      __label__ = 11; break;
    case 11: 
      var $22=$retval;
      ;
      return $22;
    default: assert(0, "bad label: " + __label__);
  }
}
_regexec["X"]=1;

function _smatcher($g, $string, $nmatch, $pmatch, $eflags) {
  var __stackBase__  = STACKTOP; STACKTOP += 52; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $g_addr;
      var $string_addr;
      var $nmatch_addr;
      var $pmatch_addr;
      var $eflags_addr;
      var $endp;
      var $i;
      var $mv=__stackBase__;
      var $m;
      var $dp;
      var $gf;
      var $gl;
      var $start;
      var $stop;
      var $pp;
      var $cj;
      var $mj;
      var $mustfirst;
      var $mustlast;
      var $matchjump;
      var $charjump;
      $g_addr=$g;
      $string_addr=$string;
      $nmatch_addr=$nmatch;
      $pmatch_addr=$pmatch;
      $eflags_addr=$eflags;
      $m=$mv;
      var $0=$g_addr;
      var $firststate=(($0+32)|0);
      var $1=HEAP32[(($firststate)>>2)];
      var $add=((($1)+(1))|0);
      $gf=$add;
      var $2=$g_addr;
      var $laststate=(($2+36)|0);
      var $3=HEAP32[(($laststate)>>2)];
      $gl=$3;
      var $4=$g_addr;
      var $cflags=(($4+24)|0);
      var $5=HEAP32[(($cflags)>>2)];
      var $and=$5 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $nmatch_addr=0;
      __label__ = 4; break;
    case 4: 
      var $6=$eflags_addr;
      var $and1=$6 & 4;
      var $tobool2=(($and1)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=$string_addr;
      var $8=$pmatch_addr;
      var $arrayidx=(($8)|0);
      var $rm_so=(($arrayidx)|0);
      var $9=HEAP32[(($rm_so)>>2)];
      var $add_ptr=(($7+$9)|0);
      $start=$add_ptr;
      var $10=$string_addr;
      var $11=$pmatch_addr;
      var $arrayidx4=(($11)|0);
      var $rm_eo=(($arrayidx4+4)|0);
      var $12=HEAP32[(($rm_eo)>>2)];
      var $add_ptr5=(($10+$12)|0);
      $stop=$add_ptr5;
      __label__ = 7; break;
    case 6: 
      var $13=$string_addr;
      $start=$13;
      var $14=$start;
      var $15=$start;
      var $call=_strlen($15);
      var $add_ptr6=(($14+$call)|0);
      $stop=$add_ptr6;
      __label__ = 7; break;
    case 7: 
      var $16=$stop;
      var $17=$start;
      var $cmp=(($16)>>>0) < (($17)>>>0);
      if ($cmp) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=16;
      __label__ = 111; break;
    case 9: 
      var $18=$g_addr;
      var $must=(($18+60)|0);
      var $19=HEAP32[(($must)>>2)];
      var $cmp10=(($19)|0)!=0;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 47; break; }
    case 10: 
      var $20=$g_addr;
      var $charjump12=(($20+68)|0);
      var $21=HEAP32[(($charjump12)>>2)];
      var $cmp13=(($21)|0)!=0;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 35; break; }
    case 11: 
      var $22=$g_addr;
      var $matchjump14=(($22+72)|0);
      var $23=HEAP32[(($matchjump14)>>2)];
      var $cmp15=(($23)|0)!=0;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 35; break; }
    case 12: 
      var $24=$g_addr;
      var $must17=(($24+60)|0);
      var $25=HEAP32[(($must17)>>2)];
      $mustfirst=$25;
      var $26=$g_addr;
      var $must18=(($26+60)|0);
      var $27=HEAP32[(($must18)>>2)];
      var $28=$g_addr;
      var $mlen=(($28+76)|0);
      var $29=HEAP32[(($mlen)>>2)];
      var $add_ptr19=(($27+$29)|0);
      var $add_ptr20=((($add_ptr19)-(1))|0);
      $mustlast=$add_ptr20;
      var $30=$g_addr;
      var $charjump21=(($30+68)|0);
      var $31=HEAP32[(($charjump21)>>2)];
      $charjump=$31;
      var $32=$g_addr;
      var $matchjump22=(($32+72)|0);
      var $33=HEAP32[(($matchjump22)>>2)];
      $matchjump=$33;
      var $34=$mustlast;
      $pp=$34;
      var $35=$start;
      var $36=$g_addr;
      var $mlen23=(($36+76)|0);
      var $37=HEAP32[(($mlen23)>>2)];
      var $add_ptr24=(($35+$37)|0);
      var $add_ptr25=((($add_ptr24)-(1))|0);
      $dp=$add_ptr25;
      __label__ = 13; break;
    case 13: 
      var $38=$dp;
      var $39=$stop;
      var $cmp26=(($38)>>>0) < (($39)>>>0);
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 32; break; }
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $40=$dp;
      var $41=$stop;
      var $cmp27=(($40)>>>0) < (($41)>>>0);
      if ($cmp27) { __label__ = 16; break; } else { var $46 = 0;__label__ = 17; break; }
    case 16: 
      var $42=$dp;
      var $43=HEAP8[($42)];
      var $idxprom=(($43 << 24) >> 24);
      var $44=$charjump;
      var $arrayidx28=(($44+($idxprom<<2))|0);
      var $45=HEAP32[(($arrayidx28)>>2)];
      var $tobool29=(($45)|0)!=0;
      var $46 = $tobool29;__label__ = 17; break;
    case 17: 
      var $46;
      if ($46) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $47=$dp;
      var $48=HEAP8[($47)];
      var $idxprom30=(($48 << 24) >> 24);
      var $49=$charjump;
      var $arrayidx31=(($49+($idxprom30<<2))|0);
      var $50=HEAP32[(($arrayidx31)>>2)];
      var $51=$dp;
      var $add_ptr32=(($51+$50)|0);
      $dp=$add_ptr32;
      __label__ = 15; break;
    case 19: 
      var $52=$dp;
      var $53=$stop;
      var $cmp33=(($52)>>>0) >= (($53)>>>0);
      if ($cmp33) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 32; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $54=$dp;
      var $incdec_ptr=((($54)-(1))|0);
      $dp=$incdec_ptr;
      var $55=HEAP8[($incdec_ptr)];
      var $conv=(($55 << 24) >> 24);
      var $56=$pp;
      var $incdec_ptr37=((($56)-(1))|0);
      $pp=$incdec_ptr37;
      var $57=HEAP8[($incdec_ptr37)];
      var $conv38=(($57 << 24) >> 24);
      var $cmp39=(($conv)|0)==(($conv38)|0);
      if ($cmp39) { __label__ = 23; break; } else { var $60 = 0;__label__ = 24; break; }
    case 23: 
      var $58=$pp;
      var $59=$mustfirst;
      var $cmp42=(($58)|0)!=(($59)|0);
      var $60 = $cmp42;__label__ = 24; break;
    case 24: 
      var $60;
      if ($60) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 22; break;
    case 26: 
      var $61=$dp;
      var $62=HEAP8[($61)];
      var $conv47=(($62 << 24) >> 24);
      var $63=$pp;
      var $64=HEAP8[($63)];
      var $conv48=(($64 << 24) >> 24);
      var $cmp49=(($conv47)|0)==(($conv48)|0);
      if ($cmp49) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      __label__ = 32; break;
    case 28: 
      var $65=$pp;
      var $66=$mustfirst;
      var $sub_ptr_lhs_cast=$65;
      var $sub_ptr_rhs_cast=$66;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $67=$matchjump;
      var $arrayidx53=(($67+($sub_ptr_sub<<2))|0);
      var $68=HEAP32[(($arrayidx53)>>2)];
      $mj=$68;
      var $69=$dp;
      var $70=HEAP8[($69)];
      var $idxprom54=(($70 << 24) >> 24);
      var $71=$charjump;
      var $arrayidx55=(($71+($idxprom54<<2))|0);
      var $72=HEAP32[(($arrayidx55)>>2)];
      $cj=$72;
      var $73=$cj;
      var $74=$mj;
      var $cmp56=(($73)|0) < (($74)|0);
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $75=$mj;
      var $cond = $75;__label__ = 31; break;
    case 30: 
      var $76=$cj;
      var $cond = $76;__label__ = 31; break;
    case 31: 
      var $cond;
      var $77=$dp;
      var $add_ptr58=(($77+$cond)|0);
      $dp=$add_ptr58;
      var $78=$mustlast;
      $pp=$78;
      __label__ = 13; break;
    case 32: 
      var $79=$pp;
      var $80=$mustfirst;
      var $cmp59=(($79)|0)!=(($80)|0);
      if ($cmp59) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $retval=1;
      __label__ = 111; break;
    case 34: 
      __label__ = 46; break;
    case 35: 
      var $81=$start;
      $dp=$81;
      __label__ = 36; break;
    case 36: 
      var $82=$dp;
      var $83=$stop;
      var $cmp65=(($82)>>>0) < (($83)>>>0);
      if ($cmp65) { __label__ = 37; break; } else { __label__ = 43; break; }
    case 37: 
      var $84=$dp;
      var $85=HEAP8[($84)];
      var $conv68=(($85 << 24) >> 24);
      var $86=$g_addr;
      var $must69=(($86+60)|0);
      var $87=HEAP32[(($must69)>>2)];
      var $arrayidx70=(($87)|0);
      var $88=HEAP8[($arrayidx70)];
      var $conv71=(($88 << 24) >> 24);
      var $cmp72=(($conv68)|0)==(($conv71)|0);
      if ($cmp72) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $89=$stop;
      var $90=$dp;
      var $sub_ptr_lhs_cast75=$89;
      var $sub_ptr_rhs_cast76=$90;
      var $sub_ptr_sub77=((($sub_ptr_lhs_cast75)-($sub_ptr_rhs_cast76))|0);
      var $91=$g_addr;
      var $mlen78=(($91+76)|0);
      var $92=HEAP32[(($mlen78)>>2)];
      var $cmp79=(($sub_ptr_sub77)|0) >= (($92)|0);
      if ($cmp79) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: 
      var $93=$dp;
      var $94=$g_addr;
      var $must82=(($94+60)|0);
      var $95=HEAP32[(($must82)>>2)];
      var $96=$g_addr;
      var $mlen83=(($96+76)|0);
      var $97=HEAP32[(($mlen83)>>2)];
      var $call84=_memcmp($93, $95, $97);
      var $cmp85=(($call84)|0)==0;
      if ($cmp85) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      __label__ = 43; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $98=$dp;
      var $incdec_ptr89=(($98+1)|0);
      $dp=$incdec_ptr89;
      __label__ = 36; break;
    case 43: 
      var $99=$dp;
      var $100=$stop;
      var $cmp91=(($99)|0)==(($100)|0);
      if ($cmp91) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      $retval=1;
      __label__ = 111; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $101=$g_addr;
      var $102=$m;
      var $g97=(($102)|0);
      HEAP32[(($g97)>>2)]=$101;
      var $103=$eflags_addr;
      var $104=$m;
      var $eflags98=(($104+4)|0);
      HEAP32[(($eflags98)>>2)]=$103;
      var $105=$m;
      var $pmatch99=(($105+8)|0);
      HEAP32[(($pmatch99)>>2)]=0;
      var $106=$m;
      var $lastpos=(($106+28)|0);
      HEAP32[(($lastpos)>>2)]=0;
      var $107=$string_addr;
      var $108=$m;
      var $offp=(($108+12)|0);
      HEAP32[(($offp)>>2)]=$107;
      var $109=$start;
      var $110=$m;
      var $beginp=(($110+16)|0);
      HEAP32[(($beginp)>>2)]=$109;
      var $111=$stop;
      var $112=$m;
      var $endp100=(($112+20)|0);
      HEAP32[(($endp100)>>2)]=$111;
      var $113=$m;
      var $st=(($113+36)|0);
      HEAP32[(($st)>>2)]=0;
      var $114=$m;
      var $fresh=(($114+40)|0);
      HEAP32[(($fresh)>>2)]=0;
      var $115=$m;
      var $tmp=(($115+44)|0);
      HEAP32[(($tmp)>>2)]=0;
      var $116=$m;
      var $empty=(($116+48)|0);
      HEAP32[(($empty)>>2)]=0;
      var $117=$m;
      var $empty101=(($117+48)|0);
      HEAP32[(($empty101)>>2)]=0;
      var $118=$g_addr;
      var $moffset=(($118+64)|0);
      var $119=HEAP32[(($moffset)>>2)];
      var $cmp102=(($119)|0) > -1;
      if ($cmp102) { __label__ = 48; break; } else { __label__ = 52; break; }
    case 48: 
      var $120=$dp;
      var $121=$g_addr;
      var $moffset105=(($121+64)|0);
      var $122=HEAP32[(($moffset105)>>2)];
      var $idx_neg=(((-$122))|0);
      var $add_ptr106=(($120+$idx_neg)|0);
      var $123=$start;
      var $cmp107=(($add_ptr106)>>>0) < (($123)>>>0);
      if ($cmp107) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $124=$start;
      var $cond115 = $124;__label__ = 51; break;
    case 50: 
      var $125=$dp;
      var $126=$g_addr;
      var $moffset111=(($126+64)|0);
      var $127=HEAP32[(($moffset111)>>2)];
      var $idx_neg112=(((-$127))|0);
      var $add_ptr113=(($125+$idx_neg112)|0);
      var $cond115 = $add_ptr113;__label__ = 51; break;
    case 51: 
      var $cond115;
      $start=$cond115;
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $128=$m;
      var $129=$start;
      var $130=$stop;
      var $131=$gf;
      var $132=$gl;
      var $call118=_sfast($128, $129, $130, $131, $132);
      $endp=$call118;
      var $133=$endp;
      var $cmp119=(($133)|0)==0;
      if ($cmp119) { __label__ = 54; break; } else { __label__ = 55; break; }
    case 54: 
      $retval=1;
      __label__ = 111; break;
    case 55: 
      var $134=$nmatch_addr;
      var $cmp123=(($134)|0)==0;
      if ($cmp123) { __label__ = 56; break; } else { __label__ = 58; break; }
    case 56: 
      var $135=$g_addr;
      var $backrefs=(($135+84)|0);
      var $136=HEAP32[(($backrefs)>>2)];
      var $tobool126=(($136)|0)!=0;
      if ($tobool126) { __label__ = 58; break; } else { __label__ = 57; break; }
    case 57: 
      __label__ = 95; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $137=$m;
      var $138=$m;
      var $coldp=(($138+24)|0);
      var $139=HEAP32[(($coldp)>>2)];
      var $140=$stop;
      var $141=$gf;
      var $142=$gl;
      var $call130=_sslow($137, $139, $140, $141, $142);
      $endp=$call130;
      var $143=$endp;
      var $cmp131=(($143)|0)!=0;
      if ($cmp131) { __label__ = 60; break; } else { __label__ = 61; break; }
    case 60: 
      __label__ = 62; break;
    case 61: 
      var $144=$m;
      var $coldp135=(($144+24)|0);
      var $145=HEAP32[(($coldp135)>>2)];
      var $incdec_ptr136=(($145+1)|0);
      HEAP32[(($coldp135)>>2)]=$incdec_ptr136;
      __label__ = 59; break;
    case 62: 
      var $146=$nmatch_addr;
      var $cmp138=(($146)|0)==1;
      if ($cmp138) { __label__ = 63; break; } else { __label__ = 65; break; }
    case 63: 
      var $147=$g_addr;
      var $backrefs141=(($147+84)|0);
      var $148=HEAP32[(($backrefs141)>>2)];
      var $tobool142=(($148)|0)!=0;
      if ($tobool142) { __label__ = 65; break; } else { __label__ = 64; break; }
    case 64: 
      __label__ = 95; break;
    case 65: 
      var $149=$m;
      var $pmatch145=(($149+8)|0);
      var $150=HEAP32[(($pmatch145)>>2)];
      var $cmp146=(($150)|0)==0;
      if ($cmp146) { __label__ = 66; break; } else { __label__ = 67; break; }
    case 66: 
      var $151=$m;
      var $g149=(($151)|0);
      var $152=HEAP32[(($g149)>>2)];
      var $nsub=(($152+80)|0);
      var $153=HEAP32[(($nsub)>>2)];
      var $add150=((($153)+(1))|0);
      var $mul=((($add150<<3))|0);
      var $call151=_malloc($mul);
      var $154=$call151;
      var $155=$m;
      var $pmatch152=(($155+8)|0);
      HEAP32[(($pmatch152)>>2)]=$154;
      __label__ = 67; break;
    case 67: 
      var $156=$m;
      var $pmatch154=(($156+8)|0);
      var $157=HEAP32[(($pmatch154)>>2)];
      var $cmp155=(($157)|0)==0;
      if ($cmp155) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      $retval=12;
      __label__ = 111; break;
    case 69: 
      $i=1;
      __label__ = 70; break;
    case 70: 
      var $158=$i;
      var $159=$m;
      var $g160=(($159)|0);
      var $160=HEAP32[(($g160)>>2)];
      var $nsub161=(($160+80)|0);
      var $161=HEAP32[(($nsub161)>>2)];
      var $cmp162=(($158)>>>0) <= (($161)>>>0);
      if ($cmp162) { __label__ = 71; break; } else { __label__ = 73; break; }
    case 71: 
      var $162=$i;
      var $163=$m;
      var $pmatch165=(($163+8)|0);
      var $164=HEAP32[(($pmatch165)>>2)];
      var $arrayidx166=(($164+($162<<3))|0);
      var $rm_eo167=(($arrayidx166+4)|0);
      HEAP32[(($rm_eo167)>>2)]=-1;
      var $165=$i;
      var $166=$m;
      var $pmatch168=(($166+8)|0);
      var $167=HEAP32[(($pmatch168)>>2)];
      var $arrayidx169=(($167+($165<<3))|0);
      var $rm_so170=(($arrayidx169)|0);
      HEAP32[(($rm_so170)>>2)]=-1;
      __label__ = 72; break;
    case 72: 
      var $168=$i;
      var $inc=((($168)+(1))|0);
      $i=$inc;
      __label__ = 70; break;
    case 73: 
      var $169=$g_addr;
      var $backrefs173=(($169+84)|0);
      var $170=HEAP32[(($backrefs173)>>2)];
      var $tobool174=(($170)|0)!=0;
      if ($tobool174) { __label__ = 76; break; } else { __label__ = 74; break; }
    case 74: 
      var $171=$m;
      var $eflags176=(($171+4)|0);
      var $172=HEAP32[(($eflags176)>>2)];
      var $and177=$172 & 1024;
      var $tobool178=(($and177)|0)!=0;
      if ($tobool178) { __label__ = 76; break; } else { __label__ = 75; break; }
    case 75: 
      var $173=$m;
      var $174=$m;
      var $coldp180=(($174+24)|0);
      var $175=HEAP32[(($coldp180)>>2)];
      var $176=$endp;
      var $177=$gf;
      var $178=$gl;
      var $call181=_sdissect($173, $175, $176, $177, $178);
      $dp=$call181;
      __label__ = 83; break;
    case 76: 
      var $179=$g_addr;
      var $nplus=(($179+88)|0);
      var $180=HEAP32[(($nplus)>>2)];
      var $cmp183=(($180)|0) > 0;
      if ($cmp183) { __label__ = 77; break; } else { __label__ = 79; break; }
    case 77: 
      var $181=$m;
      var $lastpos186=(($181+28)|0);
      var $182=HEAP32[(($lastpos186)>>2)];
      var $cmp187=(($182)|0)==0;
      if ($cmp187) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $183=$g_addr;
      var $nplus190=(($183+88)|0);
      var $184=HEAP32[(($nplus190)>>2)];
      var $add191=((($184)+(1))|0);
      var $mul192=((($add191<<2))|0);
      var $call193=_malloc($mul192);
      var $185=$call193;
      var $186=$m;
      var $lastpos194=(($186+28)|0);
      HEAP32[(($lastpos194)>>2)]=$185;
      __label__ = 79; break;
    case 79: 
      var $187=$g_addr;
      var $nplus196=(($187+88)|0);
      var $188=HEAP32[(($nplus196)>>2)];
      var $cmp197=(($188)|0) > 0;
      if ($cmp197) { __label__ = 80; break; } else { __label__ = 82; break; }
    case 80: 
      var $189=$m;
      var $lastpos200=(($189+28)|0);
      var $190=HEAP32[(($lastpos200)>>2)];
      var $cmp201=(($190)|0)==0;
      if ($cmp201) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $191=$m;
      var $pmatch204=(($191+8)|0);
      var $192=HEAP32[(($pmatch204)>>2)];
      var $193=$192;
      _free($193);
      $retval=12;
      __label__ = 111; break;
    case 82: 
      var $194=$m;
      var $195=$m;
      var $coldp206=(($195+24)|0);
      var $196=HEAP32[(($coldp206)>>2)];
      var $197=$endp;
      var $198=$gf;
      var $199=$gl;
      var $call207=_sbackref($194, $196, $197, $198, $199, 0);
      $dp=$call207;
      __label__ = 83; break;
    case 83: 
      var $200=$dp;
      var $cmp209=(($200)|0)!=0;
      if ($cmp209) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      __label__ = 95; break;
    case 85: 
      __label__ = 86; break;
    case 86: 
      var $201=$dp;
      var $cmp214=(($201)|0)!=0;
      if ($cmp214) { __label__ = 88; break; } else { __label__ = 87; break; }
    case 87: 
      var $202=$endp;
      var $203=$m;
      var $coldp216=(($203+24)|0);
      var $204=HEAP32[(($coldp216)>>2)];
      var $cmp217=(($202)>>>0) <= (($204)>>>0);
      if ($cmp217) { __label__ = 88; break; } else { __label__ = 89; break; }
    case 88: 
      __label__ = 92; break;
    case 89: 
      var $205=$m;
      var $206=$m;
      var $coldp221=(($206+24)|0);
      var $207=HEAP32[(($coldp221)>>2)];
      var $208=$endp;
      var $add_ptr222=((($208)-(1))|0);
      var $209=$gf;
      var $210=$gl;
      var $call223=_sslow($205, $207, $add_ptr222, $209, $210);
      $endp=$call223;
      var $211=$endp;
      var $cmp224=(($211)|0)==0;
      if ($cmp224) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      __label__ = 92; break;
    case 91: 
      var $212=$m;
      var $213=$m;
      var $coldp228=(($213+24)|0);
      var $214=HEAP32[(($coldp228)>>2)];
      var $215=$endp;
      var $216=$gf;
      var $217=$gl;
      var $call229=_sbackref($212, $214, $215, $216, $217, 0);
      $dp=$call229;
      __label__ = 86; break;
    case 92: 
      var $218=$dp;
      var $cmp231=(($218)|0)!=0;
      if ($cmp231) { __label__ = 93; break; } else { __label__ = 94; break; }
    case 93: 
      __label__ = 95; break;
    case 94: 
      var $219=$m;
      var $coldp235=(($219+24)|0);
      var $220=HEAP32[(($coldp235)>>2)];
      var $add_ptr236=(($220+1)|0);
      $start=$add_ptr236;
      __label__ = 53; break;
    case 95: 
      var $221=$nmatch_addr;
      var $cmp238=(($221)>>>0) > 0;
      if ($cmp238) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      var $222=$m;
      var $coldp241=(($222+24)|0);
      var $223=HEAP32[(($coldp241)>>2)];
      var $224=$m;
      var $offp242=(($224+12)|0);
      var $225=HEAP32[(($offp242)>>2)];
      var $sub_ptr_lhs_cast243=$223;
      var $sub_ptr_rhs_cast244=$225;
      var $sub_ptr_sub245=((($sub_ptr_lhs_cast243)-($sub_ptr_rhs_cast244))|0);
      var $226=$pmatch_addr;
      var $arrayidx246=(($226)|0);
      var $rm_so247=(($arrayidx246)|0);
      HEAP32[(($rm_so247)>>2)]=$sub_ptr_sub245;
      var $227=$endp;
      var $228=$m;
      var $offp248=(($228+12)|0);
      var $229=HEAP32[(($offp248)>>2)];
      var $sub_ptr_lhs_cast249=$227;
      var $sub_ptr_rhs_cast250=$229;
      var $sub_ptr_sub251=((($sub_ptr_lhs_cast249)-($sub_ptr_rhs_cast250))|0);
      var $230=$pmatch_addr;
      var $arrayidx252=(($230)|0);
      var $rm_eo253=(($arrayidx252+4)|0);
      HEAP32[(($rm_eo253)>>2)]=$sub_ptr_sub251;
      __label__ = 97; break;
    case 97: 
      var $231=$nmatch_addr;
      var $cmp255=(($231)>>>0) > 1;
      if ($cmp255) { __label__ = 98; break; } else { __label__ = 106; break; }
    case 98: 
      $i=1;
      __label__ = 99; break;
    case 99: 
      var $232=$i;
      var $233=$nmatch_addr;
      var $cmp259=(($232)>>>0) < (($233)>>>0);
      if ($cmp259) { __label__ = 100; break; } else { __label__ = 105; break; }
    case 100: 
      var $234=$i;
      var $235=$m;
      var $g262=(($235)|0);
      var $236=HEAP32[(($g262)>>2)];
      var $nsub263=(($236+80)|0);
      var $237=HEAP32[(($nsub263)>>2)];
      var $cmp264=(($234)>>>0) <= (($237)>>>0);
      if ($cmp264) { __label__ = 101; break; } else { __label__ = 102; break; }
    case 101: 
      var $238=$i;
      var $239=$pmatch_addr;
      var $arrayidx267=(($239+($238<<3))|0);
      var $240=$i;
      var $241=$m;
      var $pmatch268=(($241+8)|0);
      var $242=HEAP32[(($pmatch268)>>2)];
      var $arrayidx269=(($242+($240<<3))|0);
      var $243=$arrayidx267;
      var $244=$arrayidx269;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($243)>>2)]=HEAP32[(($244)>>2)];HEAP32[((($243)+(4))>>2)]=HEAP32[((($244)+(4))>>2)];
      __label__ = 103; break;
    case 102: 
      var $245=$i;
      var $246=$pmatch_addr;
      var $arrayidx271=(($246+($245<<3))|0);
      var $rm_so272=(($arrayidx271)|0);
      HEAP32[(($rm_so272)>>2)]=-1;
      var $247=$i;
      var $248=$pmatch_addr;
      var $arrayidx273=(($248+($247<<3))|0);
      var $rm_eo274=(($arrayidx273+4)|0);
      HEAP32[(($rm_eo274)>>2)]=-1;
      __label__ = 103; break;
    case 103: 
      __label__ = 104; break;
    case 104: 
      var $249=$i;
      var $inc277=((($249)+(1))|0);
      $i=$inc277;
      __label__ = 99; break;
    case 105: 
      __label__ = 106; break;
    case 106: 
      var $250=$m;
      var $pmatch280=(($250+8)|0);
      var $251=HEAP32[(($pmatch280)>>2)];
      var $cmp281=(($251)|0)!=0;
      if ($cmp281) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $252=$m;
      var $pmatch284=(($252+8)|0);
      var $253=HEAP32[(($pmatch284)>>2)];
      var $254=$253;
      _free($254);
      __label__ = 108; break;
    case 108: 
      var $255=$m;
      var $lastpos286=(($255+28)|0);
      var $256=HEAP32[(($lastpos286)>>2)];
      var $cmp287=(($256)|0)!=0;
      if ($cmp287) { __label__ = 109; break; } else { __label__ = 110; break; }
    case 109: 
      var $257=$m;
      var $lastpos290=(($257+28)|0);
      var $258=HEAP32[(($lastpos290)>>2)];
      var $259=$258;
      _free($259);
      __label__ = 110; break;
    case 110: 
      $retval=0;
      __label__ = 111; break;
    case 111: 
      var $260=$retval;
      STACKTOP = __stackBase__;
      return $260;
    default: assert(0, "bad label: " + __label__);
  }
}
_smatcher["X"]=1;

function _lmatcher($g, $string, $nmatch, $pmatch, $eflags) {
  var __stackBase__  = STACKTOP; STACKTOP += 56; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $g_addr;
      var $string_addr;
      var $nmatch_addr;
      var $pmatch_addr;
      var $eflags_addr;
      var $endp;
      var $i;
      var $mv=__stackBase__;
      var $m;
      var $dp;
      var $gf;
      var $gl;
      var $start;
      var $stop;
      var $pp;
      var $cj;
      var $mj;
      var $mustfirst;
      var $mustlast;
      var $matchjump;
      var $charjump;
      $g_addr=$g;
      $string_addr=$string;
      $nmatch_addr=$nmatch;
      $pmatch_addr=$pmatch;
      $eflags_addr=$eflags;
      $m=$mv;
      var $0=$g_addr;
      var $firststate=(($0+32)|0);
      var $1=HEAP32[(($firststate)>>2)];
      var $add=((($1)+(1))|0);
      $gf=$add;
      var $2=$g_addr;
      var $laststate=(($2+36)|0);
      var $3=HEAP32[(($laststate)>>2)];
      $gl=$3;
      var $4=$g_addr;
      var $cflags=(($4+24)|0);
      var $5=HEAP32[(($cflags)>>2)];
      var $and=$5 & 4;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      $nmatch_addr=0;
      __label__ = 4; break;
    case 4: 
      var $6=$eflags_addr;
      var $and1=$6 & 4;
      var $tobool2=(($and1)|0)!=0;
      if ($tobool2) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $7=$string_addr;
      var $8=$pmatch_addr;
      var $arrayidx=(($8)|0);
      var $rm_so=(($arrayidx)|0);
      var $9=HEAP32[(($rm_so)>>2)];
      var $add_ptr=(($7+$9)|0);
      $start=$add_ptr;
      var $10=$string_addr;
      var $11=$pmatch_addr;
      var $arrayidx4=(($11)|0);
      var $rm_eo=(($arrayidx4+4)|0);
      var $12=HEAP32[(($rm_eo)>>2)];
      var $add_ptr5=(($10+$12)|0);
      $stop=$add_ptr5;
      __label__ = 7; break;
    case 6: 
      var $13=$string_addr;
      $start=$13;
      var $14=$start;
      var $15=$start;
      var $call=_strlen($15);
      var $add_ptr6=(($14+$call)|0);
      $stop=$add_ptr6;
      __label__ = 7; break;
    case 7: 
      var $16=$stop;
      var $17=$start;
      var $cmp=(($16)>>>0) < (($17)>>>0);
      if ($cmp) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=16;
      __label__ = 113; break;
    case 9: 
      var $18=$g_addr;
      var $must=(($18+60)|0);
      var $19=HEAP32[(($must)>>2)];
      var $cmp10=(($19)|0)!=0;
      if ($cmp10) { __label__ = 10; break; } else { __label__ = 47; break; }
    case 10: 
      var $20=$g_addr;
      var $charjump12=(($20+68)|0);
      var $21=HEAP32[(($charjump12)>>2)];
      var $cmp13=(($21)|0)!=0;
      if ($cmp13) { __label__ = 11; break; } else { __label__ = 35; break; }
    case 11: 
      var $22=$g_addr;
      var $matchjump14=(($22+72)|0);
      var $23=HEAP32[(($matchjump14)>>2)];
      var $cmp15=(($23)|0)!=0;
      if ($cmp15) { __label__ = 12; break; } else { __label__ = 35; break; }
    case 12: 
      var $24=$g_addr;
      var $must17=(($24+60)|0);
      var $25=HEAP32[(($must17)>>2)];
      $mustfirst=$25;
      var $26=$g_addr;
      var $must18=(($26+60)|0);
      var $27=HEAP32[(($must18)>>2)];
      var $28=$g_addr;
      var $mlen=(($28+76)|0);
      var $29=HEAP32[(($mlen)>>2)];
      var $add_ptr19=(($27+$29)|0);
      var $add_ptr20=((($add_ptr19)-(1))|0);
      $mustlast=$add_ptr20;
      var $30=$g_addr;
      var $charjump21=(($30+68)|0);
      var $31=HEAP32[(($charjump21)>>2)];
      $charjump=$31;
      var $32=$g_addr;
      var $matchjump22=(($32+72)|0);
      var $33=HEAP32[(($matchjump22)>>2)];
      $matchjump=$33;
      var $34=$mustlast;
      $pp=$34;
      var $35=$start;
      var $36=$g_addr;
      var $mlen23=(($36+76)|0);
      var $37=HEAP32[(($mlen23)>>2)];
      var $add_ptr24=(($35+$37)|0);
      var $add_ptr25=((($add_ptr24)-(1))|0);
      $dp=$add_ptr25;
      __label__ = 13; break;
    case 13: 
      var $38=$dp;
      var $39=$stop;
      var $cmp26=(($38)>>>0) < (($39)>>>0);
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 32; break; }
    case 14: 
      __label__ = 15; break;
    case 15: 
      var $40=$dp;
      var $41=$stop;
      var $cmp27=(($40)>>>0) < (($41)>>>0);
      if ($cmp27) { __label__ = 16; break; } else { var $46 = 0;__label__ = 17; break; }
    case 16: 
      var $42=$dp;
      var $43=HEAP8[($42)];
      var $idxprom=(($43 << 24) >> 24);
      var $44=$charjump;
      var $arrayidx28=(($44+($idxprom<<2))|0);
      var $45=HEAP32[(($arrayidx28)>>2)];
      var $tobool29=(($45)|0)!=0;
      var $46 = $tobool29;__label__ = 17; break;
    case 17: 
      var $46;
      if ($46) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $47=$dp;
      var $48=HEAP8[($47)];
      var $idxprom30=(($48 << 24) >> 24);
      var $49=$charjump;
      var $arrayidx31=(($49+($idxprom30<<2))|0);
      var $50=HEAP32[(($arrayidx31)>>2)];
      var $51=$dp;
      var $add_ptr32=(($51+$50)|0);
      $dp=$add_ptr32;
      __label__ = 15; break;
    case 19: 
      var $52=$dp;
      var $53=$stop;
      var $cmp33=(($52)>>>0) >= (($53)>>>0);
      if ($cmp33) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      __label__ = 32; break;
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $54=$dp;
      var $incdec_ptr=((($54)-(1))|0);
      $dp=$incdec_ptr;
      var $55=HEAP8[($incdec_ptr)];
      var $conv=(($55 << 24) >> 24);
      var $56=$pp;
      var $incdec_ptr37=((($56)-(1))|0);
      $pp=$incdec_ptr37;
      var $57=HEAP8[($incdec_ptr37)];
      var $conv38=(($57 << 24) >> 24);
      var $cmp39=(($conv)|0)==(($conv38)|0);
      if ($cmp39) { __label__ = 23; break; } else { var $60 = 0;__label__ = 24; break; }
    case 23: 
      var $58=$pp;
      var $59=$mustfirst;
      var $cmp42=(($58)|0)!=(($59)|0);
      var $60 = $cmp42;__label__ = 24; break;
    case 24: 
      var $60;
      if ($60) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      __label__ = 22; break;
    case 26: 
      var $61=$dp;
      var $62=HEAP8[($61)];
      var $conv47=(($62 << 24) >> 24);
      var $63=$pp;
      var $64=HEAP8[($63)];
      var $conv48=(($64 << 24) >> 24);
      var $cmp49=(($conv47)|0)==(($conv48)|0);
      if ($cmp49) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      __label__ = 32; break;
    case 28: 
      var $65=$pp;
      var $66=$mustfirst;
      var $sub_ptr_lhs_cast=$65;
      var $sub_ptr_rhs_cast=$66;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $67=$matchjump;
      var $arrayidx53=(($67+($sub_ptr_sub<<2))|0);
      var $68=HEAP32[(($arrayidx53)>>2)];
      $mj=$68;
      var $69=$dp;
      var $70=HEAP8[($69)];
      var $idxprom54=(($70 << 24) >> 24);
      var $71=$charjump;
      var $arrayidx55=(($71+($idxprom54<<2))|0);
      var $72=HEAP32[(($arrayidx55)>>2)];
      $cj=$72;
      var $73=$cj;
      var $74=$mj;
      var $cmp56=(($73)|0) < (($74)|0);
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 30; break; }
    case 29: 
      var $75=$mj;
      var $cond = $75;__label__ = 31; break;
    case 30: 
      var $76=$cj;
      var $cond = $76;__label__ = 31; break;
    case 31: 
      var $cond;
      var $77=$dp;
      var $add_ptr58=(($77+$cond)|0);
      $dp=$add_ptr58;
      var $78=$mustlast;
      $pp=$78;
      __label__ = 13; break;
    case 32: 
      var $79=$pp;
      var $80=$mustfirst;
      var $cmp59=(($79)|0)!=(($80)|0);
      if ($cmp59) { __label__ = 33; break; } else { __label__ = 34; break; }
    case 33: 
      $retval=1;
      __label__ = 113; break;
    case 34: 
      __label__ = 46; break;
    case 35: 
      var $81=$start;
      $dp=$81;
      __label__ = 36; break;
    case 36: 
      var $82=$dp;
      var $83=$stop;
      var $cmp65=(($82)>>>0) < (($83)>>>0);
      if ($cmp65) { __label__ = 37; break; } else { __label__ = 43; break; }
    case 37: 
      var $84=$dp;
      var $85=HEAP8[($84)];
      var $conv68=(($85 << 24) >> 24);
      var $86=$g_addr;
      var $must69=(($86+60)|0);
      var $87=HEAP32[(($must69)>>2)];
      var $arrayidx70=(($87)|0);
      var $88=HEAP8[($arrayidx70)];
      var $conv71=(($88 << 24) >> 24);
      var $cmp72=(($conv68)|0)==(($conv71)|0);
      if ($cmp72) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $89=$stop;
      var $90=$dp;
      var $sub_ptr_lhs_cast75=$89;
      var $sub_ptr_rhs_cast76=$90;
      var $sub_ptr_sub77=((($sub_ptr_lhs_cast75)-($sub_ptr_rhs_cast76))|0);
      var $91=$g_addr;
      var $mlen78=(($91+76)|0);
      var $92=HEAP32[(($mlen78)>>2)];
      var $cmp79=(($sub_ptr_sub77)|0) >= (($92)|0);
      if ($cmp79) { __label__ = 39; break; } else { __label__ = 41; break; }
    case 39: 
      var $93=$dp;
      var $94=$g_addr;
      var $must82=(($94+60)|0);
      var $95=HEAP32[(($must82)>>2)];
      var $96=$g_addr;
      var $mlen83=(($96+76)|0);
      var $97=HEAP32[(($mlen83)>>2)];
      var $call84=_memcmp($93, $95, $97);
      var $cmp85=(($call84)|0)==0;
      if ($cmp85) { __label__ = 40; break; } else { __label__ = 41; break; }
    case 40: 
      __label__ = 43; break;
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $98=$dp;
      var $incdec_ptr89=(($98+1)|0);
      $dp=$incdec_ptr89;
      __label__ = 36; break;
    case 43: 
      var $99=$dp;
      var $100=$stop;
      var $cmp91=(($99)|0)==(($100)|0);
      if ($cmp91) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      $retval=1;
      __label__ = 113; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 47; break;
    case 47: 
      var $101=$g_addr;
      var $102=$m;
      var $g97=(($102)|0);
      HEAP32[(($g97)>>2)]=$101;
      var $103=$eflags_addr;
      var $104=$m;
      var $eflags98=(($104+4)|0);
      HEAP32[(($eflags98)>>2)]=$103;
      var $105=$m;
      var $pmatch99=(($105+8)|0);
      HEAP32[(($pmatch99)>>2)]=0;
      var $106=$m;
      var $lastpos=(($106+28)|0);
      HEAP32[(($lastpos)>>2)]=0;
      var $107=$string_addr;
      var $108=$m;
      var $offp=(($108+12)|0);
      HEAP32[(($offp)>>2)]=$107;
      var $109=$start;
      var $110=$m;
      var $beginp=(($110+16)|0);
      HEAP32[(($beginp)>>2)]=$109;
      var $111=$stop;
      var $112=$m;
      var $endp100=(($112+20)|0);
      HEAP32[(($endp100)>>2)]=$111;
      var $113=$m;
      var $g101=(($113)|0);
      var $114=HEAP32[(($g101)>>2)];
      var $nstates=(($114+28)|0);
      var $115=HEAP32[(($nstates)>>2)];
      var $mul=((($115<<2))|0);
      var $call102=_malloc($mul);
      var $116=$m;
      var $space=(($116+36)|0);
      HEAP32[(($space)>>2)]=$call102;
      var $117=$m;
      var $space103=(($117+36)|0);
      var $118=HEAP32[(($space103)>>2)];
      var $cmp104=(($118)|0)==0;
      if ($cmp104) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      $retval=12;
      __label__ = 113; break;
    case 49: 
      var $119=$m;
      var $vn=(($119+32)|0);
      HEAP32[(($vn)>>2)]=0;
      var $120=$m;
      var $vn108=(($120+32)|0);
      var $121=HEAP32[(($vn108)>>2)];
      var $inc=((($121)+(1))|0);
      HEAP32[(($vn108)>>2)]=$inc;
      var $122=$m;
      var $g109=(($122)|0);
      var $123=HEAP32[(($g109)>>2)];
      var $nstates110=(($123+28)|0);
      var $124=HEAP32[(($nstates110)>>2)];
      var $mul111=((($121)*($124))|0);
      var $125=$m;
      var $space112=(($125+36)|0);
      var $126=HEAP32[(($space112)>>2)];
      var $arrayidx113=(($126+$mul111)|0);
      var $127=$m;
      var $st=(($127+40)|0);
      HEAP32[(($st)>>2)]=$arrayidx113;
      var $128=$m;
      var $vn114=(($128+32)|0);
      var $129=HEAP32[(($vn114)>>2)];
      var $inc115=((($129)+(1))|0);
      HEAP32[(($vn114)>>2)]=$inc115;
      var $130=$m;
      var $g116=(($130)|0);
      var $131=HEAP32[(($g116)>>2)];
      var $nstates117=(($131+28)|0);
      var $132=HEAP32[(($nstates117)>>2)];
      var $mul118=((($129)*($132))|0);
      var $133=$m;
      var $space119=(($133+36)|0);
      var $134=HEAP32[(($space119)>>2)];
      var $arrayidx120=(($134+$mul118)|0);
      var $135=$m;
      var $fresh=(($135+44)|0);
      HEAP32[(($fresh)>>2)]=$arrayidx120;
      var $136=$m;
      var $vn121=(($136+32)|0);
      var $137=HEAP32[(($vn121)>>2)];
      var $inc122=((($137)+(1))|0);
      HEAP32[(($vn121)>>2)]=$inc122;
      var $138=$m;
      var $g123=(($138)|0);
      var $139=HEAP32[(($g123)>>2)];
      var $nstates124=(($139+28)|0);
      var $140=HEAP32[(($nstates124)>>2)];
      var $mul125=((($137)*($140))|0);
      var $141=$m;
      var $space126=(($141+36)|0);
      var $142=HEAP32[(($space126)>>2)];
      var $arrayidx127=(($142+$mul125)|0);
      var $143=$m;
      var $tmp=(($143+48)|0);
      HEAP32[(($tmp)>>2)]=$arrayidx127;
      var $144=$m;
      var $vn128=(($144+32)|0);
      var $145=HEAP32[(($vn128)>>2)];
      var $inc129=((($145)+(1))|0);
      HEAP32[(($vn128)>>2)]=$inc129;
      var $146=$m;
      var $g130=(($146)|0);
      var $147=HEAP32[(($g130)>>2)];
      var $nstates131=(($147+28)|0);
      var $148=HEAP32[(($nstates131)>>2)];
      var $mul132=((($145)*($148))|0);
      var $149=$m;
      var $space133=(($149+36)|0);
      var $150=HEAP32[(($space133)>>2)];
      var $arrayidx134=(($150+$mul132)|0);
      var $151=$m;
      var $empty=(($151+52)|0);
      HEAP32[(($empty)>>2)]=$arrayidx134;
      var $152=$m;
      var $empty135=(($152+52)|0);
      var $153=HEAP32[(($empty135)>>2)];
      var $154=$m;
      var $g136=(($154)|0);
      var $155=HEAP32[(($g136)>>2)];
      var $nstates137=(($155+28)|0);
      var $156=HEAP32[(($nstates137)>>2)];
      _memset($153, 0, $156, 1);
      var $157=$g_addr;
      var $moffset=(($157+64)|0);
      var $158=HEAP32[(($moffset)>>2)];
      var $cmp138=(($158)|0) > -1;
      if ($cmp138) { __label__ = 50; break; } else { __label__ = 54; break; }
    case 50: 
      var $159=$dp;
      var $160=$g_addr;
      var $moffset141=(($160+64)|0);
      var $161=HEAP32[(($moffset141)>>2)];
      var $idx_neg=(((-$161))|0);
      var $add_ptr142=(($159+$idx_neg)|0);
      var $162=$start;
      var $cmp143=(($add_ptr142)>>>0) < (($162)>>>0);
      if ($cmp143) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $163=$start;
      var $cond151 = $163;__label__ = 53; break;
    case 52: 
      var $164=$dp;
      var $165=$g_addr;
      var $moffset147=(($165+64)|0);
      var $166=HEAP32[(($moffset147)>>2)];
      var $idx_neg148=(((-$166))|0);
      var $add_ptr149=(($164+$idx_neg148)|0);
      var $cond151 = $add_ptr149;__label__ = 53; break;
    case 53: 
      var $cond151;
      $start=$cond151;
      __label__ = 54; break;
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $167=$m;
      var $168=$start;
      var $169=$stop;
      var $170=$gf;
      var $171=$gl;
      var $call154=_lfast($167, $168, $169, $170, $171);
      $endp=$call154;
      var $172=$endp;
      var $cmp155=(($172)|0)==0;
      if ($cmp155) { __label__ = 56; break; } else { __label__ = 57; break; }
    case 56: 
      var $173=$m;
      var $space158=(($173+36)|0);
      var $174=HEAP32[(($space158)>>2)];
      _free($174);
      $retval=1;
      __label__ = 113; break;
    case 57: 
      var $175=$nmatch_addr;
      var $cmp160=(($175)|0)==0;
      if ($cmp160) { __label__ = 58; break; } else { __label__ = 60; break; }
    case 58: 
      var $176=$g_addr;
      var $backrefs=(($176+84)|0);
      var $177=HEAP32[(($backrefs)>>2)];
      var $tobool163=(($177)|0)!=0;
      if ($tobool163) { __label__ = 60; break; } else { __label__ = 59; break; }
    case 59: 
      __label__ = 97; break;
    case 60: 
      __label__ = 61; break;
    case 61: 
      var $178=$m;
      var $179=$m;
      var $coldp=(($179+24)|0);
      var $180=HEAP32[(($coldp)>>2)];
      var $181=$stop;
      var $182=$gf;
      var $183=$gl;
      var $call167=_lslow($178, $180, $181, $182, $183);
      $endp=$call167;
      var $184=$endp;
      var $cmp168=(($184)|0)!=0;
      if ($cmp168) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      __label__ = 64; break;
    case 63: 
      var $185=$m;
      var $coldp172=(($185+24)|0);
      var $186=HEAP32[(($coldp172)>>2)];
      var $incdec_ptr173=(($186+1)|0);
      HEAP32[(($coldp172)>>2)]=$incdec_ptr173;
      __label__ = 61; break;
    case 64: 
      var $187=$nmatch_addr;
      var $cmp175=(($187)|0)==1;
      if ($cmp175) { __label__ = 65; break; } else { __label__ = 67; break; }
    case 65: 
      var $188=$g_addr;
      var $backrefs178=(($188+84)|0);
      var $189=HEAP32[(($backrefs178)>>2)];
      var $tobool179=(($189)|0)!=0;
      if ($tobool179) { __label__ = 67; break; } else { __label__ = 66; break; }
    case 66: 
      __label__ = 97; break;
    case 67: 
      var $190=$m;
      var $pmatch182=(($190+8)|0);
      var $191=HEAP32[(($pmatch182)>>2)];
      var $cmp183=(($191)|0)==0;
      if ($cmp183) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $192=$m;
      var $g186=(($192)|0);
      var $193=HEAP32[(($g186)>>2)];
      var $nsub=(($193+80)|0);
      var $194=HEAP32[(($nsub)>>2)];
      var $add187=((($194)+(1))|0);
      var $mul188=((($add187<<3))|0);
      var $call189=_malloc($mul188);
      var $195=$call189;
      var $196=$m;
      var $pmatch190=(($196+8)|0);
      HEAP32[(($pmatch190)>>2)]=$195;
      __label__ = 69; break;
    case 69: 
      var $197=$m;
      var $pmatch192=(($197+8)|0);
      var $198=HEAP32[(($pmatch192)>>2)];
      var $cmp193=(($198)|0)==0;
      if ($cmp193) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $199=$m;
      var $space196=(($199+36)|0);
      var $200=HEAP32[(($space196)>>2)];
      _free($200);
      $retval=12;
      __label__ = 113; break;
    case 71: 
      $i=1;
      __label__ = 72; break;
    case 72: 
      var $201=$i;
      var $202=$m;
      var $g199=(($202)|0);
      var $203=HEAP32[(($g199)>>2)];
      var $nsub200=(($203+80)|0);
      var $204=HEAP32[(($nsub200)>>2)];
      var $cmp201=(($201)>>>0) <= (($204)>>>0);
      if ($cmp201) { __label__ = 73; break; } else { __label__ = 75; break; }
    case 73: 
      var $205=$i;
      var $206=$m;
      var $pmatch204=(($206+8)|0);
      var $207=HEAP32[(($pmatch204)>>2)];
      var $arrayidx205=(($207+($205<<3))|0);
      var $rm_eo206=(($arrayidx205+4)|0);
      HEAP32[(($rm_eo206)>>2)]=-1;
      var $208=$i;
      var $209=$m;
      var $pmatch207=(($209+8)|0);
      var $210=HEAP32[(($pmatch207)>>2)];
      var $arrayidx208=(($210+($208<<3))|0);
      var $rm_so209=(($arrayidx208)|0);
      HEAP32[(($rm_so209)>>2)]=-1;
      __label__ = 74; break;
    case 74: 
      var $211=$i;
      var $inc211=((($211)+(1))|0);
      $i=$inc211;
      __label__ = 72; break;
    case 75: 
      var $212=$g_addr;
      var $backrefs213=(($212+84)|0);
      var $213=HEAP32[(($backrefs213)>>2)];
      var $tobool214=(($213)|0)!=0;
      if ($tobool214) { __label__ = 78; break; } else { __label__ = 76; break; }
    case 76: 
      var $214=$m;
      var $eflags216=(($214+4)|0);
      var $215=HEAP32[(($eflags216)>>2)];
      var $and217=$215 & 1024;
      var $tobool218=(($and217)|0)!=0;
      if ($tobool218) { __label__ = 78; break; } else { __label__ = 77; break; }
    case 77: 
      var $216=$m;
      var $217=$m;
      var $coldp220=(($217+24)|0);
      var $218=HEAP32[(($coldp220)>>2)];
      var $219=$endp;
      var $220=$gf;
      var $221=$gl;
      var $call221=_ldissect($216, $218, $219, $220, $221);
      $dp=$call221;
      __label__ = 85; break;
    case 78: 
      var $222=$g_addr;
      var $nplus=(($222+88)|0);
      var $223=HEAP32[(($nplus)>>2)];
      var $cmp223=(($223)|0) > 0;
      if ($cmp223) { __label__ = 79; break; } else { __label__ = 81; break; }
    case 79: 
      var $224=$m;
      var $lastpos226=(($224+28)|0);
      var $225=HEAP32[(($lastpos226)>>2)];
      var $cmp227=(($225)|0)==0;
      if ($cmp227) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $226=$g_addr;
      var $nplus230=(($226+88)|0);
      var $227=HEAP32[(($nplus230)>>2)];
      var $add231=((($227)+(1))|0);
      var $mul232=((($add231<<2))|0);
      var $call233=_malloc($mul232);
      var $228=$call233;
      var $229=$m;
      var $lastpos234=(($229+28)|0);
      HEAP32[(($lastpos234)>>2)]=$228;
      __label__ = 81; break;
    case 81: 
      var $230=$g_addr;
      var $nplus236=(($230+88)|0);
      var $231=HEAP32[(($nplus236)>>2)];
      var $cmp237=(($231)|0) > 0;
      if ($cmp237) { __label__ = 82; break; } else { __label__ = 84; break; }
    case 82: 
      var $232=$m;
      var $lastpos240=(($232+28)|0);
      var $233=HEAP32[(($lastpos240)>>2)];
      var $cmp241=(($233)|0)==0;
      if ($cmp241) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $234=$m;
      var $pmatch244=(($234+8)|0);
      var $235=HEAP32[(($pmatch244)>>2)];
      var $236=$235;
      _free($236);
      var $237=$m;
      var $space245=(($237+36)|0);
      var $238=HEAP32[(($space245)>>2)];
      _free($238);
      $retval=12;
      __label__ = 113; break;
    case 84: 
      var $239=$m;
      var $240=$m;
      var $coldp247=(($240+24)|0);
      var $241=HEAP32[(($coldp247)>>2)];
      var $242=$endp;
      var $243=$gf;
      var $244=$gl;
      var $call248=_lbackref($239, $241, $242, $243, $244, 0);
      $dp=$call248;
      __label__ = 85; break;
    case 85: 
      var $245=$dp;
      var $cmp250=(($245)|0)!=0;
      if ($cmp250) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      __label__ = 97; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      var $246=$dp;
      var $cmp255=(($246)|0)!=0;
      if ($cmp255) { __label__ = 90; break; } else { __label__ = 89; break; }
    case 89: 
      var $247=$endp;
      var $248=$m;
      var $coldp257=(($248+24)|0);
      var $249=HEAP32[(($coldp257)>>2)];
      var $cmp258=(($247)>>>0) <= (($249)>>>0);
      if ($cmp258) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      __label__ = 94; break;
    case 91: 
      var $250=$m;
      var $251=$m;
      var $coldp262=(($251+24)|0);
      var $252=HEAP32[(($coldp262)>>2)];
      var $253=$endp;
      var $add_ptr263=((($253)-(1))|0);
      var $254=$gf;
      var $255=$gl;
      var $call264=_lslow($250, $252, $add_ptr263, $254, $255);
      $endp=$call264;
      var $256=$endp;
      var $cmp265=(($256)|0)==0;
      if ($cmp265) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: 
      __label__ = 94; break;
    case 93: 
      var $257=$m;
      var $258=$m;
      var $coldp269=(($258+24)|0);
      var $259=HEAP32[(($coldp269)>>2)];
      var $260=$endp;
      var $261=$gf;
      var $262=$gl;
      var $call270=_lbackref($257, $259, $260, $261, $262, 0);
      $dp=$call270;
      __label__ = 88; break;
    case 94: 
      var $263=$dp;
      var $cmp272=(($263)|0)!=0;
      if ($cmp272) { __label__ = 95; break; } else { __label__ = 96; break; }
    case 95: 
      __label__ = 97; break;
    case 96: 
      var $264=$m;
      var $coldp276=(($264+24)|0);
      var $265=HEAP32[(($coldp276)>>2)];
      var $add_ptr277=(($265+1)|0);
      $start=$add_ptr277;
      __label__ = 55; break;
    case 97: 
      var $266=$nmatch_addr;
      var $cmp279=(($266)>>>0) > 0;
      if ($cmp279) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      var $267=$m;
      var $coldp282=(($267+24)|0);
      var $268=HEAP32[(($coldp282)>>2)];
      var $269=$m;
      var $offp283=(($269+12)|0);
      var $270=HEAP32[(($offp283)>>2)];
      var $sub_ptr_lhs_cast284=$268;
      var $sub_ptr_rhs_cast285=$270;
      var $sub_ptr_sub286=((($sub_ptr_lhs_cast284)-($sub_ptr_rhs_cast285))|0);
      var $271=$pmatch_addr;
      var $arrayidx287=(($271)|0);
      var $rm_so288=(($arrayidx287)|0);
      HEAP32[(($rm_so288)>>2)]=$sub_ptr_sub286;
      var $272=$endp;
      var $273=$m;
      var $offp289=(($273+12)|0);
      var $274=HEAP32[(($offp289)>>2)];
      var $sub_ptr_lhs_cast290=$272;
      var $sub_ptr_rhs_cast291=$274;
      var $sub_ptr_sub292=((($sub_ptr_lhs_cast290)-($sub_ptr_rhs_cast291))|0);
      var $275=$pmatch_addr;
      var $arrayidx293=(($275)|0);
      var $rm_eo294=(($arrayidx293+4)|0);
      HEAP32[(($rm_eo294)>>2)]=$sub_ptr_sub292;
      __label__ = 99; break;
    case 99: 
      var $276=$nmatch_addr;
      var $cmp296=(($276)>>>0) > 1;
      if ($cmp296) { __label__ = 100; break; } else { __label__ = 108; break; }
    case 100: 
      $i=1;
      __label__ = 101; break;
    case 101: 
      var $277=$i;
      var $278=$nmatch_addr;
      var $cmp300=(($277)>>>0) < (($278)>>>0);
      if ($cmp300) { __label__ = 102; break; } else { __label__ = 107; break; }
    case 102: 
      var $279=$i;
      var $280=$m;
      var $g303=(($280)|0);
      var $281=HEAP32[(($g303)>>2)];
      var $nsub304=(($281+80)|0);
      var $282=HEAP32[(($nsub304)>>2)];
      var $cmp305=(($279)>>>0) <= (($282)>>>0);
      if ($cmp305) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $283=$i;
      var $284=$pmatch_addr;
      var $arrayidx308=(($284+($283<<3))|0);
      var $285=$i;
      var $286=$m;
      var $pmatch309=(($286+8)|0);
      var $287=HEAP32[(($pmatch309)>>2)];
      var $arrayidx310=(($287+($285<<3))|0);
      var $288=$arrayidx308;
      var $289=$arrayidx310;
      assert(8 % 1 === 0, 'memcpy given ' + 8 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($288)>>2)]=HEAP32[(($289)>>2)];HEAP32[((($288)+(4))>>2)]=HEAP32[((($289)+(4))>>2)];
      __label__ = 105; break;
    case 104: 
      var $290=$i;
      var $291=$pmatch_addr;
      var $arrayidx312=(($291+($290<<3))|0);
      var $rm_so313=(($arrayidx312)|0);
      HEAP32[(($rm_so313)>>2)]=-1;
      var $292=$i;
      var $293=$pmatch_addr;
      var $arrayidx314=(($293+($292<<3))|0);
      var $rm_eo315=(($arrayidx314+4)|0);
      HEAP32[(($rm_eo315)>>2)]=-1;
      __label__ = 105; break;
    case 105: 
      __label__ = 106; break;
    case 106: 
      var $294=$i;
      var $inc318=((($294)+(1))|0);
      $i=$inc318;
      __label__ = 101; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      var $295=$m;
      var $pmatch321=(($295+8)|0);
      var $296=HEAP32[(($pmatch321)>>2)];
      var $cmp322=(($296)|0)!=0;
      if ($cmp322) { __label__ = 109; break; } else { __label__ = 110; break; }
    case 109: 
      var $297=$m;
      var $pmatch325=(($297+8)|0);
      var $298=HEAP32[(($pmatch325)>>2)];
      var $299=$298;
      _free($299);
      __label__ = 110; break;
    case 110: 
      var $300=$m;
      var $lastpos327=(($300+28)|0);
      var $301=HEAP32[(($lastpos327)>>2)];
      var $cmp328=(($301)|0)!=0;
      if ($cmp328) { __label__ = 111; break; } else { __label__ = 112; break; }
    case 111: 
      var $302=$m;
      var $lastpos331=(($302+28)|0);
      var $303=HEAP32[(($lastpos331)>>2)];
      var $304=$303;
      _free($304);
      __label__ = 112; break;
    case 112: 
      var $305=$m;
      var $space333=(($305+36)|0);
      var $306=HEAP32[(($space333)>>2)];
      _free($306);
      $retval=0;
      __label__ = 113; break;
    case 113: 
      var $307=$retval;
      STACKTOP = __stackBase__;
      return $307;
    default: assert(0, "bad label: " + __label__);
  }
}
_lmatcher["X"]=1;

function _lfast($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $st;
      var $fresh;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $coldp;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      var $0=$m_addr;
      var $st1=(($0+40)|0);
      var $1=HEAP32[(($st1)>>2)];
      $st=$1;
      var $2=$m_addr;
      var $fresh2=(($2+44)|0);
      var $3=HEAP32[(($fresh2)>>2)];
      $fresh=$3;
      var $4=$m_addr;
      var $tmp3=(($4+48)|0);
      var $5=HEAP32[(($tmp3)>>2)];
      $tmp=$5;
      var $6=$start_addr;
      $p=$6;
      var $7=$start_addr;
      var $8=$m_addr;
      var $beginp=(($8+16)|0);
      var $9=HEAP32[(($beginp)>>2)];
      var $cmp=(($7)|0)==(($9)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $cond = 128;__label__ = 5; break;
    case 4: 
      var $10=$start_addr;
      var $add_ptr=((($10)-(1))|0);
      var $11=HEAP8[($add_ptr)];
      var $conv=(($11 << 24) >> 24);
      var $cond = $conv;__label__ = 5; break;
    case 5: 
      var $cond;
      $c=$cond;
      var $12=$st;
      var $13=$m_addr;
      var $g=(($13)|0);
      var $14=HEAP32[(($g)>>2)];
      var $nstates=(($14+28)|0);
      var $15=HEAP32[(($nstates)>>2)];
      _memset($12, 0, $15, 1);
      var $16=$startst_addr;
      var $17=$st;
      var $arrayidx=(($17+$16)|0);
      HEAP8[($arrayidx)]=1;
      var $18=$m_addr;
      var $g10=(($18)|0);
      var $19=HEAP32[(($g10)>>2)];
      var $20=$startst_addr;
      var $21=$stopst_addr;
      var $22=$st;
      var $23=$st;
      var $call=_lstep($19, $20, $21, $22, 132, $23);
      $st=$call;
      var $24=$fresh;
      var $25=$st;
      var $26=$m_addr;
      var $g11=(($26)|0);
      var $27=HEAP32[(($g11)>>2)];
      var $nstates12=(($27+28)|0);
      var $28=HEAP32[(($nstates12)>>2)];
      assert($28 % 1 === 0, 'memcpy given ' + $28 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($24, $25, $28, 1);
      $coldp=0;
      __label__ = 6; break;
    case 6: 
      var $29=$c;
      $lastc=$29;
      var $30=$p;
      var $31=$m_addr;
      var $endp=(($31+20)|0);
      var $32=HEAP32[(($endp)>>2)];
      var $cmp13=(($30)|0)==(($32)|0);
      if ($cmp13) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $cond19 = 128;__label__ = 9; break;
    case 8: 
      var $33=$p;
      var $34=HEAP8[($33)];
      var $conv17=(($34 << 24) >> 24);
      var $cond19 = $conv17;__label__ = 9; break;
    case 9: 
      var $cond19;
      $c=$cond19;
      var $35=$st;
      var $36=$fresh;
      var $37=$m_addr;
      var $g20=(($37)|0);
      var $38=HEAP32[(($g20)>>2)];
      var $nstates21=(($38+28)|0);
      var $39=HEAP32[(($nstates21)>>2)];
      var $call22=_memcmp($35, $36, $39);
      var $cmp23=(($call22)|0)==0;
      if ($cmp23) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $40=$p;
      $coldp=$40;
      __label__ = 11; break;
    case 11: 
      $flagch=0;
      $i=0;
      var $41=$lastc;
      var $cmp25=(($41)|0)==10;
      if ($cmp25) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $42=$m_addr;
      var $g27=(($42)|0);
      var $43=HEAP32[(($g27)>>2)];
      var $cflags=(($43+24)|0);
      var $44=HEAP32[(($cflags)>>2)];
      var $and=$44 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 15; break; } else { __label__ = 13; break; }
    case 13: 
      var $45=$lastc;
      var $cmp28=(($45)|0)==128;
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $46=$m_addr;
      var $eflags=(($46+4)|0);
      var $47=HEAP32[(($eflags)>>2)];
      var $and31=$47 & 1;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      $flagch=129;
      var $48=$m_addr;
      var $g34=(($48)|0);
      var $49=HEAP32[(($g34)>>2)];
      var $nbol=(($49+44)|0);
      var $50=HEAP32[(($nbol)>>2)];
      $i=$50;
      __label__ = 16; break;
    case 16: 
      var $51=$c;
      var $cmp36=(($51)|0)==10;
      if ($cmp36) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $52=$m_addr;
      var $g39=(($52)|0);
      var $53=HEAP32[(($g39)>>2)];
      var $cflags40=(($53+24)|0);
      var $54=HEAP32[(($cflags40)>>2)];
      var $and41=$54 & 8;
      var $tobool42=(($and41)|0)!=0;
      if ($tobool42) { __label__ = 20; break; } else { __label__ = 18; break; }
    case 18: 
      var $55=$c;
      var $cmp44=(($55)|0)==128;
      if ($cmp44) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $56=$m_addr;
      var $eflags47=(($56+4)|0);
      var $57=HEAP32[(($eflags47)>>2)];
      var $and48=$57 & 2;
      var $tobool49=(($and48)|0)!=0;
      if ($tobool49) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $58=$flagch;
      var $cmp51=(($58)|0)==129;
      var $cond53=$cmp51 ? 131 : 130;
      $flagch=$cond53;
      var $59=$m_addr;
      var $g54=(($59)|0);
      var $60=HEAP32[(($g54)>>2)];
      var $neol=(($60+48)|0);
      var $61=HEAP32[(($neol)>>2)];
      var $62=$i;
      var $add=((($62)+($61))|0);
      $i=$add;
      __label__ = 21; break;
    case 21: 
      var $63=$i;
      var $cmp56=(($63)|0)!=0;
      if ($cmp56) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $64=$i;
      var $cmp60=(($64)|0) > 0;
      if ($cmp60) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $65=$m_addr;
      var $g62=(($65)|0);
      var $66=HEAP32[(($g62)>>2)];
      var $67=$startst_addr;
      var $68=$stopst_addr;
      var $69=$st;
      var $70=$flagch;
      var $71=$st;
      var $call63=_lstep($66, $67, $68, $69, $70, $71);
      $st=$call63;
      __label__ = 25; break;
    case 25: 
      var $72=$i;
      var $dec=((($72)-(1))|0);
      $i=$dec;
      __label__ = 23; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $73=$flagch;
      var $cmp65=(($73)|0)==129;
      if ($cmp65) { __label__ = 31; break; } else { __label__ = 28; break; }
    case 28: 
      var $74=$lastc;
      var $cmp68=(($74)|0)!=128;
      if ($cmp68) { __label__ = 29; break; } else { __label__ = 35; break; }
    case 29: 
      var $75=$lastc;
      var $conv71=(($75) & 255);
      var $conv72=(($conv71)&255);
      var $call73=_isalnum($conv72);
      var $tobool74=(($call73)|0)!=0;
      if ($tobool74) { __label__ = 35; break; } else { __label__ = 30; break; }
    case 30: 
      var $76=$lastc;
      var $cmp76=(($76)|0)==95;
      if ($cmp76) { __label__ = 35; break; } else { __label__ = 31; break; }
    case 31: 
      var $77=$c;
      var $cmp79=(($77)|0)!=128;
      if ($cmp79) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $78=$c;
      var $conv82=(($78) & 255);
      var $conv83=(($conv82)&255);
      var $call84=_isalnum($conv83);
      var $tobool85=(($call84)|0)!=0;
      if ($tobool85) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $79=$c;
      var $cmp87=(($79)|0)==95;
      if ($cmp87) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      $flagch=133;
      __label__ = 35; break;
    case 35: 
      var $80=$lastc;
      var $cmp91=(($80)|0)!=128;
      if ($cmp91) { __label__ = 36; break; } else { __label__ = 43; break; }
    case 36: 
      var $81=$lastc;
      var $conv94=(($81) & 255);
      var $conv95=(($conv94)&255);
      var $call96=_isalnum($conv95);
      var $tobool97=(($call96)|0)!=0;
      if ($tobool97) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $82=$lastc;
      var $cmp99=(($82)|0)==95;
      if ($cmp99) { __label__ = 38; break; } else { __label__ = 43; break; }
    case 38: 
      var $83=$flagch;
      var $cmp102=(($83)|0)==130;
      if ($cmp102) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $84=$c;
      var $cmp105=(($84)|0)!=128;
      if ($cmp105) { __label__ = 40; break; } else { __label__ = 43; break; }
    case 40: 
      var $85=$c;
      var $conv108=(($85) & 255);
      var $conv109=(($conv108)&255);
      var $call110=_isalnum($conv109);
      var $tobool111=(($call110)|0)!=0;
      if ($tobool111) { __label__ = 43; break; } else { __label__ = 41; break; }
    case 41: 
      var $86=$c;
      var $cmp113=(($86)|0)==95;
      if ($cmp113) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      $flagch=134;
      __label__ = 43; break;
    case 43: 
      var $87=$flagch;
      var $cmp117=(($87)|0)==133;
      if ($cmp117) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $88=$flagch;
      var $cmp120=(($88)|0)==134;
      if ($cmp120) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $89=$m_addr;
      var $g123=(($89)|0);
      var $90=HEAP32[(($g123)>>2)];
      var $91=$startst_addr;
      var $92=$stopst_addr;
      var $93=$st;
      var $94=$flagch;
      var $95=$st;
      var $call124=_lstep($90, $91, $92, $93, $94, $95);
      $st=$call124;
      __label__ = 46; break;
    case 46: 
      var $96=$stopst_addr;
      var $97=$st;
      var $arrayidx126=(($97+$96)|0);
      var $98=HEAP8[($arrayidx126)];
      var $conv127=(($98 << 24) >> 24);
      var $tobool128=(($conv127)|0)!=0;
      if ($tobool128) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $99=$p;
      var $100=$stop_addr;
      var $cmp130=(($99)|0)==(($100)|0);
      if ($cmp130) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $101=$tmp;
      var $102=$st;
      var $103=$m_addr;
      var $g134=(($103)|0);
      var $104=HEAP32[(($g134)>>2)];
      var $nstates135=(($104+28)|0);
      var $105=HEAP32[(($nstates135)>>2)];
      assert($105 % 1 === 0, 'memcpy given ' + $105 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($101, $102, $105, 1);
      var $106=$st;
      var $107=$fresh;
      var $108=$m_addr;
      var $g136=(($108)|0);
      var $109=HEAP32[(($g136)>>2)];
      var $nstates137=(($109+28)|0);
      var $110=HEAP32[(($nstates137)>>2)];
      assert($110 % 1 === 0, 'memcpy given ' + $110 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($106, $107, $110, 1);
      var $111=$m_addr;
      var $g138=(($111)|0);
      var $112=HEAP32[(($g138)>>2)];
      var $113=$startst_addr;
      var $114=$stopst_addr;
      var $115=$tmp;
      var $116=$c;
      var $117=$st;
      var $call139=_lstep($112, $113, $114, $115, $116, $117);
      $st=$call139;
      var $118=$p;
      var $incdec_ptr=(($118+1)|0);
      $p=$incdec_ptr;
      __label__ = 6; break;
    case 50: 
      var $119=$coldp;
      var $120=$m_addr;
      var $coldp141=(($120+24)|0);
      HEAP32[(($coldp141)>>2)]=$119;
      var $121=$stopst_addr;
      var $122=$st;
      var $arrayidx142=(($122+$121)|0);
      var $123=HEAP8[($arrayidx142)];
      var $tobool143=(($123 << 24) >> 24)!=0;
      if ($tobool143) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $124=$p;
      var $add_ptr145=(($124+1)|0);
      $retval=$add_ptr145;
      __label__ = 53; break;
    case 52: 
      $retval=0;
      __label__ = 53; break;
    case 53: 
      var $125=$retval;
      ;
      return $125;
    default: assert(0, "bad label: " + __label__);
  }
}
_lfast["X"]=1;

function _lslow($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $st;
      var $empty;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $matchp;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      var $0=$m_addr;
      var $st1=(($0+40)|0);
      var $1=HEAP32[(($st1)>>2)];
      $st=$1;
      var $2=$m_addr;
      var $empty2=(($2+52)|0);
      var $3=HEAP32[(($empty2)>>2)];
      $empty=$3;
      var $4=$m_addr;
      var $tmp3=(($4+48)|0);
      var $5=HEAP32[(($tmp3)>>2)];
      $tmp=$5;
      var $6=$start_addr;
      $p=$6;
      var $7=$start_addr;
      var $8=$m_addr;
      var $beginp=(($8+16)|0);
      var $9=HEAP32[(($beginp)>>2)];
      var $cmp=(($7)|0)==(($9)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $cond = 128;__label__ = 5; break;
    case 4: 
      var $10=$start_addr;
      var $add_ptr=((($10)-(1))|0);
      var $11=HEAP8[($add_ptr)];
      var $conv=(($11 << 24) >> 24);
      var $cond = $conv;__label__ = 5; break;
    case 5: 
      var $cond;
      $c=$cond;
      var $12=$st;
      var $13=$m_addr;
      var $g=(($13)|0);
      var $14=HEAP32[(($g)>>2)];
      var $nstates=(($14+28)|0);
      var $15=HEAP32[(($nstates)>>2)];
      _memset($12, 0, $15, 1);
      var $16=$startst_addr;
      var $17=$st;
      var $arrayidx=(($17+$16)|0);
      HEAP8[($arrayidx)]=1;
      var $18=$m_addr;
      var $g10=(($18)|0);
      var $19=HEAP32[(($g10)>>2)];
      var $20=$startst_addr;
      var $21=$stopst_addr;
      var $22=$st;
      var $23=$st;
      var $call=_lstep($19, $20, $21, $22, 132, $23);
      $st=$call;
      $matchp=0;
      __label__ = 6; break;
    case 6: 
      var $24=$c;
      $lastc=$24;
      var $25=$p;
      var $26=$m_addr;
      var $endp=(($26+20)|0);
      var $27=HEAP32[(($endp)>>2)];
      var $cmp11=(($25)|0)==(($27)|0);
      if ($cmp11) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $cond17 = 128;__label__ = 9; break;
    case 8: 
      var $28=$p;
      var $29=HEAP8[($28)];
      var $conv15=(($29 << 24) >> 24);
      var $cond17 = $conv15;__label__ = 9; break;
    case 9: 
      var $cond17;
      $c=$cond17;
      $flagch=0;
      $i=0;
      var $30=$lastc;
      var $cmp18=(($30)|0)==10;
      if ($cmp18) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $31=$m_addr;
      var $g20=(($31)|0);
      var $32=HEAP32[(($g20)>>2)];
      var $cflags=(($32+24)|0);
      var $33=HEAP32[(($cflags)>>2)];
      var $and=$33 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 11: 
      var $34=$lastc;
      var $cmp21=(($34)|0)==128;
      if ($cmp21) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $35=$m_addr;
      var $eflags=(($35+4)|0);
      var $36=HEAP32[(($eflags)>>2)];
      var $and24=$36 & 1;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      $flagch=129;
      var $37=$m_addr;
      var $g26=(($37)|0);
      var $38=HEAP32[(($g26)>>2)];
      var $nbol=(($38+44)|0);
      var $39=HEAP32[(($nbol)>>2)];
      $i=$39;
      __label__ = 14; break;
    case 14: 
      var $40=$c;
      var $cmp27=(($40)|0)==10;
      if ($cmp27) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $41=$m_addr;
      var $g30=(($41)|0);
      var $42=HEAP32[(($g30)>>2)];
      var $cflags31=(($42+24)|0);
      var $43=HEAP32[(($cflags31)>>2)];
      var $and32=$43 & 8;
      var $tobool33=(($and32)|0)!=0;
      if ($tobool33) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $44=$c;
      var $cmp35=(($44)|0)==128;
      if ($cmp35) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $45=$m_addr;
      var $eflags38=(($45+4)|0);
      var $46=HEAP32[(($eflags38)>>2)];
      var $and39=$46 & 2;
      var $tobool40=(($and39)|0)!=0;
      if ($tobool40) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $47=$flagch;
      var $cmp42=(($47)|0)==129;
      var $cond44=$cmp42 ? 131 : 130;
      $flagch=$cond44;
      var $48=$m_addr;
      var $g45=(($48)|0);
      var $49=HEAP32[(($g45)>>2)];
      var $neol=(($49+48)|0);
      var $50=HEAP32[(($neol)>>2)];
      var $51=$i;
      var $add=((($51)+($50))|0);
      $i=$add;
      __label__ = 19; break;
    case 19: 
      var $52=$i;
      var $cmp47=(($52)|0)!=0;
      if ($cmp47) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $53=$i;
      var $cmp51=(($53)|0) > 0;
      if ($cmp51) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $54=$m_addr;
      var $g53=(($54)|0);
      var $55=HEAP32[(($g53)>>2)];
      var $56=$startst_addr;
      var $57=$stopst_addr;
      var $58=$st;
      var $59=$flagch;
      var $60=$st;
      var $call54=_lstep($55, $56, $57, $58, $59, $60);
      $st=$call54;
      __label__ = 23; break;
    case 23: 
      var $61=$i;
      var $dec=((($61)-(1))|0);
      $i=$dec;
      __label__ = 21; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $62=$flagch;
      var $cmp56=(($62)|0)==129;
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 26; break; }
    case 26: 
      var $63=$lastc;
      var $cmp59=(($63)|0)!=128;
      if ($cmp59) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      var $64=$lastc;
      var $conv62=(($64) & 255);
      var $conv63=(($conv62)&255);
      var $call64=_isalnum($conv63);
      var $tobool65=(($call64)|0)!=0;
      if ($tobool65) { __label__ = 33; break; } else { __label__ = 28; break; }
    case 28: 
      var $65=$lastc;
      var $cmp67=(($65)|0)==95;
      if ($cmp67) { __label__ = 33; break; } else { __label__ = 29; break; }
    case 29: 
      var $66=$c;
      var $cmp70=(($66)|0)!=128;
      if ($cmp70) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $67=$c;
      var $conv73=(($67) & 255);
      var $conv74=(($conv73)&255);
      var $call75=_isalnum($conv74);
      var $tobool76=(($call75)|0)!=0;
      if ($tobool76) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $68=$c;
      var $cmp78=(($68)|0)==95;
      if ($cmp78) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $flagch=133;
      __label__ = 33; break;
    case 33: 
      var $69=$lastc;
      var $cmp82=(($69)|0)!=128;
      if ($cmp82) { __label__ = 34; break; } else { __label__ = 41; break; }
    case 34: 
      var $70=$lastc;
      var $conv85=(($70) & 255);
      var $conv86=(($conv85)&255);
      var $call87=_isalnum($conv86);
      var $tobool88=(($call87)|0)!=0;
      if ($tobool88) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $71=$lastc;
      var $cmp90=(($71)|0)==95;
      if ($cmp90) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      var $72=$flagch;
      var $cmp93=(($72)|0)==130;
      if ($cmp93) { __label__ = 40; break; } else { __label__ = 37; break; }
    case 37: 
      var $73=$c;
      var $cmp96=(($73)|0)!=128;
      if ($cmp96) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $74=$c;
      var $conv99=(($74) & 255);
      var $conv100=(($conv99)&255);
      var $call101=_isalnum($conv100);
      var $tobool102=(($call101)|0)!=0;
      if ($tobool102) { __label__ = 41; break; } else { __label__ = 39; break; }
    case 39: 
      var $75=$c;
      var $cmp104=(($75)|0)==95;
      if ($cmp104) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      $flagch=134;
      __label__ = 41; break;
    case 41: 
      var $76=$flagch;
      var $cmp108=(($76)|0)==133;
      if ($cmp108) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      var $77=$flagch;
      var $cmp111=(($77)|0)==134;
      if ($cmp111) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $78=$m_addr;
      var $g114=(($78)|0);
      var $79=HEAP32[(($g114)>>2)];
      var $80=$startst_addr;
      var $81=$stopst_addr;
      var $82=$st;
      var $83=$flagch;
      var $84=$st;
      var $call115=_lstep($79, $80, $81, $82, $83, $84);
      $st=$call115;
      __label__ = 44; break;
    case 44: 
      var $85=$stopst_addr;
      var $86=$st;
      var $arrayidx117=(($86+$85)|0);
      var $87=HEAP8[($arrayidx117)];
      var $tobool118=(($87 << 24) >> 24)!=0;
      if ($tobool118) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $88=$p;
      $matchp=$88;
      __label__ = 46; break;
    case 46: 
      var $89=$st;
      var $90=$empty;
      var $91=$m_addr;
      var $g121=(($91)|0);
      var $92=HEAP32[(($g121)>>2)];
      var $nstates122=(($92+28)|0);
      var $93=HEAP32[(($nstates122)>>2)];
      var $call123=_memcmp($89, $90, $93);
      var $cmp124=(($call123)|0)==0;
      if ($cmp124) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $94=$p;
      var $95=$stop_addr;
      var $cmp127=(($94)|0)==(($95)|0);
      if ($cmp127) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $96=$tmp;
      var $97=$st;
      var $98=$m_addr;
      var $g131=(($98)|0);
      var $99=HEAP32[(($g131)>>2)];
      var $nstates132=(($99+28)|0);
      var $100=HEAP32[(($nstates132)>>2)];
      assert($100 % 1 === 0, 'memcpy given ' + $100 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($96, $97, $100, 1);
      var $101=$st;
      var $102=$empty;
      var $103=$m_addr;
      var $g133=(($103)|0);
      var $104=HEAP32[(($g133)>>2)];
      var $nstates134=(($104+28)|0);
      var $105=HEAP32[(($nstates134)>>2)];
      assert($105 % 1 === 0, 'memcpy given ' + $105 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($101, $102, $105, 1);
      var $106=$m_addr;
      var $g135=(($106)|0);
      var $107=HEAP32[(($g135)>>2)];
      var $108=$startst_addr;
      var $109=$stopst_addr;
      var $110=$tmp;
      var $111=$c;
      var $112=$st;
      var $call136=_lstep($107, $108, $109, $110, $111, $112);
      $st=$call136;
      var $113=$p;
      var $incdec_ptr=(($113+1)|0);
      $p=$incdec_ptr;
      __label__ = 6; break;
    case 50: 
      var $114=$matchp;
      ;
      return $114;
    default: assert(0, "bad label: " + __label__);
  }
}
_lslow["X"]=1;

function _ldissect($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $i;
      var $ss;
      var $es;
      var $sp;
      var $stp;
      var $rest;
      var $tail;
      var $ssub;
      var $esub;
      var $ssp;
      var $sep;
      var $oldssp;
      var $dp;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      var $0=$start_addr;
      $sp=$0;
      var $1=$startst_addr;
      $ss=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$ss;
      var $3=$stopst_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $4=$ss;
      $es=$4;
      var $5=$es;
      var $6=$m_addr;
      var $g=(($6)|0);
      var $7=HEAP32[(($g)>>2)];
      var $strip=(($7+4)|0);
      var $8=HEAP32[(($strip)>>2)];
      var $arrayidx=(($8+($5<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      var $and=$9 & -134217728;
      if ((($and)|0) == 1207959552 || (($and)|0) == 1476395008) {
        __label__ = 5; break;
      }
      else if ((($and)|0) == 2013265920) {
        __label__ = 6; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 5: 
      var $10=$es;
      var $11=$m_addr;
      var $g1=(($11)|0);
      var $12=HEAP32[(($g1)>>2)];
      var $strip2=(($12+4)|0);
      var $13=HEAP32[(($strip2)>>2)];
      var $arrayidx3=(($13+($10<<2))|0);
      var $14=HEAP32[(($arrayidx3)>>2)];
      var $and4=$14 & 134217727;
      var $15=$es;
      var $add=((($15)+($and4))|0);
      $es=$add;
      __label__ = 10; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $16=$es;
      var $17=$m_addr;
      var $g6=(($17)|0);
      var $18=HEAP32[(($g6)>>2)];
      var $strip7=(($18+4)|0);
      var $19=HEAP32[(($strip7)>>2)];
      var $arrayidx8=(($19+($16<<2))|0);
      var $20=HEAP32[(($arrayidx8)>>2)];
      var $and9=$20 & -134217728;
      var $cmp10=(($and9)|0)!=-1879048192;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $21=$es;
      var $22=$m_addr;
      var $g11=(($22)|0);
      var $23=HEAP32[(($g11)>>2)];
      var $strip12=(($23+4)|0);
      var $24=HEAP32[(($strip12)>>2)];
      var $arrayidx13=(($24+($21<<2))|0);
      var $25=HEAP32[(($arrayidx13)>>2)];
      var $and14=$25 & 134217727;
      var $26=$es;
      var $add15=((($26)+($and14))|0);
      $es=$add15;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $27=$es;
      var $inc=((($27)+(1))|0);
      $es=$inc;
      var $28=$ss;
      var $29=$m_addr;
      var $g16=(($29)|0);
      var $30=HEAP32[(($g16)>>2)];
      var $strip17=(($30+4)|0);
      var $31=HEAP32[(($strip17)>>2)];
      var $arrayidx18=(($31+($28<<2))|0);
      var $32=HEAP32[(($arrayidx18)>>2)];
      var $and19=$32 & -134217728;
      if ((($and19)|0) == 134217728) {
        __label__ = 11; break;
      }
      else if ((($and19)|0) == 268435456) {
        __label__ = 12; break;
      }
      else if ((($and19)|0) == 402653184 || (($and19)|0) == 536870912 || (($and19)|0) == -1744830464 || (($and19)|0) == -1610612736) {
        __label__ = 13; break;
      }
      else if ((($and19)|0) == 671088640 || (($and19)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($and19)|0) == 939524096 || (($and19)|0) == 1073741824) {
        __label__ = 15; break;
      }
      else if ((($and19)|0) == 1476395008) {
        __label__ = 16; break;
      }
      else if ((($and19)|0) == 1207959552) {
        __label__ = 24; break;
      }
      else if ((($and19)|0) == 2013265920) {
        __label__ = 36; break;
      }
      else if ((($and19)|0) == 1342177280 || (($and19)|0) == 1610612736 || (($and19)|0) == -2147483648 || (($and19)|0) == -2013265920 || (($and19)|0) == -1879048192) {
        __label__ = 48; break;
      }
      else if ((($and19)|0) == 1744830464) {
        __label__ = 49; break;
      }
      else if ((($and19)|0) == 1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 11: 
      __label__ = 52; break;
    case 12: 
      var $33=$sp;
      var $incdec_ptr=(($33+1)|0);
      $sp=$incdec_ptr;
      __label__ = 52; break;
    case 13: 
      __label__ = 52; break;
    case 14: 
      var $34=$sp;
      var $incdec_ptr24=(($34+1)|0);
      $sp=$incdec_ptr24;
      __label__ = 52; break;
    case 15: 
      __label__ = 52; break;
    case 16: 
      var $35=$stop_addr;
      $stp=$35;
      __label__ = 17; break;
    case 17: 
      var $36=$m_addr;
      var $37=$sp;
      var $38=$stp;
      var $39=$ss;
      var $40=$es;
      var $call=_lslow($36, $37, $38, $39, $40);
      $rest=$call;
      var $41=$m_addr;
      var $42=$rest;
      var $43=$stop_addr;
      var $44=$es;
      var $45=$stopst_addr;
      var $call28=_lslow($41, $42, $43, $44, $45);
      $tail=$call28;
      var $46=$tail;
      var $47=$stop_addr;
      var $cmp29=(($46)|0)==(($47)|0);
      if ($cmp29) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $48=$rest;
      var $add_ptr=((($48)-(1))|0);
      $stp=$add_ptr;
      __label__ = 17; break;
    case 20: 
      var $49=$ss;
      var $add30=((($49)+(1))|0);
      $ssub=$add30;
      var $50=$es;
      var $sub=((($50)-(1))|0);
      $esub=$sub;
      var $51=$m_addr;
      var $52=$sp;
      var $53=$rest;
      var $54=$ssub;
      var $55=$esub;
      var $call31=_lslow($51, $52, $53, $54, $55);
      var $cmp32=(($call31)|0)!=0;
      if ($cmp32) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $56=$m_addr;
      var $57=$sp;
      var $58=$rest;
      var $59=$ssub;
      var $60=$esub;
      var $call34=_ldissect($56, $57, $58, $59, $60);
      $dp=$call34;
      __label__ = 23; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $61=$rest;
      $sp=$61;
      __label__ = 52; break;
    case 24: 
      var $62=$stop_addr;
      $stp=$62;
      __label__ = 25; break;
    case 25: 
      var $63=$m_addr;
      var $64=$sp;
      var $65=$stp;
      var $66=$ss;
      var $67=$es;
      var $call38=_lslow($63, $64, $65, $66, $67);
      $rest=$call38;
      var $68=$m_addr;
      var $69=$rest;
      var $70=$stop_addr;
      var $71=$es;
      var $72=$stopst_addr;
      var $call39=_lslow($68, $69, $70, $71, $72);
      $tail=$call39;
      var $73=$tail;
      var $74=$stop_addr;
      var $cmp40=(($73)|0)==(($74)|0);
      if ($cmp40) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 28; break;
    case 27: 
      var $75=$rest;
      var $add_ptr43=((($75)-(1))|0);
      $stp=$add_ptr43;
      __label__ = 25; break;
    case 28: 
      var $76=$ss;
      var $add45=((($76)+(1))|0);
      $ssub=$add45;
      var $77=$es;
      var $sub46=((($77)-(1))|0);
      $esub=$sub46;
      var $78=$sp;
      $ssp=$78;
      var $79=$ssp;
      $oldssp=$79;
      __label__ = 29; break;
    case 29: 
      var $80=$m_addr;
      var $81=$ssp;
      var $82=$rest;
      var $83=$ssub;
      var $84=$esub;
      var $call48=_lslow($80, $81, $82, $83, $84);
      $sep=$call48;
      var $85=$sep;
      var $cmp49=(($85)|0)==0;
      if ($cmp49) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $86=$sep;
      var $87=$ssp;
      var $cmp50=(($86)|0)==(($87)|0);
      if ($cmp50) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $88=$ssp;
      $oldssp=$88;
      var $89=$sep;
      $ssp=$89;
      __label__ = 29; break;
    case 33: 
      var $90=$sep;
      var $cmp54=(($90)|0)==0;
      if ($cmp54) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $91=$ssp;
      $sep=$91;
      var $92=$oldssp;
      $ssp=$92;
      __label__ = 35; break;
    case 35: 
      var $93=$m_addr;
      var $94=$ssp;
      var $95=$sep;
      var $96=$ssub;
      var $97=$esub;
      var $call57=_ldissect($93, $94, $95, $96, $97);
      $dp=$call57;
      var $98=$rest;
      $sp=$98;
      __label__ = 52; break;
    case 36: 
      var $99=$stop_addr;
      $stp=$99;
      __label__ = 37; break;
    case 37: 
      var $100=$m_addr;
      var $101=$sp;
      var $102=$stp;
      var $103=$ss;
      var $104=$es;
      var $call60=_lslow($100, $101, $102, $103, $104);
      $rest=$call60;
      var $105=$m_addr;
      var $106=$rest;
      var $107=$stop_addr;
      var $108=$es;
      var $109=$stopst_addr;
      var $call61=_lslow($105, $106, $107, $108, $109);
      $tail=$call61;
      var $110=$tail;
      var $111=$stop_addr;
      var $cmp62=(($110)|0)==(($111)|0);
      if ($cmp62) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      __label__ = 40; break;
    case 39: 
      var $112=$rest;
      var $add_ptr65=((($112)-(1))|0);
      $stp=$add_ptr65;
      __label__ = 37; break;
    case 40: 
      var $113=$ss;
      var $add67=((($113)+(1))|0);
      $ssub=$add67;
      var $114=$ss;
      var $115=$ss;
      var $116=$m_addr;
      var $g68=(($116)|0);
      var $117=HEAP32[(($g68)>>2)];
      var $strip69=(($117+4)|0);
      var $118=HEAP32[(($strip69)>>2)];
      var $arrayidx70=(($118+($115<<2))|0);
      var $119=HEAP32[(($arrayidx70)>>2)];
      var $and71=$119 & 134217727;
      var $add72=((($114)+($and71))|0);
      var $sub73=((($add72)-(1))|0);
      $esub=$sub73;
      __label__ = 41; break;
    case 41: 
      var $120=$m_addr;
      var $121=$sp;
      var $122=$rest;
      var $123=$ssub;
      var $124=$esub;
      var $call75=_lslow($120, $121, $122, $123, $124);
      var $125=$rest;
      var $cmp76=(($call75)|0)==(($125)|0);
      if ($cmp76) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      __label__ = 47; break;
    case 43: 
      var $126=$esub;
      var $inc79=((($126)+(1))|0);
      $esub=$inc79;
      var $127=$esub;
      var $add80=((($127)+(1))|0);
      $ssub=$add80;
      var $128=$esub;
      var $129=$m_addr;
      var $g81=(($129)|0);
      var $130=HEAP32[(($g81)>>2)];
      var $strip82=(($130+4)|0);
      var $131=HEAP32[(($strip82)>>2)];
      var $arrayidx83=(($131+($128<<2))|0);
      var $132=HEAP32[(($arrayidx83)>>2)];
      var $and84=$132 & 134217727;
      var $133=$esub;
      var $add85=((($133)+($and84))|0);
      $esub=$add85;
      var $134=$esub;
      var $135=$m_addr;
      var $g86=(($135)|0);
      var $136=HEAP32[(($g86)>>2)];
      var $strip87=(($136+4)|0);
      var $137=HEAP32[(($strip87)>>2)];
      var $arrayidx88=(($137+($134<<2))|0);
      var $138=HEAP32[(($arrayidx88)>>2)];
      var $and89=$138 & -134217728;
      var $cmp90=(($and89)|0)==-2013265920;
      if ($cmp90) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $139=$esub;
      var $dec=((($139)-(1))|0);
      $esub=$dec;
      __label__ = 46; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 41; break;
    case 47: 
      var $140=$m_addr;
      var $141=$sp;
      var $142=$rest;
      var $143=$ssub;
      var $144=$esub;
      var $call95=_ldissect($140, $141, $142, $143, $144);
      $dp=$call95;
      var $145=$rest;
      $sp=$145;
      __label__ = 52; break;
    case 48: 
      __label__ = 52; break;
    case 49: 
      var $146=$ss;
      var $147=$m_addr;
      var $g98=(($147)|0);
      var $148=HEAP32[(($g98)>>2)];
      var $strip99=(($148+4)|0);
      var $149=HEAP32[(($strip99)>>2)];
      var $arrayidx100=(($149+($146<<2))|0);
      var $150=HEAP32[(($arrayidx100)>>2)];
      var $and101=$150 & 134217727;
      $i=$and101;
      var $151=$sp;
      var $152=$m_addr;
      var $offp=(($152+12)|0);
      var $153=HEAP32[(($offp)>>2)];
      var $sub_ptr_lhs_cast=$151;
      var $sub_ptr_rhs_cast=$153;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $154=$i;
      var $155=$m_addr;
      var $pmatch=(($155+8)|0);
      var $156=HEAP32[(($pmatch)>>2)];
      var $arrayidx102=(($156+($154<<3))|0);
      var $rm_so=(($arrayidx102)|0);
      HEAP32[(($rm_so)>>2)]=$sub_ptr_sub;
      __label__ = 52; break;
    case 50: 
      var $157=$ss;
      var $158=$m_addr;
      var $g104=(($158)|0);
      var $159=HEAP32[(($g104)>>2)];
      var $strip105=(($159+4)|0);
      var $160=HEAP32[(($strip105)>>2)];
      var $arrayidx106=(($160+($157<<2))|0);
      var $161=HEAP32[(($arrayidx106)>>2)];
      var $and107=$161 & 134217727;
      $i=$and107;
      var $162=$sp;
      var $163=$m_addr;
      var $offp108=(($163+12)|0);
      var $164=HEAP32[(($offp108)>>2)];
      var $sub_ptr_lhs_cast109=$162;
      var $sub_ptr_rhs_cast110=$164;
      var $sub_ptr_sub111=((($sub_ptr_lhs_cast109)-($sub_ptr_rhs_cast110))|0);
      var $165=$i;
      var $166=$m_addr;
      var $pmatch112=(($166+8)|0);
      var $167=HEAP32[(($pmatch112)>>2)];
      var $arrayidx113=(($167+($165<<3))|0);
      var $rm_eo=(($arrayidx113+4)|0);
      HEAP32[(($rm_eo)>>2)]=$sub_ptr_sub111;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $168=$es;
      $ss=$168;
      __label__ = 3; break;
    case 54: 
      var $169=$sp;
      ;
      return $169;
    default: assert(0, "bad label: " + __label__);
  }
}
_ldissect["X"]=1;

function _lbackref($m, $start, $stop, $startst, $stopst, $lev) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $lev_addr;
      var $i;
      var $ss;
      var $sp;
      var $ssub;
      var $esub;
      var $ssp;
      var $dp;
      var $len;
      var $hard;
      var $s;
      var $offsave;
      var $cs;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      $lev_addr=$lev;
      var $0=$start_addr;
      $sp=$0;
      $hard=0;
      var $1=$startst_addr;
      $ss=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$hard;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { var $5 = 0;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$ss;
      var $4=$stopst_addr;
      var $cmp=(($3)|0) < (($4)|0);
      var $5 = $cmp;__label__ = 5; break;
    case 5: 
      var $5;
      if ($5) { __label__ = 6; break; } else { __label__ = 70; break; }
    case 6: 
      var $6=$ss;
      var $7=$m_addr;
      var $g=(($7)|0);
      var $8=HEAP32[(($g)>>2)];
      var $strip=(($8+4)|0);
      var $9=HEAP32[(($strip)>>2)];
      var $arrayidx=(($9+($6<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $s=$10;
      var $and=$10 & -134217728;
      if ((($and)|0) == 268435456) {
        __label__ = 7; break;
      }
      else if ((($and)|0) == 671088640) {
        __label__ = 11; break;
      }
      else if ((($and)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($and)|0) == 402653184) {
        __label__ = 18; break;
      }
      else if ((($and)|0) == 536870912) {
        __label__ = 26; break;
      }
      else if ((($and)|0) == -1744830464) {
        __label__ = 34; break;
      }
      else if ((($and)|0) == -1610612736) {
        __label__ = 48; break;
      }
      else if ((($and)|0) == 1610612736) {
        __label__ = 62; break;
      }
      else if ((($and)|0) == -2147483648) {
        __label__ = 63; break;
      }
      else {
      __label__ = 67; break;
      }
      
    case 7: 
      var $11=$sp;
      var $12=$stop_addr;
      var $cmp1=(($11)|0)==(($12)|0);
      if ($cmp1) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $13=$sp;
      var $incdec_ptr=(($13+1)|0);
      $sp=$incdec_ptr;
      var $14=HEAP8[($13)];
      var $conv=(($14 << 24) >> 24);
      var $15=$s;
      var $and2=$15 & 134217727;
      var $conv3=(($and2) & 255);
      var $conv4=(($conv3 << 24) >> 24);
      var $cmp5=(($conv)|0)!=(($conv4)|0);
      if ($cmp5) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=0;
      __label__ = 111; break;
    case 10: 
      __label__ = 68; break;
    case 11: 
      var $16=$sp;
      var $17=$stop_addr;
      var $cmp8=(($16)|0)==(($17)|0);
      if ($cmp8) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $retval=0;
      __label__ = 111; break;
    case 13: 
      var $18=$sp;
      var $incdec_ptr12=(($18+1)|0);
      $sp=$incdec_ptr12;
      __label__ = 68; break;
    case 14: 
      var $19=$s;
      var $and14=$19 & 134217727;
      var $20=$m_addr;
      var $g15=(($20)|0);
      var $21=HEAP32[(($g15)>>2)];
      var $sets=(($21+16)|0);
      var $22=HEAP32[(($sets)>>2)];
      var $arrayidx16=(($22+($and14<<4))|0);
      $cs=$arrayidx16;
      var $23=$sp;
      var $24=$stop_addr;
      var $cmp17=(($23)|0)==(($24)|0);
      if ($cmp17) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $25=$sp;
      var $incdec_ptr20=(($25+1)|0);
      $sp=$incdec_ptr20;
      var $26=HEAP8[($25)];
      var $idxprom=(($26)&255);
      var $27=$cs;
      var $ptr=(($27)|0);
      var $28=HEAP32[(($ptr)>>2)];
      var $arrayidx21=(($28+$idxprom)|0);
      var $29=HEAP8[($arrayidx21)];
      var $conv22=(($29)&255);
      var $30=$cs;
      var $mask=(($30+4)|0);
      var $31=HEAP8[($mask)];
      var $conv23=(($31)&255);
      var $and24=$conv22 & $conv23;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      $retval=0;
      __label__ = 111; break;
    case 17: 
      __label__ = 68; break;
    case 18: 
      var $32=$sp;
      var $33=$m_addr;
      var $beginp=(($33+16)|0);
      var $34=HEAP32[(($beginp)>>2)];
      var $cmp29=(($32)|0)==(($34)|0);
      if ($cmp29) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $35=$m_addr;
      var $eflags=(($35+4)|0);
      var $36=HEAP32[(($eflags)>>2)];
      var $and31=$36 & 1;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: 
      var $37=$sp;
      var $38=$m_addr;
      var $endp=(($38+20)|0);
      var $39=HEAP32[(($endp)>>2)];
      var $cmp34=(($37)>>>0) < (($39)>>>0);
      if ($cmp34) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $40=$sp;
      var $add_ptr=((($40)-(1))|0);
      var $41=HEAP8[($add_ptr)];
      var $conv37=(($41 << 24) >> 24);
      var $cmp38=(($conv37)|0)==10;
      if ($cmp38) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $42=$m_addr;
      var $g41=(($42)|0);
      var $43=HEAP32[(($g41)>>2)];
      var $cflags=(($43+24)|0);
      var $44=HEAP32[(($cflags)>>2)];
      var $and42=$44 & 8;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 25; break;
    case 24: 
      $retval=0;
      __label__ = 111; break;
    case 25: 
      __label__ = 68; break;
    case 26: 
      var $45=$sp;
      var $46=$m_addr;
      var $endp47=(($46+20)|0);
      var $47=HEAP32[(($endp47)>>2)];
      var $cmp48=(($45)|0)==(($47)|0);
      if ($cmp48) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $48=$m_addr;
      var $eflags51=(($48+4)|0);
      var $49=HEAP32[(($eflags51)>>2)];
      var $and52=$49 & 2;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $50=$sp;
      var $51=$m_addr;
      var $endp55=(($51+20)|0);
      var $52=HEAP32[(($endp55)>>2)];
      var $cmp56=(($50)>>>0) < (($52)>>>0);
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $53=$sp;
      var $54=HEAP8[($53)];
      var $conv59=(($54 << 24) >> 24);
      var $cmp60=(($conv59)|0)==10;
      if ($cmp60) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $55=$m_addr;
      var $g63=(($55)|0);
      var $56=HEAP32[(($g63)>>2)];
      var $cflags64=(($56+24)|0);
      var $57=HEAP32[(($cflags64)>>2)];
      var $and65=$57 & 8;
      var $tobool66=(($and65)|0)!=0;
      if ($tobool66) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      $retval=0;
      __label__ = 111; break;
    case 33: 
      __label__ = 68; break;
    case 34: 
      var $58=$sp;
      var $59=$m_addr;
      var $beginp71=(($59+16)|0);
      var $60=HEAP32[(($beginp71)>>2)];
      var $cmp72=(($58)|0)==(($60)|0);
      if ($cmp72) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $61=$m_addr;
      var $eflags75=(($61+4)|0);
      var $62=HEAP32[(($eflags75)>>2)];
      var $and76=$62 & 1;
      var $tobool77=(($and76)|0)!=0;
      if ($tobool77) { __label__ = 36; break; } else { __label__ = 42; break; }
    case 36: 
      var $63=$sp;
      var $64=$m_addr;
      var $endp79=(($64+20)|0);
      var $65=HEAP32[(($endp79)>>2)];
      var $cmp80=(($63)>>>0) < (($65)>>>0);
      if ($cmp80) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $66=$sp;
      var $add_ptr83=((($66)-(1))|0);
      var $67=HEAP8[($add_ptr83)];
      var $conv84=(($67 << 24) >> 24);
      var $cmp85=(($conv84)|0)==10;
      if ($cmp85) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $68=$m_addr;
      var $g88=(($68)|0);
      var $69=HEAP32[(($g88)>>2)];
      var $cflags89=(($69+24)|0);
      var $70=HEAP32[(($cflags89)>>2)];
      var $and90=$70 & 8;
      var $tobool91=(($and90)|0)!=0;
      if ($tobool91) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $71=$sp;
      var $72=$m_addr;
      var $beginp93=(($72+16)|0);
      var $73=HEAP32[(($beginp93)>>2)];
      var $cmp94=(($71)>>>0) > (($73)>>>0);
      if ($cmp94) { __label__ = 40; break; } else { __label__ = 46; break; }
    case 40: 
      var $74=$sp;
      var $add_ptr97=((($74)-(1))|0);
      var $75=HEAP8[($add_ptr97)];
      var $conv98=(($75)&255);
      var $call=_isalnum($conv98);
      var $tobool99=(($call)|0)!=0;
      if ($tobool99) { __label__ = 46; break; } else { __label__ = 41; break; }
    case 41: 
      var $76=$sp;
      var $add_ptr101=((($76)-(1))|0);
      var $77=HEAP8[($add_ptr101)];
      var $conv102=(($77 << 24) >> 24);
      var $cmp103=(($conv102)|0)==95;
      if ($cmp103) { __label__ = 46; break; } else { __label__ = 42; break; }
    case 42: 
      var $78=$sp;
      var $79=$m_addr;
      var $endp106=(($79+20)|0);
      var $80=HEAP32[(($endp106)>>2)];
      var $cmp107=(($78)>>>0) < (($80)>>>0);
      if ($cmp107) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $81=$sp;
      var $82=HEAP8[($81)];
      var $conv110=(($82)&255);
      var $call111=_isalnum($conv110);
      var $tobool112=(($call111)|0)!=0;
      if ($tobool112) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $83=$sp;
      var $84=HEAP8[($83)];
      var $conv114=(($84 << 24) >> 24);
      var $cmp115=(($conv114)|0)==95;
      if ($cmp115) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      __label__ = 47; break;
    case 46: 
      $retval=0;
      __label__ = 111; break;
    case 47: 
      __label__ = 68; break;
    case 48: 
      var $85=$sp;
      var $86=$m_addr;
      var $endp121=(($86+20)|0);
      var $87=HEAP32[(($endp121)>>2)];
      var $cmp122=(($85)|0)==(($87)|0);
      if ($cmp122) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $88=$m_addr;
      var $eflags125=(($88+4)|0);
      var $89=HEAP32[(($eflags125)>>2)];
      var $and126=$89 & 2;
      var $tobool127=(($and126)|0)!=0;
      if ($tobool127) { __label__ = 50; break; } else { __label__ = 56; break; }
    case 50: 
      var $90=$sp;
      var $91=$m_addr;
      var $endp129=(($91+20)|0);
      var $92=HEAP32[(($endp129)>>2)];
      var $cmp130=(($90)>>>0) < (($92)>>>0);
      if ($cmp130) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $93=$sp;
      var $94=HEAP8[($93)];
      var $conv133=(($94 << 24) >> 24);
      var $cmp134=(($conv133)|0)==10;
      if ($cmp134) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $95=$m_addr;
      var $g137=(($95)|0);
      var $96=HEAP32[(($g137)>>2)];
      var $cflags138=(($96+24)|0);
      var $97=HEAP32[(($cflags138)>>2)];
      var $and139=$97 & 8;
      var $tobool140=(($and139)|0)!=0;
      if ($tobool140) { __label__ = 56; break; } else { __label__ = 53; break; }
    case 53: 
      var $98=$sp;
      var $99=$m_addr;
      var $endp142=(($99+20)|0);
      var $100=HEAP32[(($endp142)>>2)];
      var $cmp143=(($98)>>>0) < (($100)>>>0);
      if ($cmp143) { __label__ = 54; break; } else { __label__ = 60; break; }
    case 54: 
      var $101=$sp;
      var $102=HEAP8[($101)];
      var $conv146=(($102)&255);
      var $call147=_isalnum($conv146);
      var $tobool148=(($call147)|0)!=0;
      if ($tobool148) { __label__ = 60; break; } else { __label__ = 55; break; }
    case 55: 
      var $103=$sp;
      var $104=HEAP8[($103)];
      var $conv150=(($104 << 24) >> 24);
      var $cmp151=(($conv150)|0)==95;
      if ($cmp151) { __label__ = 60; break; } else { __label__ = 56; break; }
    case 56: 
      var $105=$sp;
      var $106=$m_addr;
      var $beginp154=(($106+16)|0);
      var $107=HEAP32[(($beginp154)>>2)];
      var $cmp155=(($105)>>>0) > (($107)>>>0);
      if ($cmp155) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $108=$sp;
      var $add_ptr158=((($108)-(1))|0);
      var $109=HEAP8[($add_ptr158)];
      var $conv159=(($109)&255);
      var $call160=_isalnum($conv159);
      var $tobool161=(($call160)|0)!=0;
      if ($tobool161) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $110=$sp;
      var $add_ptr163=((($110)-(1))|0);
      var $111=HEAP8[($add_ptr163)];
      var $conv164=(($111 << 24) >> 24);
      var $cmp165=(($conv164)|0)==95;
      if ($cmp165) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 61; break;
    case 60: 
      $retval=0;
      __label__ = 111; break;
    case 61: 
      __label__ = 68; break;
    case 62: 
      __label__ = 68; break;
    case 63: 
      var $112=$ss;
      var $inc=((($112)+(1))|0);
      $ss=$inc;
      var $113=$ss;
      var $114=$m_addr;
      var $g172=(($114)|0);
      var $115=HEAP32[(($g172)>>2)];
      var $strip173=(($115+4)|0);
      var $116=HEAP32[(($strip173)>>2)];
      var $arrayidx174=(($116+($113<<2))|0);
      var $117=HEAP32[(($arrayidx174)>>2)];
      $s=$117;
      __label__ = 64; break;
    case 64: 
      var $118=$s;
      var $and175=$118 & 134217727;
      var $119=$ss;
      var $add=((($119)+($and175))|0);
      $ss=$add;
      __label__ = 65; break;
    case 65: 
      var $120=$ss;
      var $121=$m_addr;
      var $g176=(($121)|0);
      var $122=HEAP32[(($g176)>>2)];
      var $strip177=(($122+4)|0);
      var $123=HEAP32[(($strip177)>>2)];
      var $arrayidx178=(($123+($120<<2))|0);
      var $124=HEAP32[(($arrayidx178)>>2)];
      $s=$124;
      var $and179=$124 & -134217728;
      var $cmp180=(($and179)|0)!=-1879048192;
      if ($cmp180) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 66: 
      __label__ = 68; break;
    case 67: 
      $hard=1;
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $125=$ss;
      var $inc182=((($125)+(1))|0);
      $ss=$inc182;
      __label__ = 3; break;
    case 70: 
      var $126=$hard;
      var $tobool183=(($126)|0)!=0;
      if ($tobool183) { __label__ = 74; break; } else { __label__ = 71; break; }
    case 71: 
      var $127=$sp;
      var $128=$stop_addr;
      var $cmp185=(($127)|0)!=(($128)|0);
      if ($cmp185) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      $retval=0;
      __label__ = 111; break;
    case 73: 
      var $129=$sp;
      $retval=$129;
      __label__ = 111; break;
    case 74: 
      var $130=$ss;
      var $dec=((($130)-(1))|0);
      $ss=$dec;
      var $131=$ss;
      var $132=$m_addr;
      var $g190=(($132)|0);
      var $133=HEAP32[(($g190)>>2)];
      var $strip191=(($133+4)|0);
      var $134=HEAP32[(($strip191)>>2)];
      var $arrayidx192=(($134+($131<<2))|0);
      var $135=HEAP32[(($arrayidx192)>>2)];
      $s=$135;
      var $136=$s;
      var $and193=$136 & -134217728;
      if ((($and193)|0) == 939524096) {
        __label__ = 75; break;
      }
      else if ((($and193)|0) == 1476395008) {
        __label__ = 85; break;
      }
      else if ((($and193)|0) == 1207959552) {
        __label__ = 88; break;
      }
      else if ((($and193)|0) == 1342177280) {
        __label__ = 89; break;
      }
      else if ((($and193)|0) == 2013265920) {
        __label__ = 94; break;
      }
      else if ((($and193)|0) == 1744830464) {
        __label__ = 103; break;
      }
      else if ((($and193)|0) == 1879048192) {
        __label__ = 106; break;
      }
      else {
      __label__ = 109; break;
      }
      
    case 75: 
      var $137=$s;
      var $and195=$137 & 134217727;
      $i=$and195;
      var $138=$i;
      var $139=$m_addr;
      var $pmatch=(($139+8)|0);
      var $140=HEAP32[(($pmatch)>>2)];
      var $arrayidx196=(($140+($138<<3))|0);
      var $rm_eo=(($arrayidx196+4)|0);
      var $141=HEAP32[(($rm_eo)>>2)];
      var $cmp197=(($141)|0)==-1;
      if ($cmp197) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      $retval=0;
      __label__ = 111; break;
    case 77: 
      var $142=$i;
      var $143=$m_addr;
      var $pmatch201=(($143+8)|0);
      var $144=HEAP32[(($pmatch201)>>2)];
      var $arrayidx202=(($144+($142<<3))|0);
      var $rm_eo203=(($arrayidx202+4)|0);
      var $145=HEAP32[(($rm_eo203)>>2)];
      var $146=$i;
      var $147=$m_addr;
      var $pmatch204=(($147+8)|0);
      var $148=HEAP32[(($pmatch204)>>2)];
      var $arrayidx205=(($148+($146<<3))|0);
      var $rm_so=(($arrayidx205)|0);
      var $149=HEAP32[(($rm_so)>>2)];
      var $sub=((($145)-($149))|0);
      $len=$sub;
      var $150=$sp;
      var $151=$stop_addr;
      var $152=$len;
      var $idx_neg=(((-$152))|0);
      var $add_ptr206=(($151+$idx_neg)|0);
      var $cmp207=(($150)>>>0) > (($add_ptr206)>>>0);
      if ($cmp207) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      $retval=0;
      __label__ = 111; break;
    case 79: 
      var $153=$m_addr;
      var $offp=(($153+12)|0);
      var $154=HEAP32[(($offp)>>2)];
      var $155=$i;
      var $156=$m_addr;
      var $pmatch211=(($156+8)|0);
      var $157=HEAP32[(($pmatch211)>>2)];
      var $arrayidx212=(($157+($155<<3))|0);
      var $rm_so213=(($arrayidx212)|0);
      var $158=HEAP32[(($rm_so213)>>2)];
      var $add_ptr214=(($154+$158)|0);
      $ssp=$add_ptr214;
      var $159=$sp;
      var $160=$ssp;
      var $161=$len;
      var $call215=_memcmp($159, $160, $161);
      var $cmp216=(($call215)|0)!=0;
      if ($cmp216) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      $retval=0;
      __label__ = 111; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      var $162=$ss;
      var $163=$m_addr;
      var $g220=(($163)|0);
      var $164=HEAP32[(($g220)>>2)];
      var $strip221=(($164+4)|0);
      var $165=HEAP32[(($strip221)>>2)];
      var $arrayidx222=(($165+($162<<2))|0);
      var $166=HEAP32[(($arrayidx222)>>2)];
      var $167=$i;
      var $or=1073741824 | $167;
      var $cmp223=(($166)|0)!=(($or)|0);
      if ($cmp223) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $168=$ss;
      var $inc225=((($168)+(1))|0);
      $ss=$inc225;
      __label__ = 82; break;
    case 84: 
      var $169=$m_addr;
      var $170=$sp;
      var $171=$len;
      var $add_ptr226=(($170+$171)|0);
      var $172=$stop_addr;
      var $173=$ss;
      var $add227=((($173)+(1))|0);
      var $174=$stopst_addr;
      var $175=$lev_addr;
      var $call228=_lbackref($169, $add_ptr226, $172, $add227, $174, $175);
      $retval=$call228;
      __label__ = 111; break;
    case 85: 
      var $176=$m_addr;
      var $177=$sp;
      var $178=$stop_addr;
      var $179=$ss;
      var $add230=((($179)+(1))|0);
      var $180=$stopst_addr;
      var $181=$lev_addr;
      var $call231=_lbackref($176, $177, $178, $add230, $180, $181);
      $dp=$call231;
      var $182=$dp;
      var $cmp232=(($182)|0)!=0;
      if ($cmp232) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $183=$dp;
      $retval=$183;
      __label__ = 111; break;
    case 87: 
      var $184=$m_addr;
      var $185=$sp;
      var $186=$stop_addr;
      var $187=$ss;
      var $188=$s;
      var $and236=$188 & 134217727;
      var $add237=((($187)+($and236))|0);
      var $add238=((($add237)+(1))|0);
      var $189=$stopst_addr;
      var $190=$lev_addr;
      var $call239=_lbackref($184, $185, $186, $add238, $189, $190);
      $retval=$call239;
      __label__ = 111; break;
    case 88: 
      var $191=$sp;
      var $192=$lev_addr;
      var $add241=((($192)+(1))|0);
      var $193=$m_addr;
      var $lastpos=(($193+28)|0);
      var $194=HEAP32[(($lastpos)>>2)];
      var $arrayidx242=(($194+($add241<<2))|0);
      HEAP32[(($arrayidx242)>>2)]=$191;
      var $195=$m_addr;
      var $196=$sp;
      var $197=$stop_addr;
      var $198=$ss;
      var $add243=((($198)+(1))|0);
      var $199=$stopst_addr;
      var $200=$lev_addr;
      var $add244=((($200)+(1))|0);
      var $call245=_lbackref($195, $196, $197, $add243, $199, $add244);
      $retval=$call245;
      __label__ = 111; break;
    case 89: 
      var $201=$sp;
      var $202=$lev_addr;
      var $203=$m_addr;
      var $lastpos247=(($203+28)|0);
      var $204=HEAP32[(($lastpos247)>>2)];
      var $arrayidx248=(($204+($202<<2))|0);
      var $205=HEAP32[(($arrayidx248)>>2)];
      var $cmp249=(($201)|0)==(($205)|0);
      if ($cmp249) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $206=$m_addr;
      var $207=$sp;
      var $208=$stop_addr;
      var $209=$ss;
      var $add252=((($209)+(1))|0);
      var $210=$stopst_addr;
      var $211=$lev_addr;
      var $sub253=((($211)-(1))|0);
      var $call254=_lbackref($206, $207, $208, $add252, $210, $sub253);
      $retval=$call254;
      __label__ = 111; break;
    case 91: 
      var $212=$sp;
      var $213=$lev_addr;
      var $214=$m_addr;
      var $lastpos256=(($214+28)|0);
      var $215=HEAP32[(($lastpos256)>>2)];
      var $arrayidx257=(($215+($213<<2))|0);
      HEAP32[(($arrayidx257)>>2)]=$212;
      var $216=$m_addr;
      var $217=$sp;
      var $218=$stop_addr;
      var $219=$ss;
      var $220=$s;
      var $and258=$220 & 134217727;
      var $sub259=((($219)-($and258))|0);
      var $add260=((($sub259)+(1))|0);
      var $221=$stopst_addr;
      var $222=$lev_addr;
      var $call261=_lbackref($216, $217, $218, $add260, $221, $222);
      $dp=$call261;
      var $223=$dp;
      var $cmp262=(($223)|0)==0;
      if ($cmp262) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: 
      var $224=$m_addr;
      var $225=$sp;
      var $226=$stop_addr;
      var $227=$ss;
      var $add265=((($227)+(1))|0);
      var $228=$stopst_addr;
      var $229=$lev_addr;
      var $sub266=((($229)-(1))|0);
      var $call267=_lbackref($224, $225, $226, $add265, $228, $sub266);
      $retval=$call267;
      __label__ = 111; break;
    case 93: 
      var $230=$dp;
      $retval=$230;
      __label__ = 111; break;
    case 94: 
      var $231=$ss;
      var $add270=((($231)+(1))|0);
      $ssub=$add270;
      var $232=$ss;
      var $233=$s;
      var $and271=$233 & 134217727;
      var $add272=((($232)+($and271))|0);
      var $sub273=((($add272)-(1))|0);
      $esub=$sub273;
      __label__ = 95; break;
    case 95: 
      var $234=$m_addr;
      var $235=$sp;
      var $236=$stop_addr;
      var $237=$ssub;
      var $238=$esub;
      var $239=$lev_addr;
      var $call275=_lbackref($234, $235, $236, $237, $238, $239);
      $dp=$call275;
      var $240=$dp;
      var $cmp276=(($240)|0)!=0;
      if ($cmp276) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      var $241=$dp;
      $retval=$241;
      __label__ = 111; break;
    case 97: 
      var $242=$esub;
      var $243=$m_addr;
      var $g280=(($243)|0);
      var $244=HEAP32[(($g280)>>2)];
      var $strip281=(($244+4)|0);
      var $245=HEAP32[(($strip281)>>2)];
      var $arrayidx282=(($245+($242<<2))|0);
      var $246=HEAP32[(($arrayidx282)>>2)];
      var $and283=$246 & -134217728;
      var $cmp284=(($and283)|0)==-1879048192;
      if ($cmp284) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      $retval=0;
      __label__ = 111; break;
    case 99: 
      var $247=$esub;
      var $inc288=((($247)+(1))|0);
      $esub=$inc288;
      var $248=$esub;
      var $add289=((($248)+(1))|0);
      $ssub=$add289;
      var $249=$esub;
      var $250=$m_addr;
      var $g290=(($250)|0);
      var $251=HEAP32[(($g290)>>2)];
      var $strip291=(($251+4)|0);
      var $252=HEAP32[(($strip291)>>2)];
      var $arrayidx292=(($252+($249<<2))|0);
      var $253=HEAP32[(($arrayidx292)>>2)];
      var $and293=$253 & 134217727;
      var $254=$esub;
      var $add294=((($254)+($and293))|0);
      $esub=$add294;
      var $255=$esub;
      var $256=$m_addr;
      var $g295=(($256)|0);
      var $257=HEAP32[(($g295)>>2)];
      var $strip296=(($257+4)|0);
      var $258=HEAP32[(($strip296)>>2)];
      var $arrayidx297=(($258+($255<<2))|0);
      var $259=HEAP32[(($arrayidx297)>>2)];
      var $and298=$259 & -134217728;
      var $cmp299=(($and298)|0)==-2013265920;
      if ($cmp299) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $260=$esub;
      var $dec302=((($260)-(1))|0);
      $esub=$dec302;
      __label__ = 102; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 95; break;
    case 103: 
      var $261=$s;
      var $and306=$261 & 134217727;
      $i=$and306;
      var $262=$i;
      var $263=$m_addr;
      var $pmatch307=(($263+8)|0);
      var $264=HEAP32[(($pmatch307)>>2)];
      var $arrayidx308=(($264+($262<<3))|0);
      var $rm_so309=(($arrayidx308)|0);
      var $265=HEAP32[(($rm_so309)>>2)];
      $offsave=$265;
      var $266=$sp;
      var $267=$m_addr;
      var $offp310=(($267+12)|0);
      var $268=HEAP32[(($offp310)>>2)];
      var $sub_ptr_lhs_cast=$266;
      var $sub_ptr_rhs_cast=$268;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $269=$i;
      var $270=$m_addr;
      var $pmatch311=(($270+8)|0);
      var $271=HEAP32[(($pmatch311)>>2)];
      var $arrayidx312=(($271+($269<<3))|0);
      var $rm_so313=(($arrayidx312)|0);
      HEAP32[(($rm_so313)>>2)]=$sub_ptr_sub;
      var $272=$m_addr;
      var $273=$sp;
      var $274=$stop_addr;
      var $275=$ss;
      var $add314=((($275)+(1))|0);
      var $276=$stopst_addr;
      var $277=$lev_addr;
      var $call315=_lbackref($272, $273, $274, $add314, $276, $277);
      $dp=$call315;
      var $278=$dp;
      var $cmp316=(($278)|0)!=0;
      if ($cmp316) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $279=$dp;
      $retval=$279;
      __label__ = 111; break;
    case 105: 
      var $280=$offsave;
      var $281=$i;
      var $282=$m_addr;
      var $pmatch320=(($282+8)|0);
      var $283=HEAP32[(($pmatch320)>>2)];
      var $arrayidx321=(($283+($281<<3))|0);
      var $rm_so322=(($arrayidx321)|0);
      HEAP32[(($rm_so322)>>2)]=$280;
      $retval=0;
      __label__ = 111; break;
    case 106: 
      var $284=$s;
      var $and324=$284 & 134217727;
      $i=$and324;
      var $285=$i;
      var $286=$m_addr;
      var $pmatch325=(($286+8)|0);
      var $287=HEAP32[(($pmatch325)>>2)];
      var $arrayidx326=(($287+($285<<3))|0);
      var $rm_eo327=(($arrayidx326+4)|0);
      var $288=HEAP32[(($rm_eo327)>>2)];
      $offsave=$288;
      var $289=$sp;
      var $290=$m_addr;
      var $offp328=(($290+12)|0);
      var $291=HEAP32[(($offp328)>>2)];
      var $sub_ptr_lhs_cast329=$289;
      var $sub_ptr_rhs_cast330=$291;
      var $sub_ptr_sub331=((($sub_ptr_lhs_cast329)-($sub_ptr_rhs_cast330))|0);
      var $292=$i;
      var $293=$m_addr;
      var $pmatch332=(($293+8)|0);
      var $294=HEAP32[(($pmatch332)>>2)];
      var $arrayidx333=(($294+($292<<3))|0);
      var $rm_eo334=(($arrayidx333+4)|0);
      HEAP32[(($rm_eo334)>>2)]=$sub_ptr_sub331;
      var $295=$m_addr;
      var $296=$sp;
      var $297=$stop_addr;
      var $298=$ss;
      var $add335=((($298)+(1))|0);
      var $299=$stopst_addr;
      var $300=$lev_addr;
      var $call336=_lbackref($295, $296, $297, $add335, $299, $300);
      $dp=$call336;
      var $301=$dp;
      var $cmp337=(($301)|0)!=0;
      if ($cmp337) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $302=$dp;
      $retval=$302;
      __label__ = 111; break;
    case 108: 
      var $303=$offsave;
      var $304=$i;
      var $305=$m_addr;
      var $pmatch341=(($305+8)|0);
      var $306=HEAP32[(($pmatch341)>>2)];
      var $arrayidx342=(($306+($304<<3))|0);
      var $rm_eo343=(($arrayidx342+4)|0);
      HEAP32[(($rm_eo343)>>2)]=$303;
      $retval=0;
      __label__ = 111; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      $retval=((STRING_TABLE.__str313)|0);
      __label__ = 111; break;
    case 111: 
      var $307=$retval;
      ;
      return $307;
    default: assert(0, "bad label: " + __label__);
  }
}
_lbackref["X"]=1;

function _lstep($g, $start, $stop, $bef, $ch, $aft) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $g_addr;
      var $start_addr;
      var $stop_addr;
      var $bef_addr;
      var $ch_addr;
      var $aft_addr;
      var $cs;
      var $s;
      var $pc;
      var $here;
      var $look;
      var $i;
      $g_addr=$g;
      $start_addr=$start;
      $stop_addr=$stop;
      $bef_addr=$bef;
      $ch_addr=$ch;
      $aft_addr=$aft;
      var $0=$start_addr;
      $pc=$0;
      var $1=$pc;
      $here=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$pc;
      var $3=$stop_addr;
      var $cmp=(($2)|0)!=(($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $4=$pc;
      var $5=$g_addr;
      var $strip=(($5+4)|0);
      var $6=HEAP32[(($strip)>>2)];
      var $arrayidx=(($6+($4<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      $s=$7;
      var $8=$s;
      var $and=$8 & -134217728;
      if ((($and)|0) == 134217728) {
        __label__ = 5; break;
      }
      else if ((($and)|0) == 268435456) {
        __label__ = 6; break;
      }
      else if ((($and)|0) == 402653184) {
        __label__ = 9; break;
      }
      else if ((($and)|0) == 536870912) {
        __label__ = 13; break;
      }
      else if ((($and)|0) == -1744830464) {
        __label__ = 17; break;
      }
      else if ((($and)|0) == -1610612736) {
        __label__ = 20; break;
      }
      else if ((($and)|0) == 671088640) {
        __label__ = 23; break;
      }
      else if ((($and)|0) == 805306368) {
        __label__ = 26; break;
      }
      else if ((($and)|0) == 939524096 || (($and)|0) == 1073741824) {
        __label__ = 30; break;
      }
      else if ((($and)|0) == 1207959552) {
        __label__ = 31; break;
      }
      else if ((($and)|0) == 1342177280) {
        __label__ = 32; break;
      }
      else if ((($and)|0) == 1476395008) {
        __label__ = 36; break;
      }
      else if ((($and)|0) == 1610612736) {
        __label__ = 37; break;
      }
      else if ((($and)|0) == 1744830464 || (($and)|0) == 1879048192) {
        __label__ = 38; break;
      }
      else if ((($and)|0) == 2013265920) {
        __label__ = 39; break;
      }
      else if ((($and)|0) == -2147483648) {
        __label__ = 40; break;
      }
      else if ((($and)|0) == -2013265920) {
        __label__ = 47; break;
      }
      else if ((($and)|0) == -1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 5: 
      __label__ = 52; break;
    case 6: 
      var $9=$ch_addr;
      var $10=$s;
      var $and2=$10 & 134217727;
      var $conv=(($and2) & 255);
      var $conv3=(($conv << 24) >> 24);
      var $cmp4=(($9)|0)==(($conv3)|0);
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$here;
      var $12=$bef_addr;
      var $arrayidx6=(($12+$11)|0);
      var $13=HEAP8[($arrayidx6)];
      var $conv7=(($13 << 24) >> 24);
      var $14=$here;
      var $add=((($14)+(1))|0);
      var $15=$aft_addr;
      var $arrayidx8=(($15+$add)|0);
      var $16=HEAP8[($arrayidx8)];
      var $conv9=(($16 << 24) >> 24);
      var $or=$conv9 | $conv7;
      var $conv10=(($or) & 255);
      HEAP8[($arrayidx8)]=$conv10;
      __label__ = 8; break;
    case 8: 
      __label__ = 52; break;
    case 9: 
      var $17=$ch_addr;
      var $cmp12=(($17)|0)==129;
      if ($cmp12) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $18=$ch_addr;
      var $cmp14=(($18)|0)==131;
      if ($cmp14) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $19=$here;
      var $20=$bef_addr;
      var $arrayidx17=(($20+$19)|0);
      var $21=HEAP8[($arrayidx17)];
      var $conv18=(($21 << 24) >> 24);
      var $22=$here;
      var $add19=((($22)+(1))|0);
      var $23=$aft_addr;
      var $arrayidx20=(($23+$add19)|0);
      var $24=HEAP8[($arrayidx20)];
      var $conv21=(($24 << 24) >> 24);
      var $or22=$conv21 | $conv18;
      var $conv23=(($or22) & 255);
      HEAP8[($arrayidx20)]=$conv23;
      __label__ = 12; break;
    case 12: 
      __label__ = 52; break;
    case 13: 
      var $25=$ch_addr;
      var $cmp26=(($25)|0)==130;
      if ($cmp26) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $26=$ch_addr;
      var $cmp29=(($26)|0)==131;
      if ($cmp29) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $27=$here;
      var $28=$bef_addr;
      var $arrayidx32=(($28+$27)|0);
      var $29=HEAP8[($arrayidx32)];
      var $conv33=(($29 << 24) >> 24);
      var $30=$here;
      var $add34=((($30)+(1))|0);
      var $31=$aft_addr;
      var $arrayidx35=(($31+$add34)|0);
      var $32=HEAP8[($arrayidx35)];
      var $conv36=(($32 << 24) >> 24);
      var $or37=$conv36 | $conv33;
      var $conv38=(($or37) & 255);
      HEAP8[($arrayidx35)]=$conv38;
      __label__ = 16; break;
    case 16: 
      __label__ = 52; break;
    case 17: 
      var $33=$ch_addr;
      var $cmp41=(($33)|0)==133;
      if ($cmp41) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $34=$here;
      var $35=$bef_addr;
      var $arrayidx44=(($35+$34)|0);
      var $36=HEAP8[($arrayidx44)];
      var $conv45=(($36 << 24) >> 24);
      var $37=$here;
      var $add46=((($37)+(1))|0);
      var $38=$aft_addr;
      var $arrayidx47=(($38+$add46)|0);
      var $39=HEAP8[($arrayidx47)];
      var $conv48=(($39 << 24) >> 24);
      var $or49=$conv48 | $conv45;
      var $conv50=(($or49) & 255);
      HEAP8[($arrayidx47)]=$conv50;
      __label__ = 19; break;
    case 19: 
      __label__ = 52; break;
    case 20: 
      var $40=$ch_addr;
      var $cmp53=(($40)|0)==134;
      if ($cmp53) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $41=$here;
      var $42=$bef_addr;
      var $arrayidx56=(($42+$41)|0);
      var $43=HEAP8[($arrayidx56)];
      var $conv57=(($43 << 24) >> 24);
      var $44=$here;
      var $add58=((($44)+(1))|0);
      var $45=$aft_addr;
      var $arrayidx59=(($45+$add58)|0);
      var $46=HEAP8[($arrayidx59)];
      var $conv60=(($46 << 24) >> 24);
      var $or61=$conv60 | $conv57;
      var $conv62=(($or61) & 255);
      HEAP8[($arrayidx59)]=$conv62;
      __label__ = 22; break;
    case 22: 
      __label__ = 52; break;
    case 23: 
      var $47=$ch_addr;
      var $cmp65=(($47)|0) > 127;
      if ($cmp65) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $48=$here;
      var $49=$bef_addr;
      var $arrayidx68=(($49+$48)|0);
      var $50=HEAP8[($arrayidx68)];
      var $conv69=(($50 << 24) >> 24);
      var $51=$here;
      var $add70=((($51)+(1))|0);
      var $52=$aft_addr;
      var $arrayidx71=(($52+$add70)|0);
      var $53=HEAP8[($arrayidx71)];
      var $conv72=(($53 << 24) >> 24);
      var $or73=$conv72 | $conv69;
      var $conv74=(($or73) & 255);
      HEAP8[($arrayidx71)]=$conv74;
      __label__ = 25; break;
    case 25: 
      __label__ = 52; break;
    case 26: 
      var $54=$s;
      var $and77=$54 & 134217727;
      var $55=$g_addr;
      var $sets=(($55+16)|0);
      var $56=HEAP32[(($sets)>>2)];
      var $arrayidx78=(($56+($and77<<4))|0);
      $cs=$arrayidx78;
      var $57=$ch_addr;
      var $cmp79=(($57)|0) > 127;
      if ($cmp79) { __label__ = 29; break; } else { __label__ = 27; break; }
    case 27: 
      var $58=$ch_addr;
      var $conv81=(($58) & 255);
      var $idxprom=(($conv81)&255);
      var $59=$cs;
      var $ptr=(($59)|0);
      var $60=HEAP32[(($ptr)>>2)];
      var $arrayidx82=(($60+$idxprom)|0);
      var $61=HEAP8[($arrayidx82)];
      var $conv83=(($61)&255);
      var $62=$cs;
      var $mask=(($62+4)|0);
      var $63=HEAP8[($mask)];
      var $conv84=(($63)&255);
      var $and85=$conv83 & $conv84;
      var $tobool=(($and85)|0)!=0;
      if ($tobool) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $64=$here;
      var $65=$bef_addr;
      var $arrayidx87=(($65+$64)|0);
      var $66=HEAP8[($arrayidx87)];
      var $conv88=(($66 << 24) >> 24);
      var $67=$here;
      var $add89=((($67)+(1))|0);
      var $68=$aft_addr;
      var $arrayidx90=(($68+$add89)|0);
      var $69=HEAP8[($arrayidx90)];
      var $conv91=(($69 << 24) >> 24);
      var $or92=$conv91 | $conv88;
      var $conv93=(($or92) & 255);
      HEAP8[($arrayidx90)]=$conv93;
      __label__ = 29; break;
    case 29: 
      __label__ = 52; break;
    case 30: 
      var $70=$here;
      var $71=$aft_addr;
      var $arrayidx96=(($71+$70)|0);
      var $72=HEAP8[($arrayidx96)];
      var $conv97=(($72 << 24) >> 24);
      var $73=$here;
      var $add98=((($73)+(1))|0);
      var $74=$aft_addr;
      var $arrayidx99=(($74+$add98)|0);
      var $75=HEAP8[($arrayidx99)];
      var $conv100=(($75 << 24) >> 24);
      var $or101=$conv100 | $conv97;
      var $conv102=(($or101) & 255);
      HEAP8[($arrayidx99)]=$conv102;
      __label__ = 52; break;
    case 31: 
      var $76=$here;
      var $77=$aft_addr;
      var $arrayidx104=(($77+$76)|0);
      var $78=HEAP8[($arrayidx104)];
      var $conv105=(($78 << 24) >> 24);
      var $79=$here;
      var $add106=((($79)+(1))|0);
      var $80=$aft_addr;
      var $arrayidx107=(($80+$add106)|0);
      var $81=HEAP8[($arrayidx107)];
      var $conv108=(($81 << 24) >> 24);
      var $or109=$conv108 | $conv105;
      var $conv110=(($or109) & 255);
      HEAP8[($arrayidx107)]=$conv110;
      __label__ = 52; break;
    case 32: 
      var $82=$here;
      var $83=$aft_addr;
      var $arrayidx112=(($83+$82)|0);
      var $84=HEAP8[($arrayidx112)];
      var $conv113=(($84 << 24) >> 24);
      var $85=$here;
      var $add114=((($85)+(1))|0);
      var $86=$aft_addr;
      var $arrayidx115=(($86+$add114)|0);
      var $87=HEAP8[($arrayidx115)];
      var $conv116=(($87 << 24) >> 24);
      var $or117=$conv116 | $conv113;
      var $conv118=(($or117) & 255);
      HEAP8[($arrayidx115)]=$conv118;
      var $88=$here;
      var $89=$s;
      var $and119=$89 & 134217727;
      var $sub=((($88)-($and119))|0);
      var $90=$aft_addr;
      var $arrayidx120=(($90+$sub)|0);
      var $91=HEAP8[($arrayidx120)];
      var $conv121=(($91 << 24) >> 24);
      $i=$conv121;
      var $92=$here;
      var $93=$aft_addr;
      var $arrayidx122=(($93+$92)|0);
      var $94=HEAP8[($arrayidx122)];
      var $conv123=(($94 << 24) >> 24);
      var $95=$here;
      var $96=$s;
      var $and124=$96 & 134217727;
      var $sub125=((($95)-($and124))|0);
      var $97=$aft_addr;
      var $arrayidx126=(($97+$sub125)|0);
      var $98=HEAP8[($arrayidx126)];
      var $conv127=(($98 << 24) >> 24);
      var $or128=$conv127 | $conv123;
      var $conv129=(($or128) & 255);
      HEAP8[($arrayidx126)]=$conv129;
      var $99=$i;
      var $tobool130=(($99)|0)!=0;
      if ($tobool130) { __label__ = 35; break; } else { __label__ = 33; break; }
    case 33: 
      var $100=$here;
      var $101=$s;
      var $and132=$101 & 134217727;
      var $sub133=((($100)-($and132))|0);
      var $102=$aft_addr;
      var $arrayidx134=(($102+$sub133)|0);
      var $103=HEAP8[($arrayidx134)];
      var $conv135=(($103 << 24) >> 24);
      var $tobool136=(($conv135)|0)!=0;
      if ($tobool136) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $104=$s;
      var $and138=$104 & 134217727;
      var $add139=((($and138)+(1))|0);
      var $105=$pc;
      var $sub140=((($105)-($add139))|0);
      $pc=$sub140;
      var $106=$pc;
      $here=$106;
      __label__ = 35; break;
    case 35: 
      __label__ = 52; break;
    case 36: 
      var $107=$here;
      var $108=$aft_addr;
      var $arrayidx143=(($108+$107)|0);
      var $109=HEAP8[($arrayidx143)];
      var $conv144=(($109 << 24) >> 24);
      var $110=$here;
      var $add145=((($110)+(1))|0);
      var $111=$aft_addr;
      var $arrayidx146=(($111+$add145)|0);
      var $112=HEAP8[($arrayidx146)];
      var $conv147=(($112 << 24) >> 24);
      var $or148=$conv147 | $conv144;
      var $conv149=(($or148) & 255);
      HEAP8[($arrayidx146)]=$conv149;
      var $113=$here;
      var $114=$aft_addr;
      var $arrayidx150=(($114+$113)|0);
      var $115=HEAP8[($arrayidx150)];
      var $conv151=(($115 << 24) >> 24);
      var $116=$here;
      var $117=$s;
      var $and152=$117 & 134217727;
      var $add153=((($116)+($and152))|0);
      var $118=$aft_addr;
      var $arrayidx154=(($118+$add153)|0);
      var $119=HEAP8[($arrayidx154)];
      var $conv155=(($119 << 24) >> 24);
      var $or156=$conv155 | $conv151;
      var $conv157=(($or156) & 255);
      HEAP8[($arrayidx154)]=$conv157;
      __label__ = 52; break;
    case 37: 
      var $120=$here;
      var $121=$aft_addr;
      var $arrayidx159=(($121+$120)|0);
      var $122=HEAP8[($arrayidx159)];
      var $conv160=(($122 << 24) >> 24);
      var $123=$here;
      var $add161=((($123)+(1))|0);
      var $124=$aft_addr;
      var $arrayidx162=(($124+$add161)|0);
      var $125=HEAP8[($arrayidx162)];
      var $conv163=(($125 << 24) >> 24);
      var $or164=$conv163 | $conv160;
      var $conv165=(($or164) & 255);
      HEAP8[($arrayidx162)]=$conv165;
      __label__ = 52; break;
    case 38: 
      var $126=$here;
      var $127=$aft_addr;
      var $arrayidx167=(($127+$126)|0);
      var $128=HEAP8[($arrayidx167)];
      var $conv168=(($128 << 24) >> 24);
      var $129=$here;
      var $add169=((($129)+(1))|0);
      var $130=$aft_addr;
      var $arrayidx170=(($130+$add169)|0);
      var $131=HEAP8[($arrayidx170)];
      var $conv171=(($131 << 24) >> 24);
      var $or172=$conv171 | $conv168;
      var $conv173=(($or172) & 255);
      HEAP8[($arrayidx170)]=$conv173;
      __label__ = 52; break;
    case 39: 
      var $132=$here;
      var $133=$aft_addr;
      var $arrayidx175=(($133+$132)|0);
      var $134=HEAP8[($arrayidx175)];
      var $conv176=(($134 << 24) >> 24);
      var $135=$here;
      var $add177=((($135)+(1))|0);
      var $136=$aft_addr;
      var $arrayidx178=(($136+$add177)|0);
      var $137=HEAP8[($arrayidx178)];
      var $conv179=(($137 << 24) >> 24);
      var $or180=$conv179 | $conv176;
      var $conv181=(($or180) & 255);
      HEAP8[($arrayidx178)]=$conv181;
      var $138=$here;
      var $139=$aft_addr;
      var $arrayidx182=(($139+$138)|0);
      var $140=HEAP8[($arrayidx182)];
      var $conv183=(($140 << 24) >> 24);
      var $141=$here;
      var $142=$s;
      var $and184=$142 & 134217727;
      var $add185=((($141)+($and184))|0);
      var $143=$aft_addr;
      var $arrayidx186=(($143+$add185)|0);
      var $144=HEAP8[($arrayidx186)];
      var $conv187=(($144 << 24) >> 24);
      var $or188=$conv187 | $conv183;
      var $conv189=(($or188) & 255);
      HEAP8[($arrayidx186)]=$conv189;
      __label__ = 52; break;
    case 40: 
      var $145=$here;
      var $146=$aft_addr;
      var $arrayidx191=(($146+$145)|0);
      var $147=HEAP8[($arrayidx191)];
      var $tobool192=(($147 << 24) >> 24)!=0;
      if ($tobool192) { __label__ = 41; break; } else { __label__ = 46; break; }
    case 41: 
      $look=1;
      __label__ = 42; break;
    case 42: 
      var $148=$pc;
      var $149=$look;
      var $add195=((($148)+($149))|0);
      var $150=$g_addr;
      var $strip196=(($150+4)|0);
      var $151=HEAP32[(($strip196)>>2)];
      var $arrayidx197=(($151+($add195<<2))|0);
      var $152=HEAP32[(($arrayidx197)>>2)];
      $s=$152;
      var $and198=$152 & -134217728;
      var $cmp199=(($and198)|0)!=-1879048192;
      if ($cmp199) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $153=$s;
      var $and202=$153 & 134217727;
      var $154=$look;
      var $add203=((($154)+($and202))|0);
      $look=$add203;
      __label__ = 42; break;
    case 45: 
      var $155=$here;
      var $156=$aft_addr;
      var $arrayidx204=(($156+$155)|0);
      var $157=HEAP8[($arrayidx204)];
      var $conv205=(($157 << 24) >> 24);
      var $158=$here;
      var $159=$look;
      var $add206=((($158)+($159))|0);
      var $160=$aft_addr;
      var $arrayidx207=(($160+$add206)|0);
      var $161=HEAP8[($arrayidx207)];
      var $conv208=(($161 << 24) >> 24);
      var $or209=$conv208 | $conv205;
      var $conv210=(($or209) & 255);
      HEAP8[($arrayidx207)]=$conv210;
      __label__ = 46; break;
    case 46: 
      __label__ = 52; break;
    case 47: 
      var $162=$here;
      var $163=$aft_addr;
      var $arrayidx213=(($163+$162)|0);
      var $164=HEAP8[($arrayidx213)];
      var $conv214=(($164 << 24) >> 24);
      var $165=$here;
      var $add215=((($165)+(1))|0);
      var $166=$aft_addr;
      var $arrayidx216=(($166+$add215)|0);
      var $167=HEAP8[($arrayidx216)];
      var $conv217=(($167 << 24) >> 24);
      var $or218=$conv217 | $conv214;
      var $conv219=(($or218) & 255);
      HEAP8[($arrayidx216)]=$conv219;
      var $168=$pc;
      var $169=$s;
      var $and220=$169 & 134217727;
      var $add221=((($168)+($and220))|0);
      var $170=$g_addr;
      var $strip222=(($170+4)|0);
      var $171=HEAP32[(($strip222)>>2)];
      var $arrayidx223=(($171+($add221<<2))|0);
      var $172=HEAP32[(($arrayidx223)>>2)];
      var $and224=$172 & -134217728;
      var $cmp225=(($and224)|0)!=-1879048192;
      if ($cmp225) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $173=$here;
      var $174=$aft_addr;
      var $arrayidx228=(($174+$173)|0);
      var $175=HEAP8[($arrayidx228)];
      var $conv229=(($175 << 24) >> 24);
      var $176=$here;
      var $177=$s;
      var $and230=$177 & 134217727;
      var $add231=((($176)+($and230))|0);
      var $178=$aft_addr;
      var $arrayidx232=(($178+$add231)|0);
      var $179=HEAP8[($arrayidx232)];
      var $conv233=(($179 << 24) >> 24);
      var $or234=$conv233 | $conv229;
      var $conv235=(($or234) & 255);
      HEAP8[($arrayidx232)]=$conv235;
      __label__ = 49; break;
    case 49: 
      __label__ = 52; break;
    case 50: 
      var $180=$here;
      var $181=$aft_addr;
      var $arrayidx238=(($181+$180)|0);
      var $182=HEAP8[($arrayidx238)];
      var $conv239=(($182 << 24) >> 24);
      var $183=$here;
      var $add240=((($183)+(1))|0);
      var $184=$aft_addr;
      var $arrayidx241=(($184+$add240)|0);
      var $185=HEAP8[($arrayidx241)];
      var $conv242=(($185 << 24) >> 24);
      var $or243=$conv242 | $conv239;
      var $conv244=(($or243) & 255);
      HEAP8[($arrayidx241)]=$conv244;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $186=$pc;
      var $inc=((($186)+(1))|0);
      $pc=$inc;
      var $187=$here;
      var $inc246=((($187)+(1))|0);
      $here=$inc246;
      __label__ = 3; break;
    case 54: 
      var $188=$aft_addr;
      ;
      return $188;
    default: assert(0, "bad label: " + __label__);
  }
}
_lstep["X"]=1;

function _sfast($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $st;
      var $fresh;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $coldp;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      var $0=$m_addr;
      var $st1=(($0+36)|0);
      var $1=HEAP32[(($st1)>>2)];
      $st=$1;
      var $2=$m_addr;
      var $fresh2=(($2+40)|0);
      var $3=HEAP32[(($fresh2)>>2)];
      $fresh=$3;
      var $4=$m_addr;
      var $tmp3=(($4+44)|0);
      var $5=HEAP32[(($tmp3)>>2)];
      $tmp=$5;
      var $6=$start_addr;
      $p=$6;
      var $7=$start_addr;
      var $8=$m_addr;
      var $beginp=(($8+16)|0);
      var $9=HEAP32[(($beginp)>>2)];
      var $cmp=(($7)|0)==(($9)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $cond = 128;__label__ = 5; break;
    case 4: 
      var $10=$start_addr;
      var $add_ptr=((($10)-(1))|0);
      var $11=HEAP8[($add_ptr)];
      var $conv=(($11 << 24) >> 24);
      var $cond = $conv;__label__ = 5; break;
    case 5: 
      var $cond;
      $c=$cond;
      $st=0;
      var $12=$startst_addr;
      var $shl=1 << $12;
      var $13=$st;
      var $or=$13 | $shl;
      $st=$or;
      var $14=$m_addr;
      var $g=(($14)|0);
      var $15=HEAP32[(($g)>>2)];
      var $16=$startst_addr;
      var $17=$stopst_addr;
      var $18=$st;
      var $19=$st;
      var $call=_sstep($15, $16, $17, $18, 132, $19);
      $st=$call;
      var $20=$st;
      $fresh=$20;
      $coldp=0;
      __label__ = 6; break;
    case 6: 
      var $21=$c;
      $lastc=$21;
      var $22=$p;
      var $23=$m_addr;
      var $endp=(($23+20)|0);
      var $24=HEAP32[(($endp)>>2)];
      var $cmp10=(($22)|0)==(($24)|0);
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $cond16 = 128;__label__ = 9; break;
    case 8: 
      var $25=$p;
      var $26=HEAP8[($25)];
      var $conv14=(($26 << 24) >> 24);
      var $cond16 = $conv14;__label__ = 9; break;
    case 9: 
      var $cond16;
      $c=$cond16;
      var $27=$st;
      var $28=$fresh;
      var $cmp17=(($27)|0)==(($28)|0);
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $29=$p;
      $coldp=$29;
      __label__ = 11; break;
    case 11: 
      $flagch=0;
      $i=0;
      var $30=$lastc;
      var $cmp19=(($30)|0)==10;
      if ($cmp19) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $31=$m_addr;
      var $g21=(($31)|0);
      var $32=HEAP32[(($g21)>>2)];
      var $cflags=(($32+24)|0);
      var $33=HEAP32[(($cflags)>>2)];
      var $and=$33 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 15; break; } else { __label__ = 13; break; }
    case 13: 
      var $34=$lastc;
      var $cmp22=(($34)|0)==128;
      if ($cmp22) { __label__ = 14; break; } else { __label__ = 16; break; }
    case 14: 
      var $35=$m_addr;
      var $eflags=(($35+4)|0);
      var $36=HEAP32[(($eflags)>>2)];
      var $and25=$36 & 1;
      var $tobool26=(($and25)|0)!=0;
      if ($tobool26) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      $flagch=129;
      var $37=$m_addr;
      var $g28=(($37)|0);
      var $38=HEAP32[(($g28)>>2)];
      var $nbol=(($38+44)|0);
      var $39=HEAP32[(($nbol)>>2)];
      $i=$39;
      __label__ = 16; break;
    case 16: 
      var $40=$c;
      var $cmp30=(($40)|0)==10;
      if ($cmp30) { __label__ = 17; break; } else { __label__ = 18; break; }
    case 17: 
      var $41=$m_addr;
      var $g33=(($41)|0);
      var $42=HEAP32[(($g33)>>2)];
      var $cflags34=(($42+24)|0);
      var $43=HEAP32[(($cflags34)>>2)];
      var $and35=$43 & 8;
      var $tobool36=(($and35)|0)!=0;
      if ($tobool36) { __label__ = 20; break; } else { __label__ = 18; break; }
    case 18: 
      var $44=$c;
      var $cmp38=(($44)|0)==128;
      if ($cmp38) { __label__ = 19; break; } else { __label__ = 21; break; }
    case 19: 
      var $45=$m_addr;
      var $eflags41=(($45+4)|0);
      var $46=HEAP32[(($eflags41)>>2)];
      var $and42=$46 & 2;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { __label__ = 21; break; } else { __label__ = 20; break; }
    case 20: 
      var $47=$flagch;
      var $cmp45=(($47)|0)==129;
      var $cond47=$cmp45 ? 131 : 130;
      $flagch=$cond47;
      var $48=$m_addr;
      var $g48=(($48)|0);
      var $49=HEAP32[(($g48)>>2)];
      var $neol=(($49+48)|0);
      var $50=HEAP32[(($neol)>>2)];
      var $51=$i;
      var $add=((($51)+($50))|0);
      $i=$add;
      __label__ = 21; break;
    case 21: 
      var $52=$i;
      var $cmp50=(($52)|0)!=0;
      if ($cmp50) { __label__ = 22; break; } else { __label__ = 27; break; }
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $53=$i;
      var $cmp54=(($53)|0) > 0;
      if ($cmp54) { __label__ = 24; break; } else { __label__ = 26; break; }
    case 24: 
      var $54=$m_addr;
      var $g56=(($54)|0);
      var $55=HEAP32[(($g56)>>2)];
      var $56=$startst_addr;
      var $57=$stopst_addr;
      var $58=$st;
      var $59=$flagch;
      var $60=$st;
      var $call57=_sstep($55, $56, $57, $58, $59, $60);
      $st=$call57;
      __label__ = 25; break;
    case 25: 
      var $61=$i;
      var $dec=((($61)-(1))|0);
      $i=$dec;
      __label__ = 23; break;
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $62=$flagch;
      var $cmp59=(($62)|0)==129;
      if ($cmp59) { __label__ = 31; break; } else { __label__ = 28; break; }
    case 28: 
      var $63=$lastc;
      var $cmp62=(($63)|0)!=128;
      if ($cmp62) { __label__ = 29; break; } else { __label__ = 35; break; }
    case 29: 
      var $64=$lastc;
      var $conv65=(($64) & 255);
      var $conv66=(($conv65)&255);
      var $call67=_isalnum($conv66);
      var $tobool68=(($call67)|0)!=0;
      if ($tobool68) { __label__ = 35; break; } else { __label__ = 30; break; }
    case 30: 
      var $65=$lastc;
      var $cmp70=(($65)|0)==95;
      if ($cmp70) { __label__ = 35; break; } else { __label__ = 31; break; }
    case 31: 
      var $66=$c;
      var $cmp73=(($66)|0)!=128;
      if ($cmp73) { __label__ = 32; break; } else { __label__ = 35; break; }
    case 32: 
      var $67=$c;
      var $conv76=(($67) & 255);
      var $conv77=(($conv76)&255);
      var $call78=_isalnum($conv77);
      var $tobool79=(($call78)|0)!=0;
      if ($tobool79) { __label__ = 34; break; } else { __label__ = 33; break; }
    case 33: 
      var $68=$c;
      var $cmp81=(($68)|0)==95;
      if ($cmp81) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      $flagch=133;
      __label__ = 35; break;
    case 35: 
      var $69=$lastc;
      var $cmp85=(($69)|0)!=128;
      if ($cmp85) { __label__ = 36; break; } else { __label__ = 43; break; }
    case 36: 
      var $70=$lastc;
      var $conv88=(($70) & 255);
      var $conv89=(($conv88)&255);
      var $call90=_isalnum($conv89);
      var $tobool91=(($call90)|0)!=0;
      if ($tobool91) { __label__ = 38; break; } else { __label__ = 37; break; }
    case 37: 
      var $71=$lastc;
      var $cmp93=(($71)|0)==95;
      if ($cmp93) { __label__ = 38; break; } else { __label__ = 43; break; }
    case 38: 
      var $72=$flagch;
      var $cmp96=(($72)|0)==130;
      if ($cmp96) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $73=$c;
      var $cmp99=(($73)|0)!=128;
      if ($cmp99) { __label__ = 40; break; } else { __label__ = 43; break; }
    case 40: 
      var $74=$c;
      var $conv102=(($74) & 255);
      var $conv103=(($conv102)&255);
      var $call104=_isalnum($conv103);
      var $tobool105=(($call104)|0)!=0;
      if ($tobool105) { __label__ = 43; break; } else { __label__ = 41; break; }
    case 41: 
      var $75=$c;
      var $cmp107=(($75)|0)==95;
      if ($cmp107) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      $flagch=134;
      __label__ = 43; break;
    case 43: 
      var $76=$flagch;
      var $cmp111=(($76)|0)==133;
      if ($cmp111) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $77=$flagch;
      var $cmp114=(($77)|0)==134;
      if ($cmp114) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $78=$m_addr;
      var $g117=(($78)|0);
      var $79=HEAP32[(($g117)>>2)];
      var $80=$startst_addr;
      var $81=$stopst_addr;
      var $82=$st;
      var $83=$flagch;
      var $84=$st;
      var $call118=_sstep($79, $80, $81, $82, $83, $84);
      $st=$call118;
      __label__ = 46; break;
    case 46: 
      var $85=$st;
      var $86=$stopst_addr;
      var $shl120=1 << $86;
      var $and121=$85 & $shl120;
      var $cmp122=(($and121)|0)!=0;
      if ($cmp122) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $87=$p;
      var $88=$stop_addr;
      var $cmp125=(($87)|0)==(($88)|0);
      if ($cmp125) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $89=$st;
      $tmp=$89;
      var $90=$fresh;
      $st=$90;
      var $91=$m_addr;
      var $g129=(($91)|0);
      var $92=HEAP32[(($g129)>>2)];
      var $93=$startst_addr;
      var $94=$stopst_addr;
      var $95=$tmp;
      var $96=$c;
      var $97=$st;
      var $call130=_sstep($92, $93, $94, $95, $96, $97);
      $st=$call130;
      var $98=$p;
      var $incdec_ptr=(($98+1)|0);
      $p=$incdec_ptr;
      __label__ = 6; break;
    case 50: 
      var $99=$coldp;
      var $100=$m_addr;
      var $coldp132=(($100+24)|0);
      HEAP32[(($coldp132)>>2)]=$99;
      var $101=$st;
      var $102=$stopst_addr;
      var $shl133=1 << $102;
      var $and134=$101 & $shl133;
      var $cmp135=(($and134)|0)!=0;
      if ($cmp135) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $103=$p;
      var $add_ptr138=(($103+1)|0);
      $retval=$add_ptr138;
      __label__ = 53; break;
    case 52: 
      $retval=0;
      __label__ = 53; break;
    case 53: 
      var $104=$retval;
      ;
      return $104;
    default: assert(0, "bad label: " + __label__);
  }
}
_sfast["X"]=1;

function _sslow($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $st;
      var $empty;
      var $tmp;
      var $p;
      var $c;
      var $lastc;
      var $flagch;
      var $i;
      var $matchp;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      var $0=$m_addr;
      var $st1=(($0+36)|0);
      var $1=HEAP32[(($st1)>>2)];
      $st=$1;
      var $2=$m_addr;
      var $empty2=(($2+48)|0);
      var $3=HEAP32[(($empty2)>>2)];
      $empty=$3;
      var $4=$m_addr;
      var $tmp3=(($4+44)|0);
      var $5=HEAP32[(($tmp3)>>2)];
      $tmp=$5;
      var $6=$start_addr;
      $p=$6;
      var $7=$start_addr;
      var $8=$m_addr;
      var $beginp=(($8+16)|0);
      var $9=HEAP32[(($beginp)>>2)];
      var $cmp=(($7)|0)==(($9)|0);
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; }
    case 3: 
      var $cond = 128;__label__ = 5; break;
    case 4: 
      var $10=$start_addr;
      var $add_ptr=((($10)-(1))|0);
      var $11=HEAP8[($add_ptr)];
      var $conv=(($11 << 24) >> 24);
      var $cond = $conv;__label__ = 5; break;
    case 5: 
      var $cond;
      $c=$cond;
      $st=0;
      var $12=$startst_addr;
      var $shl=1 << $12;
      var $13=$st;
      var $or=$13 | $shl;
      $st=$or;
      var $14=$m_addr;
      var $g=(($14)|0);
      var $15=HEAP32[(($g)>>2)];
      var $16=$startst_addr;
      var $17=$stopst_addr;
      var $18=$st;
      var $19=$st;
      var $call=_sstep($15, $16, $17, $18, 132, $19);
      $st=$call;
      $matchp=0;
      __label__ = 6; break;
    case 6: 
      var $20=$c;
      $lastc=$20;
      var $21=$p;
      var $22=$m_addr;
      var $endp=(($22+20)|0);
      var $23=HEAP32[(($endp)>>2)];
      var $cmp10=(($21)|0)==(($23)|0);
      if ($cmp10) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $cond16 = 128;__label__ = 9; break;
    case 8: 
      var $24=$p;
      var $25=HEAP8[($24)];
      var $conv14=(($25 << 24) >> 24);
      var $cond16 = $conv14;__label__ = 9; break;
    case 9: 
      var $cond16;
      $c=$cond16;
      $flagch=0;
      $i=0;
      var $26=$lastc;
      var $cmp17=(($26)|0)==10;
      if ($cmp17) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $27=$m_addr;
      var $g19=(($27)|0);
      var $28=HEAP32[(($g19)>>2)];
      var $cflags=(($28+24)|0);
      var $29=HEAP32[(($cflags)>>2)];
      var $and=$29 & 8;
      var $tobool=(($and)|0)!=0;
      if ($tobool) { __label__ = 13; break; } else { __label__ = 11; break; }
    case 11: 
      var $30=$lastc;
      var $cmp20=(($30)|0)==128;
      if ($cmp20) { __label__ = 12; break; } else { __label__ = 14; break; }
    case 12: 
      var $31=$m_addr;
      var $eflags=(($31+4)|0);
      var $32=HEAP32[(($eflags)>>2)];
      var $and23=$32 & 1;
      var $tobool24=(($and23)|0)!=0;
      if ($tobool24) { __label__ = 14; break; } else { __label__ = 13; break; }
    case 13: 
      $flagch=129;
      var $33=$m_addr;
      var $g25=(($33)|0);
      var $34=HEAP32[(($g25)>>2)];
      var $nbol=(($34+44)|0);
      var $35=HEAP32[(($nbol)>>2)];
      $i=$35;
      __label__ = 14; break;
    case 14: 
      var $36=$c;
      var $cmp26=(($36)|0)==10;
      if ($cmp26) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $37=$m_addr;
      var $g29=(($37)|0);
      var $38=HEAP32[(($g29)>>2)];
      var $cflags30=(($38+24)|0);
      var $39=HEAP32[(($cflags30)>>2)];
      var $and31=$39 & 8;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 18; break; } else { __label__ = 16; break; }
    case 16: 
      var $40=$c;
      var $cmp34=(($40)|0)==128;
      if ($cmp34) { __label__ = 17; break; } else { __label__ = 19; break; }
    case 17: 
      var $41=$m_addr;
      var $eflags37=(($41+4)|0);
      var $42=HEAP32[(($eflags37)>>2)];
      var $and38=$42 & 2;
      var $tobool39=(($and38)|0)!=0;
      if ($tobool39) { __label__ = 19; break; } else { __label__ = 18; break; }
    case 18: 
      var $43=$flagch;
      var $cmp41=(($43)|0)==129;
      var $cond43=$cmp41 ? 131 : 130;
      $flagch=$cond43;
      var $44=$m_addr;
      var $g44=(($44)|0);
      var $45=HEAP32[(($g44)>>2)];
      var $neol=(($45+48)|0);
      var $46=HEAP32[(($neol)>>2)];
      var $47=$i;
      var $add=((($47)+($46))|0);
      $i=$add;
      __label__ = 19; break;
    case 19: 
      var $48=$i;
      var $cmp46=(($48)|0)!=0;
      if ($cmp46) { __label__ = 20; break; } else { __label__ = 25; break; }
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $49=$i;
      var $cmp50=(($49)|0) > 0;
      if ($cmp50) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $50=$m_addr;
      var $g52=(($50)|0);
      var $51=HEAP32[(($g52)>>2)];
      var $52=$startst_addr;
      var $53=$stopst_addr;
      var $54=$st;
      var $55=$flagch;
      var $56=$st;
      var $call53=_sstep($51, $52, $53, $54, $55, $56);
      $st=$call53;
      __label__ = 23; break;
    case 23: 
      var $57=$i;
      var $dec=((($57)-(1))|0);
      $i=$dec;
      __label__ = 21; break;
    case 24: 
      __label__ = 25; break;
    case 25: 
      var $58=$flagch;
      var $cmp55=(($58)|0)==129;
      if ($cmp55) { __label__ = 29; break; } else { __label__ = 26; break; }
    case 26: 
      var $59=$lastc;
      var $cmp58=(($59)|0)!=128;
      if ($cmp58) { __label__ = 27; break; } else { __label__ = 33; break; }
    case 27: 
      var $60=$lastc;
      var $conv61=(($60) & 255);
      var $conv62=(($conv61)&255);
      var $call63=_isalnum($conv62);
      var $tobool64=(($call63)|0)!=0;
      if ($tobool64) { __label__ = 33; break; } else { __label__ = 28; break; }
    case 28: 
      var $61=$lastc;
      var $cmp66=(($61)|0)==95;
      if ($cmp66) { __label__ = 33; break; } else { __label__ = 29; break; }
    case 29: 
      var $62=$c;
      var $cmp69=(($62)|0)!=128;
      if ($cmp69) { __label__ = 30; break; } else { __label__ = 33; break; }
    case 30: 
      var $63=$c;
      var $conv72=(($63) & 255);
      var $conv73=(($conv72)&255);
      var $call74=_isalnum($conv73);
      var $tobool75=(($call74)|0)!=0;
      if ($tobool75) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $64=$c;
      var $cmp77=(($64)|0)==95;
      if ($cmp77) { __label__ = 32; break; } else { __label__ = 33; break; }
    case 32: 
      $flagch=133;
      __label__ = 33; break;
    case 33: 
      var $65=$lastc;
      var $cmp81=(($65)|0)!=128;
      if ($cmp81) { __label__ = 34; break; } else { __label__ = 41; break; }
    case 34: 
      var $66=$lastc;
      var $conv84=(($66) & 255);
      var $conv85=(($conv84)&255);
      var $call86=_isalnum($conv85);
      var $tobool87=(($call86)|0)!=0;
      if ($tobool87) { __label__ = 36; break; } else { __label__ = 35; break; }
    case 35: 
      var $67=$lastc;
      var $cmp89=(($67)|0)==95;
      if ($cmp89) { __label__ = 36; break; } else { __label__ = 41; break; }
    case 36: 
      var $68=$flagch;
      var $cmp92=(($68)|0)==130;
      if ($cmp92) { __label__ = 40; break; } else { __label__ = 37; break; }
    case 37: 
      var $69=$c;
      var $cmp95=(($69)|0)!=128;
      if ($cmp95) { __label__ = 38; break; } else { __label__ = 41; break; }
    case 38: 
      var $70=$c;
      var $conv98=(($70) & 255);
      var $conv99=(($conv98)&255);
      var $call100=_isalnum($conv99);
      var $tobool101=(($call100)|0)!=0;
      if ($tobool101) { __label__ = 41; break; } else { __label__ = 39; break; }
    case 39: 
      var $71=$c;
      var $cmp103=(($71)|0)==95;
      if ($cmp103) { __label__ = 41; break; } else { __label__ = 40; break; }
    case 40: 
      $flagch=134;
      __label__ = 41; break;
    case 41: 
      var $72=$flagch;
      var $cmp107=(($72)|0)==133;
      if ($cmp107) { __label__ = 43; break; } else { __label__ = 42; break; }
    case 42: 
      var $73=$flagch;
      var $cmp110=(($73)|0)==134;
      if ($cmp110) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $74=$m_addr;
      var $g113=(($74)|0);
      var $75=HEAP32[(($g113)>>2)];
      var $76=$startst_addr;
      var $77=$stopst_addr;
      var $78=$st;
      var $79=$flagch;
      var $80=$st;
      var $call114=_sstep($75, $76, $77, $78, $79, $80);
      $st=$call114;
      __label__ = 44; break;
    case 44: 
      var $81=$st;
      var $82=$stopst_addr;
      var $shl116=1 << $82;
      var $and117=$81 & $shl116;
      var $cmp118=(($and117)|0)!=0;
      if ($cmp118) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $83=$p;
      $matchp=$83;
      __label__ = 46; break;
    case 46: 
      var $84=$st;
      var $85=$empty;
      var $cmp122=(($84)|0)==(($85)|0);
      if ($cmp122) { __label__ = 48; break; } else { __label__ = 47; break; }
    case 47: 
      var $86=$p;
      var $87=$stop_addr;
      var $cmp125=(($86)|0)==(($87)|0);
      if ($cmp125) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      __label__ = 50; break;
    case 49: 
      var $88=$st;
      $tmp=$88;
      var $89=$empty;
      $st=$89;
      var $90=$m_addr;
      var $g129=(($90)|0);
      var $91=HEAP32[(($g129)>>2)];
      var $92=$startst_addr;
      var $93=$stopst_addr;
      var $94=$tmp;
      var $95=$c;
      var $96=$st;
      var $call130=_sstep($91, $92, $93, $94, $95, $96);
      $st=$call130;
      var $97=$p;
      var $incdec_ptr=(($97+1)|0);
      $p=$incdec_ptr;
      __label__ = 6; break;
    case 50: 
      var $98=$matchp;
      ;
      return $98;
    default: assert(0, "bad label: " + __label__);
  }
}
_sslow["X"]=1;

function _sdissect($m, $start, $stop, $startst, $stopst) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $i;
      var $ss;
      var $es;
      var $sp;
      var $stp;
      var $rest;
      var $tail;
      var $ssub;
      var $esub;
      var $ssp;
      var $sep;
      var $oldssp;
      var $dp;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      var $0=$start_addr;
      $sp=$0;
      var $1=$startst_addr;
      $ss=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$ss;
      var $3=$stopst_addr;
      var $cmp=(($2)|0) < (($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $4=$ss;
      $es=$4;
      var $5=$es;
      var $6=$m_addr;
      var $g=(($6)|0);
      var $7=HEAP32[(($g)>>2)];
      var $strip=(($7+4)|0);
      var $8=HEAP32[(($strip)>>2)];
      var $arrayidx=(($8+($5<<2))|0);
      var $9=HEAP32[(($arrayidx)>>2)];
      var $and=$9 & -134217728;
      if ((($and)|0) == 1207959552 || (($and)|0) == 1476395008) {
        __label__ = 5; break;
      }
      else if ((($and)|0) == 2013265920) {
        __label__ = 6; break;
      }
      else {
      __label__ = 10; break;
      }
      
    case 5: 
      var $10=$es;
      var $11=$m_addr;
      var $g1=(($11)|0);
      var $12=HEAP32[(($g1)>>2)];
      var $strip2=(($12+4)|0);
      var $13=HEAP32[(($strip2)>>2)];
      var $arrayidx3=(($13+($10<<2))|0);
      var $14=HEAP32[(($arrayidx3)>>2)];
      var $and4=$14 & 134217727;
      var $15=$es;
      var $add=((($15)+($and4))|0);
      $es=$add;
      __label__ = 10; break;
    case 6: 
      __label__ = 7; break;
    case 7: 
      var $16=$es;
      var $17=$m_addr;
      var $g6=(($17)|0);
      var $18=HEAP32[(($g6)>>2)];
      var $strip7=(($18+4)|0);
      var $19=HEAP32[(($strip7)>>2)];
      var $arrayidx8=(($19+($16<<2))|0);
      var $20=HEAP32[(($arrayidx8)>>2)];
      var $and9=$20 & -134217728;
      var $cmp10=(($and9)|0)!=-1879048192;
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      var $21=$es;
      var $22=$m_addr;
      var $g11=(($22)|0);
      var $23=HEAP32[(($g11)>>2)];
      var $strip12=(($23+4)|0);
      var $24=HEAP32[(($strip12)>>2)];
      var $arrayidx13=(($24+($21<<2))|0);
      var $25=HEAP32[(($arrayidx13)>>2)];
      var $and14=$25 & 134217727;
      var $26=$es;
      var $add15=((($26)+($and14))|0);
      $es=$add15;
      __label__ = 7; break;
    case 9: 
      __label__ = 10; break;
    case 10: 
      var $27=$es;
      var $inc=((($27)+(1))|0);
      $es=$inc;
      var $28=$ss;
      var $29=$m_addr;
      var $g16=(($29)|0);
      var $30=HEAP32[(($g16)>>2)];
      var $strip17=(($30+4)|0);
      var $31=HEAP32[(($strip17)>>2)];
      var $arrayidx18=(($31+($28<<2))|0);
      var $32=HEAP32[(($arrayidx18)>>2)];
      var $and19=$32 & -134217728;
      if ((($and19)|0) == 134217728) {
        __label__ = 11; break;
      }
      else if ((($and19)|0) == 268435456) {
        __label__ = 12; break;
      }
      else if ((($and19)|0) == 402653184 || (($and19)|0) == 536870912 || (($and19)|0) == -1744830464 || (($and19)|0) == -1610612736) {
        __label__ = 13; break;
      }
      else if ((($and19)|0) == 671088640 || (($and19)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($and19)|0) == 939524096 || (($and19)|0) == 1073741824) {
        __label__ = 15; break;
      }
      else if ((($and19)|0) == 1476395008) {
        __label__ = 16; break;
      }
      else if ((($and19)|0) == 1207959552) {
        __label__ = 24; break;
      }
      else if ((($and19)|0) == 2013265920) {
        __label__ = 36; break;
      }
      else if ((($and19)|0) == 1342177280 || (($and19)|0) == 1610612736 || (($and19)|0) == -2147483648 || (($and19)|0) == -2013265920 || (($and19)|0) == -1879048192) {
        __label__ = 48; break;
      }
      else if ((($and19)|0) == 1744830464) {
        __label__ = 49; break;
      }
      else if ((($and19)|0) == 1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 11: 
      __label__ = 52; break;
    case 12: 
      var $33=$sp;
      var $incdec_ptr=(($33+1)|0);
      $sp=$incdec_ptr;
      __label__ = 52; break;
    case 13: 
      __label__ = 52; break;
    case 14: 
      var $34=$sp;
      var $incdec_ptr24=(($34+1)|0);
      $sp=$incdec_ptr24;
      __label__ = 52; break;
    case 15: 
      __label__ = 52; break;
    case 16: 
      var $35=$stop_addr;
      $stp=$35;
      __label__ = 17; break;
    case 17: 
      var $36=$m_addr;
      var $37=$sp;
      var $38=$stp;
      var $39=$ss;
      var $40=$es;
      var $call=_sslow($36, $37, $38, $39, $40);
      $rest=$call;
      var $41=$m_addr;
      var $42=$rest;
      var $43=$stop_addr;
      var $44=$es;
      var $45=$stopst_addr;
      var $call28=_sslow($41, $42, $43, $44, $45);
      $tail=$call28;
      var $46=$tail;
      var $47=$stop_addr;
      var $cmp29=(($46)|0)==(($47)|0);
      if ($cmp29) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      __label__ = 20; break;
    case 19: 
      var $48=$rest;
      var $add_ptr=((($48)-(1))|0);
      $stp=$add_ptr;
      __label__ = 17; break;
    case 20: 
      var $49=$ss;
      var $add30=((($49)+(1))|0);
      $ssub=$add30;
      var $50=$es;
      var $sub=((($50)-(1))|0);
      $esub=$sub;
      var $51=$m_addr;
      var $52=$sp;
      var $53=$rest;
      var $54=$ssub;
      var $55=$esub;
      var $call31=_sslow($51, $52, $53, $54, $55);
      var $cmp32=(($call31)|0)!=0;
      if ($cmp32) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $56=$m_addr;
      var $57=$sp;
      var $58=$rest;
      var $59=$ssub;
      var $60=$esub;
      var $call34=_sdissect($56, $57, $58, $59, $60);
      $dp=$call34;
      __label__ = 23; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      var $61=$rest;
      $sp=$61;
      __label__ = 52; break;
    case 24: 
      var $62=$stop_addr;
      $stp=$62;
      __label__ = 25; break;
    case 25: 
      var $63=$m_addr;
      var $64=$sp;
      var $65=$stp;
      var $66=$ss;
      var $67=$es;
      var $call38=_sslow($63, $64, $65, $66, $67);
      $rest=$call38;
      var $68=$m_addr;
      var $69=$rest;
      var $70=$stop_addr;
      var $71=$es;
      var $72=$stopst_addr;
      var $call39=_sslow($68, $69, $70, $71, $72);
      $tail=$call39;
      var $73=$tail;
      var $74=$stop_addr;
      var $cmp40=(($73)|0)==(($74)|0);
      if ($cmp40) { __label__ = 26; break; } else { __label__ = 27; break; }
    case 26: 
      __label__ = 28; break;
    case 27: 
      var $75=$rest;
      var $add_ptr43=((($75)-(1))|0);
      $stp=$add_ptr43;
      __label__ = 25; break;
    case 28: 
      var $76=$ss;
      var $add45=((($76)+(1))|0);
      $ssub=$add45;
      var $77=$es;
      var $sub46=((($77)-(1))|0);
      $esub=$sub46;
      var $78=$sp;
      $ssp=$78;
      var $79=$ssp;
      $oldssp=$79;
      __label__ = 29; break;
    case 29: 
      var $80=$m_addr;
      var $81=$ssp;
      var $82=$rest;
      var $83=$ssub;
      var $84=$esub;
      var $call48=_sslow($80, $81, $82, $83, $84);
      $sep=$call48;
      var $85=$sep;
      var $cmp49=(($85)|0)==0;
      if ($cmp49) { __label__ = 31; break; } else { __label__ = 30; break; }
    case 30: 
      var $86=$sep;
      var $87=$ssp;
      var $cmp50=(($86)|0)==(($87)|0);
      if ($cmp50) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      var $88=$ssp;
      $oldssp=$88;
      var $89=$sep;
      $ssp=$89;
      __label__ = 29; break;
    case 33: 
      var $90=$sep;
      var $cmp54=(($90)|0)==0;
      if ($cmp54) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $91=$ssp;
      $sep=$91;
      var $92=$oldssp;
      $ssp=$92;
      __label__ = 35; break;
    case 35: 
      var $93=$m_addr;
      var $94=$ssp;
      var $95=$sep;
      var $96=$ssub;
      var $97=$esub;
      var $call57=_sdissect($93, $94, $95, $96, $97);
      $dp=$call57;
      var $98=$rest;
      $sp=$98;
      __label__ = 52; break;
    case 36: 
      var $99=$stop_addr;
      $stp=$99;
      __label__ = 37; break;
    case 37: 
      var $100=$m_addr;
      var $101=$sp;
      var $102=$stp;
      var $103=$ss;
      var $104=$es;
      var $call60=_sslow($100, $101, $102, $103, $104);
      $rest=$call60;
      var $105=$m_addr;
      var $106=$rest;
      var $107=$stop_addr;
      var $108=$es;
      var $109=$stopst_addr;
      var $call61=_sslow($105, $106, $107, $108, $109);
      $tail=$call61;
      var $110=$tail;
      var $111=$stop_addr;
      var $cmp62=(($110)|0)==(($111)|0);
      if ($cmp62) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      __label__ = 40; break;
    case 39: 
      var $112=$rest;
      var $add_ptr65=((($112)-(1))|0);
      $stp=$add_ptr65;
      __label__ = 37; break;
    case 40: 
      var $113=$ss;
      var $add67=((($113)+(1))|0);
      $ssub=$add67;
      var $114=$ss;
      var $115=$ss;
      var $116=$m_addr;
      var $g68=(($116)|0);
      var $117=HEAP32[(($g68)>>2)];
      var $strip69=(($117+4)|0);
      var $118=HEAP32[(($strip69)>>2)];
      var $arrayidx70=(($118+($115<<2))|0);
      var $119=HEAP32[(($arrayidx70)>>2)];
      var $and71=$119 & 134217727;
      var $add72=((($114)+($and71))|0);
      var $sub73=((($add72)-(1))|0);
      $esub=$sub73;
      __label__ = 41; break;
    case 41: 
      var $120=$m_addr;
      var $121=$sp;
      var $122=$rest;
      var $123=$ssub;
      var $124=$esub;
      var $call75=_sslow($120, $121, $122, $123, $124);
      var $125=$rest;
      var $cmp76=(($call75)|0)==(($125)|0);
      if ($cmp76) { __label__ = 42; break; } else { __label__ = 43; break; }
    case 42: 
      __label__ = 47; break;
    case 43: 
      var $126=$esub;
      var $inc79=((($126)+(1))|0);
      $esub=$inc79;
      var $127=$esub;
      var $add80=((($127)+(1))|0);
      $ssub=$add80;
      var $128=$esub;
      var $129=$m_addr;
      var $g81=(($129)|0);
      var $130=HEAP32[(($g81)>>2)];
      var $strip82=(($130+4)|0);
      var $131=HEAP32[(($strip82)>>2)];
      var $arrayidx83=(($131+($128<<2))|0);
      var $132=HEAP32[(($arrayidx83)>>2)];
      var $and84=$132 & 134217727;
      var $133=$esub;
      var $add85=((($133)+($and84))|0);
      $esub=$add85;
      var $134=$esub;
      var $135=$m_addr;
      var $g86=(($135)|0);
      var $136=HEAP32[(($g86)>>2)];
      var $strip87=(($136+4)|0);
      var $137=HEAP32[(($strip87)>>2)];
      var $arrayidx88=(($137+($134<<2))|0);
      var $138=HEAP32[(($arrayidx88)>>2)];
      var $and89=$138 & -134217728;
      var $cmp90=(($and89)|0)==-2013265920;
      if ($cmp90) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $139=$esub;
      var $dec=((($139)-(1))|0);
      $esub=$dec;
      __label__ = 46; break;
    case 45: 
      __label__ = 46; break;
    case 46: 
      __label__ = 41; break;
    case 47: 
      var $140=$m_addr;
      var $141=$sp;
      var $142=$rest;
      var $143=$ssub;
      var $144=$esub;
      var $call95=_sdissect($140, $141, $142, $143, $144);
      $dp=$call95;
      var $145=$rest;
      $sp=$145;
      __label__ = 52; break;
    case 48: 
      __label__ = 52; break;
    case 49: 
      var $146=$ss;
      var $147=$m_addr;
      var $g98=(($147)|0);
      var $148=HEAP32[(($g98)>>2)];
      var $strip99=(($148+4)|0);
      var $149=HEAP32[(($strip99)>>2)];
      var $arrayidx100=(($149+($146<<2))|0);
      var $150=HEAP32[(($arrayidx100)>>2)];
      var $and101=$150 & 134217727;
      $i=$and101;
      var $151=$sp;
      var $152=$m_addr;
      var $offp=(($152+12)|0);
      var $153=HEAP32[(($offp)>>2)];
      var $sub_ptr_lhs_cast=$151;
      var $sub_ptr_rhs_cast=$153;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $154=$i;
      var $155=$m_addr;
      var $pmatch=(($155+8)|0);
      var $156=HEAP32[(($pmatch)>>2)];
      var $arrayidx102=(($156+($154<<3))|0);
      var $rm_so=(($arrayidx102)|0);
      HEAP32[(($rm_so)>>2)]=$sub_ptr_sub;
      __label__ = 52; break;
    case 50: 
      var $157=$ss;
      var $158=$m_addr;
      var $g104=(($158)|0);
      var $159=HEAP32[(($g104)>>2)];
      var $strip105=(($159+4)|0);
      var $160=HEAP32[(($strip105)>>2)];
      var $arrayidx106=(($160+($157<<2))|0);
      var $161=HEAP32[(($arrayidx106)>>2)];
      var $and107=$161 & 134217727;
      $i=$and107;
      var $162=$sp;
      var $163=$m_addr;
      var $offp108=(($163+12)|0);
      var $164=HEAP32[(($offp108)>>2)];
      var $sub_ptr_lhs_cast109=$162;
      var $sub_ptr_rhs_cast110=$164;
      var $sub_ptr_sub111=((($sub_ptr_lhs_cast109)-($sub_ptr_rhs_cast110))|0);
      var $165=$i;
      var $166=$m_addr;
      var $pmatch112=(($166+8)|0);
      var $167=HEAP32[(($pmatch112)>>2)];
      var $arrayidx113=(($167+($165<<3))|0);
      var $rm_eo=(($arrayidx113+4)|0);
      HEAP32[(($rm_eo)>>2)]=$sub_ptr_sub111;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $168=$es;
      $ss=$168;
      __label__ = 3; break;
    case 54: 
      var $169=$sp;
      ;
      return $169;
    default: assert(0, "bad label: " + __label__);
  }
}
_sdissect["X"]=1;

function _sbackref($m, $start, $stop, $startst, $stopst, $lev) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $start_addr;
      var $stop_addr;
      var $startst_addr;
      var $stopst_addr;
      var $lev_addr;
      var $i;
      var $ss;
      var $sp;
      var $ssub;
      var $esub;
      var $ssp;
      var $dp;
      var $len;
      var $hard;
      var $s;
      var $offsave;
      var $cs;
      $m_addr=$m;
      $start_addr=$start;
      $stop_addr=$stop;
      $startst_addr=$startst;
      $stopst_addr=$stopst;
      $lev_addr=$lev;
      var $0=$start_addr;
      $sp=$0;
      $hard=0;
      var $1=$startst_addr;
      $ss=$1;
      __label__ = 3; break;
    case 3: 
      var $2=$hard;
      var $tobool=(($2)|0)!=0;
      if ($tobool) { var $5 = 0;__label__ = 5; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$ss;
      var $4=$stopst_addr;
      var $cmp=(($3)|0) < (($4)|0);
      var $5 = $cmp;__label__ = 5; break;
    case 5: 
      var $5;
      if ($5) { __label__ = 6; break; } else { __label__ = 70; break; }
    case 6: 
      var $6=$ss;
      var $7=$m_addr;
      var $g=(($7)|0);
      var $8=HEAP32[(($g)>>2)];
      var $strip=(($8+4)|0);
      var $9=HEAP32[(($strip)>>2)];
      var $arrayidx=(($9+($6<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      $s=$10;
      var $and=$10 & -134217728;
      if ((($and)|0) == 268435456) {
        __label__ = 7; break;
      }
      else if ((($and)|0) == 671088640) {
        __label__ = 11; break;
      }
      else if ((($and)|0) == 805306368) {
        __label__ = 14; break;
      }
      else if ((($and)|0) == 402653184) {
        __label__ = 18; break;
      }
      else if ((($and)|0) == 536870912) {
        __label__ = 26; break;
      }
      else if ((($and)|0) == -1744830464) {
        __label__ = 34; break;
      }
      else if ((($and)|0) == -1610612736) {
        __label__ = 48; break;
      }
      else if ((($and)|0) == 1610612736) {
        __label__ = 62; break;
      }
      else if ((($and)|0) == -2147483648) {
        __label__ = 63; break;
      }
      else {
      __label__ = 67; break;
      }
      
    case 7: 
      var $11=$sp;
      var $12=$stop_addr;
      var $cmp1=(($11)|0)==(($12)|0);
      if ($cmp1) { __label__ = 9; break; } else { __label__ = 8; break; }
    case 8: 
      var $13=$sp;
      var $incdec_ptr=(($13+1)|0);
      $sp=$incdec_ptr;
      var $14=HEAP8[($13)];
      var $conv=(($14 << 24) >> 24);
      var $15=$s;
      var $and2=$15 & 134217727;
      var $conv3=(($and2) & 255);
      var $conv4=(($conv3 << 24) >> 24);
      var $cmp5=(($conv)|0)!=(($conv4)|0);
      if ($cmp5) { __label__ = 9; break; } else { __label__ = 10; break; }
    case 9: 
      $retval=0;
      __label__ = 111; break;
    case 10: 
      __label__ = 68; break;
    case 11: 
      var $16=$sp;
      var $17=$stop_addr;
      var $cmp8=(($16)|0)==(($17)|0);
      if ($cmp8) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      $retval=0;
      __label__ = 111; break;
    case 13: 
      var $18=$sp;
      var $incdec_ptr12=(($18+1)|0);
      $sp=$incdec_ptr12;
      __label__ = 68; break;
    case 14: 
      var $19=$s;
      var $and14=$19 & 134217727;
      var $20=$m_addr;
      var $g15=(($20)|0);
      var $21=HEAP32[(($g15)>>2)];
      var $sets=(($21+16)|0);
      var $22=HEAP32[(($sets)>>2)];
      var $arrayidx16=(($22+($and14<<4))|0);
      $cs=$arrayidx16;
      var $23=$sp;
      var $24=$stop_addr;
      var $cmp17=(($23)|0)==(($24)|0);
      if ($cmp17) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $25=$sp;
      var $incdec_ptr20=(($25+1)|0);
      $sp=$incdec_ptr20;
      var $26=HEAP8[($25)];
      var $idxprom=(($26)&255);
      var $27=$cs;
      var $ptr=(($27)|0);
      var $28=HEAP32[(($ptr)>>2)];
      var $arrayidx21=(($28+$idxprom)|0);
      var $29=HEAP8[($arrayidx21)];
      var $conv22=(($29)&255);
      var $30=$cs;
      var $mask=(($30+4)|0);
      var $31=HEAP8[($mask)];
      var $conv23=(($31)&255);
      var $and24=$conv22 & $conv23;
      var $tobool25=(($and24)|0)!=0;
      if ($tobool25) { __label__ = 17; break; } else { __label__ = 16; break; }
    case 16: 
      $retval=0;
      __label__ = 111; break;
    case 17: 
      __label__ = 68; break;
    case 18: 
      var $32=$sp;
      var $33=$m_addr;
      var $beginp=(($33+16)|0);
      var $34=HEAP32[(($beginp)>>2)];
      var $cmp29=(($32)|0)==(($34)|0);
      if ($cmp29) { __label__ = 19; break; } else { __label__ = 20; break; }
    case 19: 
      var $35=$m_addr;
      var $eflags=(($35+4)|0);
      var $36=HEAP32[(($eflags)>>2)];
      var $and31=$36 & 1;
      var $tobool32=(($and31)|0)!=0;
      if ($tobool32) { __label__ = 20; break; } else { __label__ = 23; break; }
    case 20: 
      var $37=$sp;
      var $38=$m_addr;
      var $endp=(($38+20)|0);
      var $39=HEAP32[(($endp)>>2)];
      var $cmp34=(($37)>>>0) < (($39)>>>0);
      if ($cmp34) { __label__ = 21; break; } else { __label__ = 24; break; }
    case 21: 
      var $40=$sp;
      var $add_ptr=((($40)-(1))|0);
      var $41=HEAP8[($add_ptr)];
      var $conv37=(($41 << 24) >> 24);
      var $cmp38=(($conv37)|0)==10;
      if ($cmp38) { __label__ = 22; break; } else { __label__ = 24; break; }
    case 22: 
      var $42=$m_addr;
      var $g41=(($42)|0);
      var $43=HEAP32[(($g41)>>2)];
      var $cflags=(($43+24)|0);
      var $44=HEAP32[(($cflags)>>2)];
      var $and42=$44 & 8;
      var $tobool43=(($and42)|0)!=0;
      if ($tobool43) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      __label__ = 25; break;
    case 24: 
      $retval=0;
      __label__ = 111; break;
    case 25: 
      __label__ = 68; break;
    case 26: 
      var $45=$sp;
      var $46=$m_addr;
      var $endp47=(($46+20)|0);
      var $47=HEAP32[(($endp47)>>2)];
      var $cmp48=(($45)|0)==(($47)|0);
      if ($cmp48) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $48=$m_addr;
      var $eflags51=(($48+4)|0);
      var $49=HEAP32[(($eflags51)>>2)];
      var $and52=$49 & 2;
      var $tobool53=(($and52)|0)!=0;
      if ($tobool53) { __label__ = 28; break; } else { __label__ = 31; break; }
    case 28: 
      var $50=$sp;
      var $51=$m_addr;
      var $endp55=(($51+20)|0);
      var $52=HEAP32[(($endp55)>>2)];
      var $cmp56=(($50)>>>0) < (($52)>>>0);
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 32; break; }
    case 29: 
      var $53=$sp;
      var $54=HEAP8[($53)];
      var $conv59=(($54 << 24) >> 24);
      var $cmp60=(($conv59)|0)==10;
      if ($cmp60) { __label__ = 30; break; } else { __label__ = 32; break; }
    case 30: 
      var $55=$m_addr;
      var $g63=(($55)|0);
      var $56=HEAP32[(($g63)>>2)];
      var $cflags64=(($56+24)|0);
      var $57=HEAP32[(($cflags64)>>2)];
      var $and65=$57 & 8;
      var $tobool66=(($and65)|0)!=0;
      if ($tobool66) { __label__ = 31; break; } else { __label__ = 32; break; }
    case 31: 
      __label__ = 33; break;
    case 32: 
      $retval=0;
      __label__ = 111; break;
    case 33: 
      __label__ = 68; break;
    case 34: 
      var $58=$sp;
      var $59=$m_addr;
      var $beginp71=(($59+16)|0);
      var $60=HEAP32[(($beginp71)>>2)];
      var $cmp72=(($58)|0)==(($60)|0);
      if ($cmp72) { __label__ = 35; break; } else { __label__ = 36; break; }
    case 35: 
      var $61=$m_addr;
      var $eflags75=(($61+4)|0);
      var $62=HEAP32[(($eflags75)>>2)];
      var $and76=$62 & 1;
      var $tobool77=(($and76)|0)!=0;
      if ($tobool77) { __label__ = 36; break; } else { __label__ = 42; break; }
    case 36: 
      var $63=$sp;
      var $64=$m_addr;
      var $endp79=(($64+20)|0);
      var $65=HEAP32[(($endp79)>>2)];
      var $cmp80=(($63)>>>0) < (($65)>>>0);
      if ($cmp80) { __label__ = 37; break; } else { __label__ = 39; break; }
    case 37: 
      var $66=$sp;
      var $add_ptr83=((($66)-(1))|0);
      var $67=HEAP8[($add_ptr83)];
      var $conv84=(($67 << 24) >> 24);
      var $cmp85=(($conv84)|0)==10;
      if ($cmp85) { __label__ = 38; break; } else { __label__ = 39; break; }
    case 38: 
      var $68=$m_addr;
      var $g88=(($68)|0);
      var $69=HEAP32[(($g88)>>2)];
      var $cflags89=(($69+24)|0);
      var $70=HEAP32[(($cflags89)>>2)];
      var $and90=$70 & 8;
      var $tobool91=(($and90)|0)!=0;
      if ($tobool91) { __label__ = 42; break; } else { __label__ = 39; break; }
    case 39: 
      var $71=$sp;
      var $72=$m_addr;
      var $beginp93=(($72+16)|0);
      var $73=HEAP32[(($beginp93)>>2)];
      var $cmp94=(($71)>>>0) > (($73)>>>0);
      if ($cmp94) { __label__ = 40; break; } else { __label__ = 46; break; }
    case 40: 
      var $74=$sp;
      var $add_ptr97=((($74)-(1))|0);
      var $75=HEAP8[($add_ptr97)];
      var $conv98=(($75)&255);
      var $call=_isalnum($conv98);
      var $tobool99=(($call)|0)!=0;
      if ($tobool99) { __label__ = 46; break; } else { __label__ = 41; break; }
    case 41: 
      var $76=$sp;
      var $add_ptr101=((($76)-(1))|0);
      var $77=HEAP8[($add_ptr101)];
      var $conv102=(($77 << 24) >> 24);
      var $cmp103=(($conv102)|0)==95;
      if ($cmp103) { __label__ = 46; break; } else { __label__ = 42; break; }
    case 42: 
      var $78=$sp;
      var $79=$m_addr;
      var $endp106=(($79+20)|0);
      var $80=HEAP32[(($endp106)>>2)];
      var $cmp107=(($78)>>>0) < (($80)>>>0);
      if ($cmp107) { __label__ = 43; break; } else { __label__ = 46; break; }
    case 43: 
      var $81=$sp;
      var $82=HEAP8[($81)];
      var $conv110=(($82)&255);
      var $call111=_isalnum($conv110);
      var $tobool112=(($call111)|0)!=0;
      if ($tobool112) { __label__ = 45; break; } else { __label__ = 44; break; }
    case 44: 
      var $83=$sp;
      var $84=HEAP8[($83)];
      var $conv114=(($84 << 24) >> 24);
      var $cmp115=(($conv114)|0)==95;
      if ($cmp115) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      __label__ = 47; break;
    case 46: 
      $retval=0;
      __label__ = 111; break;
    case 47: 
      __label__ = 68; break;
    case 48: 
      var $85=$sp;
      var $86=$m_addr;
      var $endp121=(($86+20)|0);
      var $87=HEAP32[(($endp121)>>2)];
      var $cmp122=(($85)|0)==(($87)|0);
      if ($cmp122) { __label__ = 49; break; } else { __label__ = 50; break; }
    case 49: 
      var $88=$m_addr;
      var $eflags125=(($88+4)|0);
      var $89=HEAP32[(($eflags125)>>2)];
      var $and126=$89 & 2;
      var $tobool127=(($and126)|0)!=0;
      if ($tobool127) { __label__ = 50; break; } else { __label__ = 56; break; }
    case 50: 
      var $90=$sp;
      var $91=$m_addr;
      var $endp129=(($91+20)|0);
      var $92=HEAP32[(($endp129)>>2)];
      var $cmp130=(($90)>>>0) < (($92)>>>0);
      if ($cmp130) { __label__ = 51; break; } else { __label__ = 53; break; }
    case 51: 
      var $93=$sp;
      var $94=HEAP8[($93)];
      var $conv133=(($94 << 24) >> 24);
      var $cmp134=(($conv133)|0)==10;
      if ($cmp134) { __label__ = 52; break; } else { __label__ = 53; break; }
    case 52: 
      var $95=$m_addr;
      var $g137=(($95)|0);
      var $96=HEAP32[(($g137)>>2)];
      var $cflags138=(($96+24)|0);
      var $97=HEAP32[(($cflags138)>>2)];
      var $and139=$97 & 8;
      var $tobool140=(($and139)|0)!=0;
      if ($tobool140) { __label__ = 56; break; } else { __label__ = 53; break; }
    case 53: 
      var $98=$sp;
      var $99=$m_addr;
      var $endp142=(($99+20)|0);
      var $100=HEAP32[(($endp142)>>2)];
      var $cmp143=(($98)>>>0) < (($100)>>>0);
      if ($cmp143) { __label__ = 54; break; } else { __label__ = 60; break; }
    case 54: 
      var $101=$sp;
      var $102=HEAP8[($101)];
      var $conv146=(($102)&255);
      var $call147=_isalnum($conv146);
      var $tobool148=(($call147)|0)!=0;
      if ($tobool148) { __label__ = 60; break; } else { __label__ = 55; break; }
    case 55: 
      var $103=$sp;
      var $104=HEAP8[($103)];
      var $conv150=(($104 << 24) >> 24);
      var $cmp151=(($conv150)|0)==95;
      if ($cmp151) { __label__ = 60; break; } else { __label__ = 56; break; }
    case 56: 
      var $105=$sp;
      var $106=$m_addr;
      var $beginp154=(($106+16)|0);
      var $107=HEAP32[(($beginp154)>>2)];
      var $cmp155=(($105)>>>0) > (($107)>>>0);
      if ($cmp155) { __label__ = 57; break; } else { __label__ = 60; break; }
    case 57: 
      var $108=$sp;
      var $add_ptr158=((($108)-(1))|0);
      var $109=HEAP8[($add_ptr158)];
      var $conv159=(($109)&255);
      var $call160=_isalnum($conv159);
      var $tobool161=(($call160)|0)!=0;
      if ($tobool161) { __label__ = 59; break; } else { __label__ = 58; break; }
    case 58: 
      var $110=$sp;
      var $add_ptr163=((($110)-(1))|0);
      var $111=HEAP8[($add_ptr163)];
      var $conv164=(($111 << 24) >> 24);
      var $cmp165=(($conv164)|0)==95;
      if ($cmp165) { __label__ = 59; break; } else { __label__ = 60; break; }
    case 59: 
      __label__ = 61; break;
    case 60: 
      $retval=0;
      __label__ = 111; break;
    case 61: 
      __label__ = 68; break;
    case 62: 
      __label__ = 68; break;
    case 63: 
      var $112=$ss;
      var $inc=((($112)+(1))|0);
      $ss=$inc;
      var $113=$ss;
      var $114=$m_addr;
      var $g172=(($114)|0);
      var $115=HEAP32[(($g172)>>2)];
      var $strip173=(($115+4)|0);
      var $116=HEAP32[(($strip173)>>2)];
      var $arrayidx174=(($116+($113<<2))|0);
      var $117=HEAP32[(($arrayidx174)>>2)];
      $s=$117;
      __label__ = 64; break;
    case 64: 
      var $118=$s;
      var $and175=$118 & 134217727;
      var $119=$ss;
      var $add=((($119)+($and175))|0);
      $ss=$add;
      __label__ = 65; break;
    case 65: 
      var $120=$ss;
      var $121=$m_addr;
      var $g176=(($121)|0);
      var $122=HEAP32[(($g176)>>2)];
      var $strip177=(($122+4)|0);
      var $123=HEAP32[(($strip177)>>2)];
      var $arrayidx178=(($123+($120<<2))|0);
      var $124=HEAP32[(($arrayidx178)>>2)];
      $s=$124;
      var $and179=$124 & -134217728;
      var $cmp180=(($and179)|0)!=-1879048192;
      if ($cmp180) { __label__ = 64; break; } else { __label__ = 66; break; }
    case 66: 
      __label__ = 68; break;
    case 67: 
      $hard=1;
      __label__ = 68; break;
    case 68: 
      __label__ = 69; break;
    case 69: 
      var $125=$ss;
      var $inc182=((($125)+(1))|0);
      $ss=$inc182;
      __label__ = 3; break;
    case 70: 
      var $126=$hard;
      var $tobool183=(($126)|0)!=0;
      if ($tobool183) { __label__ = 74; break; } else { __label__ = 71; break; }
    case 71: 
      var $127=$sp;
      var $128=$stop_addr;
      var $cmp185=(($127)|0)!=(($128)|0);
      if ($cmp185) { __label__ = 72; break; } else { __label__ = 73; break; }
    case 72: 
      $retval=0;
      __label__ = 111; break;
    case 73: 
      var $129=$sp;
      $retval=$129;
      __label__ = 111; break;
    case 74: 
      var $130=$ss;
      var $dec=((($130)-(1))|0);
      $ss=$dec;
      var $131=$ss;
      var $132=$m_addr;
      var $g190=(($132)|0);
      var $133=HEAP32[(($g190)>>2)];
      var $strip191=(($133+4)|0);
      var $134=HEAP32[(($strip191)>>2)];
      var $arrayidx192=(($134+($131<<2))|0);
      var $135=HEAP32[(($arrayidx192)>>2)];
      $s=$135;
      var $136=$s;
      var $and193=$136 & -134217728;
      if ((($and193)|0) == 939524096) {
        __label__ = 75; break;
      }
      else if ((($and193)|0) == 1476395008) {
        __label__ = 85; break;
      }
      else if ((($and193)|0) == 1207959552) {
        __label__ = 88; break;
      }
      else if ((($and193)|0) == 1342177280) {
        __label__ = 89; break;
      }
      else if ((($and193)|0) == 2013265920) {
        __label__ = 94; break;
      }
      else if ((($and193)|0) == 1744830464) {
        __label__ = 103; break;
      }
      else if ((($and193)|0) == 1879048192) {
        __label__ = 106; break;
      }
      else {
      __label__ = 109; break;
      }
      
    case 75: 
      var $137=$s;
      var $and195=$137 & 134217727;
      $i=$and195;
      var $138=$i;
      var $139=$m_addr;
      var $pmatch=(($139+8)|0);
      var $140=HEAP32[(($pmatch)>>2)];
      var $arrayidx196=(($140+($138<<3))|0);
      var $rm_eo=(($arrayidx196+4)|0);
      var $141=HEAP32[(($rm_eo)>>2)];
      var $cmp197=(($141)|0)==-1;
      if ($cmp197) { __label__ = 76; break; } else { __label__ = 77; break; }
    case 76: 
      $retval=0;
      __label__ = 111; break;
    case 77: 
      var $142=$i;
      var $143=$m_addr;
      var $pmatch201=(($143+8)|0);
      var $144=HEAP32[(($pmatch201)>>2)];
      var $arrayidx202=(($144+($142<<3))|0);
      var $rm_eo203=(($arrayidx202+4)|0);
      var $145=HEAP32[(($rm_eo203)>>2)];
      var $146=$i;
      var $147=$m_addr;
      var $pmatch204=(($147+8)|0);
      var $148=HEAP32[(($pmatch204)>>2)];
      var $arrayidx205=(($148+($146<<3))|0);
      var $rm_so=(($arrayidx205)|0);
      var $149=HEAP32[(($rm_so)>>2)];
      var $sub=((($145)-($149))|0);
      $len=$sub;
      var $150=$sp;
      var $151=$stop_addr;
      var $152=$len;
      var $idx_neg=(((-$152))|0);
      var $add_ptr206=(($151+$idx_neg)|0);
      var $cmp207=(($150)>>>0) > (($add_ptr206)>>>0);
      if ($cmp207) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      $retval=0;
      __label__ = 111; break;
    case 79: 
      var $153=$m_addr;
      var $offp=(($153+12)|0);
      var $154=HEAP32[(($offp)>>2)];
      var $155=$i;
      var $156=$m_addr;
      var $pmatch211=(($156+8)|0);
      var $157=HEAP32[(($pmatch211)>>2)];
      var $arrayidx212=(($157+($155<<3))|0);
      var $rm_so213=(($arrayidx212)|0);
      var $158=HEAP32[(($rm_so213)>>2)];
      var $add_ptr214=(($154+$158)|0);
      $ssp=$add_ptr214;
      var $159=$sp;
      var $160=$ssp;
      var $161=$len;
      var $call215=_memcmp($159, $160, $161);
      var $cmp216=(($call215)|0)!=0;
      if ($cmp216) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      $retval=0;
      __label__ = 111; break;
    case 81: 
      __label__ = 82; break;
    case 82: 
      var $162=$ss;
      var $163=$m_addr;
      var $g220=(($163)|0);
      var $164=HEAP32[(($g220)>>2)];
      var $strip221=(($164+4)|0);
      var $165=HEAP32[(($strip221)>>2)];
      var $arrayidx222=(($165+($162<<2))|0);
      var $166=HEAP32[(($arrayidx222)>>2)];
      var $167=$i;
      var $or=1073741824 | $167;
      var $cmp223=(($166)|0)!=(($or)|0);
      if ($cmp223) { __label__ = 83; break; } else { __label__ = 84; break; }
    case 83: 
      var $168=$ss;
      var $inc225=((($168)+(1))|0);
      $ss=$inc225;
      __label__ = 82; break;
    case 84: 
      var $169=$m_addr;
      var $170=$sp;
      var $171=$len;
      var $add_ptr226=(($170+$171)|0);
      var $172=$stop_addr;
      var $173=$ss;
      var $add227=((($173)+(1))|0);
      var $174=$stopst_addr;
      var $175=$lev_addr;
      var $call228=_sbackref($169, $add_ptr226, $172, $add227, $174, $175);
      $retval=$call228;
      __label__ = 111; break;
    case 85: 
      var $176=$m_addr;
      var $177=$sp;
      var $178=$stop_addr;
      var $179=$ss;
      var $add230=((($179)+(1))|0);
      var $180=$stopst_addr;
      var $181=$lev_addr;
      var $call231=_sbackref($176, $177, $178, $add230, $180, $181);
      $dp=$call231;
      var $182=$dp;
      var $cmp232=(($182)|0)!=0;
      if ($cmp232) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $183=$dp;
      $retval=$183;
      __label__ = 111; break;
    case 87: 
      var $184=$m_addr;
      var $185=$sp;
      var $186=$stop_addr;
      var $187=$ss;
      var $188=$s;
      var $and236=$188 & 134217727;
      var $add237=((($187)+($and236))|0);
      var $add238=((($add237)+(1))|0);
      var $189=$stopst_addr;
      var $190=$lev_addr;
      var $call239=_sbackref($184, $185, $186, $add238, $189, $190);
      $retval=$call239;
      __label__ = 111; break;
    case 88: 
      var $191=$sp;
      var $192=$lev_addr;
      var $add241=((($192)+(1))|0);
      var $193=$m_addr;
      var $lastpos=(($193+28)|0);
      var $194=HEAP32[(($lastpos)>>2)];
      var $arrayidx242=(($194+($add241<<2))|0);
      HEAP32[(($arrayidx242)>>2)]=$191;
      var $195=$m_addr;
      var $196=$sp;
      var $197=$stop_addr;
      var $198=$ss;
      var $add243=((($198)+(1))|0);
      var $199=$stopst_addr;
      var $200=$lev_addr;
      var $add244=((($200)+(1))|0);
      var $call245=_sbackref($195, $196, $197, $add243, $199, $add244);
      $retval=$call245;
      __label__ = 111; break;
    case 89: 
      var $201=$sp;
      var $202=$lev_addr;
      var $203=$m_addr;
      var $lastpos247=(($203+28)|0);
      var $204=HEAP32[(($lastpos247)>>2)];
      var $arrayidx248=(($204+($202<<2))|0);
      var $205=HEAP32[(($arrayidx248)>>2)];
      var $cmp249=(($201)|0)==(($205)|0);
      if ($cmp249) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $206=$m_addr;
      var $207=$sp;
      var $208=$stop_addr;
      var $209=$ss;
      var $add252=((($209)+(1))|0);
      var $210=$stopst_addr;
      var $211=$lev_addr;
      var $sub253=((($211)-(1))|0);
      var $call254=_sbackref($206, $207, $208, $add252, $210, $sub253);
      $retval=$call254;
      __label__ = 111; break;
    case 91: 
      var $212=$sp;
      var $213=$lev_addr;
      var $214=$m_addr;
      var $lastpos256=(($214+28)|0);
      var $215=HEAP32[(($lastpos256)>>2)];
      var $arrayidx257=(($215+($213<<2))|0);
      HEAP32[(($arrayidx257)>>2)]=$212;
      var $216=$m_addr;
      var $217=$sp;
      var $218=$stop_addr;
      var $219=$ss;
      var $220=$s;
      var $and258=$220 & 134217727;
      var $sub259=((($219)-($and258))|0);
      var $add260=((($sub259)+(1))|0);
      var $221=$stopst_addr;
      var $222=$lev_addr;
      var $call261=_sbackref($216, $217, $218, $add260, $221, $222);
      $dp=$call261;
      var $223=$dp;
      var $cmp262=(($223)|0)==0;
      if ($cmp262) { __label__ = 92; break; } else { __label__ = 93; break; }
    case 92: 
      var $224=$m_addr;
      var $225=$sp;
      var $226=$stop_addr;
      var $227=$ss;
      var $add265=((($227)+(1))|0);
      var $228=$stopst_addr;
      var $229=$lev_addr;
      var $sub266=((($229)-(1))|0);
      var $call267=_sbackref($224, $225, $226, $add265, $228, $sub266);
      $retval=$call267;
      __label__ = 111; break;
    case 93: 
      var $230=$dp;
      $retval=$230;
      __label__ = 111; break;
    case 94: 
      var $231=$ss;
      var $add270=((($231)+(1))|0);
      $ssub=$add270;
      var $232=$ss;
      var $233=$s;
      var $and271=$233 & 134217727;
      var $add272=((($232)+($and271))|0);
      var $sub273=((($add272)-(1))|0);
      $esub=$sub273;
      __label__ = 95; break;
    case 95: 
      var $234=$m_addr;
      var $235=$sp;
      var $236=$stop_addr;
      var $237=$ssub;
      var $238=$esub;
      var $239=$lev_addr;
      var $call275=_sbackref($234, $235, $236, $237, $238, $239);
      $dp=$call275;
      var $240=$dp;
      var $cmp276=(($240)|0)!=0;
      if ($cmp276) { __label__ = 96; break; } else { __label__ = 97; break; }
    case 96: 
      var $241=$dp;
      $retval=$241;
      __label__ = 111; break;
    case 97: 
      var $242=$esub;
      var $243=$m_addr;
      var $g280=(($243)|0);
      var $244=HEAP32[(($g280)>>2)];
      var $strip281=(($244+4)|0);
      var $245=HEAP32[(($strip281)>>2)];
      var $arrayidx282=(($245+($242<<2))|0);
      var $246=HEAP32[(($arrayidx282)>>2)];
      var $and283=$246 & -134217728;
      var $cmp284=(($and283)|0)==-1879048192;
      if ($cmp284) { __label__ = 98; break; } else { __label__ = 99; break; }
    case 98: 
      $retval=0;
      __label__ = 111; break;
    case 99: 
      var $247=$esub;
      var $inc288=((($247)+(1))|0);
      $esub=$inc288;
      var $248=$esub;
      var $add289=((($248)+(1))|0);
      $ssub=$add289;
      var $249=$esub;
      var $250=$m_addr;
      var $g290=(($250)|0);
      var $251=HEAP32[(($g290)>>2)];
      var $strip291=(($251+4)|0);
      var $252=HEAP32[(($strip291)>>2)];
      var $arrayidx292=(($252+($249<<2))|0);
      var $253=HEAP32[(($arrayidx292)>>2)];
      var $and293=$253 & 134217727;
      var $254=$esub;
      var $add294=((($254)+($and293))|0);
      $esub=$add294;
      var $255=$esub;
      var $256=$m_addr;
      var $g295=(($256)|0);
      var $257=HEAP32[(($g295)>>2)];
      var $strip296=(($257+4)|0);
      var $258=HEAP32[(($strip296)>>2)];
      var $arrayidx297=(($258+($255<<2))|0);
      var $259=HEAP32[(($arrayidx297)>>2)];
      var $and298=$259 & -134217728;
      var $cmp299=(($and298)|0)==-2013265920;
      if ($cmp299) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $260=$esub;
      var $dec302=((($260)-(1))|0);
      $esub=$dec302;
      __label__ = 102; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 95; break;
    case 103: 
      var $261=$s;
      var $and306=$261 & 134217727;
      $i=$and306;
      var $262=$i;
      var $263=$m_addr;
      var $pmatch307=(($263+8)|0);
      var $264=HEAP32[(($pmatch307)>>2)];
      var $arrayidx308=(($264+($262<<3))|0);
      var $rm_so309=(($arrayidx308)|0);
      var $265=HEAP32[(($rm_so309)>>2)];
      $offsave=$265;
      var $266=$sp;
      var $267=$m_addr;
      var $offp310=(($267+12)|0);
      var $268=HEAP32[(($offp310)>>2)];
      var $sub_ptr_lhs_cast=$266;
      var $sub_ptr_rhs_cast=$268;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $269=$i;
      var $270=$m_addr;
      var $pmatch311=(($270+8)|0);
      var $271=HEAP32[(($pmatch311)>>2)];
      var $arrayidx312=(($271+($269<<3))|0);
      var $rm_so313=(($arrayidx312)|0);
      HEAP32[(($rm_so313)>>2)]=$sub_ptr_sub;
      var $272=$m_addr;
      var $273=$sp;
      var $274=$stop_addr;
      var $275=$ss;
      var $add314=((($275)+(1))|0);
      var $276=$stopst_addr;
      var $277=$lev_addr;
      var $call315=_sbackref($272, $273, $274, $add314, $276, $277);
      $dp=$call315;
      var $278=$dp;
      var $cmp316=(($278)|0)!=0;
      if ($cmp316) { __label__ = 104; break; } else { __label__ = 105; break; }
    case 104: 
      var $279=$dp;
      $retval=$279;
      __label__ = 111; break;
    case 105: 
      var $280=$offsave;
      var $281=$i;
      var $282=$m_addr;
      var $pmatch320=(($282+8)|0);
      var $283=HEAP32[(($pmatch320)>>2)];
      var $arrayidx321=(($283+($281<<3))|0);
      var $rm_so322=(($arrayidx321)|0);
      HEAP32[(($rm_so322)>>2)]=$280;
      $retval=0;
      __label__ = 111; break;
    case 106: 
      var $284=$s;
      var $and324=$284 & 134217727;
      $i=$and324;
      var $285=$i;
      var $286=$m_addr;
      var $pmatch325=(($286+8)|0);
      var $287=HEAP32[(($pmatch325)>>2)];
      var $arrayidx326=(($287+($285<<3))|0);
      var $rm_eo327=(($arrayidx326+4)|0);
      var $288=HEAP32[(($rm_eo327)>>2)];
      $offsave=$288;
      var $289=$sp;
      var $290=$m_addr;
      var $offp328=(($290+12)|0);
      var $291=HEAP32[(($offp328)>>2)];
      var $sub_ptr_lhs_cast329=$289;
      var $sub_ptr_rhs_cast330=$291;
      var $sub_ptr_sub331=((($sub_ptr_lhs_cast329)-($sub_ptr_rhs_cast330))|0);
      var $292=$i;
      var $293=$m_addr;
      var $pmatch332=(($293+8)|0);
      var $294=HEAP32[(($pmatch332)>>2)];
      var $arrayidx333=(($294+($292<<3))|0);
      var $rm_eo334=(($arrayidx333+4)|0);
      HEAP32[(($rm_eo334)>>2)]=$sub_ptr_sub331;
      var $295=$m_addr;
      var $296=$sp;
      var $297=$stop_addr;
      var $298=$ss;
      var $add335=((($298)+(1))|0);
      var $299=$stopst_addr;
      var $300=$lev_addr;
      var $call336=_sbackref($295, $296, $297, $add335, $299, $300);
      $dp=$call336;
      var $301=$dp;
      var $cmp337=(($301)|0)!=0;
      if ($cmp337) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $302=$dp;
      $retval=$302;
      __label__ = 111; break;
    case 108: 
      var $303=$offsave;
      var $304=$i;
      var $305=$m_addr;
      var $pmatch341=(($305+8)|0);
      var $306=HEAP32[(($pmatch341)>>2)];
      var $arrayidx342=(($306+($304<<3))|0);
      var $rm_eo343=(($arrayidx342+4)|0);
      HEAP32[(($rm_eo343)>>2)]=$303;
      $retval=0;
      __label__ = 111; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      $retval=((STRING_TABLE.__str313)|0);
      __label__ = 111; break;
    case 111: 
      var $307=$retval;
      ;
      return $307;
    default: assert(0, "bad label: " + __label__);
  }
}
_sbackref["X"]=1;

function _sstep($g, $start, $stop, $bef, $ch, $aft) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $g_addr;
      var $start_addr;
      var $stop_addr;
      var $bef_addr;
      var $ch_addr;
      var $aft_addr;
      var $cs;
      var $s;
      var $pc;
      var $here;
      var $look;
      var $i;
      $g_addr=$g;
      $start_addr=$start;
      $stop_addr=$stop;
      $bef_addr=$bef;
      $ch_addr=$ch;
      $aft_addr=$aft;
      var $0=$start_addr;
      $pc=$0;
      var $1=$pc;
      var $shl=1 << $1;
      $here=$shl;
      __label__ = 3; break;
    case 3: 
      var $2=$pc;
      var $3=$stop_addr;
      var $cmp=(($2)|0)!=(($3)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 54; break; }
    case 4: 
      var $4=$pc;
      var $5=$g_addr;
      var $strip=(($5+4)|0);
      var $6=HEAP32[(($strip)>>2)];
      var $arrayidx=(($6+($4<<2))|0);
      var $7=HEAP32[(($arrayidx)>>2)];
      $s=$7;
      var $8=$s;
      var $and=$8 & -134217728;
      if ((($and)|0) == 134217728) {
        __label__ = 5; break;
      }
      else if ((($and)|0) == 268435456) {
        __label__ = 6; break;
      }
      else if ((($and)|0) == 402653184) {
        __label__ = 9; break;
      }
      else if ((($and)|0) == 536870912) {
        __label__ = 13; break;
      }
      else if ((($and)|0) == -1744830464) {
        __label__ = 17; break;
      }
      else if ((($and)|0) == -1610612736) {
        __label__ = 20; break;
      }
      else if ((($and)|0) == 671088640) {
        __label__ = 23; break;
      }
      else if ((($and)|0) == 805306368) {
        __label__ = 26; break;
      }
      else if ((($and)|0) == 939524096 || (($and)|0) == 1073741824) {
        __label__ = 30; break;
      }
      else if ((($and)|0) == 1207959552) {
        __label__ = 31; break;
      }
      else if ((($and)|0) == 1342177280) {
        __label__ = 32; break;
      }
      else if ((($and)|0) == 1476395008) {
        __label__ = 36; break;
      }
      else if ((($and)|0) == 1610612736) {
        __label__ = 37; break;
      }
      else if ((($and)|0) == 1744830464 || (($and)|0) == 1879048192) {
        __label__ = 38; break;
      }
      else if ((($and)|0) == 2013265920) {
        __label__ = 39; break;
      }
      else if ((($and)|0) == -2147483648) {
        __label__ = 40; break;
      }
      else if ((($and)|0) == -2013265920) {
        __label__ = 47; break;
      }
      else if ((($and)|0) == -1879048192) {
        __label__ = 50; break;
      }
      else {
      __label__ = 51; break;
      }
      
    case 5: 
      __label__ = 52; break;
    case 6: 
      var $9=$ch_addr;
      var $10=$s;
      var $and2=$10 & 134217727;
      var $conv=(($and2) & 255);
      var $conv3=(($conv << 24) >> 24);
      var $cmp4=(($9)|0)==(($conv3)|0);
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 8; break; }
    case 7: 
      var $11=$bef_addr;
      var $12=$here;
      var $and6=$11 & $12;
      var $shl7=$and6 << 1;
      var $13=$aft_addr;
      var $or=$13 | $shl7;
      $aft_addr=$or;
      __label__ = 8; break;
    case 8: 
      __label__ = 52; break;
    case 9: 
      var $14=$ch_addr;
      var $cmp9=(($14)|0)==129;
      if ($cmp9) { __label__ = 11; break; } else { __label__ = 10; break; }
    case 10: 
      var $15=$ch_addr;
      var $cmp11=(($15)|0)==131;
      if ($cmp11) { __label__ = 11; break; } else { __label__ = 12; break; }
    case 11: 
      var $16=$bef_addr;
      var $17=$here;
      var $and14=$16 & $17;
      var $shl15=$and14 << 1;
      var $18=$aft_addr;
      var $or16=$18 | $shl15;
      $aft_addr=$or16;
      __label__ = 12; break;
    case 12: 
      __label__ = 52; break;
    case 13: 
      var $19=$ch_addr;
      var $cmp19=(($19)|0)==130;
      if ($cmp19) { __label__ = 15; break; } else { __label__ = 14; break; }
    case 14: 
      var $20=$ch_addr;
      var $cmp22=(($20)|0)==131;
      if ($cmp22) { __label__ = 15; break; } else { __label__ = 16; break; }
    case 15: 
      var $21=$bef_addr;
      var $22=$here;
      var $and25=$21 & $22;
      var $shl26=$and25 << 1;
      var $23=$aft_addr;
      var $or27=$23 | $shl26;
      $aft_addr=$or27;
      __label__ = 16; break;
    case 16: 
      __label__ = 52; break;
    case 17: 
      var $24=$ch_addr;
      var $cmp30=(($24)|0)==133;
      if ($cmp30) { __label__ = 18; break; } else { __label__ = 19; break; }
    case 18: 
      var $25=$bef_addr;
      var $26=$here;
      var $and33=$25 & $26;
      var $shl34=$and33 << 1;
      var $27=$aft_addr;
      var $or35=$27 | $shl34;
      $aft_addr=$or35;
      __label__ = 19; break;
    case 19: 
      __label__ = 52; break;
    case 20: 
      var $28=$ch_addr;
      var $cmp38=(($28)|0)==134;
      if ($cmp38) { __label__ = 21; break; } else { __label__ = 22; break; }
    case 21: 
      var $29=$bef_addr;
      var $30=$here;
      var $and41=$29 & $30;
      var $shl42=$and41 << 1;
      var $31=$aft_addr;
      var $or43=$31 | $shl42;
      $aft_addr=$or43;
      __label__ = 22; break;
    case 22: 
      __label__ = 52; break;
    case 23: 
      var $32=$ch_addr;
      var $cmp46=(($32)|0) > 127;
      if ($cmp46) { __label__ = 25; break; } else { __label__ = 24; break; }
    case 24: 
      var $33=$bef_addr;
      var $34=$here;
      var $and49=$33 & $34;
      var $shl50=$and49 << 1;
      var $35=$aft_addr;
      var $or51=$35 | $shl50;
      $aft_addr=$or51;
      __label__ = 25; break;
    case 25: 
      __label__ = 52; break;
    case 26: 
      var $36=$s;
      var $and54=$36 & 134217727;
      var $37=$g_addr;
      var $sets=(($37+16)|0);
      var $38=HEAP32[(($sets)>>2)];
      var $arrayidx55=(($38+($and54<<4))|0);
      $cs=$arrayidx55;
      var $39=$ch_addr;
      var $cmp56=(($39)|0) > 127;
      if ($cmp56) { __label__ = 29; break; } else { __label__ = 27; break; }
    case 27: 
      var $40=$ch_addr;
      var $conv58=(($40) & 255);
      var $idxprom=(($conv58)&255);
      var $41=$cs;
      var $ptr=(($41)|0);
      var $42=HEAP32[(($ptr)>>2)];
      var $arrayidx59=(($42+$idxprom)|0);
      var $43=HEAP8[($arrayidx59)];
      var $conv60=(($43)&255);
      var $44=$cs;
      var $mask=(($44+4)|0);
      var $45=HEAP8[($mask)];
      var $conv61=(($45)&255);
      var $and62=$conv60 & $conv61;
      var $tobool=(($and62)|0)!=0;
      if ($tobool) { __label__ = 28; break; } else { __label__ = 29; break; }
    case 28: 
      var $46=$bef_addr;
      var $47=$here;
      var $and64=$46 & $47;
      var $shl65=$and64 << 1;
      var $48=$aft_addr;
      var $or66=$48 | $shl65;
      $aft_addr=$or66;
      __label__ = 29; break;
    case 29: 
      __label__ = 52; break;
    case 30: 
      var $49=$aft_addr;
      var $50=$here;
      var $and69=$49 & $50;
      var $shl70=$and69 << 1;
      var $51=$aft_addr;
      var $or71=$51 | $shl70;
      $aft_addr=$or71;
      __label__ = 52; break;
    case 31: 
      var $52=$aft_addr;
      var $53=$here;
      var $and73=$52 & $53;
      var $shl74=$and73 << 1;
      var $54=$aft_addr;
      var $or75=$54 | $shl74;
      $aft_addr=$or75;
      __label__ = 52; break;
    case 32: 
      var $55=$aft_addr;
      var $56=$here;
      var $and77=$55 & $56;
      var $shl78=$and77 << 1;
      var $57=$aft_addr;
      var $or79=$57 | $shl78;
      $aft_addr=$or79;
      var $58=$aft_addr;
      var $59=$here;
      var $60=$s;
      var $and80=$60 & 134217727;
      var $shr=$59 >>> (($and80)>>>0);
      var $and81=$58 & $shr;
      var $cmp82=(($and81)|0)!=0;
      var $conv83=(($cmp82)&1);
      $i=$conv83;
      var $61=$aft_addr;
      var $62=$here;
      var $and84=$61 & $62;
      var $63=$s;
      var $and85=$63 & 134217727;
      var $shr86=$and84 >>> (($and85)>>>0);
      var $64=$aft_addr;
      var $or87=$64 | $shr86;
      $aft_addr=$or87;
      var $65=$i;
      var $tobool88=(($65)|0)!=0;
      if ($tobool88) { __label__ = 35; break; } else { __label__ = 33; break; }
    case 33: 
      var $66=$aft_addr;
      var $67=$here;
      var $68=$s;
      var $and90=$68 & 134217727;
      var $shr91=$67 >>> (($and90)>>>0);
      var $and92=$66 & $shr91;
      var $cmp93=(($and92)|0)!=0;
      if ($cmp93) { __label__ = 34; break; } else { __label__ = 35; break; }
    case 34: 
      var $69=$s;
      var $and96=$69 & 134217727;
      var $add=((($and96)+(1))|0);
      var $70=$pc;
      var $sub=((($70)-($add))|0);
      $pc=$sub;
      var $71=$pc;
      var $shl97=1 << $71;
      $here=$shl97;
      __label__ = 35; break;
    case 35: 
      __label__ = 52; break;
    case 36: 
      var $72=$aft_addr;
      var $73=$here;
      var $and100=$72 & $73;
      var $shl101=$and100 << 1;
      var $74=$aft_addr;
      var $or102=$74 | $shl101;
      $aft_addr=$or102;
      var $75=$aft_addr;
      var $76=$here;
      var $and103=$75 & $76;
      var $77=$s;
      var $and104=$77 & 134217727;
      var $shl105=$and103 << $and104;
      var $78=$aft_addr;
      var $or106=$78 | $shl105;
      $aft_addr=$or106;
      __label__ = 52; break;
    case 37: 
      var $79=$aft_addr;
      var $80=$here;
      var $and108=$79 & $80;
      var $shl109=$and108 << 1;
      var $81=$aft_addr;
      var $or110=$81 | $shl109;
      $aft_addr=$or110;
      __label__ = 52; break;
    case 38: 
      var $82=$aft_addr;
      var $83=$here;
      var $and112=$82 & $83;
      var $shl113=$and112 << 1;
      var $84=$aft_addr;
      var $or114=$84 | $shl113;
      $aft_addr=$or114;
      __label__ = 52; break;
    case 39: 
      var $85=$aft_addr;
      var $86=$here;
      var $and116=$85 & $86;
      var $shl117=$and116 << 1;
      var $87=$aft_addr;
      var $or118=$87 | $shl117;
      $aft_addr=$or118;
      var $88=$aft_addr;
      var $89=$here;
      var $and119=$88 & $89;
      var $90=$s;
      var $and120=$90 & 134217727;
      var $shl121=$and119 << $and120;
      var $91=$aft_addr;
      var $or122=$91 | $shl121;
      $aft_addr=$or122;
      __label__ = 52; break;
    case 40: 
      var $92=$aft_addr;
      var $93=$here;
      var $and124=$92 & $93;
      var $cmp125=(($and124)|0)!=0;
      if ($cmp125) { __label__ = 41; break; } else { __label__ = 46; break; }
    case 41: 
      $look=1;
      __label__ = 42; break;
    case 42: 
      var $94=$pc;
      var $95=$look;
      var $add129=((($94)+($95))|0);
      var $96=$g_addr;
      var $strip130=(($96+4)|0);
      var $97=HEAP32[(($strip130)>>2)];
      var $arrayidx131=(($97+($add129<<2))|0);
      var $98=HEAP32[(($arrayidx131)>>2)];
      $s=$98;
      var $and132=$98 & -134217728;
      var $cmp133=(($and132)|0)!=-1879048192;
      if ($cmp133) { __label__ = 43; break; } else { __label__ = 45; break; }
    case 43: 
      __label__ = 44; break;
    case 44: 
      var $99=$s;
      var $and136=$99 & 134217727;
      var $100=$look;
      var $add137=((($100)+($and136))|0);
      $look=$add137;
      __label__ = 42; break;
    case 45: 
      var $101=$aft_addr;
      var $102=$here;
      var $and138=$101 & $102;
      var $103=$look;
      var $shl139=$and138 << $103;
      var $104=$aft_addr;
      var $or140=$104 | $shl139;
      $aft_addr=$or140;
      __label__ = 46; break;
    case 46: 
      __label__ = 52; break;
    case 47: 
      var $105=$aft_addr;
      var $106=$here;
      var $and143=$105 & $106;
      var $shl144=$and143 << 1;
      var $107=$aft_addr;
      var $or145=$107 | $shl144;
      $aft_addr=$or145;
      var $108=$pc;
      var $109=$s;
      var $and146=$109 & 134217727;
      var $add147=((($108)+($and146))|0);
      var $110=$g_addr;
      var $strip148=(($110+4)|0);
      var $111=HEAP32[(($strip148)>>2)];
      var $arrayidx149=(($111+($add147<<2))|0);
      var $112=HEAP32[(($arrayidx149)>>2)];
      var $and150=$112 & -134217728;
      var $cmp151=(($and150)|0)!=-1879048192;
      if ($cmp151) { __label__ = 48; break; } else { __label__ = 49; break; }
    case 48: 
      var $113=$aft_addr;
      var $114=$here;
      var $and154=$113 & $114;
      var $115=$s;
      var $and155=$115 & 134217727;
      var $shl156=$and154 << $and155;
      var $116=$aft_addr;
      var $or157=$116 | $shl156;
      $aft_addr=$or157;
      __label__ = 49; break;
    case 49: 
      __label__ = 52; break;
    case 50: 
      var $117=$aft_addr;
      var $118=$here;
      var $and160=$117 & $118;
      var $shl161=$and160 << 1;
      var $119=$aft_addr;
      var $or162=$119 | $shl161;
      $aft_addr=$or162;
      __label__ = 52; break;
    case 51: 
      __label__ = 52; break;
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $120=$pc;
      var $inc=((($120)+(1))|0);
      $pc=$inc;
      var $121=$here;
      var $shl164=$121 << 1;
      $here=$shl164;
      __label__ = 3; break;
    case 54: 
      var $122=$aft_addr;
      ;
      return $122;
    default: assert(0, "bad label: " + __label__);
  }
}
_sstep["X"]=1;

function _read_globals($data) {
  ;
  var __label__;

  var $data_addr;
  $data_addr=$data;
  var $0=HEAP32[((_optarg)>>2)];
  var $1=$data_addr;
  var $optarg=(($1)|0);
  HEAP32[(($optarg)>>2)]=$0;
  var $2=HEAP32[((_optind)>>2)];
  var $3=$data_addr;
  var $optind=(($3+4)|0);
  HEAP32[(($optind)>>2)]=$2;
  var $4=HEAP32[((_opterr)>>2)];
  var $5=$data_addr;
  var $opterr=(($5+8)|0);
  HEAP32[(($opterr)>>2)]=$4;
  var $6=HEAP32[((_optopt)>>2)];
  var $7=$data_addr;
  var $optopt=(($7+12)|0);
  HEAP32[(($optopt)>>2)]=$6;
  var $8=HEAP32[((_optwhere)>>2)];
  var $9=$data_addr;
  var $optwhere=(($9+16)|0);
  HEAP32[(($optwhere)>>2)]=$8;
  ;
  return;
}


function _getopt($argc, $argv, $optstring) {
  var __stackBase__  = STACKTOP; STACKTOP += 20; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;

  var $argc_addr;
  var $argv_addr;
  var $optstring_addr;
  var $data=__stackBase__;
  var $r;
  $argc_addr=$argc;
  $argv_addr=$argv;
  $optstring_addr=$optstring;
  _read_globals($data);
  var $0=$argc_addr;
  var $1=$argv_addr;
  var $2=$optstring_addr;
  var $call=_getopt_internal($0, $1, $2, 0, 0, 0, $data);
  $r=$call;
  _write_globals($data);
  var $3=$r;
  STACKTOP = __stackBase__;
  return $3;
}


function _getopt_internal($argc, $argv, $shortopts, $longopts, $longind, $only, $data) {
  var __stackBase__  = STACKTOP; assert(STACKTOP % 4 == 0, "Stack is unaligned"); assert(STACKTOP < STACK_MAX, "Ran out of stack");
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $argc_addr;
      var $argv_addr;
      var $shortopts_addr;
      var $longopts_addr;
      var $longind_addr;
      var $only_addr;
      var $data_addr;
      var $ordering;
      var $permute_from;
      var $num_nonopts;
      var $optindex;
      var $match_chars;
      var $possible_arg;
      var $longopt_match;
      var $has_arg;
      var $cp;
      var $arg_next;
      $argc_addr=$argc;
      $argv_addr=$argv;
      $shortopts_addr=$shortopts;
      $longopts_addr=$longopts;
      $longind_addr=$longind;
      $only_addr=$only;
      $data_addr=$data;
      $ordering=0;
      $permute_from=0;
      $num_nonopts=0;
      $optindex=0;
      $match_chars=0;
      $possible_arg=0;
      $longopt_match=-1;
      $has_arg=-1;
      $cp=0;
      $arg_next=0;
      var $0=$argc_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { __label__ = 8; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$argv_addr;
      var $cmp1=(($1)|0)==0;
      if ($cmp1) { __label__ = 8; break; } else { __label__ = 4; break; }
    case 4: 
      var $2=$shortopts_addr;
      var $cmp3=(($2)|0)==0;
      if ($cmp3) { __label__ = 5; break; } else { __label__ = 6; break; }
    case 5: 
      var $3=$longopts_addr;
      var $cmp4=(($3)|0)==0;
      if ($cmp4) { __label__ = 8; break; } else { __label__ = 6; break; }
    case 6: 
      var $4=$data_addr;
      var $optind=(($4+4)|0);
      var $5=HEAP32[(($optind)>>2)];
      var $6=$argc_addr;
      var $cmp6=(($5)|0) >= (($6)|0);
      if ($cmp6) { __label__ = 8; break; } else { __label__ = 7; break; }
    case 7: 
      var $7=$data_addr;
      var $optind8=(($7+4)|0);
      var $8=HEAP32[(($optind8)>>2)];
      var $9=$argv_addr;
      var $arrayidx=(($9+($8<<2))|0);
      var $10=HEAP32[(($arrayidx)>>2)];
      var $cmp9=(($10)|0)==0;
      if ($cmp9) { __label__ = 8; break; } else { __label__ = 9; break; }
    case 8: 
      $retval=-1;
      __label__ = 118; break;
    case 9: 
      var $11=$data_addr;
      var $optind10=(($11+4)|0);
      var $12=HEAP32[(($optind10)>>2)];
      var $13=$argv_addr;
      var $arrayidx11=(($13+($12<<2))|0);
      var $14=HEAP32[(($arrayidx11)>>2)];
      var $call=_strcmp($14, ((STRING_TABLE.__str324)|0));
      var $cmp12=(($call)|0)==0;
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 11; break; }
    case 10: 
      var $15=$data_addr;
      var $optind14=(($15+4)|0);
      var $16=HEAP32[(($optind14)>>2)];
      var $inc=((($16)+(1))|0);
      HEAP32[(($optind14)>>2)]=$inc;
      $retval=-1;
      __label__ = 118; break;
    case 11: 
      var $17=$data_addr;
      var $optind16=(($17+4)|0);
      var $18=HEAP32[(($optind16)>>2)];
      var $cmp17=(($18)|0)==0;
      if ($cmp17) { __label__ = 12; break; } else { __label__ = 13; break; }
    case 12: 
      var $19=$data_addr;
      var $optwhere=(($19+16)|0);
      HEAP32[(($optwhere)>>2)]=1;
      var $20=$data_addr;
      var $optind19=(($20+4)|0);
      HEAP32[(($optind19)>>2)]=1;
      __label__ = 13; break;
    case 13: 
      var $21=$shortopts_addr;
      var $cmp21=(($21)|0)!=0;
      if ($cmp21) { __label__ = 14; break; } else { __label__ = 17; break; }
    case 14: 
      var $22=$shortopts_addr;
      var $23=HEAP8[($22)];
      var $conv=(($23 << 24) >> 24);
      var $cmp23=(($conv)|0)==45;
      if ($cmp23) { __label__ = 16; break; } else { __label__ = 15; break; }
    case 15: 
      var $24=$shortopts_addr;
      var $25=HEAP8[($24)];
      var $conv26=(($25 << 24) >> 24);
      var $cmp27=(($conv26)|0)==43;
      if ($cmp27) { __label__ = 16; break; } else { __label__ = 17; break; }
    case 16: 
      var $26=$shortopts_addr;
      var $27=HEAP8[($26)];
      var $conv30=(($27 << 24) >> 24);
      var $cmp31=(($conv30)|0)==45;
      var $cond=$cmp31 ? 1 : 2;
      $ordering=$cond;
      var $28=$shortopts_addr;
      var $incdec_ptr=(($28+1)|0);
      $shortopts_addr=$incdec_ptr;
      __label__ = 18; break;
    case 17: 
      var $call33=_getenv(((STRING_TABLE.__str1325)|0));
      var $cmp34=(($call33)|0)!=0;
      var $cond36=$cmp34 ? 2 : 0;
      $ordering=$cond36;
      __label__ = 18; break;
    case 18: 
      var $29=$data_addr;
      var $optwhere38=(($29+16)|0);
      var $30=HEAP32[(($optwhere38)>>2)];
      var $cmp39=(($30)|0)==1;
      if ($cmp39) { __label__ = 19; break; } else { __label__ = 37; break; }
    case 19: 
      var $31=$ordering;
      if ((($31)|0) == 0) {
        __label__ = 21; break;
      }
      else if ((($31)|0) == 1) {
        __label__ = 30; break;
      }
      else if ((($31)|0) == 2) {
        __label__ = 33; break;
      }
      else {
      __label__ = 20; break;
      }
      
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $32=$data_addr;
      var $optind42=(($32+4)|0);
      var $33=HEAP32[(($optind42)>>2)];
      $permute_from=$33;
      $num_nonopts=0;
      __label__ = 22; break;
    case 22: 
      var $34=$data_addr;
      var $optind43=(($34+4)|0);
      var $35=HEAP32[(($optind43)>>2)];
      var $36=$argv_addr;
      var $arrayidx44=(($36+($35<<2))|0);
      var $37=HEAP32[(($arrayidx44)>>2)];
      var $38=$only_addr;
      var $call45=_is_option($37, $38);
      var $tobool=(($call45)|0)!=0;
      var $lnot=$tobool ^ 1;
      if ($lnot) { __label__ = 23; break; } else { __label__ = 24; break; }
    case 23: 
      var $39=$data_addr;
      var $optind46=(($39+4)|0);
      var $40=HEAP32[(($optind46)>>2)];
      var $inc47=((($40)+(1))|0);
      HEAP32[(($optind46)>>2)]=$inc47;
      var $41=$num_nonopts;
      var $inc48=((($41)+(1))|0);
      $num_nonopts=$inc48;
      __label__ = 22; break;
    case 24: 
      var $42=$data_addr;
      var $optind49=(($42+4)|0);
      var $43=HEAP32[(($optind49)>>2)];
      var $44=$argv_addr;
      var $arrayidx50=(($44+($43<<2))|0);
      var $45=HEAP32[(($arrayidx50)>>2)];
      var $cmp51=(($45)|0)==0;
      if ($cmp51) { __label__ = 25; break; } else { __label__ = 26; break; }
    case 25: 
      var $46=$permute_from;
      var $47=$data_addr;
      var $optind54=(($47+4)|0);
      HEAP32[(($optind54)>>2)]=$46;
      $retval=-1;
      __label__ = 118; break;
    case 26: 
      var $48=$data_addr;
      var $optind56=(($48+4)|0);
      var $49=HEAP32[(($optind56)>>2)];
      var $50=$argv_addr;
      var $arrayidx57=(($50+($49<<2))|0);
      var $51=HEAP32[(($arrayidx57)>>2)];
      var $call58=_strcmp($51, ((STRING_TABLE.__str324)|0));
      var $cmp59=(($call58)|0)==0;
      if ($cmp59) { __label__ = 27; break; } else { __label__ = 28; break; }
    case 27: 
      var $52=$argv_addr;
      var $53=$permute_from;
      var $add_ptr=(($52+($53<<2))|0);
      var $54=$num_nonopts;
      _permute($add_ptr, $54, 1);
      var $55=$permute_from;
      var $add=((($55)+(1))|0);
      var $56=$data_addr;
      var $optind62=(($56+4)|0);
      HEAP32[(($optind62)>>2)]=$add;
      $retval=-1;
      __label__ = 118; break;
    case 28: 
      __label__ = 29; break;
    case 29: 
      __label__ = 36; break;
    case 30: 
      var $57=$data_addr;
      var $optind66=(($57+4)|0);
      var $58=HEAP32[(($optind66)>>2)];
      var $59=$argv_addr;
      var $arrayidx67=(($59+($58<<2))|0);
      var $60=HEAP32[(($arrayidx67)>>2)];
      var $61=$only_addr;
      var $call68=_is_option($60, $61);
      var $tobool69=(($call68)|0)!=0;
      if ($tobool69) { __label__ = 32; break; } else { __label__ = 31; break; }
    case 31: 
      var $62=$data_addr;
      var $optind71=(($62+4)|0);
      var $63=HEAP32[(($optind71)>>2)];
      var $inc72=((($63)+(1))|0);
      HEAP32[(($optind71)>>2)]=$inc72;
      var $64=$argv_addr;
      var $arrayidx73=(($64+($63<<2))|0);
      var $65=HEAP32[(($arrayidx73)>>2)];
      var $66=$data_addr;
      var $optarg=(($66)|0);
      HEAP32[(($optarg)>>2)]=$65;
      var $67=$data_addr;
      var $optopt=(($67+12)|0);
      HEAP32[(($optopt)>>2)]=1;
      $retval=1;
      __label__ = 118; break;
    case 32: 
      __label__ = 36; break;
    case 33: 
      var $68=$data_addr;
      var $optind76=(($68+4)|0);
      var $69=HEAP32[(($optind76)>>2)];
      var $70=$argv_addr;
      var $arrayidx77=(($70+($69<<2))|0);
      var $71=HEAP32[(($arrayidx77)>>2)];
      var $72=$only_addr;
      var $call78=_is_option($71, $72);
      var $tobool79=(($call78)|0)!=0;
      if ($tobool79) { __label__ = 35; break; } else { __label__ = 34; break; }
    case 34: 
      $retval=-1;
      __label__ = 118; break;
    case 35: 
      __label__ = 36; break;
    case 36: 
      __label__ = 37; break;
    case 37: 
      var $73=$longopts_addr;
      var $cmp83=(($73)|0)!=0;
      if ($cmp83) { __label__ = 38; break; } else { __label__ = 64; break; }
    case 38: 
      var $74=$data_addr;
      var $optind86=(($74+4)|0);
      var $75=HEAP32[(($optind86)>>2)];
      var $76=$argv_addr;
      var $arrayidx87=(($76+($75<<2))|0);
      var $77=HEAP32[(($arrayidx87)>>2)];
      var $call88=_memcmp($77, ((STRING_TABLE.__str324)|0), 2);
      var $cmp89=(($call88)|0)==0;
      if ($cmp89) { __label__ = 41; break; } else { __label__ = 39; break; }
    case 39: 
      var $78=$only_addr;
      var $tobool92=(($78)|0)!=0;
      if ($tobool92) { __label__ = 40; break; } else { __label__ = 64; break; }
    case 40: 
      var $79=$data_addr;
      var $optind94=(($79+4)|0);
      var $80=HEAP32[(($optind94)>>2)];
      var $81=$argv_addr;
      var $arrayidx95=(($81+($80<<2))|0);
      var $82=HEAP32[(($arrayidx95)>>2)];
      var $arrayidx96=(($82)|0);
      var $83=HEAP8[($arrayidx96)];
      var $conv97=(($83 << 24) >> 24);
      var $cmp98=(($conv97)|0)==43;
      if ($cmp98) { __label__ = 41; break; } else { __label__ = 64; break; }
    case 41: 
      var $84=$data_addr;
      var $optwhere101=(($84+16)|0);
      var $85=HEAP32[(($optwhere101)>>2)];
      var $cmp102=(($85)|0)==1;
      if ($cmp102) { __label__ = 42; break; } else { __label__ = 64; break; }
    case 42: 
      var $86=$data_addr;
      var $optind105=(($86+4)|0);
      var $87=HEAP32[(($optind105)>>2)];
      var $88=$argv_addr;
      var $arrayidx106=(($88+($87<<2))|0);
      var $89=HEAP32[(($arrayidx106)>>2)];
      var $call107=_memcmp($89, ((STRING_TABLE.__str324)|0), 2);
      var $cmp108=(($call107)|0)==0;
      if ($cmp108) { __label__ = 43; break; } else { __label__ = 44; break; }
    case 43: 
      var $90=$data_addr;
      var $optwhere111=(($90+16)|0);
      HEAP32[(($optwhere111)>>2)]=2;
      __label__ = 44; break;
    case 44: 
      $longopt_match=-1;
      var $91=$data_addr;
      var $optind113=(($91+4)|0);
      var $92=HEAP32[(($optind113)>>2)];
      var $93=$argv_addr;
      var $arrayidx114=(($93+($92<<2))|0);
      var $94=HEAP32[(($arrayidx114)>>2)];
      var $95=$data_addr;
      var $optwhere115=(($95+16)|0);
      var $96=HEAP32[(($optwhere115)>>2)];
      var $add_ptr116=(($94+$96)|0);
      var $call117=_strchr($add_ptr116, 61);
      $possible_arg=$call117;
      var $97=$possible_arg;
      var $cmp118=(($97)|0)==0;
      if ($cmp118) { __label__ = 45; break; } else { __label__ = 46; break; }
    case 45: 
      var $98=$data_addr;
      var $optind121=(($98+4)|0);
      var $99=HEAP32[(($optind121)>>2)];
      var $100=$argv_addr;
      var $arrayidx122=(($100+($99<<2))|0);
      var $101=HEAP32[(($arrayidx122)>>2)];
      var $call123=_strlen($101);
      $match_chars=$call123;
      var $102=$data_addr;
      var $optind124=(($102+4)|0);
      var $103=HEAP32[(($optind124)>>2)];
      var $104=$argv_addr;
      var $arrayidx125=(($104+($103<<2))|0);
      var $105=HEAP32[(($arrayidx125)>>2)];
      var $106=$match_chars;
      var $add_ptr126=(($105+$106)|0);
      $possible_arg=$add_ptr126;
      var $107=$match_chars;
      var $108=$data_addr;
      var $optwhere127=(($108+16)|0);
      var $109=HEAP32[(($optwhere127)>>2)];
      var $sub=((($107)-($109))|0);
      $match_chars=$sub;
      __label__ = 47; break;
    case 46: 
      var $110=$possible_arg;
      var $111=$data_addr;
      var $optind129=(($111+4)|0);
      var $112=HEAP32[(($optind129)>>2)];
      var $113=$argv_addr;
      var $arrayidx130=(($113+($112<<2))|0);
      var $114=HEAP32[(($arrayidx130)>>2)];
      var $sub_ptr_lhs_cast=$110;
      var $sub_ptr_rhs_cast=$114;
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0);
      var $115=$data_addr;
      var $optwhere131=(($115+16)|0);
      var $116=HEAP32[(($optwhere131)>>2)];
      var $sub132=((($sub_ptr_sub)-($116))|0);
      $match_chars=$sub132;
      __label__ = 47; break;
    case 47: 
      $optindex=0;
      __label__ = 48; break;
    case 48: 
      var $117=$optindex;
      var $118=$longopts_addr;
      var $arrayidx134=(($118+($117<<4))|0);
      var $name=(($arrayidx134)|0);
      var $119=HEAP32[(($name)>>2)];
      var $cmp135=(($119)|0)!=0;
      if ($cmp135) { __label__ = 49; break; } else { __label__ = 61; break; }
    case 49: 
      var $120=$data_addr;
      var $optind137=(($120+4)|0);
      var $121=HEAP32[(($optind137)>>2)];
      var $122=$argv_addr;
      var $arrayidx138=(($122+($121<<2))|0);
      var $123=HEAP32[(($arrayidx138)>>2)];
      var $124=$data_addr;
      var $optwhere139=(($124+16)|0);
      var $125=HEAP32[(($optwhere139)>>2)];
      var $add_ptr140=(($123+$125)|0);
      var $126=$optindex;
      var $127=$longopts_addr;
      var $arrayidx141=(($127+($126<<4))|0);
      var $name142=(($arrayidx141)|0);
      var $128=HEAP32[(($name142)>>2)];
      var $129=$match_chars;
      var $call143=_memcmp($add_ptr140, $128, $129);
      var $cmp144=(($call143)|0)==0;
      if ($cmp144) { __label__ = 50; break; } else { __label__ = 59; break; }
    case 50: 
      var $130=$match_chars;
      var $131=$optindex;
      var $132=$longopts_addr;
      var $arrayidx147=(($132+($131<<4))|0);
      var $name148=(($arrayidx147)|0);
      var $133=HEAP32[(($name148)>>2)];
      var $call149=_strlen($133);
      var $cmp150=(($130)|0)==(($call149)|0);
      if ($cmp150) { __label__ = 51; break; } else { __label__ = 52; break; }
    case 51: 
      var $134=$optindex;
      $longopt_match=$134;
      __label__ = 61; break;
    case 52: 
      var $135=$longopt_match;
      var $cmp154=(($135)|0) < 0;
      if ($cmp154) { __label__ = 53; break; } else { __label__ = 54; break; }
    case 53: 
      var $136=$optindex;
      $longopt_match=$136;
      __label__ = 57; break;
    case 54: 
      var $137=$data_addr;
      var $opterr=(($137+8)|0);
      var $138=HEAP32[(($opterr)>>2)];
      var $tobool158=(($138)|0)!=0;
      if ($tobool158) { __label__ = 55; break; } else { __label__ = 56; break; }
    case 55: 
      var $139=HEAP32[((_stderr)>>2)];
      var $140=$argv_addr;
      var $arrayidx160=(($140)|0);
      var $141=HEAP32[(($arrayidx160)>>2)];
      var $142=$data_addr;
      var $optind161=(($142+4)|0);
      var $143=HEAP32[(($optind161)>>2)];
      var $144=$argv_addr;
      var $arrayidx162=(($144+($143<<2))|0);
      var $145=HEAP32[(($arrayidx162)>>2)];
      var $146=$longopt_match;
      var $147=$longopts_addr;
      var $arrayidx163=(($147+($146<<4))|0);
      var $name164=(($arrayidx163)|0);
      var $148=HEAP32[(($name164)>>2)];
      var $149=$optindex;
      var $150=$longopts_addr;
      var $arrayidx165=(($150+($149<<4))|0);
      var $name166=(($arrayidx165)|0);
      var $151=HEAP32[(($name166)>>2)];
      var $call167=_fprintf($139, ((STRING_TABLE.__str2326)|0), (tempInt=STACKTOP,STACKTOP += 16,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$141,HEAP32[(((tempInt)+(4))>>2)]=$145,HEAP32[(((tempInt)+(8))>>2)]=$148,HEAP32[(((tempInt)+(12))>>2)]=$151,tempInt));
      __label__ = 56; break;
    case 56: 
      var $152=$data_addr;
      var $optopt169=(($152+12)|0);
      HEAP32[(($optopt169)>>2)]=63;
      $retval=63;
      __label__ = 118; break;
    case 57: 
      __label__ = 58; break;
    case 58: 
      __label__ = 59; break;
    case 59: 
      __label__ = 60; break;
    case 60: 
      var $153=$optindex;
      var $inc173=((($153)+(1))|0);
      $optindex=$inc173;
      __label__ = 48; break;
    case 61: 
      var $154=$longopt_match;
      var $cmp174=(($154)|0) >= 0;
      if ($cmp174) { __label__ = 62; break; } else { __label__ = 63; break; }
    case 62: 
      var $155=$longopt_match;
      var $156=$longopts_addr;
      var $arrayidx177=(($156+($155<<4))|0);
      var $has_arg178=(($arrayidx177+4)|0);
      var $157=HEAP32[(($has_arg178)>>2)];
      $has_arg=$157;
      __label__ = 63; break;
    case 63: 
      __label__ = 64; break;
    case 64: 
      var $158=$longopt_match;
      var $cmp181=(($158)|0) < 0;
      if ($cmp181) { __label__ = 65; break; } else { __label__ = 76; break; }
    case 65: 
      var $159=$shortopts_addr;
      var $cmp184=(($159)|0)!=0;
      if ($cmp184) { __label__ = 66; break; } else { __label__ = 76; break; }
    case 66: 
      var $160=$shortopts_addr;
      var $161=$data_addr;
      var $optwhere187=(($161+16)|0);
      var $162=HEAP32[(($optwhere187)>>2)];
      var $163=$data_addr;
      var $optind188=(($163+4)|0);
      var $164=HEAP32[(($optind188)>>2)];
      var $165=$argv_addr;
      var $arrayidx189=(($165+($164<<2))|0);
      var $166=HEAP32[(($arrayidx189)>>2)];
      var $arrayidx190=(($166+$162)|0);
      var $167=HEAP8[($arrayidx190)];
      var $conv191=(($167 << 24) >> 24);
      var $call192=_strchr($160, $conv191);
      $cp=$call192;
      var $168=$cp;
      var $cmp193=(($168)|0)==0;
      if ($cmp193) { __label__ = 67; break; } else { __label__ = 72; break; }
    case 67: 
      var $169=$data_addr;
      var $opterr196=(($169+8)|0);
      var $170=HEAP32[(($opterr196)>>2)];
      var $tobool197=(($170)|0)!=0;
      if ($tobool197) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $171=HEAP32[((_stderr)>>2)];
      var $172=$argv_addr;
      var $arrayidx199=(($172)|0);
      var $173=HEAP32[(($arrayidx199)>>2)];
      var $174=$data_addr;
      var $optwhere200=(($174+16)|0);
      var $175=HEAP32[(($optwhere200)>>2)];
      var $176=$data_addr;
      var $optind201=(($176+4)|0);
      var $177=HEAP32[(($optind201)>>2)];
      var $178=$argv_addr;
      var $arrayidx202=(($178+($177<<2))|0);
      var $179=HEAP32[(($arrayidx202)>>2)];
      var $arrayidx203=(($179+$175)|0);
      var $180=HEAP8[($arrayidx203)];
      var $conv204=(($180 << 24) >> 24);
      var $call205=_fprintf($171, ((STRING_TABLE.__str3327)|0), (tempInt=STACKTOP,STACKTOP += 8,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$173,HEAP32[(((tempInt)+(4))>>2)]=$conv204,tempInt));
      __label__ = 69; break;
    case 69: 
      var $181=$data_addr;
      var $optwhere207=(($181+16)|0);
      var $182=HEAP32[(($optwhere207)>>2)];
      var $inc208=((($182)+(1))|0);
      HEAP32[(($optwhere207)>>2)]=$inc208;
      var $183=$data_addr;
      var $optwhere209=(($183+16)|0);
      var $184=HEAP32[(($optwhere209)>>2)];
      var $185=$data_addr;
      var $optind210=(($185+4)|0);
      var $186=HEAP32[(($optind210)>>2)];
      var $187=$argv_addr;
      var $arrayidx211=(($187+($186<<2))|0);
      var $188=HEAP32[(($arrayidx211)>>2)];
      var $arrayidx212=(($188+$184)|0);
      var $189=HEAP8[($arrayidx212)];
      var $conv213=(($189 << 24) >> 24);
      var $cmp214=(($conv213)|0)==0;
      if ($cmp214) { __label__ = 70; break; } else { __label__ = 71; break; }
    case 70: 
      var $190=$data_addr;
      var $optind217=(($190+4)|0);
      var $191=HEAP32[(($optind217)>>2)];
      var $inc218=((($191)+(1))|0);
      HEAP32[(($optind217)>>2)]=$inc218;
      var $192=$data_addr;
      var $optwhere219=(($192+16)|0);
      HEAP32[(($optwhere219)>>2)]=1;
      __label__ = 71; break;
    case 71: 
      var $193=$data_addr;
      var $optopt221=(($193+12)|0);
      HEAP32[(($optopt221)>>2)]=63;
      $retval=63;
      __label__ = 118; break;
    case 72: 
      var $194=$cp;
      var $arrayidx223=(($194+1)|0);
      var $195=HEAP8[($arrayidx223)];
      var $conv224=(($195 << 24) >> 24);
      var $cmp225=(($conv224)|0)==58;
      if ($cmp225) { __label__ = 73; break; } else { __label__ = 74; break; }
    case 73: 
      var $196=$cp;
      var $arrayidx227=(($196+2)|0);
      var $197=HEAP8[($arrayidx227)];
      var $conv228=(($197 << 24) >> 24);
      var $cmp229=(($conv228)|0)==58;
      var $cond231=$cmp229 ? 2 : 1;
      var $cond232 = $cond231;__label__ = 75; break;
    case 74: 
      var $cond232 = 0;__label__ = 75; break;
    case 75: 
      var $cond232;
      $has_arg=$cond232;
      var $198=$data_addr;
      var $optind233=(($198+4)|0);
      var $199=HEAP32[(($optind233)>>2)];
      var $200=$argv_addr;
      var $arrayidx234=(($200+($199<<2))|0);
      var $201=HEAP32[(($arrayidx234)>>2)];
      var $202=$data_addr;
      var $optwhere235=(($202+16)|0);
      var $203=HEAP32[(($optwhere235)>>2)];
      var $add_ptr236=(($201+$203)|0);
      var $add_ptr237=(($add_ptr236+1)|0);
      $possible_arg=$add_ptr237;
      var $204=$cp;
      var $205=HEAP8[($204)];
      var $conv238=(($205 << 24) >> 24);
      var $206=$data_addr;
      var $optopt239=(($206+12)|0);
      HEAP32[(($optopt239)>>2)]=$conv238;
      __label__ = 76; break;
    case 76: 
      $arg_next=0;
      var $207=$has_arg;
      if ((($207)|0) == 2) {
        __label__ = 77; break;
      }
      else if ((($207)|0) == 1) {
        __label__ = 83; break;
      }
      else if ((($207)|0) == 0) {
        __label__ = 98; break;
      }
      else {
      __label__ = 97; break;
      }
      
    case 77: 
      var $208=$possible_arg;
      var $209=HEAP8[($208)];
      var $conv242=(($209 << 24) >> 24);
      var $cmp243=(($conv242)|0)==61;
      if ($cmp243) { __label__ = 78; break; } else { __label__ = 79; break; }
    case 78: 
      var $210=$possible_arg;
      var $incdec_ptr246=(($210+1)|0);
      $possible_arg=$incdec_ptr246;
      __label__ = 79; break;
    case 79: 
      var $211=$possible_arg;
      var $212=HEAP8[($211)];
      var $conv248=(($212 << 24) >> 24);
      var $cmp249=(($conv248)|0)!=0;
      if ($cmp249) { __label__ = 80; break; } else { __label__ = 81; break; }
    case 80: 
      var $213=$possible_arg;
      var $cond254 = $213;__label__ = 82; break;
    case 81: 
      var $cond254 = 0;__label__ = 82; break;
    case 82: 
      var $cond254;
      var $214=$data_addr;
      var $optarg255=(($214)|0);
      HEAP32[(($optarg255)>>2)]=$cond254;
      var $215=$data_addr;
      var $optwhere256=(($215+16)|0);
      HEAP32[(($optwhere256)>>2)]=1;
      __label__ = 104; break;
    case 83: 
      var $216=$possible_arg;
      var $217=HEAP8[($216)];
      var $conv258=(($217 << 24) >> 24);
      var $cmp259=(($conv258)|0)==61;
      if ($cmp259) { __label__ = 84; break; } else { __label__ = 85; break; }
    case 84: 
      var $218=$possible_arg;
      var $incdec_ptr262=(($218+1)|0);
      $possible_arg=$incdec_ptr262;
      __label__ = 85; break;
    case 85: 
      var $219=$possible_arg;
      var $220=HEAP8[($219)];
      var $conv264=(($220 << 24) >> 24);
      var $cmp265=(($conv264)|0)!=0;
      if ($cmp265) { __label__ = 86; break; } else { __label__ = 87; break; }
    case 86: 
      var $221=$possible_arg;
      var $222=$data_addr;
      var $optarg268=(($222)|0);
      HEAP32[(($optarg268)>>2)]=$221;
      var $223=$data_addr;
      var $optwhere269=(($223+16)|0);
      HEAP32[(($optwhere269)>>2)]=1;
      __label__ = 96; break;
    case 87: 
      var $224=$data_addr;
      var $optind271=(($224+4)|0);
      var $225=HEAP32[(($optind271)>>2)];
      var $add272=((($225)+(1))|0);
      var $226=$argc_addr;
      var $cmp273=(($add272)|0) >= (($226)|0);
      if ($cmp273) { __label__ = 88; break; } else { __label__ = 94; break; }
    case 88: 
      var $227=$data_addr;
      var $opterr276=(($227+8)|0);
      var $228=HEAP32[(($opterr276)>>2)];
      var $tobool277=(($228)|0)!=0;
      if ($tobool277) { __label__ = 89; break; } else { __label__ = 93; break; }
    case 89: 
      var $229=HEAP32[((_stderr)>>2)];
      var $230=$argv_addr;
      var $arrayidx279=(($230)|0);
      var $231=HEAP32[(($arrayidx279)>>2)];
      var $call280=_fprintf($229, ((STRING_TABLE.__str4328)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$231,tempInt));
      var $232=$longopt_match;
      var $cmp281=(($232)|0) >= 0;
      if ($cmp281) { __label__ = 90; break; } else { __label__ = 91; break; }
    case 90: 
      var $233=HEAP32[((_stderr)>>2)];
      var $234=$longopt_match;
      var $235=$longopts_addr;
      var $arrayidx284=(($235+($234<<4))|0);
      var $name285=(($arrayidx284)|0);
      var $236=HEAP32[(($name285)>>2)];
      var $call286=_fprintf($233, ((STRING_TABLE.__str5329)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$236,tempInt));
      __label__ = 92; break;
    case 91: 
      var $237=HEAP32[((_stderr)>>2)];
      var $238=$cp;
      var $239=HEAP8[($238)];
      var $conv288=(($239 << 24) >> 24);
      var $call289=_fprintf($237, ((STRING_TABLE.__str6330)|0), (tempInt=STACKTOP,STACKTOP += 4,assert(STACKTOP < STACK_ROOT + STACK_MAX, "Ran out of stack"),HEAP32[((tempInt)>>2)]=$conv288,tempInt));
      __label__ = 92; break;
    case 92: 
      __label__ = 93; break;
    case 93: 
      var $240=$data_addr;
      var $optind292=(($240+4)|0);
      var $241=HEAP32[(($optind292)>>2)];
      var $inc293=((($241)+(1))|0);
      HEAP32[(($optind292)>>2)]=$inc293;
      var $242=$data_addr;
      var $optopt294=(($242+12)|0);
      HEAP32[(($optopt294)>>2)]=58;
      $retval=58;
      __label__ = 118; break;
    case 94: 
      var $243=$data_addr;
      var $optind296=(($243+4)|0);
      var $244=HEAP32[(($optind296)>>2)];
      var $add297=((($244)+(1))|0);
      var $245=$argv_addr;
      var $arrayidx298=(($245+($add297<<2))|0);
      var $246=HEAP32[(($arrayidx298)>>2)];
      var $247=$data_addr;
      var $optarg299=(($247)|0);
      HEAP32[(($optarg299)>>2)]=$246;
      $arg_next=1;
      var $248=$data_addr;
      var $optwhere300=(($248+16)|0);
      HEAP32[(($optwhere300)>>2)]=1;
      __label__ = 95; break;
    case 95: 
      __label__ = 96; break;
    case 96: 
      __label__ = 104; break;
    case 97: 
      __label__ = 98; break;
    case 98: 
      var $249=$longopt_match;
      var $cmp305=(($249)|0) < 0;
      if ($cmp305) { __label__ = 99; break; } else { __label__ = 102; break; }
    case 99: 
      var $250=$data_addr;
      var $optwhere308=(($250+16)|0);
      var $251=HEAP32[(($optwhere308)>>2)];
      var $inc309=((($251)+(1))|0);
      HEAP32[(($optwhere308)>>2)]=$inc309;
      var $252=$data_addr;
      var $optwhere310=(($252+16)|0);
      var $253=HEAP32[(($optwhere310)>>2)];
      var $254=$data_addr;
      var $optind311=(($254+4)|0);
      var $255=HEAP32[(($optind311)>>2)];
      var $256=$argv_addr;
      var $arrayidx312=(($256+($255<<2))|0);
      var $257=HEAP32[(($arrayidx312)>>2)];
      var $arrayidx313=(($257+$253)|0);
      var $258=HEAP8[($arrayidx313)];
      var $conv314=(($258 << 24) >> 24);
      var $cmp315=(($conv314)|0)==0;
      if ($cmp315) { __label__ = 100; break; } else { __label__ = 101; break; }
    case 100: 
      var $259=$data_addr;
      var $optwhere318=(($259+16)|0);
      HEAP32[(($optwhere318)>>2)]=1;
      __label__ = 101; break;
    case 101: 
      __label__ = 103; break;
    case 102: 
      var $260=$data_addr;
      var $optwhere321=(($260+16)|0);
      HEAP32[(($optwhere321)>>2)]=1;
      __label__ = 103; break;
    case 103: 
      var $261=$data_addr;
      var $optarg323=(($261)|0);
      HEAP32[(($optarg323)>>2)]=0;
      __label__ = 104; break;
    case 104: 
      var $262=$ordering;
      var $cmp325=(($262)|0)==0;
      if ($cmp325) { __label__ = 105; break; } else { __label__ = 108; break; }
    case 105: 
      var $263=$data_addr;
      var $optwhere328=(($263+16)|0);
      var $264=HEAP32[(($optwhere328)>>2)];
      var $cmp329=(($264)|0)==1;
      if ($cmp329) { __label__ = 106; break; } else { __label__ = 108; break; }
    case 106: 
      var $265=$num_nonopts;
      var $cmp332=(($265)|0)!=0;
      if ($cmp332) { __label__ = 107; break; } else { __label__ = 108; break; }
    case 107: 
      var $266=$argv_addr;
      var $267=$permute_from;
      var $add_ptr335=(($266+($267<<2))|0);
      var $268=$num_nonopts;
      var $269=$arg_next;
      var $add336=((($269)+(1))|0);
      _permute($add_ptr335, $268, $add336);
      var $270=$permute_from;
      var $add337=((($270)+(1))|0);
      var $271=$arg_next;
      var $add338=((($add337)+($271))|0);
      var $272=$data_addr;
      var $optind339=(($272+4)|0);
      HEAP32[(($optind339)>>2)]=$add338;
      __label__ = 111; break;
    case 108: 
      var $273=$data_addr;
      var $optwhere341=(($273+16)|0);
      var $274=HEAP32[(($optwhere341)>>2)];
      var $cmp342=(($274)|0)==1;
      if ($cmp342) { __label__ = 109; break; } else { __label__ = 110; break; }
    case 109: 
      var $275=$data_addr;
      var $optind345=(($275+4)|0);
      var $276=HEAP32[(($optind345)>>2)];
      var $add346=((($276)+(1))|0);
      var $277=$arg_next;
      var $add347=((($add346)+($277))|0);
      var $278=$data_addr;
      var $optind348=(($278+4)|0);
      HEAP32[(($optind348)>>2)]=$add347;
      __label__ = 110; break;
    case 110: 
      __label__ = 111; break;
    case 111: 
      var $279=$longopt_match;
      var $cmp351=(($279)|0) >= 0;
      if ($cmp351) { __label__ = 112; break; } else { __label__ = 117; break; }
    case 112: 
      var $280=$longind_addr;
      var $cmp354=(($280)|0)!=0;
      if ($cmp354) { __label__ = 113; break; } else { __label__ = 114; break; }
    case 113: 
      var $281=$longopt_match;
      var $282=$longind_addr;
      HEAP32[(($282)>>2)]=$281;
      __label__ = 114; break;
    case 114: 
      var $283=$longopt_match;
      var $284=$longopts_addr;
      var $arrayidx358=(($284+($283<<4))|0);
      var $flag=(($arrayidx358+8)|0);
      var $285=HEAP32[(($flag)>>2)];
      var $cmp359=(($285)|0)!=0;
      if ($cmp359) { __label__ = 115; break; } else { __label__ = 116; break; }
    case 115: 
      var $286=$longopt_match;
      var $287=$longopts_addr;
      var $arrayidx362=(($287+($286<<4))|0);
      var $val=(($arrayidx362+12)|0);
      var $288=HEAP32[(($val)>>2)];
      var $289=$longopt_match;
      var $290=$longopts_addr;
      var $arrayidx363=(($290+($289<<4))|0);
      var $flag364=(($arrayidx363+8)|0);
      var $291=HEAP32[(($flag364)>>2)];
      HEAP32[(($291)>>2)]=$288;
      $retval=0;
      __label__ = 118; break;
    case 116: 
      var $292=$longopt_match;
      var $293=$longopts_addr;
      var $arrayidx366=(($293+($292<<4))|0);
      var $val367=(($arrayidx366+12)|0);
      var $294=HEAP32[(($val367)>>2)];
      $retval=$294;
      __label__ = 118; break;
    case 117: 
      var $295=$data_addr;
      var $optopt369=(($295+12)|0);
      var $296=HEAP32[(($optopt369)>>2)];
      $retval=$296;
      __label__ = 118; break;
    case 118: 
      var $297=$retval;
      STACKTOP = __stackBase__;
      return $297;
    default: assert(0, "bad label: " + __label__);
  }
}
_getopt_internal["X"]=1;

function _write_globals($data) {
  ;
  var __label__;

  var $data_addr;
  $data_addr=$data;
  var $0=$data_addr;
  var $optarg=(($0)|0);
  var $1=HEAP32[(($optarg)>>2)];
  HEAP32[((_optarg)>>2)]=$1;
  var $2=$data_addr;
  var $optind=(($2+4)|0);
  var $3=HEAP32[(($optind)>>2)];
  HEAP32[((_optind)>>2)]=$3;
  var $4=$data_addr;
  var $opterr=(($4+8)|0);
  var $5=HEAP32[(($opterr)>>2)];
  HEAP32[((_opterr)>>2)]=$5;
  var $6=$data_addr;
  var $optopt=(($6+12)|0);
  var $7=HEAP32[(($optopt)>>2)];
  HEAP32[((_optopt)>>2)]=$7;
  var $8=$data_addr;
  var $optwhere=(($8+16)|0);
  var $9=HEAP32[(($optwhere)>>2)];
  HEAP32[((_optwhere)>>2)]=$9;
  ;
  return;
}


function _is_option($argv_element, $only) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $argv_element_addr;
      var $only_addr;
      $argv_element_addr=$argv_element;
      $only_addr=$only;
      var $0=$argv_element_addr;
      var $cmp=(($0)|0)==0;
      if ($cmp) { var $7 = 1;__label__ = 7; break; } else { __label__ = 3; break; }
    case 3: 
      var $1=$argv_element_addr;
      var $arrayidx=(($1)|0);
      var $2=HEAP8[($arrayidx)];
      var $conv=(($2 << 24) >> 24);
      var $cmp1=(($conv)|0)==45;
      if ($cmp1) { var $7 = 1;__label__ = 7; break; } else { __label__ = 4; break; }
    case 4: 
      var $3=$only_addr;
      var $tobool=(($3)|0)!=0;
      if ($tobool) { __label__ = 5; break; } else { var $6 = 0;__label__ = 6; break; }
    case 5: 
      var $4=$argv_element_addr;
      var $arrayidx3=(($4)|0);
      var $5=HEAP8[($arrayidx3)];
      var $conv4=(($5 << 24) >> 24);
      var $cmp5=(($conv4)|0)==43;
      var $6 = $cmp5;__label__ = 6; break;
    case 6: 
      var $6;
      var $7 = $6;__label__ = 7; break;
    case 7: 
      var $7;
      var $lor_ext=(($7)&1);
      ;
      return $lor_ext;
    default: assert(0, "bad label: " + __label__);
  }
}


function _reverse_argv_elements($argv, $num) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $argv_addr;
      var $num_addr;
      var $i;
      var $tmp;
      $argv_addr=$argv;
      $num_addr=$num;
      $i=0;
      __label__ = 3; break;
    case 3: 
      var $0=$i;
      var $1=$num_addr;
      var $shr=$1 >> 1;
      var $cmp=(($0)|0) < (($shr)|0);
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; }
    case 4: 
      var $2=$i;
      var $3=$argv_addr;
      var $arrayidx=(($3+($2<<2))|0);
      var $4=HEAP32[(($arrayidx)>>2)];
      $tmp=$4;
      var $5=$num_addr;
      var $6=$i;
      var $sub=((($5)-($6))|0);
      var $sub1=((($sub)-(1))|0);
      var $7=$argv_addr;
      var $arrayidx2=(($7+($sub1<<2))|0);
      var $8=HEAP32[(($arrayidx2)>>2)];
      var $9=$i;
      var $10=$argv_addr;
      var $arrayidx3=(($10+($9<<2))|0);
      HEAP32[(($arrayidx3)>>2)]=$8;
      var $11=$tmp;
      var $12=$num_addr;
      var $13=$i;
      var $sub4=((($12)-($13))|0);
      var $sub5=((($sub4)-(1))|0);
      var $14=$argv_addr;
      var $arrayidx6=(($14+($sub5<<2))|0);
      HEAP32[(($arrayidx6)>>2)]=$11;
      __label__ = 5; break;
    case 5: 
      var $15=$i;
      var $inc=((($15)+(1))|0);
      $i=$inc;
      __label__ = 3; break;
    case 6: 
      ;
      return;
    default: assert(0, "bad label: " + __label__);
  }
}


function _permute($argv, $len1, $len2) {
  ;
  var __label__;

  var $argv_addr;
  var $len1_addr;
  var $len2_addr;
  $argv_addr=$argv;
  $len1_addr=$len1;
  $len2_addr=$len2;
  var $0=$argv_addr;
  var $1=$len1_addr;
  _reverse_argv_elements($0, $1);
  var $2=$argv_addr;
  var $3=$len1_addr;
  var $4=$len2_addr;
  var $add=((($3)+($4))|0);
  _reverse_argv_elements($2, $add);
  var $5=$argv_addr;
  var $6=$len2_addr;
  _reverse_argv_elements($5, $6);
  ;
  return;
}


function _malloc($bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $bytes_addr;
      var $mem;
      var $nb;
      var $idx;
      var $smallbits;
      var $b;
      var $p;
      var $F;
      var $b33;
      var $p34;
      var $r;
      var $rsize;
      var $i;
      var $leftbits;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $F68;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F102;
      var $rsize157;
      var $p159;
      var $r163;
      var $dvs;
      var $rsize185;
      var $p187;
      var $r188;
      $bytes_addr=$bytes;
      var $0=$bytes_addr; //@line 4629 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) <= 244; //@line 4629 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 38; break; } //@line 4629 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$bytes_addr; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($1)>>>0) < 11; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $cond = 16;__label__ = 6; break; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $2=$bytes_addr; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($2)+(4))|0); //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add2=((($add)+(7))|0); //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$add2 & -8; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and;__label__ = 6; break; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$cond; //@line 4632 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$nb; //@line 4633 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$3 >>> 3; //@line 4633 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $idx=$shr; //@line 4633 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[((((__gm_)|0))>>2)]; //@line 4634 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$idx; //@line 4634 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr3=$4 >>> (($5)>>>0); //@line 4634 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $smallbits=$shr3; //@line 4634 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$smallbits; //@line 4636 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and4=$6 & 3; //@line 4636 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp5=(($and4)|0)!=0; //@line 4636 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp5) { __label__ = 7; break; } else { __label__ = 14; break; } //@line 4636 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $7=$smallbits; //@line 4638 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$7 ^ -1; //@line 4638 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and7=$neg & 1; //@line 4638 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$idx; //@line 4638 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add8=((($8)+($and7))|0); //@line 4638 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $idx=$add8; //@line 4638 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$idx; //@line 4639 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=$9 << 1; //@line 4639 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=((((__gm_+40)|0)+($shl<<2))|0); //@line 4639 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$arrayidx; //@line 4639 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$10; //@line 4639 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $b=$11; //@line 4639 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$b; //@line 4640 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($12+8)|0); //@line 4640 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($fd)>>2)]; //@line 4640 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$13; //@line 4640 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$p; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd9=(($14+8)|0); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($fd9)>>2)]; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$15; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$b; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$F; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp10=(($16)|0)==(($17)|0); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp10) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $18=$idx; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl12=1 << $18; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg13=$shl12 ^ -1; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=HEAP32[((((__gm_)|0))>>2)]; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and14=$19 & $neg13; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and14; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $20=$F; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$20; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp15=(($21)>>>0) >= (($22)>>>0); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp15)&1); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $23=$F; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$b; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd17=(($24+8)|0); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd17)>>2)]=$23; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$b; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$F; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($26+12)|0); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$25; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      _abort(); //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4642 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 13; break;
    case 13: 
      var $27=$idx; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl20=$27 << 3; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$shl20 | 1; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or21=$or | 2; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$p; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($28+4)|0); //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or21; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$p; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$29; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$idx; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl22=$31 << 3; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($30+$shl22)|0); //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$add_ptr; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head23=(($32+4)|0); //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($head23)>>2)]; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or24=$33 | 1; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head23)>>2)]=$or24; //@line 4643 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$p; //@line 4644 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$34; //@line 4644 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr25=(($35+8)|0); //@line 4644 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr25; //@line 4644 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4646 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $36=$nb; //@line 4649 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4649 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($36)>>>0) > (($37)>>>0); //@line 4649 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 15; break; } else { __label__ = 36; break; } //@line 4649 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $38=$smallbits; //@line 4650 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp30=(($38)|0)!=0; //@line 4650 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp30) { __label__ = 16; break; } else { __label__ = 31; break; } //@line 4650 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $39=$smallbits; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$idx; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl35=$39 << $40; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$idx; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl36=1 << $41; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl37=$shl36 << 1; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$idx; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl38=1 << $42; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl39=$shl38 << 1; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$shl39))|0); //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or40=$shl37 | $sub; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and41=$shl35 & $or40; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $leftbits=$and41; //@line 4654 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$leftbits; //@line 4655 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$leftbits; //@line 4655 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub42=(((-$44))|0); //@line 4655 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and43=$43 & $sub42; //@line 4655 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and43; //@line 4655 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$leastbit; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub44=((($45)-(1))|0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$sub44; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr45=$46 >>> 12; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and46=$shr45 & 16; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and46; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$K; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$47; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$K; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr47=$49 >>> (($48)>>>0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr47; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr48=$50 >>> 5; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and49=$shr48 & 8; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and49; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$N; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add50=((($51)+($and49))|0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add50; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$K; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr51=$53 >>> (($52)>>>0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr51; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr52=$54 >>> 2; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and53=$shr52 & 4; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and53; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$N; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add54=((($55)+($and53))|0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add54; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$K; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr55=$57 >>> (($56)>>>0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr55; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr56=$58 >>> 1; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and57=$shr56 & 2; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and57; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$N; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add58=((($59)+($and57))|0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add58; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$K; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr59=$61 >>> (($60)>>>0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr59; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr60=$62 >>> 1; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and61=$shr60 & 1; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and61; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$N; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add62=((($63)+($and61))|0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add62; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$K; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr63=$65 >>> (($64)>>>0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr63; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$N; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$Y; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add64=((($66)+($67))|0); //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $i=$add64; //@line 4656 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$i; //@line 4657 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl65=$68 << 1; //@line 4657 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx66=((((__gm_+40)|0)+($shl65<<2))|0); //@line 4657 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$arrayidx66; //@line 4657 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 4657 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $b33=$70; //@line 4657 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$b33; //@line 4658 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd67=(($71+8)|0); //@line 4658 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($fd67)>>2)]; //@line 4658 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p34=$72; //@line 4658 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$p34; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd69=(($73+8)|0); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($fd69)>>2)]; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F68=$74; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$b33; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$F68; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($75)|0)==(($76)|0); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp70) { __label__ = 17; break; } else { __label__ = 18; break; } //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $77=$i; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl73=1 << $77; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg74=$shl73 ^ -1; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[((((__gm_)|0))>>2)]; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and75=$78 & $neg74; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and75; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $79=$F68; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$79; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp77=(($80)>>>0) >= (($81)>>>0); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv78=(($cmp77)&1); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval79=(($conv78)==(1)); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool80=(($expval79)|0)!=0; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool80) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $82=$F68; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$b33; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd82=(($83+8)|0); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd82)>>2)]=$82; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$b33; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$F68; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk83=(($85+12)|0); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk83)>>2)]=$84; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      _abort(); //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4660 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      var $86=$i; //@line 4661 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl87=$86 << 3; //@line 4661 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$nb; //@line 4661 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub88=((($shl87)-($87))|0); //@line 4661 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub88; //@line 4661 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$nb; //@line 4666 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or89=$88 | 1; //@line 4666 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or90=$or89 | 2; //@line 4666 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$p34; //@line 4666 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head91=(($89+4)|0); //@line 4666 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head91)>>2)]=$or90; //@line 4666 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $90=$p34; //@line 4667 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$90; //@line 4667 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$nb; //@line 4667 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr92=(($91+$92)|0); //@line 4667 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$add_ptr92; //@line 4667 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $r=$93; //@line 4667 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$rsize; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or93=$94 | 1; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$r; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head94=(($95+4)|0); //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head94)>>2)]=$or93; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$rsize; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$r; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$97; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$rsize; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr95=(($98+$99)|0); //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$add_ptr95; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($100)|0); //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$96; //@line 4668 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $DVS=$101; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$DVS; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($102)|0)!=0; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp96) { __label__ = 23; break; } else { __label__ = 30; break; } //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $103=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $DV=$103; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$DVS; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr99=$104 >>> 3; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$shr99; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$I; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl100=$105 << 1; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx101=((((__gm_+40)|0)+($shl100<<2))|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$arrayidx101; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B=$107; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$B; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F102=$108; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $109=HEAP32[((((__gm_)|0))>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$I; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl103=1 << $110; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and104=$109 & $shl103; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool105=(($and104)|0)!=0; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool105) { __label__ = 25; break; } else { __label__ = 24; break; } //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $111=$I; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl107=1 << $111; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[((((__gm_)|0))>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or108=$112 | $shl107; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$or108; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 29; break; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $113=$B; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd110=(($113+8)|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($fd110)>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$114; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp111=(($115)>>>0) >= (($116)>>>0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv112=(($cmp111)&1); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval113=(($conv112)==(1)); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool114=(($expval113)|0)!=0; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool114) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $117=$B; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd116=(($117+8)|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($fd116)>>2)]; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F102=$118; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $119=$DV; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$B; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd120=(($120+8)|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd120)>>2)]=$119; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$DV; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$F102; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk121=(($122+12)|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk121)>>2)]=$121; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$F102; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$DV; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd122=(($124+8)|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd122)>>2)]=$123; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$B; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$DV; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk123=(($126+12)|0); //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk123)>>2)]=$125; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $127=$rsize; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$127; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$r; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$128; //@line 4669 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$p34; //@line 4671 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$129; //@line 4671 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr125=(($130+8)|0); //@line 4671 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr125; //@line 4671 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4673 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $131=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($131)|0)!=0; //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 32; break; } else { __label__ = 34; break; } //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $132=$nb; //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call=_tmalloc_small(__gm_, $132); //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$call; //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp129=(($call)|0)!=0; //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp129) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 54; break; //@line 4678 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 4680 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break;
    case 37: 
      __label__ = 45; break; //@line 4681 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $133=$bytes_addr; //@line 4682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp137=(($133)>>>0) >= 4294967232; //@line 4682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp137) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 4682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      $nb=-1; //@line 4683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 44; break; //@line 4683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $134=$bytes_addr; //@line 4685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add141=((($134)+(4))|0); //@line 4685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add142=((($add141)+(7))|0); //@line 4685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and143=$add142 & -8; //@line 4685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$and143; //@line 4685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($135)|0)!=0; //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 41; break; } else { __label__ = 43; break; } //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $136=$nb; //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call147=_tmalloc_large(__gm_, $136); //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$call147; //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($call147)|0)!=0; //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 42; break; } else { __label__ = 43; break; } //@line 4686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 54; break; //@line 4688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      __label__ = 44; break;
    case 44: 
      __label__ = 45; break;
    case 45: 
      var $137=$nb; //@line 4692 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $138=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4692 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp154=(($137)>>>0) <= (($138)>>>0); //@line 4692 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp154) { __label__ = 46; break; } else { __label__ = 50; break; } //@line 4692 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $139=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4693 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$nb; //@line 4693 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub158=((($139)-($140))|0); //@line 4693 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize157=$sub158; //@line 4693 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4694 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p159=$141; //@line 4694 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$rsize157; //@line 4695 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp160=(($142)>>>0) >= 16; //@line 4695 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp160) { __label__ = 47; break; } else { __label__ = 48; break; } //@line 4695 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $143=$p159; //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$143; //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$nb; //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr164=(($144+$145)|0); //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$add_ptr164; //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$146; //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $r163=$146; //@line 4696 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$rsize157; //@line 4697 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$147; //@line 4697 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$rsize157; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or165=$148 | 1; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$r163; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head166=(($149+4)|0); //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head166)>>2)]=$or165; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$rsize157; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$r163; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$151; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$rsize157; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr167=(($152+$153)|0); //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$add_ptr167; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot168=(($154)|0); //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot168)>>2)]=$150; //@line 4698 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$nb; //@line 4699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or169=$155 | 1; //@line 4699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or170=$or169 | 2; //@line 4699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$p159; //@line 4699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head171=(($156+4)|0); //@line 4699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head171)>>2)]=$or170; //@line 4699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4700 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $157=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4702 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $dvs=$157; //@line 4702 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4704 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$dvs; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or173=$158 | 1; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or174=$or173 | 2; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $159=$p159; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head175=(($159+4)|0); //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head175)>>2)]=$or174; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$p159; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$dvs; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr176=(($161+$162)|0); //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$add_ptr176; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head177=(($163+4)|0); //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $164=HEAP32[(($head177)>>2)]; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or178=$164 | 1; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head177)>>2)]=$or178; //@line 4705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break;
    case 49: 
      var $165=$p159; //@line 4707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$165; //@line 4707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr180=(($166+8)|0); //@line 4707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr180; //@line 4707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $167=$nb; //@line 4712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp182=(($167)>>>0) < (($168)>>>0); //@line 4712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp182) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $169=$nb; //@line 4713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub186=((($170)-($169))|0); //@line 4713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$sub186; //@line 4713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize185=$sub186; //@line 4713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p187=$171; //@line 4714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$p187; //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$172; //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $174=$nb; //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr189=(($173+$174)|0); //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$add_ptr189; //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$175; //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $r188=$175; //@line 4715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=$rsize185; //@line 4716 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or190=$176 | 1; //@line 4716 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $177=$r188; //@line 4716 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head191=(($177+4)|0); //@line 4716 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head191)>>2)]=$or190; //@line 4716 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$nb; //@line 4717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or192=$178 | 1; //@line 4717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or193=$or192 | 2; //@line 4717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$p187; //@line 4717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head194=(($179+4)|0); //@line 4717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head194)>>2)]=$or193; //@line 4717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $180=$p187; //@line 4718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181=$180; //@line 4718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr195=(($181+8)|0); //@line 4718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$add_ptr195; //@line 4718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4721 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $182=$nb; //@line 4724 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call198=_sys_alloc(__gm_, $182); //@line 4724 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$call198; //@line 4724 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 54; break; //@line 4724 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $183=$mem; //@line 4728 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $183; //@line 4728 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_malloc"] = _malloc;_malloc["X"]=1;

function _tmalloc_small($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $nb_addr;
      var $t;
      var $v;
      var $rsize;
      var $i;
      var $leastbit;
      var $Y;
      var $K;
      var $N;
      var $trem;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $DVS;
      var $DV;
      var $I;
      var $B;
      var $F191;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$m_addr; //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($0+4)|0); //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($treemap)>>2)]; //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap1=(($2+4)|0); //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($treemap1)>>2)]; //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$3))|0); //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$1 & $sub; //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and; //@line 4269 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$leastbit; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub2=((($4)-(1))|0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$sub2; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$5 >>> 12; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and3=$shr & 16; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and3; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$K; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$6; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$K; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr4=$8 >>> (($7)>>>0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr4; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr5=$9 >>> 5; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and6=$shr5 & 8; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and6; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$N; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($10)+($and6))|0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$K; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr7=$12 >>> (($11)>>>0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr7; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr8=$13 >>> 2; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and9=$shr8 & 4; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and9; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$N; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add10=((($14)+($and9))|0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add10; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$K; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr11=$16 >>> (($15)>>>0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr11; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr12=$17 >>> 1; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and13=$shr12 & 2; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and13; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$N; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add14=((($18)+($and13))|0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add14; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$K; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr15=$20 >>> (($19)>>>0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr15; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr16=$21 >>> 1; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and17=$shr16 & 1; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and17; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$N; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add18=((($22)+($and17))|0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add18; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$K; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr19=$24 >>> (($23)>>>0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shr19; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$N; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$Y; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add20=((($25)+($26))|0); //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $i=$add20; //@line 4270 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$i; //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$m_addr; //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($28+304)|0); //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($treebins+($27<<2))|0); //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($arrayidx)>>2)]; //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$29; //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $v=$29; //@line 4271 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$t; //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($30+4)|0); //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($head)>>2)]; //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and21=$31 & -8; //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$nb_addr; //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub22=((($and21)-($32))|0); //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub22; //@line 4272 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $33=$t; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child=(($33+16)|0); //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx23=(($child)|0); //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($arrayidx23)>>2)]; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($34)|0)!=0; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 5; break; } //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $35=$t; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child24=(($35+16)|0); //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx25=(($child24)|0); //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($arrayidx25)>>2)]; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $36;__label__ = 6; break; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $37=$t; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child26=(($37+16)|0); //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx27=(($child26+4)|0); //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($arrayidx27)>>2)]; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $38;__label__ = 6; break; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$cond; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($cond)|0)!=0; //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 4274 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $39=$t; //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head29=(($39+4)|0); //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($head29)>>2)]; //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and30=$40 & -8; //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$nb_addr; //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub31=((($and30)-($41))|0); //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $trem=$sub31; //@line 4275 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$trem; //@line 4276 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$rsize; //@line 4276 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp32=(($42)>>>0) < (($43)>>>0); //@line 4276 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp32) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4276 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $44=$trem; //@line 4277 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$44; //@line 4277 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$t; //@line 4278 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $v=$45; //@line 4278 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 4279 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 3; break; //@line 4280 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $46=$v; //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$46; //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($48+16)|0); //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($least_addr)>>2)]; //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp33=(($47)>>>0) >= (($49)>>>0); //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp33)&1); //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 11; break; } else { __label__ = 70; break; } //@line 4282 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $50=$v; //@line 4283 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4283 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$nb_addr; //@line 4283 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($51+$52)|0); //@line 4283 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$add_ptr; //@line 4283 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $r=$53; //@line 4283 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$v; //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$54; //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$r; //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp35=(($55)>>>0) < (($57)>>>0); //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv36=(($cmp35)&1); //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval37=(($conv36)==(1)); //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool38=(($expval37)|0)!=0; //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool38) { __label__ = 12; break; } else { __label__ = 69; break; } //@line 4285 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $58=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent=(($58+24)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($parent)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$59; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($60+12)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[(($bk)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp40=(($61)|0)!=(($62)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp40) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $63=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($63+8)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($fd)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$64; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk43=(($65+12)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($bk43)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$66; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$F; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$67; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr44=(($69+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($least_addr44)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($68)>>>0) >= (($70)>>>0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv46=(($cmp45)&1); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval47=(($conv46)==(1)); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool48=(($expval47)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool48) { __label__ = 14; break; } else { __label__ = 15; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $71=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$F; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk50=(($72+12)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk50)>>2)]=$71; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$F; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd51=(($74+8)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd51)>>2)]=$73; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      _abort(); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 29; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $75=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child54=(($75+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx55=(($child54+4)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx55; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($arrayidx55)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$76; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp56=(($76)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp56) { __label__ = 19; break; } else { __label__ = 18; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $77=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child58=(($77+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx59=(($child58)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx59; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($arrayidx59)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$78; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp60=(($78)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp60) { __label__ = 19; break; } else { __label__ = 28; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      __label__ = 20; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $79=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child64=(($79+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx65=(($child64+4)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx65; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($arrayidx65)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp66=(($80)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp66) { var $83 = 1;__label__ = 22; break; } else { __label__ = 21; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $81=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child68=(($81+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx69=(($child68)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx69; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=HEAP32[(($arrayidx69)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp70=(($82)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $83 = $cmp70;__label__ = 22; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $83;
      if ($83) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $84=$CP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$84; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($84)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$85; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $86=$RP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$86; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr74=(($88+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($least_addr74)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($87)>>>0) >= (($89)>>>0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv76=(($cmp75)&1); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval77=(($conv76)==(1)); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool78=(($expval77)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool78) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $90=$RP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($90)>>2)]=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      _abort(); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      __label__ = 28; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break;
    case 29: 
      var $91=$XP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp84=(($91)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp84) { __label__ = 30; break; } else { __label__ = 57; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $92=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index=(($92+28)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($index)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins87=(($94+304)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx88=(($treebins87+($93<<2))|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx88; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$H; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=HEAP32[(($96)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp89=(($95)|0)==(($97)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp89) { __label__ = 31; break; } else { __label__ = 34; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $98=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$H; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($99)>>2)]=$98; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($98)|0)==0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp92) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $100=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index95=(($100+28)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($index95)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $101; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap96=(($102+4)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($treemap96)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and97=$103 & $neg; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap96)>>2)]=$and97; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 41; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $104=$XP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$104; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr100=(($106+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $107=HEAP32[(($least_addr100)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($105)>>>0) >= (($107)>>>0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv102=(($cmp101)&1); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval103=(($conv102)==(1)); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool104=(($expval103)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool104) { __label__ = 35; break; } else { __label__ = 39; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $108=$XP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child106=(($108+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx107=(($child106)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $109=HEAP32[(($arrayidx107)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp108=(($109)|0)==(($110)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp108) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $111=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$XP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child111=(($112+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx112=(($child111)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx112)>>2)]=$111; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $113=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$XP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child114=(($114+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx115=(($child114+4)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx115)>>2)]=$113; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 38; break;
    case 38: 
      __label__ = 40; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $115=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($115)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp120) { __label__ = 42; break; } else { __label__ = 56; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $116=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$116; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr123=(($118+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $119=HEAP32[(($least_addr123)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp124=(($117)>>>0) >= (($119)>>>0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv125=(($cmp124)&1); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval126=(($conv125)==(1)); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool127=(($expval126)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool127) { __label__ = 43; break; } else { __label__ = 54; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $120=$XP; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent129=(($121+24)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent129)>>2)]=$120; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child130=(($122+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx131=(($child130)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $123=HEAP32[(($arrayidx131)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$123; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($123)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp132) { __label__ = 44; break; } else { __label__ = 48; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $124=$C0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$124; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr135=(($126+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $127=HEAP32[(($least_addr135)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($125)>>>0) >= (($127)>>>0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv137=(($cmp136)&1); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval138=(($conv137)==(1)); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool139=(($expval138)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool139) { __label__ = 45; break; } else { __label__ = 46; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $128=$C0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child141=(($129+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx142=(($child141)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx142)>>2)]=$128; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$C0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent143=(($131+24)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent143)>>2)]=$130; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      _abort(); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $132=$v; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child147=(($132+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx148=(($child147+4)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($arrayidx148)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$133; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp149=(($133)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp149) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $134=$C1; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$134; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$m_addr; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr152=(($136+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($least_addr152)>>2)]; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp153=(($135)>>>0) >= (($137)>>>0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv154=(($cmp153)&1); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval155=(($conv154)==(1)); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool156=(($expval155)|0)!=0; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool156) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $138=$C1; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child158=(($139+16)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx159=(($child158+4)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx159)>>2)]=$138; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$R; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$C1; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent160=(($141+24)|0); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent160)>>2)]=$140; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 55; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      _abort(); //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      __label__ = 56; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4286 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $142=$rsize; //@line 4287 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp168=(($142)>>>0) < 16; //@line 4287 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp168) { __label__ = 58; break; } else { __label__ = 59; break; } //@line 4287 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $143=$rsize; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$nb_addr; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add171=((($143)+($144))|0); //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$add171 | 1; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or172=$or | 2; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$v; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head173=(($145+4)|0); //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head173)>>2)]=$or172; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$v; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$146; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$rsize; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$nb_addr; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add174=((($148)+($149))|0); //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr175=(($147+$add174)|0); //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$add_ptr175; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head176=(($150+4)|0); //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($head176)>>2)]; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or177=$151 | 1; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head176)>>2)]=$or177; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break; //@line 4288 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $152=$nb_addr; //@line 4290 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or179=$152 | 1; //@line 4290 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or180=$or179 | 2; //@line 4290 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$v; //@line 4290 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head181=(($153+4)|0); //@line 4290 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head181)>>2)]=$or180; //@line 4290 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$rsize; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or182=$154 | 1; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$r; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head183=(($155+4)|0); //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head183)>>2)]=$or182; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$rsize; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$r; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $159=$rsize; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr184=(($158+$159)|0); //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$add_ptr184; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($160)|0); //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$156; //@line 4291 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($161+8)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($dvsize)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $DVS=$162; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$DVS; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp185=(($163)|0)!=0; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp185) { __label__ = 60; break; } else { __label__ = 67; break; } //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $164=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dv=(($164+20)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($dv)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $DV=$165; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$DVS; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr188=$166 >>> 3; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$shr188; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $167=$I; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl189=$167 << 1; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($168+40)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx190=(($smallbins+($shl189<<2))|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$arrayidx190; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$169; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B=$170; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=$B; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F191=$171; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($172)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=HEAP32[(($smallmap)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $174=$I; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl192=1 << $174; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and193=$173 & $shl192; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool194=(($and193)|0)!=0; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool194) { __label__ = 62; break; } else { __label__ = 61; break; } //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $175=$I; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl196=1 << $175; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap197=(($176)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($smallmap197)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or198=$177 | $shl196; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap197)>>2)]=$or198; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $178=$B; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd200=(($178+8)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=HEAP32[(($fd200)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $180=$179; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr201=(($181+16)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $182=HEAP32[(($least_addr201)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp202=(($180)>>>0) >= (($182)>>>0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv203=(($cmp202)&1); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval204=(($conv203)==(1)); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool205=(($expval204)|0)!=0; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool205) { __label__ = 63; break; } else { __label__ = 64; break; } //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $183=$B; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd207=(($183+8)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $184=HEAP32[(($fd207)>>2)]; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F191=$184; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      _abort(); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 66; break;
    case 66: 
      var $185=$DV; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$B; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd211=(($186+8)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd211)>>2)]=$185; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$DV; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$F191; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk212=(($188+12)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk212)>>2)]=$187; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$F191; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $190=$DV; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd213=(($190+8)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd213)>>2)]=$189; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$B; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$DV; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk214=(($192+12)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk214)>>2)]=$191; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $193=$rsize; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $194=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dvsize216=(($194+8)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize216)>>2)]=$193; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $195=$r; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$m_addr; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dv217=(($196+20)|0); //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv217)>>2)]=$195; //@line 4292 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 68; break;
    case 68: 
      var $197=$v; //@line 4294 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$197; //@line 4294 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr219=(($198+8)|0); //@line 4294 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $add_ptr219; //@line 4294 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 4296 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      _abort(); //@line 4298 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4298 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_small["X"]=1;

function _tmalloc_large($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $v;
      var $rsize;
      var $t;
      var $idx;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $sizebits;
      var $rst;
      var $rt;
      var $trem;
      var $leftbits;
      var $i;
      var $leastbit;
      var $Y68;
      var $K70;
      var $N73;
      var $trem97;
      var $r;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I;
      var $B;
      var $F282;
      var $TP;
      var $H307;
      var $I308;
      var $X309;
      var $Y319;
      var $N320;
      var $K324;
      var $T;
      var $K365;
      var $C;
      var $F404;
      $m_addr=$m;
      $nb_addr=$nb;
      $v=0; //@line 4195 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $0=$nb_addr; //@line 4196 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((-$0))|0); //@line 4196 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub; //@line 4196 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=$nb_addr; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$1 >>> 8; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $X=$shr; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$X; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($2)|0)==0; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $idx=0; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 8; break; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$X; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($3)>>>0) > 65535; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      $idx=31; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $4=$X; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$4; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$Y; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub4=((($5)-(256))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr5=$sub4 >>> 16; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$shr5 & 8; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$and; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$N; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$Y; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=$7 << $6; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub6=((($shl)-(4096))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr7=$sub6 >>> 16; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and8=$shr7 & 4; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and8; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$K; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$N; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($9)+($8))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$K; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$Y; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl9=$11 << $10; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl9; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub10=((($shl9)-(16384))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr11=$sub10 >>> 16; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and12=$shr11 & 2; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and12; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$N; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add13=((($12)+($and12))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add13; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$N; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub14=(((14)-($13))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$K; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$Y; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl15=$15 << $14; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl15; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr16=$shl15 >>> 15; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add17=((($sub14)+($shr16))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$add17; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$K; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl18=$16 << 1; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$nb_addr; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$K; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add19=((($18)+(7))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr20=$17 >>> (($add19)>>>0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and21=$shr20 & 1; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add22=((($shl18)+($and21))|0); //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $idx=$add22; //@line 4199 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break;
    case 7: 
      __label__ = 8; break;
    case 8: 
      var $19=$idx; //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$m_addr; //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($20+304)|0); //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($treebins+($19<<2))|0); //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($arrayidx)>>2)]; //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$21; //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($21)|0)!=0; //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 9; break; } else { __label__ = 24; break; } //@line 4200 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $22=$nb_addr; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$idx; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($23)|0)==31; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $cond = 0;__label__ = 12; break; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $24=$idx; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr27=$24 >>> 1; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add28=((($shr27)+(8))|0); //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub29=((($add28)-(2))|0); //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub30=(((31)-($sub29))|0); //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $sub30;__label__ = 12; break; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $cond; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl31=$22 << $cond; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sizebits=$shl31; //@line 4202 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rst=0; //@line 4203 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4204 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $25=$t; //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($25+4)|0); //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($head)>>2)]; //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and32=$26 & -8; //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$nb_addr; //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub33=((($and32)-($27))|0); //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $trem=$sub33; //@line 4206 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$trem; //@line 4207 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$rsize; //@line 4207 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($28)>>>0) < (($29)>>>0); //@line 4207 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 14; break; } else { __label__ = 17; break; } //@line 4207 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $30=$t; //@line 4208 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $v=$30; //@line 4208 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$trem; //@line 4209 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$31; //@line 4209 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($31)|0)==0; //@line 4209 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4209 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      __label__ = 23; break; //@line 4210 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4211 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $32=$t; //@line 4212 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child=(($32+16)|0); //@line 4212 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx40=(($child+4)|0); //@line 4212 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=HEAP32[(($arrayidx40)>>2)]; //@line 4212 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rt=$33; //@line 4212 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$sizebits; //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr41=$34 >>> 31; //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and42=$shr41 & 1; //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$t; //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child43=(($35+16)|0); //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx44=(($child43+($and42<<2))|0); //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($arrayidx44)>>2)]; //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$36; //@line 4213 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$rt; //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp45=(($37)|0)!=0; //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp45) { __label__ = 18; break; } else { __label__ = 20; break; } //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $38=$rt; //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$t; //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($38)|0)!=(($39)|0); //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp46) { __label__ = 19; break; } else { __label__ = 20; break; } //@line 4214 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $40=$rt; //@line 4215 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rst=$40; //@line 4215 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 4215 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $41=$t; //@line 4216 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp49=(($41)|0)==0; //@line 4216 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp49) { __label__ = 21; break; } else { __label__ = 22; break; } //@line 4216 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $42=$rst; //@line 4217 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$42; //@line 4217 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4218 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $43=$sizebits; //@line 4220 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl52=$43 << 1; //@line 4220 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sizebits=$shl52; //@line 4220 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 13; break; //@line 4221 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      __label__ = 24; break; //@line 4222 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $44=$t; //@line 4223 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp54=(($44)|0)==0; //@line 4223 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp54) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4223 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $45=$v; //@line 4223 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp56=(($45)|0)==0; //@line 4223 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp56) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4223 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $46=$idx; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl58=1 << $46; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl59=$shl58 << 1; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$idx; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl60=1 << $47; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl61=$shl60 << 1; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub62=(((-$shl61))|0); //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$shl59 | $sub62; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($48+4)|0); //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($treemap)>>2)]; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and63=$or & $49; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $leftbits=$and63; //@line 4224 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$leftbits; //@line 4225 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp64=(($50)|0)!=0; //@line 4225 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp64) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4225 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $51=$leftbits; //@line 4227 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$leftbits; //@line 4227 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub66=(((-$52))|0); //@line 4227 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and67=$51 & $sub66; //@line 4227 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $leastbit=$and67; //@line 4227 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$leastbit; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub69=((($53)-(1))|0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y68=$sub69; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr71=$54 >>> 12; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and72=$shr71 & 16; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K70=$and72; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$K70; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N73=$55; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$K70; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr74=$57 >>> (($56)>>>0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr74; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr75=$58 >>> 5; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and76=$shr75 & 8; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K70=$and76; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$N73; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add77=((($59)+($and76))|0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N73=$add77; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$K70; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr78=$61 >>> (($60)>>>0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr78; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr79=$62 >>> 2; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and80=$shr79 & 4; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K70=$and80; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$N73; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add81=((($63)+($and80))|0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N73=$add81; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$K70; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr82=$65 >>> (($64)>>>0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr82; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr83=$66 >>> 1; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and84=$shr83 & 2; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K70=$and84; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$N73; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add85=((($67)+($and84))|0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N73=$add85; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$K70; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr86=$69 >>> (($68)>>>0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr86; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr87=$70 >>> 1; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and88=$shr87 & 1; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K70=$and88; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$N73; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add89=((($71)+($and88))|0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N73=$add89; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$K70; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr90=$73 >>> (($72)>>>0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y68=$shr90; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$N73; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$Y68; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add91=((($74)+($75))|0); //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $i=$add91; //@line 4228 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$i; //@line 4229 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$m_addr; //@line 4229 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins92=(($77+304)|0); //@line 4229 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx93=(($treebins92+($76<<2))|0); //@line 4229 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[(($arrayidx93)>>2)]; //@line 4229 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$78; //@line 4229 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4230 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4231 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break; //@line 4233 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $79=$t; //@line 4233 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($79)|0)!=0; //@line 4233 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp96) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 4233 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $80=$t; //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head98=(($80+4)|0); //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($head98)>>2)]; //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and99=$81 & -8; //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$nb_addr; //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub100=((($and99)-($82))|0); //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $trem97=$sub100; //@line 4234 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$trem97; //@line 4235 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$rsize; //@line 4235 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($83)>>>0) < (($84)>>>0); //@line 4235 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 32; break; } else { __label__ = 33; break; } //@line 4235 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $85=$trem97; //@line 4236 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$85; //@line 4236 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$t; //@line 4237 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $v=$86; //@line 4237 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 33; break; //@line 4238 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $87=$t; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child104=(($87+16)|0); //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx105=(($child104)|0); //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx105)>>2)]; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp106=(($88)|0)!=0; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp106) { __label__ = 34; break; } else { __label__ = 35; break; } //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $89=$t; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child108=(($89+16)|0); //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx109=(($child108)|0); //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($arrayidx109)>>2)]; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond114 = $90;__label__ = 36; break; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $91=$t; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child111=(($91+16)|0); //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx112=(($child111+4)|0); //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($arrayidx112)>>2)]; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond114 = $92;__label__ = 36; break; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $cond114; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $t=$cond114; //@line 4239 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 4240 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $93=$v; //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp115=(($93)|0)!=0; //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp115) { __label__ = 38; break; } else { __label__ = 127; break; } //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $94=$rsize; //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$m_addr; //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($95+8)|0); //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($dvsize)>>2)]; //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$nb_addr; //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub117=((($96)-($97))|0); //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp118=(($94)>>>0) < (($sub117)>>>0); //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp118) { __label__ = 39; break; } else { __label__ = 127; break; } //@line 4243 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $98=$v; //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$98; //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$m_addr; //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($100+16)|0); //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($least_addr)>>2)]; //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($99)>>>0) >= (($101)>>>0); //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp120)&1); //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($expval)|0)!=0; //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 40; break; } else { __label__ = 126; break; } //@line 4244 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $102=$v; //@line 4245 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$102; //@line 4245 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$nb_addr; //@line 4245 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($103+$104)|0); //@line 4245 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$add_ptr; //@line 4245 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $r=$105; //@line 4245 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$v; //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$106; //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$r; //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$108; //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp122=(($107)>>>0) < (($109)>>>0); //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv123=(($cmp122)&1); //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval124=(($conv123)==(1)); //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool125=(($expval124)|0)!=0; //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool125) { __label__ = 41; break; } else { __label__ = 125; break; } //@line 4247 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $110=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent=(($110+24)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $111=HEAP32[(($parent)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$111; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($112+12)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($bk)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($113)|0)!=(($114)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 42; break; } else { __label__ = 46; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $115=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($115+8)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($fd)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$116; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk130=(($117+12)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $118=HEAP32[(($bk130)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$118; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$F; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr131=(($121+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[(($least_addr131)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($120)>>>0) >= (($122)>>>0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv133=(($cmp132)&1); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval134=(($conv133)==(1)); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool135=(($expval134)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool135) { __label__ = 43; break; } else { __label__ = 44; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $123=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$F; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk137=(($124+12)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk137)>>2)]=$123; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$F; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd138=(($126+8)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd138)>>2)]=$125; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      _abort(); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 58; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $127=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child142=(($127+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx143=(($child142+4)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx143; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=HEAP32[(($arrayidx143)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$128; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($128)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 48; break; } else { __label__ = 47; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $129=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child146=(($129+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx147=(($child146)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx147; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $130=HEAP32[(($arrayidx147)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$130; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($130)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 48; break; } else { __label__ = 57; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $131=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child152=(($131+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx153=(($child152+4)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx153; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $132=HEAP32[(($arrayidx153)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp154=(($132)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp154) { var $135 = 1;__label__ = 51; break; } else { __label__ = 50; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $133=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child156=(($133+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx157=(($child156)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx157; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $134=HEAP32[(($arrayidx157)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp158=(($134)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135 = $cmp158;__label__ = 51; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $135;
      if ($135) { __label__ = 52; break; } else { __label__ = 53; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      var $136=$CP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$136; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $137=HEAP32[(($136)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$137; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $138=$RP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$138; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr162=(($140+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($least_addr162)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp163=(($139)>>>0) >= (($141)>>>0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv164=(($cmp163)&1); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval165=(($conv164)==(1)); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool166=(($expval165)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool166) { __label__ = 54; break; } else { __label__ = 55; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $142=$RP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($142)>>2)]=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break;
    case 58: 
      var $143=$XP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp172=(($143)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp172) { __label__ = 59; break; } else { __label__ = 86; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $144=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index=(($144+28)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $145=HEAP32[(($index)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins175=(($146+304)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx176=(($treebins175+($145<<2))|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx176; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$H; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=HEAP32[(($148)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp177=(($147)|0)==(($149)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp177) { __label__ = 60; break; } else { __label__ = 63; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $150=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$H; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($151)>>2)]=$150; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp180=(($150)|0)==0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp180) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $152=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index183=(($152+28)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $153=HEAP32[(($index183)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl184=1 << $153; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl184 ^ -1; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap185=(($154+4)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=HEAP32[(($treemap185)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and186=$155 & $neg; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap185)>>2)]=$and186; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 62; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      __label__ = 70; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $156=$XP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr189=(($158+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($least_addr189)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp190=(($157)>>>0) >= (($159)>>>0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv191=(($cmp190)&1); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval192=(($conv191)==(1)); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool193=(($expval192)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool193) { __label__ = 64; break; } else { __label__ = 68; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $160=$XP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child195=(($160+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx196=(($child195)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=HEAP32[(($arrayidx196)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp197=(($161)|0)==(($162)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp197) { __label__ = 65; break; } else { __label__ = 66; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $163=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $164=$XP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child200=(($164+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx201=(($child200)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx201)>>2)]=$163; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $165=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$XP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child203=(($166+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx204=(($child203+4)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx204)>>2)]=$165; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 67; break;
    case 67: 
      __label__ = 69; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      var $167=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp209=(($167)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp209) { __label__ = 71; break; } else { __label__ = 85; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $168=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$168; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr212=(($170+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[(($least_addr212)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp213=(($169)>>>0) >= (($171)>>>0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv214=(($cmp213)&1); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval215=(($conv214)==(1)); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool216=(($expval215)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool216) { __label__ = 72; break; } else { __label__ = 83; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $172=$XP; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent218=(($173+24)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent218)>>2)]=$172; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $174=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child219=(($174+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx220=(($child219)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $175=HEAP32[(($arrayidx220)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$175; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp221=(($175)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp221) { __label__ = 73; break; } else { __label__ = 77; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $176=$C0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $177=$176; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr224=(($178+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=HEAP32[(($least_addr224)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp225=(($177)>>>0) >= (($179)>>>0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv226=(($cmp225)&1); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval227=(($conv226)==(1)); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool228=(($expval227)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool228) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $180=$C0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child230=(($181+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx231=(($child230)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx231)>>2)]=$180; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$C0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent232=(($183+24)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent232)>>2)]=$182; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 76; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      _abort(); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $184=$v; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child236=(($184+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx237=(($child236+4)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $185=HEAP32[(($arrayidx237)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$185; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp238=(($185)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp238) { __label__ = 78; break; } else { __label__ = 82; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $186=$C1; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$186; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$m_addr; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr241=(($188+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $189=HEAP32[(($least_addr241)>>2)]; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp242=(($187)>>>0) >= (($189)>>>0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv243=(($cmp242)&1); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval244=(($conv243)==(1)); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool245=(($expval244)|0)!=0; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool245) { __label__ = 79; break; } else { __label__ = 80; break; } //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $190=$C1; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child247=(($191+16)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx248=(($child247+4)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx248)>>2)]=$190; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$R; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$C1; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent249=(($193+24)|0); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent249)>>2)]=$192; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 81; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 80: 
      _abort(); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 81: 
      __label__ = 82; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      __label__ = 84; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      _abort(); //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      __label__ = 86; break; //@line 4248 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $194=$rsize; //@line 4249 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp257=(($194)>>>0) < 16; //@line 4249 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp257) { __label__ = 87; break; } else { __label__ = 88; break; } //@line 4249 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $195=$rsize; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$nb_addr; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add260=((($195)+($196))|0); //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or261=$add260 | 1; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or262=$or261 | 2; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$v; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head263=(($197+4)|0); //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head263)>>2)]=$or262; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$v; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$198; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $200=$rsize; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $201=$nb_addr; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add264=((($200)+($201))|0); //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr265=(($199+$add264)|0); //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$add_ptr265; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head266=(($202+4)|0); //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($head266)>>2)]; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or267=$203 | 1; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head266)>>2)]=$or267; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4250 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $204=$nb_addr; //@line 4252 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or269=$204 | 1; //@line 4252 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or270=$or269 | 2; //@line 4252 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$v; //@line 4252 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head271=(($205+4)|0); //@line 4252 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head271)>>2)]=$or270; //@line 4252 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $206=$rsize; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or272=$206 | 1; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$r; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head273=(($207+4)|0); //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head273)>>2)]=$or272; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$rsize; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$r; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$209; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $211=$rsize; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr274=(($210+$211)|0); //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$add_ptr274; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($212)|0); //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$208; //@line 4253 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$rsize; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr275=$213 >>> 3; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp276=(($shr275)>>>0) < 32; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp276) { __label__ = 89; break; } else { __label__ = 96; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $214=$rsize; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr279=$214 >>> 3; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$shr279; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $215=$I; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl280=$215 << 1; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $216=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($216+40)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx281=(($smallbins+($shl280<<2))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $217=$arrayidx281; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B=$218; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$B; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F282=$219; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($220)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $221=HEAP32[(($smallmap)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$I; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl283=1 << $222; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and284=$221 & $shl283; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool285=(($and284)|0)!=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool285) { __label__ = 91; break; } else { __label__ = 90; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $223=$I; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl287=1 << $223; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap288=(($224)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $225=HEAP32[(($smallmap288)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or289=$225 | $shl287; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap288)>>2)]=$or289; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 95; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $226=$B; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd291=(($226+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $227=HEAP32[(($fd291)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $228=$227; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $229=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr292=(($229+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $230=HEAP32[(($least_addr292)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp293=(($228)>>>0) >= (($230)>>>0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv294=(($cmp293)&1); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval295=(($conv294)==(1)); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool296=(($expval295)|0)!=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool296) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $231=$B; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd298=(($231+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $232=HEAP32[(($fd298)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F282=$232; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 94; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      _abort(); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 94: 
      __label__ = 95; break;
    case 95: 
      var $233=$r; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $234=$B; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd302=(($234+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd302)>>2)]=$233; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $235=$r; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $236=$F282; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk303=(($236+12)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk303)>>2)]=$235; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $237=$F282; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $238=$r; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd304=(($238+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd304)>>2)]=$237; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $239=$B; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $240=$r; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk305=(($240+12)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk305)>>2)]=$239; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 123; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $241=$r; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $242=$241; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$242; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $243=$rsize; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr310=$243 >>> 8; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $X309=$shr310; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $244=$X309; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp311=(($244)|0)==0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp311) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 97: 
      $I308=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 98: 
      var $245=$X309; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp315=(($245)>>>0) > 65535; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp315) { __label__ = 99; break; } else { __label__ = 100; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 99: 
      $I308=31; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $246=$X309; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y319=$246; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $247=$Y319; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub321=((($247)-(256))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr322=$sub321 >>> 16; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and323=$shr322 & 8; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N320=$and323; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $248=$N320; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $249=$Y319; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl325=$249 << $248; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl325; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub326=((($shl325)-(4096))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr327=$sub326 >>> 16; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and328=$shr327 & 4; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K324=$and328; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $250=$K324; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $251=$N320; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add329=((($251)+($250))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N320=$add329; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $252=$K324; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $253=$Y319; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl330=$253 << $252; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl330; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub331=((($shl330)-(16384))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr332=$sub331 >>> 16; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and333=$shr332 & 2; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K324=$and333; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $254=$N320; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add334=((($254)+($and333))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N320=$add334; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $255=$N320; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub335=(((14)-($255))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $256=$K324; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $257=$Y319; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl336=$257 << $256; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y319=$shl336; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr337=$shl336 >>> 15; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add338=((($sub335)+($shr337))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K324=$add338; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $258=$K324; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl339=$258 << 1; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $259=$rsize; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $260=$K324; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add340=((($260)+(7))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr341=$259 >>> (($add340)>>>0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and342=$shr341 & 1; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add343=((($shl339)+($and342))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I308=$add343; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break;
    case 101: 
      __label__ = 102; break;
    case 102: 
      var $261=$I308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $262=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins346=(($262+304)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx347=(($treebins346+($261<<2))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H307=$arrayidx347; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $263=$I308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $264=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index348=(($264+28)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index348)>>2)]=$263; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $265=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child349=(($265+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx350=(($child349+4)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx350)>>2)]=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $266=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child351=(($266+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx352=(($child351)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx352)>>2)]=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $267=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap353=(($267+4)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $268=HEAP32[(($treemap353)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $269=$I308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl354=1 << $269; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and355=$268 & $shl354; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool356=(($and355)|0)!=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool356) { __label__ = 104; break; } else { __label__ = 103; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $270=$I308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl358=1 << $270; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $271=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap359=(($271+4)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $272=HEAP32[(($treemap359)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or360=$272 | $shl358; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap359)>>2)]=$or360; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $273=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $274=$H307; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($274)>>2)]=$273; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $275=$H307; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $276=$275; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $277=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent361=(($277+24)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent361)>>2)]=$276; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $278=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $279=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk362=(($279+12)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk362)>>2)]=$278; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $280=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd363=(($280+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd363)>>2)]=$278; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 122; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $281=$H307; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($281)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$282; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $283=$rsize; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $284=$I308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp366=(($284)|0)==31; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp366) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $cond375 = 0;__label__ = 107; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 106: 
      var $285=$I308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr370=$285 >>> 1; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add371=((($shr370)+(8))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub372=((($add371)-(2))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub373=(((31)-($sub372))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond375 = $sub373;__label__ = 107; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 107: 
      var $cond375; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl376=$283 << $cond375; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K365=$shl376; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $286=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head378=(($286+4)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $287=HEAP32[(($head378)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and379=$287 & -8; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $288=$rsize; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp380=(($and379)|0)!=(($288)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp380) { __label__ = 109; break; } else { __label__ = 115; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $289=$K365; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr383=$289 >>> 31; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and384=$shr383 & 1; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $290=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child385=(($290+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx386=(($child385+($and384<<2))|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx386; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $291=$K365; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl387=$291 << 1; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K365=$shl387; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $292=$C; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $293=HEAP32[(($292)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp388=(($293)|0)!=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp388) { __label__ = 110; break; } else { __label__ = 111; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 110: 
      var $294=$C; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $295=HEAP32[(($294)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$295; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 114; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $296=$C; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $297=$296; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr392=(($298+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $299=HEAP32[(($least_addr392)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp393=(($297)>>>0) >= (($299)>>>0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv394=(($cmp393)&1); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval395=(($conv394)==(1)); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool396=(($expval395)|0)!=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool396) { __label__ = 112; break; } else { __label__ = 113; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $300=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $301=$C; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($301)>>2)]=$300; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $302=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $303=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent398=(($303+24)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent398)>>2)]=$302; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $304=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $305=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk399=(($305+12)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk399)>>2)]=$304; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $306=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd400=(($306+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd400)>>2)]=$304; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 113: 
      _abort(); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 114: 
      __label__ = 120; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $307=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd405=(($307+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $308=HEAP32[(($fd405)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F404=$308; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $309=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $310=$309; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $311=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr406=(($311+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $312=HEAP32[(($least_addr406)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp407=(($310)>>>0) >= (($312)>>>0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp407) { __label__ = 116; break; } else { var $317 = 0;__label__ = 117; break; } //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $313=$F404; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $314=$313; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $315=$m_addr; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr409=(($315+16)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $316=HEAP32[(($least_addr409)>>2)]; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp410=(($314)>>>0) >= (($316)>>>0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $317 = $cmp410;__label__ = 117; break;
    case 117: 
      var $317;
      var $land_ext=(($317)&1);
      var $expval412=(($land_ext)==(1));
      var $tobool413=(($expval412)|0)!=0;
      if ($tobool413) { __label__ = 118; break; } else { __label__ = 119; break; }
    case 118: 
      var $318=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $319=$F404; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk415=(($319+12)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk415)>>2)]=$318; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $320=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd416=(($320+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd416)>>2)]=$318; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$F404; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $322=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd417=(($322+8)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd417)>>2)]=$321; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $323=$T; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $324=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk418=(($324+12)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk418)>>2)]=$323; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $325=$TP; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent419=(($325+24)|0); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent419)>>2)]=0; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 121; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 119: 
      _abort(); //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 120: 
      __label__ = 108; break; //@line 4254 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 121: 
      __label__ = 122; break;
    case 122: 
      __label__ = 123; break;
    case 123: 
      __label__ = 124; break;
    case 124: 
      var $326=$v; //@line 4256 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $327=$326; //@line 4256 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr426=(($327+8)|0); //@line 4256 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr426; //@line 4256 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4256 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 125: 
      __label__ = 126; break; //@line 4258 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 126: 
      _abort(); //@line 4259 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4259 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 127: 
      $retval=0; //@line 4261 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 128; break; //@line 4261 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $328=$retval; //@line 4262 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $328; //@line 4262 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_tmalloc_large["X"]=1;

function _sys_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $tbase;
      var $tsize;
      var $mmap_flag;
      var $mem;
      var $br;
      var $ss;
      var $asize;
      var $base;
      var $esize;
      var $end;
      var $asize97;
      var $br106;
      var $end107;
      var $ssize;
      var $mn;
      var $sp;
      var $oldbase;
      var $rsize;
      var $p;
      var $r;
      $m_addr=$m;
      $nb_addr=$nb;
      $tbase=-1; //@line 3876 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=0; //@line 3877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mmap_flag=0; //@line 3878 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 3880 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $mflags=(($2+440)|0); //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($mflags)>>2)]; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$3 & 0; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool1=(($and)|0)!=0; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool1) { __label__ = 5; break; } else { __label__ = 10; break; } //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $4=$nb_addr; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[((((_mparams+12)|0))>>2)]; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)>>>0) >= (($5)>>>0); //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 10; break; } //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $6=$m_addr; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($6+12)|0); //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($topsize)>>2)]; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($7)|0)!=0; //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 7; break; } else { __label__ = 10; break; } //@line 3883 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $8=$m_addr; //@line 3884 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$nb_addr; //@line 3884 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call5=_mmap_alloc($8, $9); //@line 3884 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mem=$call5; //@line 3884 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$mem; //@line 3885 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp6=(($10)|0)!=0; //@line 3885 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp6) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 3885 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $11=$mem; //@line 3886 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$11; //@line 3886 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3886 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 10; break; //@line 3887 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $12=$m_addr; //@line 3911 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $mflags9=(($12+440)|0); //@line 3911 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=HEAP32[(($mflags9)>>2)]; //@line 3911 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and10=$13 & 4; //@line 3911 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool11=(($and10)|0)!=0; //@line 3911 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool11) { __label__ = 43; break; } else { __label__ = 11; break; } //@line 3911 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      $br=-1; //@line 3912 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$m_addr; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top=(($14+24)|0); //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[(($top)>>2)]; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($15)|0)==0; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $cond = 0;__label__ = 14; break; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $16=$m_addr; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$m_addr; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top14=(($17+24)|0); //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($top14)>>2)]; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call15=_segment_holding($16, $19); //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $call15;__label__ = 14; break; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $cond; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $ss=$cond; //@line 3913 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asize=0; //@line 3914 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$ss; //@line 3917 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp16=(($20)|0)==0; //@line 3917 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp16) { __label__ = 15; break; } else { __label__ = 23; break; } //@line 3917 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $call18=_sbrk(0); //@line 3918 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $base=$call18; //@line 3918 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$base; //@line 3919 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp19=(($21)|0)!=-1; //@line 3919 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp19) { __label__ = 16; break; } else { __label__ = 22; break; } //@line 3919 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $22=$nb_addr; //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($22)+(48))|0); //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($23)-(1))|0); //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add21=((($add)+($sub))|0); //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub22=((($24)-(1))|0); //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub22 ^ -1; //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and23=$add21 & $neg; //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$and23; //@line 3920 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$base; //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub24=((($27)-(1))|0); //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and25=$26 & $sub24; //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($and25)|0)==0; //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3922 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $28=$base; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub28=((($30)-(1))|0); //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add29=((($29)+($sub28))|0); //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub30=((($31)-(1))|0); //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg31=$sub30 ^ -1; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and32=$add29 & $neg31; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$base; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub33=((($and32)-($33))|0); //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$asize; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add34=((($34)+($sub33))|0); //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$add34; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 18; break; //@line 3923 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $35=$asize; //@line 3925 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($35)>>>0) < 2147483647; //@line 3925 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 3925 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $36=$asize; //@line 3926 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call38=_sbrk($36); //@line 3926 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $br=$call38; //@line 3926 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$base; //@line 3926 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp39=(($call38)|0)==(($37)|0); //@line 3926 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp39) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 3926 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $38=$base; //@line 3927 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$38; //@line 3927 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$asize; //@line 3928 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$39; //@line 3928 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3929 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 3930 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 27; break; //@line 3931 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $40=$nb_addr; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize43=(($41+12)|0); //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=HEAP32[(($topsize43)>>2)]; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub44=((($40)-($42))|0); //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add45=((($sub44)+(48))|0); //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub46=((($43)-(1))|0); //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add47=((($add45)+($sub46))|0); //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub48=((($44)-(1))|0); //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg49=$sub48 ^ -1; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and50=$add47 & $neg49; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$and50; //@line 3934 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$asize; //@line 3936 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($45)>>>0) < 2147483647; //@line 3936 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp51) { __label__ = 24; break; } else { __label__ = 26; break; } //@line 3936 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $46=$asize; //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call53=_sbrk($46); //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $br=$call53; //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$ss; //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base54=(($47)|0); //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=HEAP32[(($base54)>>2)]; //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$ss; //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size=(($49+4)|0); //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($size)>>2)]; //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($48+$50)|0); //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($call53)|0)==(($add_ptr)|0); //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp55) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3937 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $51=$br; //@line 3938 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$51; //@line 3938 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$asize; //@line 3939 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$52; //@line 3939 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 26; break; //@line 3940 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      __label__ = 27; break;
    case 27: 
      var $53=$tbase; //@line 3943 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp59=(($53)|0)==-1; //@line 3943 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp59) { __label__ = 28; break; } else { __label__ = 42; break; } //@line 3943 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $54=$br; //@line 3944 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp61=(($54)|0)!=-1; //@line 3944 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp61) { __label__ = 29; break; } else { __label__ = 38; break; } //@line 3944 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $55=$asize; //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($55)>>>0) < 2147483647; //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp63) { __label__ = 30; break; } else { __label__ = 37; break; } //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $56=$asize; //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$nb_addr; //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add65=((($57)+(48))|0); //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp66=(($56)>>>0) < (($add65)>>>0); //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp66) { __label__ = 31; break; } else { __label__ = 37; break; } //@line 3945 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $58=$nb_addr; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add68=((($58)+(48))|0); //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$asize; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub69=((($add68)-($59))|0); //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $60=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub70=((($60)-(1))|0); //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add71=((($sub69)+($sub70))|0); //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub72=((($61)-(1))|0); //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg73=$sub72 ^ -1; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and74=$add71 & $neg73; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $esize=$and74; //@line 3947 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$esize; //@line 3948 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($62)>>>0) < 2147483647; //@line 3948 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp75) { __label__ = 32; break; } else { __label__ = 36; break; } //@line 3948 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $63=$esize; //@line 3949 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call77=_sbrk($63); //@line 3949 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $end=$call77; //@line 3949 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$end; //@line 3950 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp78=(($64)|0)!=-1; //@line 3950 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp78) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 3950 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $65=$esize; //@line 3951 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$asize; //@line 3951 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add80=((($66)+($65))|0); //@line 3951 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asize=$add80; //@line 3951 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 3951 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $67=$asize; //@line 3953 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub82=(((-$67))|0); //@line 3953 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call83=_sbrk($sub82); //@line 3953 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $br=-1; //@line 3954 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break;
    case 35: 
      __label__ = 36; break; //@line 3956 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      __label__ = 37; break; //@line 3957 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      __label__ = 38; break; //@line 3958 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $68=$br; //@line 3959 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp88=(($68)|0)!=-1; //@line 3959 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp88) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3959 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $69=$br; //@line 3960 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$69; //@line 3960 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$asize; //@line 3961 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$70; //@line 3961 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3962 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      var $71=$m_addr; //@line 3964 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $mflags91=(($71+440)|0); //@line 3964 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($mflags91)>>2)]; //@line 3964 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$72 | 4; //@line 3964 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($mflags91)>>2)]=$or; //@line 3964 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break;
    case 41: 
      __label__ = 42; break; //@line 3965 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break; //@line 3968 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $73=$tbase; //@line 3982 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp95=(($73)|0)==-1; //@line 3982 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp95) { __label__ = 44; break; } else { __label__ = 53; break; } //@line 3982 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $74=$nb_addr; //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add98=((($74)+(48))|0); //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub99=((($75)-(1))|0); //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add100=((($add98)+($sub99))|0); //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub101=((($76)-(1))|0); //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg102=$sub101 ^ -1; //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and103=$add100 & $neg102; //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asize97=$and103; //@line 3983 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$asize97; //@line 3984 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp104=(($77)>>>0) < 2147483647; //@line 3984 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp104) { __label__ = 45; break; } else { __label__ = 52; break; } //@line 3984 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      $br106=-1; //@line 3985 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $end107=-1; //@line 3986 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$asize97; //@line 3988 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call108=_sbrk($78); //@line 3988 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $br106=$call108; //@line 3988 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call109=_sbrk(0); //@line 3989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $end107=$call109; //@line 3989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$br106; //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp110=(($79)|0)!=-1; //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp110) { __label__ = 46; break; } else { __label__ = 51; break; } //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $80=$end107; //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp112=(($80)|0)!=-1; //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp112) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $81=$br106; //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$end107; //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp114=(($81)>>>0) < (($82)>>>0); //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp114) { __label__ = 48; break; } else { __label__ = 51; break; } //@line 3991 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $83=$end107; //@line 3992 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$br106; //@line 3992 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$83; //@line 3992 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$84; //@line 3992 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 3992 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $ssize=$sub_ptr_sub; //@line 3992 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$ssize; //@line 3993 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$nb_addr; //@line 3993 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add116=((($86)+(40))|0); //@line 3993 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp117=(($85)>>>0) > (($add116)>>>0); //@line 3993 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp117) { __label__ = 49; break; } else { __label__ = 50; break; } //@line 3993 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $87=$br106; //@line 3994 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tbase=$87; //@line 3994 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$ssize; //@line 3995 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$88; //@line 3995 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 3996 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      __label__ = 51; break; //@line 3997 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      __label__ = 52; break; //@line 3998 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break; //@line 3999 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      var $89=$tbase; //@line 4001 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp123=(($89)|0)!=-1; //@line 4001 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp123) { __label__ = 54; break; } else { __label__ = 92; break; } //@line 4001 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $90=$tsize; //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$m_addr; //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($91+432)|0); //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $92=HEAP32[(($footprint)>>2)]; //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add125=((($92)+($90))|0); //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add125; //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$m_addr; //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($93+436)|0); //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $94=HEAP32[(($max_footprint)>>2)]; //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp126=(($add125)>>>0) > (($94)>>>0); //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp126) { __label__ = 55; break; } else { __label__ = 56; break; } //@line 4003 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $95=$m_addr; //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint128=(($95+432)|0); //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($footprint128)>>2)]; //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$m_addr; //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $max_footprint129=(($97+436)|0); //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint129)>>2)]=$96; //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 56; break; //@line 4004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $98=$m_addr; //@line 4006 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top131=(($98+24)|0); //@line 4006 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=HEAP32[(($top131)>>2)]; //@line 4006 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp132=(($99)|0)!=0; //@line 4006 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp132) { __label__ = 64; break; } else { __label__ = 57; break; } //@line 4006 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $100=$m_addr; //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($100+16)|0); //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=HEAP32[(($least_addr)>>2)]; //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp134=(($101)|0)==0; //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp134) { __label__ = 59; break; } else { __label__ = 58; break; } //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $102=$tbase; //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$m_addr; //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr135=(($103+16)|0); //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $104=HEAP32[(($least_addr135)>>2)]; //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($102)>>>0) < (($104)>>>0); //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp136) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 4007 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $105=$tbase; //@line 4008 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$m_addr; //@line 4008 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr138=(($106+16)|0); //@line 4008 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr138)>>2)]=$105; //@line 4008 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 60; break; //@line 4008 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $107=$tbase; //@line 4009 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$m_addr; //@line 4009 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg=(($108+444)|0); //@line 4009 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base140=(($seg)|0); //@line 4009 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base140)>>2)]=$107; //@line 4009 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$tsize; //@line 4010 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$m_addr; //@line 4010 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg141=(($110+444)|0); //@line 4010 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size142=(($seg141+4)|0); //@line 4010 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size142)>>2)]=$109; //@line 4010 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$mmap_flag; //@line 4011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$m_addr; //@line 4011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg143=(($112+444)|0); //@line 4011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($seg143+12)|0); //@line 4011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($sflags)>>2)]=$111; //@line 4011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[((((_mparams)|0))>>2)]; //@line 4012 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$m_addr; //@line 4012 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $magic=(($114+36)|0); //@line 4012 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($magic)>>2)]=$113; //@line 4012 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$m_addr; //@line 4013 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $release_checks=(($115+32)|0); //@line 4013 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($release_checks)>>2)]=-1; //@line 4013 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$m_addr; //@line 4014 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _init_bins($116); //@line 4014 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$m_addr; //@line 4016 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp144=(($117)|0)==((__gm_)|0); //@line 4016 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp144) { __label__ = 61; break; } else { __label__ = 62; break; } //@line 4016 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $118=$m_addr; //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$tbase; //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$119; //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$tsize; //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub146=((($121)-(40))|0); //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($118, $120, $sub146); //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break; //@line 4017 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $122=$m_addr; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$122; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr148=((($123)-(8))|0); //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$add_ptr148; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$124; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$126; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr149=((($127)-(8))|0); //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$add_ptr149; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($128+4)|0); //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($head)>>2)]; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and150=$129 & -8; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr151=(($125+$and150)|0); //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$add_ptr151; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mn=$130; //@line 4022 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$m_addr; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$mn; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$tbase; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$tsize; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr152=(($133+$134)|0); //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$mn; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$135; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast153=$add_ptr152; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast154=$136; //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub155=((($sub_ptr_lhs_cast153)-($sub_ptr_rhs_cast154))|0); //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub156=((($sub_ptr_sub155)-(40))|0); //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($131, $132, $sub156); //@line 4023 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 63; break;
    case 63: 
      __label__ = 89; break; //@line 4025 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $137=$m_addr; //@line 4029 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg159=(($137+444)|0); //@line 4029 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$seg159; //@line 4029 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      var $138=$sp; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp160=(($138)|0)!=0; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp160) { __label__ = 66; break; } else { var $144 = 0;__label__ = 67; break; } //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $139=$tbase; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$sp; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base161=(($140)|0); //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($base161)>>2)]; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$sp; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size162=(($142+4)|0); //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $143=HEAP32[(($size162)>>2)]; //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr163=(($141+$143)|0); //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp164=(($139)|0)!=(($add_ptr163)|0); //@line 4031 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144 = $cmp164;__label__ = 67; break;
    case 67: 
      var $144;
      if ($144) { __label__ = 68; break; } else { __label__ = 69; break; }
    case 68: 
      var $145=$sp; //@line 4032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $next=(($145+8)|0); //@line 4032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($next)>>2)]; //@line 4032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$146; //@line 4032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $147=$sp; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp165=(($147)|0)!=0; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp165) { __label__ = 70; break; } else { __label__ = 75; break; } //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $148=$sp; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags167=(($148+12)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=HEAP32[(($sflags167)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and168=$149 & 8; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool169=(($and168)|0)!=0; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool169) { __label__ = 75; break; } else { __label__ = 71; break; } //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $150=$sp; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags171=(($150+12)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($sflags171)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and172=$151 & 0; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$mmap_flag; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp173=(($and172)|0)==(($152)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp173) { __label__ = 72; break; } else { __label__ = 75; break; } //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $153=$m_addr; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top175=(($153+24)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=HEAP32[(($top175)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$154; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$sp; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base176=(($156)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=HEAP32[(($base176)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp177=(($155)>>>0) >= (($157)>>>0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp177) { __label__ = 73; break; } else { __label__ = 75; break; } //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $158=$m_addr; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top179=(($158+24)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($top179)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $160=$159; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$sp; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base180=(($161)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=HEAP32[(($base180)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$sp; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size181=(($163+4)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $164=HEAP32[(($size181)>>2)]; //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr182=(($162+$164)|0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp183=(($160)>>>0) < (($add_ptr182)>>>0); //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp183) { __label__ = 74; break; } else { __label__ = 75; break; } //@line 4033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $165=$tsize; //@line 4037 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$sp; //@line 4037 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size185=(($166+4)|0); //@line 4037 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[(($size185)>>2)]; //@line 4037 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add186=((($167)+($165))|0); //@line 4037 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size185)>>2)]=$add186; //@line 4037 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$m_addr; //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top187=(($169+24)|0); //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=HEAP32[(($top187)>>2)]; //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=$m_addr; //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize188=(($171+12)|0); //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($topsize188)>>2)]; //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$tsize; //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add189=((($172)+($173))|0); //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($168, $170, $add189); //@line 4038 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 88; break; //@line 4039 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $174=$tbase; //@line 4041 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$m_addr; //@line 4041 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr191=(($175+16)|0); //@line 4041 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=HEAP32[(($least_addr191)>>2)]; //@line 4041 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp192=(($174)>>>0) < (($176)>>>0); //@line 4041 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp192) { __label__ = 76; break; } else { __label__ = 77; break; } //@line 4041 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $177=$tbase; //@line 4042 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$m_addr; //@line 4042 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr194=(($178+16)|0); //@line 4042 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr194)>>2)]=$177; //@line 4042 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4042 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $179=$m_addr; //@line 4043 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg196=(($179+444)|0); //@line 4043 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$seg196; //@line 4043 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $180=$sp; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp198=(($180)|0)!=0; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp198) { __label__ = 79; break; } else { var $185 = 0;__label__ = 80; break; } //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $181=$sp; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base200=(($181)|0); //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $182=HEAP32[(($base200)>>2)]; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$tbase; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$tsize; //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr201=(($183+$184)|0); //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp202=(($182)|0)!=(($add_ptr201)|0); //@line 4044 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $185 = $cmp202;__label__ = 80; break;
    case 80: 
      var $185;
      if ($185) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $186=$sp; //@line 4045 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $next205=(($186+8)|0); //@line 4045 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $187=HEAP32[(($next205)>>2)]; //@line 4045 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$187; //@line 4045 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 78; break; //@line 4045 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $188=$sp; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp207=(($188)|0)!=0; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp207) { __label__ = 83; break; } else { __label__ = 86; break; } //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $189=$sp; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags209=(($189+12)|0); //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($sflags209)>>2)]; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and210=$190 & 8; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool211=(($and210)|0)!=0; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool211) { __label__ = 86; break; } else { __label__ = 84; break; } //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      var $191=$sp; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags213=(($191+12)|0); //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $192=HEAP32[(($sflags213)>>2)]; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and214=$192 & 0; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$mmap_flag; //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp215=(($and214)|0)==(($193)|0); //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp215) { __label__ = 85; break; } else { __label__ = 86; break; } //@line 4046 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $194=$sp; //@line 4049 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base217=(($194)|0); //@line 4049 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($base217)>>2)]; //@line 4049 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldbase=$195; //@line 4049 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$tbase; //@line 4050 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$sp; //@line 4050 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base218=(($197)|0); //@line 4050 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base218)>>2)]=$196; //@line 4050 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$tsize; //@line 4051 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$sp; //@line 4051 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size219=(($199+4)|0); //@line 4051 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[(($size219)>>2)]; //@line 4051 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add220=((($200)+($198))|0); //@line 4051 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size219)>>2)]=$add220; //@line 4051 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $201=$m_addr; //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$tbase; //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $203=$oldbase; //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $204=$nb_addr; //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call221=_prepend_alloc($201, $202, $203, $204); //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$call221; //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4052 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $205=$m_addr; //@line 4055 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $206=$tbase; //@line 4055 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $207=$tsize; //@line 4055 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$mmap_flag; //@line 4055 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _add_segment($205, $206, $207, $208); //@line 4055 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break;
    case 87: 
      __label__ = 88; break;
    case 88: 
      __label__ = 89; break;
    case 89: 
      var $209=$nb_addr; //@line 4059 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$m_addr; //@line 4059 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize226=(($210+12)|0); //@line 4059 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $211=HEAP32[(($topsize226)>>2)]; //@line 4059 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp227=(($209)>>>0) < (($211)>>>0); //@line 4059 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp227) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 4059 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $212=$nb_addr; //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$m_addr; //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize229=(($213+12)|0); //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[(($topsize229)>>2)]; //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub230=((($214)-($212))|0); //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize229)>>2)]=$sub230; //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub230; //@line 4060 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $215=$m_addr; //@line 4061 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top231=(($215+24)|0); //@line 4061 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $216=HEAP32[(($top231)>>2)]; //@line 4061 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$216; //@line 4061 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $217=$p; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$nb_addr; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr232=(($218+$219)|0); //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$add_ptr232; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $221=$m_addr; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top233=(($221+24)|0); //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top233)>>2)]=$220; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $r=$220; //@line 4062 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$rsize; //@line 4063 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or234=$222 | 1; //@line 4063 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $223=$r; //@line 4063 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head235=(($223+4)|0); //@line 4063 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head235)>>2)]=$or234; //@line 4063 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$nb_addr; //@line 4064 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or236=$224 | 1; //@line 4064 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or237=$or236 | 2; //@line 4064 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$p; //@line 4064 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head238=(($225+4)|0); //@line 4064 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head238)>>2)]=$or237; //@line 4064 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $226=$p; //@line 4067 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$226; //@line 4067 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr239=(($227+8)|0); //@line 4067 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr239; //@line 4067 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4067 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      __label__ = 92; break; //@line 4069 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $call242=___errno(); //@line 4071 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($call242)>>2)]=12; //@line 4071 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=0; //@line 4072 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 4072 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $228=$retval; //@line 4073 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $228; //@line 4073 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_alloc["X"]=1;

function _free($mem) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $mem_addr;
      var $p;
      var $psize;
      var $next;
      var $prevsize;
      var $prev;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F60;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F245;
      var $B247;
      var $I249;
      var $TP285;
      var $XP286;
      var $R288;
      var $F293;
      var $RP306;
      var $CP317;
      var $H343;
      var $C0385;
      var $C1386;
      var $I447;
      var $B449;
      var $F452;
      var $tp;
      var $H475;
      var $I476;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K525;
      var $C;
      var $F558;
      $mem_addr=$mem;
      var $0=$mem_addr; //@line 4741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 197; break; } //@line 4741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$mem_addr; //@line 4742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($1)-(8))|0); //@line 4742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 4742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$2; //@line 4742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$p; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($4)>>>0) >= (($5)>>>0); //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 4; break; } else { var $8 = 0;__label__ = 5; break; } //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $6=$p; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($6+4)|0); //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($head)>>2)]; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$7 & 3; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($and)|0)!=1; //@line 4754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8 = $cmp2;__label__ = 5; break;
    case 5: 
      var $8;
      var $land_ext=(($8)&1);
      var $expval=(($land_ext)==(1));
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { __label__ = 6; break; } else { __label__ = 194; break; }
    case 6: 
      var $9=$p; //@line 4755 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head4=(($9+4)|0); //@line 4755 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[(($head4)>>2)]; //@line 4755 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and5=$10 & -8; //@line 4755 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$and5; //@line 4755 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$p; //@line 4756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$11; //@line 4756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$psize; //@line 4756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($12+$13)|0); //@line 4756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr6; //@line 4756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $next=$14; //@line 4756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$p; //@line 4757 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head7=(($15+4)|0); //@line 4757 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=HEAP32[(($head7)>>2)]; //@line 4757 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and8=$16 & 1; //@line 4757 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool9=(($and8)|0)!=0; //@line 4757 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool9) { __label__ = 78; break; } else { __label__ = 7; break; } //@line 4757 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $17=$p; //@line 4758 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($17)|0); //@line 4758 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($prev_foot)>>2)]; //@line 4758 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $prevsize=$18; //@line 4758 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 4759 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head11=(($19+4)|0); //@line 4759 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=HEAP32[(($head11)>>2)]; //@line 4759 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and12=$20 & 3; //@line 4759 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp13=(($and12)|0)==0; //@line 4759 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp13) { __label__ = 8; break; } else { __label__ = 9; break; } //@line 4759 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $21=$prevsize; //@line 4760 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($21)+(16))|0); //@line 4760 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$psize; //@line 4760 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add15=((($22)+($add))|0); //@line 4760 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$add15; //@line 4760 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4763 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $23=$p; //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$prevsize; //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $idx_neg=(((-$25))|0); //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr16=(($24+$idx_neg)|0); //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$add_ptr16; //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $prev=$26; //@line 4766 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$prevsize; //@line 4767 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$psize; //@line 4767 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add17=((($28)+($27))|0); //@line 4767 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$add17; //@line 4767 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$prev; //@line 4768 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$29; //@line 4768 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$prev; //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$30; //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp18=(($31)>>>0) >= (($32)>>>0); //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp18)&1); //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval19=(($conv)==(1)); //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool20=(($expval19)|0)!=0; //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool20) { __label__ = 10; break; } else { __label__ = 75; break; } //@line 4769 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $33=$p; //@line 4770 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4770 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($33)|0)!=(($34)|0); //@line 4770 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 71; break; } //@line 4770 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $35=$prevsize; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$35 >>> 3; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp25=(($shr)>>>0) < 32; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp25) { __label__ = 12; break; } else { __label__ = 24; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $36=$p; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($36+8)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=HEAP32[(($fd)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$37; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$p; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($38+12)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($bk)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B=$39; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$prevsize; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr28=$40 >>> 3; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$shr28; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$F; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$B; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp29=(($41)|0)==(($42)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp29) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $43=$I; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $43; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[((((__gm_)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and32=$44 & $neg; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and32; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $45=$F; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$I; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl34=$46 << 1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=((((__gm_+40)|0)+($shl34<<2))|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$arrayidx; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$47; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp35=(($45)|0)==(($48)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp35) { __label__ = 16; break; } else { __label__ = 15; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $49=$F; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $51=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp37=(($50)>>>0) >= (($51)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp37) { __label__ = 16; break; } else { var $60 = 0;__label__ = 19; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $52=$B; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$I; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl40=$53 << 1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx41=((((__gm_+40)|0)+($shl40<<2))|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$arrayidx41; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$54; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp42=(($52)|0)==(($55)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp42) { var $59 = 1;__label__ = 18; break; } else { __label__ = 17; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $56=$B; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=$56; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $58=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($57)>>>0) >= (($58)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59 = $cmp44;__label__ = 18; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $59;
      var $60 = $59;__label__ = 19; break;
    case 19: 
      var $60;
      var $land_ext47=(($60)&1);
      var $expval48=(($land_ext47)==(1));
      var $tobool49=(($expval48)|0)!=0;
      if ($tobool49) { __label__ = 20; break; } else { __label__ = 21; break; }
    case 20: 
      var $61=$B; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$F; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk51=(($62+12)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk51)>>2)]=$61; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$F; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$B; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd52=(($64+8)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd52)>>2)]=$63; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 22; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 70; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $65=$p; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$66; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent=(($67+24)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[(($parent)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$68; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk56=(($69+12)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=HEAP32[(($bk56)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp57=(($70)|0)!=(($71)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp57) { __label__ = 25; break; } else { __label__ = 29; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $72=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd61=(($72+8)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=HEAP32[(($fd61)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F60=$73; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk62=(($74+12)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=HEAP32[(($bk62)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$75; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$F60; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$76; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($77)>>>0) >= (($78)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv64=(($cmp63)&1); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval65=(($conv64)==(1)); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool66=(($expval65)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool66) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $79=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$F60; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk68=(($80+12)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk68)>>2)]=$79; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$F60; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd69=(($82+8)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd69)>>2)]=$81; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 41; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $83=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child=(($83+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx73=(($child+4)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx73; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=HEAP32[(($arrayidx73)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$84; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp74=(($84)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp74) { __label__ = 31; break; } else { __label__ = 30; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $85=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child77=(($85+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx78=(($child77)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx78; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=HEAP32[(($arrayidx78)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$86; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($86)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp79) { __label__ = 31; break; } else { __label__ = 40; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      __label__ = 32; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $87=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child82=(($87+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx83=(($child82+4)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx83; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx83)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp84=(($88)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp84) { var $91 = 1;__label__ = 34; break; } else { __label__ = 33; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $89=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child87=(($89+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx88=(($child87)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx88; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $90=HEAP32[(($arrayidx88)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp89=(($90)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $91 = $cmp89;__label__ = 34; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $91;
      if ($91) { __label__ = 35; break; } else { __label__ = 36; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $92=$CP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$92; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($92)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$93; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 32; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $94=$RP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$94; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($95)>>>0) >= (($96)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv93=(($cmp92)&1); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval94=(($conv93)==(1)); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool95=(($expval94)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool95) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $97=$RP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($97)>>2)]=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      __label__ = 40; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 41; break;
    case 41: 
      var $98=$XP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp101=(($98)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp101) { __label__ = 42; break; } else { __label__ = 69; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $99=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index=(($99+28)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=HEAP32[(($index)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx104=((((__gm_+304)|0)+($100<<2))|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx104; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$H; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $103=HEAP32[(($102)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp105=(($101)|0)==(($103)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp105) { __label__ = 43; break; } else { __label__ = 46; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $104=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$H; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($105)>>2)]=$104; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp108=(($104)|0)==0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp108) { __label__ = 44; break; } else { __label__ = 45; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $106=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index111=(($106+28)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $107=HEAP32[(($index111)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl112=1 << $107; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg113=$shl112 ^ -1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and114=$108 & $neg113; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$and114; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 45; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      __label__ = 53; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $109=$XP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$109; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $111=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp117=(($110)>>>0) >= (($111)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv118=(($cmp117)&1); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval119=(($conv118)==(1)); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool120=(($expval119)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool120) { __label__ = 47; break; } else { __label__ = 51; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      var $112=$XP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child122=(($112+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx123=(($child122)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $113=HEAP32[(($arrayidx123)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp124=(($113)|0)==(($114)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp124) { __label__ = 48; break; } else { __label__ = 49; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $115=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$XP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child127=(($116+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx128=(($child127)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx128)>>2)]=$115; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $117=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$XP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child130=(($118+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx131=(($child130+4)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx131)>>2)]=$117; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 50; break;
    case 50: 
      __label__ = 52; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      __label__ = 53; break;
    case 53: 
      var $119=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp136=(($119)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp136) { __label__ = 54; break; } else { __label__ = 68; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      var $120=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$120; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $122=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp139=(($121)>>>0) >= (($122)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv140=(($cmp139)&1); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval141=(($conv140)==(1)); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool142=(($expval141)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool142) { __label__ = 55; break; } else { __label__ = 66; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      var $123=$XP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent144=(($124+24)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent144)>>2)]=$123; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child145=(($125+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx146=(($child145)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=HEAP32[(($arrayidx146)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$126; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp147=(($126)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp147) { __label__ = 56; break; } else { __label__ = 60; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $127=$C0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$127; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp150=(($128)>>>0) >= (($129)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv151=(($cmp150)&1); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval152=(($conv151)==(1)); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool153=(($expval152)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool153) { __label__ = 57; break; } else { __label__ = 58; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $130=$C0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child155=(($131+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx156=(($child155)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx156)>>2)]=$130; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$C0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent157=(($133+24)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent157)>>2)]=$132; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      __label__ = 60; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      var $134=$TP; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child161=(($134+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx162=(($child161+4)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($arrayidx162)>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$135; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp163=(($135)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp163) { __label__ = 61; break; } else { __label__ = 65; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $136=$C1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$136; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $138=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp166=(($137)>>>0) >= (($138)>>>0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv167=(($cmp166)&1); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval168=(($conv167)==(1)); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool169=(($expval168)|0)!=0; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool169) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $139=$C1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child171=(($140+16)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx172=(($child171+4)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx172)>>2)]=$139; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$R; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$C1; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent173=(($142+24)|0); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent173)>>2)]=$141; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      __label__ = 65; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      __label__ = 67; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      _abort(); //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 68; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      __label__ = 69; break; //@line 4771 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break;
    case 70: 
      __label__ = 74; break; //@line 4772 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $143=$next; //@line 4773 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head183=(($143+4)|0); //@line 4773 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144=HEAP32[(($head183)>>2)]; //@line 4773 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and184=$144 & 3; //@line 4773 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp185=(($and184)|0)==3; //@line 4773 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp185) { __label__ = 72; break; } else { __label__ = 73; break; } //@line 4773 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $145=$psize; //@line 4774 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$145; //@line 4774 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$next; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head188=(($146+4)|0); //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $147=HEAP32[(($head188)>>2)]; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and189=$147 & -2; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head188)>>2)]=$and189; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$psize; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$148 | 1; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$p; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head190=(($149+4)|0); //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head190)>>2)]=$or; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$psize; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$p; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$151; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$psize; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr191=(($152+$153)|0); //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$add_ptr191; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot192=(($154)|0); //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot192)>>2)]=$150; //@line 4775 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4776 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      __label__ = 74; break;
    case 74: 
      __label__ = 76; break; //@line 4778 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      __label__ = 195; break; //@line 4780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      __label__ = 77; break;
    case 77: 
      __label__ = 78; break; //@line 4782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $155=$p; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$155; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$next; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$157; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp199=(($156)>>>0) < (($158)>>>0); //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp199) { __label__ = 79; break; } else { var $161 = 0;__label__ = 80; break; } //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $159=$next; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head202=(($159+4)|0); //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($head202)>>2)]; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and203=$160 & 1; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool204=(($and203)|0)!=0; //@line 4784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161 = $tobool204;__label__ = 80; break;
    case 80: 
      var $161;
      var $land_ext206=(($161)&1);
      var $expval207=(($land_ext206)==(1));
      var $tobool208=(($expval207)|0)!=0;
      if ($tobool208) { __label__ = 81; break; } else { __label__ = 193; break; }
    case 81: 
      var $162=$next; //@line 4785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head210=(($162+4)|0); //@line 4785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($head210)>>2)]; //@line 4785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and211=$163 & 2; //@line 4785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool212=(($and211)|0)!=0; //@line 4785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool212) { __label__ = 154; break; } else { __label__ = 82; break; } //@line 4785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      var $164=$next; //@line 4786 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[((((__gm_+24)|0))>>2)]; //@line 4786 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp214=(($164)|0)==(($165)|0); //@line 4786 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp214) { __label__ = 83; break; } else { __label__ = 88; break; } //@line 4786 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $166=$psize; //@line 4787 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $167=HEAP32[((((__gm_+12)|0))>>2)]; //@line 4787 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add217=((($167)+($166))|0); //@line 4787 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+12)|0))>>2)]=$add217; //@line 4787 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$add217; //@line 4787 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$p; //@line 4788 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+24)|0))>>2)]=$168; //@line 4788 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$tsize; //@line 4789 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or218=$169 | 1; //@line 4789 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$p; //@line 4789 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head219=(($170+4)|0); //@line 4789 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head219)>>2)]=$or218; //@line 4789 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=$p; //@line 4790 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4790 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp220=(($171)|0)==(($172)|0); //@line 4790 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp220) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 4790 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      HEAP32[((((__gm_+20)|0))>>2)]=0; //@line 4791 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=0; //@line 4792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $173=$tsize; //@line 4794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $174=HEAP32[((((__gm_+28)|0))>>2)]; //@line 4794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp224=(($173)>>>0) > (($174)>>>0); //@line 4794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp224) { __label__ = 86; break; } else { __label__ = 87; break; } //@line 4794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      var $call=_sys_trim(__gm_, 0); //@line 4795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 4795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 87: 
      __label__ = 196; break; //@line 4796 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $175=$next; //@line 4798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp229=(($175)|0)==(($176)|0); //@line 4798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp229) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $177=$psize; //@line 4799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $178=HEAP32[((((__gm_+8)|0))>>2)]; //@line 4799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add232=((($178)+($177))|0); //@line 4799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$add232; //@line 4799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $dsize=$add232; //@line 4799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$p; //@line 4800 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+20)|0))>>2)]=$179; //@line 4800 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $180=$dsize; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or233=$180 | 1; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181=$p; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head234=(($181+4)|0); //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head234)>>2)]=$or233; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$dsize; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$p; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$183; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$dsize; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr235=(($184+$185)|0); //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$add_ptr235; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot236=(($186)|0); //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot236)>>2)]=$182; //@line 4801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4802 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $187=$next; //@line 4805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head238=(($187+4)|0); //@line 4805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $188=HEAP32[(($head238)>>2)]; //@line 4805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and239=$188 & -8; //@line 4805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nsize=$and239; //@line 4805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$nsize; //@line 4806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $190=$psize; //@line 4806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add240=((($190)+($189))|0); //@line 4806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$add240; //@line 4806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$nsize; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr241=$191 >>> 3; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp242=(($shr241)>>>0) < 32; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp242) { __label__ = 91; break; } else { __label__ = 103; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $192=$next; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd246=(($192+8)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $193=HEAP32[(($fd246)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F245=$193; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $194=$next; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk248=(($194+12)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $195=HEAP32[(($bk248)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B247=$195; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$nsize; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr250=$196 >>> 3; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I249=$shr250; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$F245; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$B247; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp251=(($197)|0)==(($198)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp251) { __label__ = 92; break; } else { __label__ = 93; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $199=$I249; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl254=1 << $199; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg255=$shl254 ^ -1; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $200=HEAP32[((((__gm_)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and256=$200 & $neg255; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$and256; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 102; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $201=$F245; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$I249; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl258=$202 << 1; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx259=((((__gm_+40)|0)+($shl258<<2))|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $203=$arrayidx259; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp260=(($201)|0)==(($204)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp260) { __label__ = 95; break; } else { __label__ = 94; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $205=$F245; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $206=$205; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $207=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp263=(($206)>>>0) >= (($207)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp263) { __label__ = 95; break; } else { var $216 = 0;__label__ = 98; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $208=$B247; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$I249; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl266=$209 << 1; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx267=((((__gm_+40)|0)+($shl266<<2))|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$arrayidx267; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $211=$210; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp268=(($208)|0)==(($211)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp268) { var $215 = 1;__label__ = 97; break; } else { __label__ = 96; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $212=$B247; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$212; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $214=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp271=(($213)>>>0) >= (($214)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $215 = $cmp271;__label__ = 97; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $215;
      var $216 = $215;__label__ = 98; break;
    case 98: 
      var $216;
      var $land_ext275=(($216)&1);
      var $expval276=(($land_ext275)==(1));
      var $tobool277=(($expval276)|0)!=0;
      if ($tobool277) { __label__ = 99; break; } else { __label__ = 100; break; }
    case 99: 
      var $217=$B247; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $218=$F245; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk279=(($218+12)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk279)>>2)]=$217; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$F245; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$B247; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd280=(($220+8)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd280)>>2)]=$219; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 101; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 100: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 101: 
      __label__ = 102; break;
    case 102: 
      __label__ = 149; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 103: 
      var $221=$next; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $222=$221; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $TP285=$222; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $223=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent287=(($223+24)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $224=HEAP32[(($parent287)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $XP286=$224; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk289=(($225+12)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $226=HEAP32[(($bk289)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp290=(($226)|0)!=(($227)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp290) { __label__ = 104; break; } else { __label__ = 108; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 104: 
      var $228=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd294=(($228+8)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $229=HEAP32[(($fd294)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F293=$229; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $230=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk295=(($230+12)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $231=HEAP32[(($bk295)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R288=$231; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $232=$F293; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $233=$232; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $234=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp296=(($233)>>>0) >= (($234)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv297=(($cmp296)&1); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval298=(($conv297)==(1)); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool299=(($expval298)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool299) { __label__ = 105; break; } else { __label__ = 106; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 105: 
      var $235=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $236=$F293; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk301=(($236+12)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk301)>>2)]=$235; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $237=$F293; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $238=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd302=(($238+8)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd302)>>2)]=$237; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 106: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 107: 
      __label__ = 120; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 108: 
      var $239=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child307=(($239+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx308=(($child307+4)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP306=$arrayidx308; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $240=HEAP32[(($arrayidx308)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R288=$240; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp309=(($240)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp309) { __label__ = 110; break; } else { __label__ = 109; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 109: 
      var $241=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child312=(($241+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx313=(($child312)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP306=$arrayidx313; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $242=HEAP32[(($arrayidx313)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R288=$242; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp314=(($242)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp314) { __label__ = 110; break; } else { __label__ = 119; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 110: 
      __label__ = 111; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 111: 
      var $243=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child319=(($243+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx320=(($child319+4)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP317=$arrayidx320; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $244=HEAP32[(($arrayidx320)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp321=(($244)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp321) { var $247 = 1;__label__ = 113; break; } else { __label__ = 112; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 112: 
      var $245=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child324=(($245+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx325=(($child324)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP317=$arrayidx325; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $246=HEAP32[(($arrayidx325)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp326=(($246)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $247 = $cmp326;__label__ = 113; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 113: 
      var $247;
      if ($247) { __label__ = 114; break; } else { __label__ = 115; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 114: 
      var $248=$CP317; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP306=$248; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $249=HEAP32[(($248)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R288=$249; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 111; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 115: 
      var $250=$RP306; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $251=$250; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $252=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp331=(($251)>>>0) >= (($252)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv332=(($cmp331)&1); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval333=(($conv332)==(1)); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool334=(($expval333)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool334) { __label__ = 116; break; } else { __label__ = 117; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 116: 
      var $253=$RP306; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($253)>>2)]=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 118; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 117: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 118: 
      __label__ = 119; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 119: 
      __label__ = 120; break;
    case 120: 
      var $254=$XP286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp340=(($254)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp340) { __label__ = 121; break; } else { __label__ = 148; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 121: 
      var $255=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index344=(($255+28)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $256=HEAP32[(($index344)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx345=((((__gm_+304)|0)+($256<<2))|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H343=$arrayidx345; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $257=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $258=$H343; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $259=HEAP32[(($258)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp346=(($257)|0)==(($259)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp346) { __label__ = 122; break; } else { __label__ = 125; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 122: 
      var $260=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $261=$H343; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($261)>>2)]=$260; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp349=(($260)|0)==0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp349) { __label__ = 123; break; } else { __label__ = 124; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 123: 
      var $262=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index352=(($262+28)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $263=HEAP32[(($index352)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl353=1 << $263; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg354=$shl353 ^ -1; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $264=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and355=$264 & $neg354; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$and355; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 124; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 124: 
      __label__ = 132; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 125: 
      var $265=$XP286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $266=$265; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $267=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp358=(($266)>>>0) >= (($267)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv359=(($cmp358)&1); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval360=(($conv359)==(1)); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool361=(($expval360)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool361) { __label__ = 126; break; } else { __label__ = 130; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 126: 
      var $268=$XP286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child363=(($268+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx364=(($child363)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($arrayidx364)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $270=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp365=(($269)|0)==(($270)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp365) { __label__ = 127; break; } else { __label__ = 128; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 127: 
      var $271=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $272=$XP286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child368=(($272+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx369=(($child368)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx369)>>2)]=$271; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 128: 
      var $273=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $274=$XP286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child371=(($274+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx372=(($child371+4)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx372)>>2)]=$273; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 129; break;
    case 129: 
      __label__ = 131; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 130: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 131: 
      __label__ = 132; break;
    case 132: 
      var $275=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp377=(($275)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp377) { __label__ = 133; break; } else { __label__ = 147; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 133: 
      var $276=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $277=$276; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $278=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp380=(($277)>>>0) >= (($278)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv381=(($cmp380)&1); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval382=(($conv381)==(1)); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool383=(($expval382)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool383) { __label__ = 134; break; } else { __label__ = 145; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 134: 
      var $279=$XP286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $280=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent387=(($280+24)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent387)>>2)]=$279; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $281=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child388=(($281+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx389=(($child388)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $282=HEAP32[(($arrayidx389)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C0385=$282; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp390=(($282)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp390) { __label__ = 135; break; } else { __label__ = 139; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 135: 
      var $283=$C0385; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $284=$283; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $285=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp393=(($284)>>>0) >= (($285)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv394=(($cmp393)&1); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval395=(($conv394)==(1)); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool396=(($expval395)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool396) { __label__ = 136; break; } else { __label__ = 137; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 136: 
      var $286=$C0385; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $287=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child398=(($287+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx399=(($child398)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx399)>>2)]=$286; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $288=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $289=$C0385; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent400=(($289+24)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent400)>>2)]=$288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 138; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 137: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 138: 
      __label__ = 139; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 139: 
      var $290=$TP285; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child404=(($290+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx405=(($child404+4)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $291=HEAP32[(($arrayidx405)>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C1386=$291; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp406=(($291)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp406) { __label__ = 140; break; } else { __label__ = 144; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 140: 
      var $292=$C1386; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $293=$292; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $294=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp409=(($293)>>>0) >= (($294)>>>0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv410=(($cmp409)&1); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval411=(($conv410)==(1)); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool412=(($expval411)|0)!=0; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool412) { __label__ = 141; break; } else { __label__ = 142; break; } //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 141: 
      var $295=$C1386; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $296=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child414=(($296+16)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx415=(($child414+4)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx415)>>2)]=$295; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $297=$R288; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$C1386; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent416=(($298+24)|0); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent416)>>2)]=$297; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 143; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 142: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 143: 
      __label__ = 144; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 144: 
      __label__ = 146; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 145: 
      _abort(); //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 146: 
      __label__ = 147; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 147: 
      __label__ = 148; break; //@line 4807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 148: 
      __label__ = 149; break;
    case 149: 
      var $299=$psize; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or425=$299 | 1; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $300=$p; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head426=(($300+4)|0); //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head426)>>2)]=$or425; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $301=$psize; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $302=$p; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $303=$302; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $304=$psize; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr427=(($303+$304)|0); //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $305=$add_ptr427; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot428=(($305)|0); //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot428)>>2)]=$301; //@line 4808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $306=$p; //@line 4809 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $307=HEAP32[((((__gm_+20)|0))>>2)]; //@line 4809 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp429=(($306)|0)==(($307)|0); //@line 4809 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp429) { __label__ = 150; break; } else { __label__ = 151; break; } //@line 4809 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 150: 
      var $308=$psize; //@line 4810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+8)|0))>>2)]=$308; //@line 4810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 196; break; //@line 4811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 151: 
      __label__ = 152; break;
    case 152: 
      __label__ = 153; break;
    case 153: 
      __label__ = 155; break; //@line 4814 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 154: 
      var $309=$next; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head436=(($309+4)|0); //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $310=HEAP32[(($head436)>>2)]; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and437=$310 & -2; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head436)>>2)]=$and437; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $311=$psize; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or438=$311 | 1; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $312=$p; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head439=(($312+4)|0); //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head439)>>2)]=$or438; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $313=$psize; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $314=$p; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $315=$314; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $316=$psize; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr440=(($315+$316)|0); //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $317=$add_ptr440; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot441=(($317)|0); //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot441)>>2)]=$313; //@line 4816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 155; break;
    case 155: 
      var $318=$psize; //@line 4818 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr443=$318 >>> 3; //@line 4818 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp444=(($shr443)>>>0) < 32; //@line 4818 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp444) { __label__ = 156; break; } else { __label__ = 163; break; } //@line 4818 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 156: 
      var $319=$psize; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr448=$319 >>> 3; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I447=$shr448; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $320=$I447; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl450=$320 << 1; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx451=((((__gm_+40)|0)+($shl450<<2))|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $321=$arrayidx451; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $322=$321; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B449=$322; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $323=$B449; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F452=$323; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $324=HEAP32[((((__gm_)|0))>>2)]; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $325=$I447; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl453=1 << $325; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and454=$324 & $shl453; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool455=(($and454)|0)!=0; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool455) { __label__ = 158; break; } else { __label__ = 157; break; } //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 157: 
      var $326=$I447; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl457=1 << $326; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $327=HEAP32[((((__gm_)|0))>>2)]; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or458=$327 | $shl457; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_)|0))>>2)]=$or458; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 162; break; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 158: 
      var $328=$B449; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd460=(($328+8)|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $329=HEAP32[(($fd460)>>2)]; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $330=$329; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $331=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp461=(($330)>>>0) >= (($331)>>>0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv462=(($cmp461)&1); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval463=(($conv462)==(1)); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool464=(($expval463)|0)!=0; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool464) { __label__ = 159; break; } else { __label__ = 160; break; } //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 159: 
      var $332=$B449; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd466=(($332+8)|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $333=HEAP32[(($fd466)>>2)]; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F452=$333; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 161; break; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 160: 
      _abort(); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 161: 
      __label__ = 162; break;
    case 162: 
      var $334=$p; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $335=$B449; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd470=(($335+8)|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd470)>>2)]=$334; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $336=$p; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $337=$F452; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk471=(($337+12)|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk471)>>2)]=$336; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $338=$F452; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $339=$p; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd472=(($339+8)|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd472)>>2)]=$338; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $340=$B449; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $341=$p; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk473=(($341+12)|0); //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk473)>>2)]=$340; //@line 4819 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 192; break; //@line 4821 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 163: 
      var $342=$p; //@line 4823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $343=$342; //@line 4823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tp=$343; //@line 4823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $344=$psize; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr477=$344 >>> 8; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $X=$shr477; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $345=$X; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp478=(($345)|0)==0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp478) { __label__ = 164; break; } else { __label__ = 165; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 164: 
      $I476=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 169; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 165: 
      var $346=$X; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp482=(($346)>>>0) > 65535; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp482) { __label__ = 166; break; } else { __label__ = 167; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 166: 
      $I476=31; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 167: 
      var $347=$X; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$347; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $348=$Y; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($348)-(256))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr486=$sub >>> 16; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and487=$shr486 & 8; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$and487; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $349=$N; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $350=$Y; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl488=$350 << $349; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl488; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub489=((($shl488)-(4096))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr490=$sub489 >>> 16; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and491=$shr490 & 4; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and491; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $351=$K; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $352=$N; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add492=((($352)+($351))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add492; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $353=$K; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $354=$Y; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl493=$354 << $353; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl493; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub494=((($shl493)-(16384))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr495=$sub494 >>> 16; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and496=$shr495 & 2; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and496; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $355=$N; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add497=((($355)+($and496))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add497; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $356=$N; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub498=(((14)-($356))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $357=$K; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $358=$Y; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl499=$358 << $357; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl499; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr500=$shl499 >>> 15; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add501=((($sub498)+($shr500))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$add501; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $359=$K; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl502=$359 << 1; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $360=$psize; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $361=$K; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add503=((($361)+(7))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr504=$360 >>> (($add503)>>>0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and505=$shr504 & 1; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add506=((($shl502)+($and505))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I476=$add506; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 168; break;
    case 168: 
      __label__ = 169; break;
    case 169: 
      var $362=$I476; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx509=((((__gm_+304)|0)+($362<<2))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H475=$arrayidx509; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $363=$I476; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $364=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index510=(($364+28)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index510)>>2)]=$363; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $365=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child511=(($365+16)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx512=(($child511+4)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx512)>>2)]=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $366=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child513=(($366+16)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx514=(($child513)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx514)>>2)]=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $367=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $368=$I476; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl515=1 << $368; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and516=$367 & $shl515; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool517=(($and516)|0)!=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool517) { __label__ = 171; break; } else { __label__ = 170; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 170: 
      var $369=$I476; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl519=1 << $369; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $370=HEAP32[((((__gm_+4)|0))>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or520=$370 | $shl519; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+4)|0))>>2)]=$or520; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $371=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $372=$H475; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($372)>>2)]=$371; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $373=$H475; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $374=$373; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $375=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent521=(($375+24)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent521)>>2)]=$374; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $376=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $377=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk522=(($377+12)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk522)>>2)]=$376; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $378=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd523=(($378+8)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd523)>>2)]=$376; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 189; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 171: 
      var $379=$H475; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $380=HEAP32[(($379)>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$380; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $381=$psize; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $382=$I476; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp526=(($382)|0)==31; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp526) { __label__ = 172; break; } else { __label__ = 173; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 172: 
      var $cond = 0;__label__ = 174; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 173: 
      var $383=$I476; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr528=$383 >>> 1; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add529=((($shr528)+(8))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub530=((($add529)-(2))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub531=(((31)-($sub530))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $sub531;__label__ = 174; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 174: 
      var $cond; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl532=$381 << $cond; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K525=$shl532; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 175; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 175: 
      var $384=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head533=(($384+4)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $385=HEAP32[(($head533)>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and534=$385 & -8; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $386=$psize; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp535=(($and534)|0)!=(($386)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp535) { __label__ = 176; break; } else { __label__ = 182; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 176: 
      var $387=$K525; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr538=$387 >>> 31; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and539=$shr538 & 1; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $388=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child540=(($388+16)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx541=(($child540+($and539<<2))|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx541; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $389=$K525; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl542=$389 << 1; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K525=$shl542; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $390=$C; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $391=HEAP32[(($390)>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp543=(($391)|0)!=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp543) { __label__ = 177; break; } else { __label__ = 178; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 177: 
      var $392=$C; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $393=HEAP32[(($392)>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$393; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 181; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 178: 
      var $394=$C; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $395=$394; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $396=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp547=(($395)>>>0) >= (($396)>>>0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv548=(($cmp547)&1); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval549=(($conv548)==(1)); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool550=(($expval549)|0)!=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool550) { __label__ = 179; break; } else { __label__ = 180; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 179: 
      var $397=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $398=$C; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($398)>>2)]=$397; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $399=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $400=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent552=(($400+24)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent552)>>2)]=$399; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $401=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $402=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk553=(($402+12)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk553)>>2)]=$401; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $403=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd554=(($403+8)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd554)>>2)]=$401; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 180: 
      _abort(); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 181: 
      __label__ = 187; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 182: 
      var $404=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd559=(($404+8)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $405=HEAP32[(($fd559)>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F558=$405; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $406=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $407=$406; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $408=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp560=(($407)>>>0) >= (($408)>>>0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp560) { __label__ = 183; break; } else { var $412 = 0;__label__ = 184; break; } //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 183: 
      var $409=$F558; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $410=$409; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $411=HEAP32[((((__gm_+16)|0))>>2)]; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp563=(($410)>>>0) >= (($411)>>>0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $412 = $cmp563;__label__ = 184; break;
    case 184: 
      var $412;
      var $land_ext566=(($412)&1);
      var $expval567=(($land_ext566)==(1));
      var $tobool568=(($expval567)|0)!=0;
      if ($tobool568) { __label__ = 185; break; } else { __label__ = 186; break; }
    case 185: 
      var $413=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $414=$F558; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk570=(($414+12)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk570)>>2)]=$413; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $415=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd571=(($415+8)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd571)>>2)]=$413; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $416=$F558; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $417=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd572=(($417+8)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd572)>>2)]=$416; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $418=$T; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $419=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk573=(($419+12)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk573)>>2)]=$418; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $420=$tp; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent574=(($420+24)|0); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent574)>>2)]=0; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 188; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 186: 
      _abort(); //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 187: 
      __label__ = 175; break; //@line 4824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 188: 
      __label__ = 189; break;
    case 189: 
      var $421=HEAP32[((((__gm_+32)|0))>>2)]; //@line 4826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dec=((($421)-(1))|0); //@line 4826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+32)|0))>>2)]=$dec; //@line 4826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp578=(($dec)|0)==0; //@line 4826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp578) { __label__ = 190; break; } else { __label__ = 191; break; } //@line 4826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 190: 
      var $call581=_release_unused_segments(__gm_); //@line 4827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 191; break; //@line 4827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 191: 
      __label__ = 192; break;
    case 192: 
      __label__ = 196; break; //@line 4829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 193: 
      __label__ = 194; break; //@line 4831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 194: 
      __label__ = 195; break; //@line 4831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 195: 
      _abort(); //@line 4833 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4833 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 196: 
      __label__ = 197; break; //@line 4837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 197: 
      ;
      return; //@line 4841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
Module["_free"] = _free;_free["X"]=1;

function _sys_trim($m, $pad) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $pad_addr;
      var $released;
      var $unit;
      var $extra;
      var $sp;
      var $old_br;
      var $rel_br;
      var $new_br;
      $m_addr=$m;
      $pad_addr=$pad;
      $released=0; //@line 4126 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)!=0; //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { var $1 = 1;__label__ = 4; break; } else { __label__ = 3; break; } //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_init_mparams(); //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($call)|0)!=0; //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1 = $tobool;__label__ = 4; break; //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1;
      var $lor_ext=(($1)&1); //@line 4127 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$pad_addr; //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($2)>>>0) < 4294967232; //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 26; break; } //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $3=$m_addr; //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top=(($3+24)|0); //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($top)>>2)]; //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)|0)!=0; //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 26; break; } //@line 4128 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $5=$pad_addr; //@line 4129 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($5)+(40))|0); //@line 4129 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $pad_addr=$add; //@line 4129 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$m_addr; //@line 4131 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($6+12)|0); //@line 4131 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($topsize)>>2)]; //@line 4131 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$pad_addr; //@line 4131 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($7)>>>0) > (($8)>>>0); //@line 4131 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 22; break; } //@line 4131 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=HEAP32[((((_mparams+8)|0))>>2)]; //@line 4133 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $unit=$9; //@line 4133 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$m_addr; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize5=(($10+12)|0); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($topsize5)>>2)]; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$pad_addr; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($11)-($12))|0); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$unit; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub6=((($13)-(1))|0); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add7=((($sub)+($sub6))|0); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$unit; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $div=Math.floor(((($add7)>>>0))/((($14)>>>0))); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub8=((($div)-(1))|0); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$unit; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $mul=((($sub8)*($15))|0); //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $extra=$mul; //@line 4135 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$m_addr; //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$m_addr; //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top9=(($17+24)|0); //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=HEAP32[(($top9)>>2)]; //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call10=_segment_holding($16, $19); //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$call10; //@line 4136 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$sp; //@line 4138 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($20+12)|0); //@line 4138 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=HEAP32[(($sflags)>>2)]; //@line 4138 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$21 & 8; //@line 4138 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool11=(($and)|0)!=0; //@line 4138 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool11) { __label__ = 19; break; } else { __label__ = 8; break; } //@line 4138 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $22=$sp; //@line 4139 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags13=(($22+12)|0); //@line 4139 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=HEAP32[(($sflags13)>>2)]; //@line 4139 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and14=$23 & 0; //@line 4139 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool15=(($and14)|0)!=0; //@line 4139 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool15) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 4139 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      __label__ = 18; break; //@line 4151 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $24=$extra; //@line 4153 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($24)>>>0) >= 2147483647; //@line 4153 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 4153 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $25=$unit; //@line 4154 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub19=(((-2147483648)-($25))|0); //@line 4154 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $extra=$sub19; //@line 4154 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 4154 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $call20=_sbrk(0); //@line 4158 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $old_br=$call20; //@line 4158 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$old_br; //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$sp; //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base=(($27)|0); //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($base)>>2)]; //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$sp; //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size=(($29+4)|0); //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=HEAP32[(($size)>>2)]; //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($28+$30)|0); //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp21=(($26)|0)==(($add_ptr)|0); //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp21) { __label__ = 13; break; } else { __label__ = 17; break; } //@line 4159 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $31=$extra; //@line 4160 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub23=(((-$31))|0); //@line 4160 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call24=_sbrk($sub23); //@line 4160 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rel_br=$call24; //@line 4160 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call25=_sbrk(0); //@line 4161 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $new_br=$call25; //@line 4161 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$rel_br; //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($32)|0)!=-1; //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 14; break; } else { __label__ = 16; break; } //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $33=$new_br; //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$old_br; //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($33)>>>0) < (($34)>>>0); //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4162 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $35=$old_br; //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$new_br; //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$35; //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$36; //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $released=$sub_ptr_sub; //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 16; break; //@line 4163 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      __label__ = 17; break; //@line 4164 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 18; break;
    case 18: 
      __label__ = 19; break; //@line 4168 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $37=$released; //@line 4170 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($37)|0)!=0; //@line 4170 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4170 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $38=$released; //@line 4171 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$sp; //@line 4171 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size36=(($39+4)|0); //@line 4171 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($size36)>>2)]; //@line 4171 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub37=((($40)-($38))|0); //@line 4171 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size36)>>2)]=$sub37; //@line 4171 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$released; //@line 4172 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$m_addr; //@line 4172 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($42+432)|0); //@line 4172 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($footprint)>>2)]; //@line 4172 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub38=((($43)-($41))|0); //@line 4172 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$sub38; //@line 4172 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$m_addr; //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$m_addr; //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top39=(($45+24)|0); //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=HEAP32[(($top39)>>2)]; //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$m_addr; //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize40=(($47+12)|0); //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=HEAP32[(($topsize40)>>2)]; //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$released; //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub41=((($48)-($49))|0); //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($44, $46, $sub41); //@line 4173 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4175 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break; //@line 4176 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $50=$released; //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($50)|0)==0; //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp44) { __label__ = 23; break; } else { __label__ = 25; break; } //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $51=$m_addr; //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize46=(($51+12)|0); //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=HEAP32[(($topsize46)>>2)]; //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$m_addr; //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $trim_check=(($53+28)|0); //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($trim_check)>>2)]; //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($52)>>>0) > (($54)>>>0); //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4183 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $55=$m_addr; //@line 4184 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $trim_check49=(($55+28)|0); //@line 4184 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($trim_check49)>>2)]=-1; //@line 4184 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 4184 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      __label__ = 26; break; //@line 4185 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $56=$released; //@line 4187 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp52=(($56)|0)!=0; //@line 4187 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond=$cmp52 ? 1 : 0; //@line 4187 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $cond; //@line 4187 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_sys_trim["X"]=1;

function _realloc($oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $oldmem_addr;
      var $bytes_addr;
      var $m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$oldmem_addr; //@line 4859 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)==0; //@line 4859 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4859 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$bytes_addr; //@line 4860 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call=_malloc($1); //@line 4860 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$call; //@line 4860 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4860 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      $m=__gm_; //@line 4869 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$m; //@line 4877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$oldmem_addr; //@line 4877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$bytes_addr; //@line 4877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call1=_internal_realloc($2, $3, $4); //@line 4877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$call1; //@line 4877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 4877 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $5=$retval; //@line 4879 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $5; //@line 4879 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _release_unused_segments($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $released;
      var $nsegs;
      var $pred;
      var $sp;
      var $base;
      var $size;
      var $next3;
      var $p;
      var $psize;
      var $tp;
      var $XP;
      var $R;
      var $F;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $H147;
      var $I;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K197;
      var $C;
      var $F235;
      $m_addr=$m;
      $released=0; //@line 4079 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nsegs=0; //@line 4080 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $0=$m_addr; //@line 4081 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg=(($0+444)|0); //@line 4081 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $pred=$seg; //@line 4081 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=$pred; //@line 4082 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $next=(($1+8)|0); //@line 4082 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[(($next)>>2)]; //@line 4082 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$2; //@line 4082 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4083 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $3=$sp; //@line 4083 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($3)|0)!=0; //@line 4083 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 88; break; } //@line 4083 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$sp; //@line 4084 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base1=(($4)|0); //@line 4084 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=HEAP32[(($base1)>>2)]; //@line 4084 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $base=$5; //@line 4084 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$sp; //@line 4085 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size2=(($6+4)|0); //@line 4085 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[(($size2)>>2)]; //@line 4085 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $size=$7; //@line 4085 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$sp; //@line 4086 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $next4=(($8+8)|0); //@line 4086 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=HEAP32[(($next4)>>2)]; //@line 4086 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $next3=$9; //@line 4086 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$nsegs; //@line 4087 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $inc=((($10)+(1))|0); //@line 4087 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nsegs=$inc; //@line 4087 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$sp; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($11+12)|0); //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($sflags)>>2)]; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$12 & 0; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and)|0)!=0; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 5; break; } else { __label__ = 87; break; } //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $13=$sp; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags5=(($13+12)|0); //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($sflags5)>>2)]; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and6=$14 & 8; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool7=(($and6)|0)!=0; //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool7) { __label__ = 87; break; } else { __label__ = 6; break; } //@line 4088 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $15=$base; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$base; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($16+8)|0); //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$add_ptr; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and8=$17 & 7; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($and8)|0)==0; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond = 0;__label__ = 9; break; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $18=$base; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($18+8)|0); //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr10; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and11=$19 & 7; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and11))|0); //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and12=$sub & 7; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and12;__label__ = 9; break; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $cond; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr13=(($15+$cond)|0); //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$add_ptr13; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$20; //@line 4089 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$p; //@line 4090 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($21+4)|0); //@line 4090 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[(($head)>>2)]; //@line 4090 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and14=$22 & -8; //@line 4090 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$and14; //@line 4090 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head15=(($23+4)|0); //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=HEAP32[(($head15)>>2)]; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and16=$24 & 3; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($and16)|0)!=1; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 86; break; } else { __label__ = 10; break; } //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $25=$p; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$25; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$psize; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr19=(($26+$27)|0); //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$base; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$size; //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr20=(($28+$29)|0); //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr21=((($add_ptr20)-(40))|0); //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($add_ptr19)>>>0) >= (($add_ptr21)>>>0); //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 11; break; } else { __label__ = 86; break; } //@line 4092 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $30=$p; //@line 4093 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$30; //@line 4093 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tp=$31; //@line 4093 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$p; //@line 4095 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 4095 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dv=(($33+20)|0); //@line 4095 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($dv)>>2)]; //@line 4095 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($32)|0)==(($34)|0); //@line 4095 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 12; break; } else { __label__ = 13; break; } //@line 4095 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $35=$m_addr; //@line 4096 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dv26=(($35+20)|0); //@line 4096 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv26)>>2)]=0; //@line 4096 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$m_addr; //@line 4097 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($36+8)|0); //@line 4097 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize)>>2)]=0; //@line 4097 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 59; break; //@line 4098 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $37=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent=(($37+24)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($parent)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$38; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($39+12)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($bk)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($40)|0)!=(($41)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 14; break; } else { __label__ = 18; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $42=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($42+8)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=HEAP32[(($fd)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$43; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk29=(($44+12)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=HEAP32[(($bk29)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$45; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$F; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$46; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($48+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=HEAP32[(($least_addr)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp30=(($47)>>>0) >= (($49)>>>0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp30)&1); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool31=(($expval)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool31) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $50=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$F; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk33=(($51+12)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk33)>>2)]=$50; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$F; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd34=(($53+8)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd34)>>2)]=$52; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      _abort(); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 30; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $54=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child=(($54+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($child+4)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($arrayidx)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$55; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp37=(($55)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp37) { __label__ = 20; break; } else { __label__ = 19; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $56=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child39=(($56+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx40=(($child39)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx40; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($arrayidx40)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$57; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($57)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 20; break; } else { __label__ = 29; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      var $58=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child45=(($58+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx46=(($child45+4)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx46; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($arrayidx46)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($59)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { var $62 = 1;__label__ = 23; break; } else { __label__ = 22; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $60=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child49=(($60+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx50=(($child49)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx50; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=HEAP32[(($arrayidx50)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($61)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62 = $cmp51;__label__ = 23; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      var $62;
      if ($62) { __label__ = 24; break; } else { __label__ = 25; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $63=$CP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$63; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=HEAP32[(($63)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$64; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $65=$RP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$65; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr54=(($67+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=HEAP32[(($least_addr54)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp55=(($66)>>>0) >= (($68)>>>0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv56=(($cmp55)&1); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval57=(($conv56)==(1)); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool58=(($expval57)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool58) { __label__ = 26; break; } else { __label__ = 27; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $69=$RP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($69)>>2)]=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      _abort(); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      __label__ = 29; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      __label__ = 30; break;
    case 30: 
      var $70=$XP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp64=(($70)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp64) { __label__ = 31; break; } else { __label__ = 58; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $71=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index=(($71+28)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($index)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($73+304)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx67=(($treebins+($72<<2))|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx67; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$H; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=HEAP32[(($75)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp68=(($74)|0)==(($76)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp68) { __label__ = 32; break; } else { __label__ = 35; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $77=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$H; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($78)>>2)]=$77; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp71=(($77)|0)==0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp71) { __label__ = 33; break; } else { __label__ = 34; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $79=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index74=(($79+28)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=HEAP32[(($index74)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $80; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($81+4)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=HEAP32[(($treemap)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and75=$82 & $neg; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap)>>2)]=$and75; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      __label__ = 42; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $83=$XP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$83; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr78=(($85+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=HEAP32[(($least_addr78)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($84)>>>0) >= (($86)>>>0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv80=(($cmp79)&1); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval81=(($conv80)==(1)); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool82=(($expval81)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool82) { __label__ = 36; break; } else { __label__ = 40; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $87=$XP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child84=(($87+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx85=(($child84)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=HEAP32[(($arrayidx85)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp86=(($88)|0)==(($89)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp86) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $90=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $91=$XP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child89=(($91+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx90=(($child89)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx90)>>2)]=$90; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $92=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$XP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child92=(($93+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx93=(($child92+4)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx93)>>2)]=$92; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 39; break;
    case 39: 
      __label__ = 41; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break;
    case 42: 
      var $94=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp98=(($94)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp98) { __label__ = 43; break; } else { __label__ = 57; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 43: 
      var $95=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=$95; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr101=(($97+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $98=HEAP32[(($least_addr101)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp102=(($96)>>>0) >= (($98)>>>0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv103=(($cmp102)&1); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval104=(($conv103)==(1)); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool105=(($expval104)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool105) { __label__ = 44; break; } else { __label__ = 55; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $99=$XP; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent107=(($100+24)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent107)>>2)]=$99; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child108=(($101+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx109=(($child108)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($arrayidx109)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$102; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp110=(($102)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp110) { __label__ = 45; break; } else { __label__ = 49; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $103=$C0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$103; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr113=(($105+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=HEAP32[(($least_addr113)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp114=(($104)>>>0) >= (($106)>>>0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv115=(($cmp114)&1); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval116=(($conv115)==(1)); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool117=(($expval116)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool117) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $107=$C0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child119=(($108+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx120=(($child119)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx120)>>2)]=$107; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $109=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $110=$C0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent121=(($110+24)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent121)>>2)]=$109; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      _abort(); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      __label__ = 49; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $111=$tp; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child125=(($111+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx126=(($child125+4)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[(($arrayidx126)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$112; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp127=(($112)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp127) { __label__ = 50; break; } else { __label__ = 54; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $113=$C1; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$113; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$m_addr; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr130=(($115+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $116=HEAP32[(($least_addr130)>>2)]; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp131=(($114)>>>0) >= (($116)>>>0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv132=(($cmp131)&1); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval133=(($conv132)==(1)); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool134=(($expval133)|0)!=0; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool134) { __label__ = 51; break; } else { __label__ = 52; break; } //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $117=$C1; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child136=(($118+16)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx137=(($child136+4)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx137)>>2)]=$117; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$R; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$C1; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent138=(($120+24)|0); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent138)>>2)]=$119; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 53; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 52: 
      _abort(); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      __label__ = 54; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 56; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 55: 
      _abort(); //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      __label__ = 57; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      __label__ = 58; break; //@line 4100 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      __label__ = 59; break;
    case 59: 
      var $121=$psize; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$121 >>> 8; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $X=$shr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$X; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp148=(($122)|0)==0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp148) { __label__ = 60; break; } else { __label__ = 61; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      $I=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 65; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      var $123=$X; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp152=(($123)>>>0) > 65535; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp152) { __label__ = 62; break; } else { __label__ = 63; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      $I=31; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $124=$X; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$124; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=$Y; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub156=((($125)-(256))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr157=$sub156 >>> 16; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and158=$shr157 & 8; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$and158; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$N; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$Y; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl159=$127 << $126; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl159; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub160=((($shl159)-(4096))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr161=$sub160 >>> 16; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and162=$shr161 & 4; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and162; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$K; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$N; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($129)+($128))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$K; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$Y; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl163=$131 << $130; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl163; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub164=((($shl163)-(16384))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr165=$sub164 >>> 16; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and166=$shr165 & 2; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and166; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $132=$N; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add167=((($132)+($and166))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add167; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$N; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub168=(((14)-($133))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$K; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$Y; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl169=$135 << $134; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl169; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr170=$shl169 >>> 15; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add171=((($sub168)+($shr170))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$add171; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $136=$K; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl172=$136 << 1; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$psize; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$K; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add173=((($138)+(7))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr174=$137 >>> (($add173)>>>0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and175=$shr174 & 1; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add176=((($shl172)+($and175))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$add176; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 64; break;
    case 64: 
      __label__ = 65; break;
    case 65: 
      var $139=$I; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$m_addr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins179=(($140+304)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx180=(($treebins179+($139<<2))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H147=$arrayidx180; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$I; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index181=(($142+28)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index181)>>2)]=$141; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child182=(($143+16)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx183=(($child182+4)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx183)>>2)]=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child184=(($144+16)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx185=(($child184)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx185)>>2)]=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $145=$m_addr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap186=(($145+4)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($treemap186)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$I; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl187=1 << $147; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and188=$146 & $shl187; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool189=(($and188)|0)!=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool189) { __label__ = 67; break; } else { __label__ = 66; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      var $148=$I; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl191=1 << $148; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$m_addr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap192=(($149+4)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $150=HEAP32[(($treemap192)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$150 | $shl191; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap192)>>2)]=$or; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$H147; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($152)>>2)]=$151; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$H147; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$153; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent193=(($155+24)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent193)>>2)]=$154; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk194=(($157+12)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk194)>>2)]=$156; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd195=(($158+8)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd195)>>2)]=$156; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 85; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      var $159=$H147; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $160=HEAP32[(($159)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$160; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$psize; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$I; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp198=(($162)|0)==31; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp198) { __label__ = 68; break; } else { __label__ = 69; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      var $cond207 = 0;__label__ = 70; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      var $163=$I; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr202=$163 >>> 1; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add203=((($shr202)+(8))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub204=((($add203)-(2))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub205=(((31)-($sub204))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond207 = $sub205;__label__ = 70; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      var $cond207; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl208=$161 << $cond207; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K197=$shl208; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 71; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      var $164=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head209=(($164+4)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($head209)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and210=$165 & -8; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$psize; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp211=(($and210)|0)!=(($166)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp211) { __label__ = 72; break; } else { __label__ = 78; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 72: 
      var $167=$K197; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr214=$167 >>> 31; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and215=$shr214 & 1; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child216=(($168+16)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx217=(($child216+($and215<<2))|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx217; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$K197; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl218=$169 << 1; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K197=$shl218; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$C; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=HEAP32[(($170)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp219=(($171)|0)!=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp219) { __label__ = 73; break; } else { __label__ = 74; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $172=$C; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=HEAP32[(($172)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$173; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 77; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $174=$C; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=$m_addr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr223=(($176+16)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $177=HEAP32[(($least_addr223)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp224=(($175)>>>0) >= (($177)>>>0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv225=(($cmp224)&1); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval226=(($conv225)==(1)); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool227=(($expval226)|0)!=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool227) { __label__ = 75; break; } else { __label__ = 76; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $178=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$C; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($179)>>2)]=$178; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $180=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent229=(($181+24)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent229)>>2)]=$180; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk230=(($183+12)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk230)>>2)]=$182; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd231=(($184+8)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd231)>>2)]=$182; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      _abort(); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      __label__ = 83; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      var $185=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd236=(($185+8)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $186=HEAP32[(($fd236)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F235=$186; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$187; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$m_addr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr237=(($189+16)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $190=HEAP32[(($least_addr237)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp238=(($188)>>>0) >= (($190)>>>0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp238) { __label__ = 79; break; } else { var $195 = 0;__label__ = 80; break; } //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      var $191=$F235; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$191; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$m_addr; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr240=(($193+16)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $194=HEAP32[(($least_addr240)>>2)]; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp241=(($192)>>>0) >= (($194)>>>0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $195 = $cmp241;__label__ = 80; break;
    case 80: 
      var $195;
      var $land_ext=(($195)&1);
      var $expval243=(($land_ext)==(1));
      var $tobool244=(($expval243)|0)!=0;
      if ($tobool244) { __label__ = 81; break; } else { __label__ = 82; break; }
    case 81: 
      var $196=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $197=$F235; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk246=(($197+12)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk246)>>2)]=$196; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd247=(($198+8)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd247)>>2)]=$196; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $199=$F235; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $200=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd248=(($200+8)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd248)>>2)]=$199; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $201=$T; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $202=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk249=(($202+12)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk249)>>2)]=$201; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $203=$tp; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent250=(($203+24)|0); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent250)>>2)]=0; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 84; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      _abort(); //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      __label__ = 71; break; //@line 4110 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      __label__ = 85; break;
    case 85: 
      __label__ = 86; break; //@line 4112 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 86: 
      __label__ = 87; break; //@line 4113 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 87: 
      var $204=$sp; //@line 4116 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $pred=$204; //@line 4116 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$next3; //@line 4117 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$205; //@line 4117 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 4118 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $206=$nsegs; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp257=(($206)>>>0) > 4294967295; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp257) { __label__ = 89; break; } else { __label__ = 90; break; } //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $207=$nsegs; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond262 = $207;__label__ = 91; break; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $cond262 = -1;__label__ = 91; break; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $cond262; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $208=$m_addr; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $release_checks=(($208+32)|0); //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($release_checks)>>2)]=$cond262; //@line 4120 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $209=$released; //@line 4122 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $209; //@line 4122 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_release_unused_segments["X"]=1;

function _mmap_resize($m, $oldp, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldp_addr;
      var $nb_addr;
      var $oldsize;
      var $offset;
      var $oldmmsize;
      var $newmmsize;
      var $cp;
      var $newp;
      var $psize;
      $m_addr=$m;
      $oldp_addr=$oldp;
      $nb_addr=$nb;
      var $0=$oldp_addr; //@line 3699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($0+4)|0); //@line 3699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($head)>>2)]; //@line 3699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$1 & -8; //@line 3699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldsize=$and; //@line 3699 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$nb_addr; //@line 3700 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$2 >>> 3; //@line 3700 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($shr)>>>0) < 32; //@line 3700 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3700 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $retval=0; //@line 3701 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3701 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$oldsize; //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$nb_addr; //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($4)+(4))|0); //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($3)>>>0) >= (($add)>>>0); //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 7; break; } //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $5=$oldsize; //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$nb_addr; //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($5)-($6))|0); //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=HEAP32[((((_mparams+8)|0))>>2)]; //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=$7 << 1; //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($sub)>>>0) <= (($shl)>>>0); //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3703 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $8=$oldp_addr; //@line 3705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$8; //@line 3705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3705 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=$oldp_addr; //@line 3707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($9)|0); //@line 3707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=HEAP32[(($prev_foot)>>2)]; //@line 3707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$10; //@line 3707 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$oldsize; //@line 3708 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$offset; //@line 3708 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add4=((($11)+($12))|0); //@line 3708 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add5=((($add4)+(16))|0); //@line 3708 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldmmsize=$add5; //@line 3708 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$nb_addr; //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add6=((($13)+(24))|0); //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add7=((($add6)+(7))|0); //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub8=((($14)-(1))|0); //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add9=((($add7)+($sub8))|0); //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub10=((($15)-(1))|0); //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub10 ^ -1; //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and11=$add9 & $neg; //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newmmsize=$and11; //@line 3709 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $cp=-1; //@line 3711 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$cp; //@line 3712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp12=(($16)|0)!=-1; //@line 3712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp12) { __label__ = 8; break; } else { __label__ = 13; break; } //@line 3712 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $17=$cp; //@line 3713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$offset; //@line 3713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($17+$18)|0); //@line 3713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr; //@line 3713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$19; //@line 3713 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$newmmsize; //@line 3714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$offset; //@line 3714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub14=((($20)-($21))|0); //@line 3714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub15=((($sub14)-(16))|0); //@line 3714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$sub15; //@line 3714 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$psize; //@line 3715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$newp; //@line 3715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head16=(($23+4)|0); //@line 3715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head16)>>2)]=$22; //@line 3715 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$newp; //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$24; //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$psize; //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr17=(($25+$26)|0); //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$add_ptr17; //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head18=(($27+4)|0); //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head18)>>2)]=7; //@line 3717 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$newp; //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$28; //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$psize; //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add19=((($30)+(4))|0); //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr20=(($29+$add19)|0); //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$add_ptr20; //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head21=(($31+4)|0); //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head21)>>2)]=0; //@line 3718 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$cp; //@line 3720 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 3720 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($33+16)|0); //@line 3720 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=HEAP32[(($least_addr)>>2)]; //@line 3720 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($32)>>>0) < (($34)>>>0); //@line 3720 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3720 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $35=$cp; //@line 3721 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$m_addr; //@line 3721 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr24=(($36+16)|0); //@line 3721 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr24)>>2)]=$35; //@line 3721 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3721 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $37=$newmmsize; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$oldmmsize; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub26=((($37)-($38))|0); //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$m_addr; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($39+432)|0); //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($footprint)>>2)]; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add27=((($40)+($sub26))|0); //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add27; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($41+436)|0); //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=HEAP32[(($max_footprint)>>2)]; //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($add27)>>>0) > (($42)>>>0); //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3722 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $43=$m_addr; //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint30=(($43+432)|0); //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=HEAP32[(($footprint30)>>2)]; //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$m_addr; //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $max_footprint31=(($45+436)|0); //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint31)>>2)]=$44; //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3723 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $46=$newp; //@line 3725 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$46; //@line 3725 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3725 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break;
    case 14: 
      $retval=0; //@line 3728 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3728 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $47=$retval; //@line 3729 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $47; //@line 3729 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_resize["X"]=1;

function _segment_holding($m, $addr) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $addr_addr;
      var $sp;
      $m_addr=$m;
      $addr_addr=$addr;
      var $0=$m_addr; //@line 2562 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg=(($0+444)|0); //@line 2562 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$seg; //@line 2562 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 2563 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $1=$addr_addr; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$sp; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base=(($2)|0); //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=HEAP32[(($base)>>2)]; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($1)>>>0) >= (($3)>>>0); //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$addr_addr; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$sp; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base1=(($5)|0); //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($base1)>>2)]; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$sp; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size=(($7+4)|0); //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($size)>>2)]; //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+$8)|0); //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($4)>>>0) < (($add_ptr)>>>0); //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2564 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $9=$sp; //@line 2565 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$9; //@line 2565 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2565 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $10=$sp; //@line 2566 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $next=(($10+8)|0); //@line 2566 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=HEAP32[(($next)>>2)]; //@line 2566 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$11; //@line 2566 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp3=(($11)|0)==0; //@line 2566 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp3) { __label__ = 7; break; } else { __label__ = 8; break; } //@line 2566 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      $retval=0; //@line 2567 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 2567 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      __label__ = 3; break; //@line 2568 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $12=$retval; //@line 2569 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $12; //@line 2569 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _init_top($m, $p, $psize) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $p_addr;
      var $psize_addr;
      var $offset;
      $m_addr=$m;
      $p_addr=$p;
      $psize_addr=$psize;
      var $0=$p_addr; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=$0; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1+8)|0); //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & 7; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 0;__label__ = 5; break; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$p_addr; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($4+8)|0); //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$add_ptr1; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and2=$5 & 7; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and2))|0); //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and3=$sub & 7; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and3;__label__ = 5; break; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3736 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$p_addr; //@line 3737 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$6; //@line 3737 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$offset; //@line 3737 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($7+$8)|0); //@line 3737 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$add_ptr4; //@line 3737 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p_addr=$9; //@line 3737 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$offset; //@line 3738 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$psize_addr; //@line 3738 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub5=((($11)-($10))|0); //@line 3738 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize_addr=$sub5; //@line 3738 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$p_addr; //@line 3740 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$m_addr; //@line 3740 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top=(($13+24)|0); //@line 3740 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top)>>2)]=$12; //@line 3740 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$psize_addr; //@line 3741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$m_addr; //@line 3741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($15+12)|0); //@line 3741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize)>>2)]=$14; //@line 3741 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$psize_addr; //@line 3742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$16 | 1; //@line 3742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$p_addr; //@line 3742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($17+4)|0); //@line 3742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or; //@line 3742 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$p_addr; //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$18; //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$psize_addr; //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr6=(($19+$20)|0); //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$add_ptr6; //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head7=(($21+4)|0); //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head7)>>2)]=40; //@line 3744 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=HEAP32[((((_mparams+16)|0))>>2)]; //@line 3745 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$m_addr; //@line 3745 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $trim_check=(($23+28)|0); //@line 3745 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($trim_check)>>2)]=$22; //@line 3745 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return; //@line 3746 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_init_top["X"]=1;

function _mmap_alloc($m, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $nb_addr;
      var $mmsize;
      var $mm;
      var $offset;
      var $psize;
      var $p;
      $m_addr=$m;
      $nb_addr=$nb;
      var $0=$nb_addr; //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($0)+(24))|0); //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add1=((($add)+(7))|0); //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($1)-(1))|0); //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add2=((($add1)+($sub))|0); //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=HEAP32[((((_mparams+4)|0))>>2)]; //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub3=((($2)-(1))|0); //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$sub3 ^ -1; //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$add2 & $neg; //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $mmsize=$and; //@line 3672 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$mmsize; //@line 3673 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$nb_addr; //@line 3673 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($3)>>>0) > (($4)>>>0); //@line 3673 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 14; break; } //@line 3673 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      $mm=-1; //@line 3674 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$mm; //@line 3675 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($5)|0)!=-1; //@line 3675 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 4; break; } else { __label__ = 13; break; } //@line 3675 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $6=$mm; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+8)|0); //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$add_ptr; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and6=$7 & 7; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond = 0;__label__ = 7; break; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $8=$mm; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr8=(($8+8)|0); //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$add_ptr8; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and9=$9 & 7; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub10=(((8)-($and9))|0); //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and11=$sub10 & 7; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and11;__label__ = 7; break; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $cond; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3676 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$mmsize; //@line 3677 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$offset; //@line 3677 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub12=((($10)-($11))|0); //@line 3677 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub13=((($sub12)-(16))|0); //@line 3677 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$sub13; //@line 3677 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$mm; //@line 3678 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$offset; //@line 3678 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($12+$13)|0); //@line 3678 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr14; //@line 3678 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$14; //@line 3678 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$offset; //@line 3679 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$p; //@line 3679 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($16)|0); //@line 3679 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$15; //@line 3679 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$psize; //@line 3680 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$p; //@line 3680 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($18+4)|0); //@line 3680 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$17; //@line 3680 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$p; //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$19; //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$psize; //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($20+$21)|0); //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$add_ptr15; //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head16=(($22+4)|0); //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head16)>>2)]=7; //@line 3682 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$psize; //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add17=((($25)+(4))|0); //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr18=(($24+$add17)|0); //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$add_ptr18; //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head19=(($26+4)|0); //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head19)>>2)]=0; //@line 3683 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$m_addr; //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($27+16)|0); //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=HEAP32[(($least_addr)>>2)]; //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($28)|0)==0; //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 8; break; } //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $29=$mm; //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$m_addr; //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr21=(($30+16)|0); //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=HEAP32[(($least_addr21)>>2)]; //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($29)>>>0) < (($31)>>>0); //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3685 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $32=$mm; //@line 3686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$m_addr; //@line 3686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr24=(($33+16)|0); //@line 3686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($least_addr24)>>2)]=$32; //@line 3686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 10; break; //@line 3686 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $34=$mmsize; //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$m_addr; //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint=(($35+432)|0); //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($footprint)>>2)]; //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add25=((($36)+($34))|0); //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($footprint)>>2)]=$add25; //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$m_addr; //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $max_footprint=(($37+436)|0); //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=HEAP32[(($max_footprint)>>2)]; //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp26=(($add25)>>>0) > (($38)>>>0); //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp26) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3687 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $39=$m_addr; //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $footprint28=(($39+432)|0); //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($footprint28)>>2)]; //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $max_footprint29=(($41+436)|0); //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($max_footprint29)>>2)]=$40; //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3688 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $42=$p; //@line 3691 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$42; //@line 3691 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr31=(($43+8)|0); //@line 3691 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr31; //@line 3691 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3691 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      __label__ = 14; break; //@line 3693 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      $retval=0; //@line 3694 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 15; break; //@line 3694 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $44=$retval; //@line 3695 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $44; //@line 3695 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_mmap_alloc["X"]=1;

function _init_bins($m) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $i;
      var $bin;
      $m_addr=$m;
      $i=0; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $0=$i; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) < 32; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 4; break; } else { __label__ = 6; break; } //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1=$i; //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=$1 << 1; //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$m_addr; //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($2+40)|0); //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl<<2))|0); //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$arrayidx; //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$3; //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $bin=$4; //@line 3753 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$bin; //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$bin; //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($6+12)|0); //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$5; //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$bin; //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($7+8)|0); //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd)>>2)]=$5; //@line 3754 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 5; break; //@line 3755 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $8=$i; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $inc=((($8)+(1))|0); //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $i=$inc; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 3; break; //@line 3752 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      ;
      return; //@line 3756 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


function _internal_realloc($m, $oldmem, $bytes) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $retval;
      var $m_addr;
      var $oldmem_addr;
      var $bytes_addr;
      var $oldp;
      var $oldsize;
      var $next;
      var $newp;
      var $extra;
      var $nb;
      var $rsize;
      var $remainder;
      var $newsize;
      var $newtopsize;
      var $newtop;
      var $newmem;
      var $oc;
      $m_addr=$m;
      $oldmem_addr=$oldmem;
      $bytes_addr=$bytes;
      var $0=$bytes_addr; //@line 4305 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)>>>0) >= 4294967232; //@line 4305 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 4305 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=___errno(); //@line 4306 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($call)>>2)]=12; //@line 4306 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=0; //@line 4307 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4307 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $1=$oldmem_addr; //@line 4310 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=((($1)-(8))|0); //@line 4310 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 4310 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldp=$2; //@line 4310 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$oldp; //@line 4311 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($3+4)|0); //@line 4311 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=HEAP32[(($head)>>2)]; //@line 4311 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$4 & -8; //@line 4311 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldsize=$and; //@line 4311 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$oldp; //@line 4312 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$5; //@line 4312 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$oldsize; //@line 4312 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($6+$7)|0); //@line 4312 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$add_ptr1; //@line 4312 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $next=$8; //@line 4312 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newp=0; //@line 4313 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $extra=0; //@line 4314 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$oldp; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$9; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$m_addr; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($11+16)|0); //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=HEAP32[(($least_addr)>>2)]; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp2=(($10)>>>0) >= (($12)>>>0); //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp2) { __label__ = 5; break; } else { var $21 = 0;__label__ = 8; break; } //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $13=$oldp; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head3=(($13+4)|0); //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=HEAP32[(($head3)>>2)]; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and4=$14 & 3; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp5=(($and4)|0)!=1; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp5) { __label__ = 6; break; } else { var $21 = 0;__label__ = 8; break; } //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $15=$oldp; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$15; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$next; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$17; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($16)>>>0) < (($18)>>>0); //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 7; break; } else { var $21 = 0;__label__ = 8; break; } //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $19=$next; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head8=(($19+4)|0); //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=HEAP32[(($head8)>>2)]; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and9=$20 & 1; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and9)|0)!=0; //@line 4318 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21 = $tobool;__label__ = 8; break;
    case 8: 
      var $21;
      var $land_ext=(($21)&1);
      var $expval=(($land_ext)==(1));
      var $tobool10=(($expval)|0)!=0;
      if ($tobool10) { __label__ = 9; break; } else { __label__ = 24; break; }
    case 9: 
      var $22=$bytes_addr; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp12=(($22)>>>0) < 11; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp12) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $cond = 16;__label__ = 12; break; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $23=$bytes_addr; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($23)+(4))|0); //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add13=((($add)+(7))|0); //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and14=$add13 & -8; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and14;__label__ = 12; break; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $cond; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nb=$cond; //@line 4320 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$oldp; //@line 4321 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head15=(($24+4)|0); //@line 4321 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=HEAP32[(($head15)>>2)]; //@line 4321 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and16=$25 & 3; //@line 4321 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp17=(($and16)|0)==0; //@line 4321 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp17) { __label__ = 13; break; } else { __label__ = 14; break; } //@line 4321 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $26=$m_addr; //@line 4322 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$oldp; //@line 4322 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$nb; //@line 4322 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call19=_mmap_resize($26, $27, $28); //@line 4322 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$call19; //@line 4322 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 23; break; //@line 4322 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $29=$oldsize; //@line 4323 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$nb; //@line 4323 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($29)>>>0) >= (($30)>>>0); //@line 4323 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 15; break; } else { __label__ = 18; break; } //@line 4323 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $31=$oldsize; //@line 4324 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$nb; //@line 4324 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($31)-($32))|0); //@line 4324 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rsize=$sub; //@line 4324 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$oldp; //@line 4325 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$33; //@line 4325 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$rsize; //@line 4326 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp22=(($34)>>>0) >= 16; //@line 4326 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp22) { __label__ = 16; break; } else { __label__ = 17; break; } //@line 4326 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $35=$newp; //@line 4327 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$35; //@line 4327 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$nb; //@line 4327 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr24=(($36+$37)|0); //@line 4327 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$add_ptr24; //@line 4327 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $remainder=$38; //@line 4327 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$newp; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head25=(($39+4)|0); //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=HEAP32[(($head25)>>2)]; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and26=$40 & 1; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$nb; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$and26 | $41; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or27=$or | 2; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$newp; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head28=(($42+4)|0); //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head28)>>2)]=$or27; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$newp; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$43; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$nb; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr29=(($44+$45)|0); //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$add_ptr29; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head30=(($46+4)|0); //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=HEAP32[(($head30)>>2)]; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or31=$47 | 1; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head30)>>2)]=$or31; //@line 4328 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$rsize; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or32=$48 | 1; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or33=$or32 | 2; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $49=$remainder; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head34=(($49+4)|0); //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head34)>>2)]=$or33; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$remainder; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$50; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$rsize; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr35=(($51+$52)|0); //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$add_ptr35; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head36=(($53+4)|0); //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=HEAP32[(($head36)>>2)]; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or37=$54 | 1; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head36)>>2)]=$or37; //@line 4329 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$remainder; //@line 4330 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$55; //@line 4330 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr38=(($56+8)|0); //@line 4330 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $extra=$add_ptr38; //@line 4330 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 17; break; //@line 4331 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      __label__ = 22; break; //@line 4332 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $57=$next; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$m_addr; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top=(($58+24)|0); //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=HEAP32[(($top)>>2)]; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($57)|0)==(($59)|0); //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 19; break; } else { __label__ = 21; break; } //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $60=$oldsize; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$m_addr; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($61+12)|0); //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=HEAP32[(($topsize)>>2)]; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add43=((($60)+($62))|0); //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$nb; //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp44=(($add43)>>>0) > (($63)>>>0); //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp44) { __label__ = 20; break; } else { __label__ = 21; break; } //@line 4333 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $64=$oldsize; //@line 4335 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$m_addr; //@line 4335 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize46=(($65+12)|0); //@line 4335 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=HEAP32[(($topsize46)>>2)]; //@line 4335 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add47=((($64)+($66))|0); //@line 4335 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newsize=$add47; //@line 4335 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$newsize; //@line 4336 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$nb; //@line 4336 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub48=((($67)-($68))|0); //@line 4336 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newtopsize=$sub48; //@line 4336 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $69=$oldp; //@line 4337 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 4337 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$nb; //@line 4337 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr49=(($70+$71)|0); //@line 4337 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$add_ptr49; //@line 4337 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newtop=$72; //@line 4337 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$oldp; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head50=(($73+4)|0); //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=HEAP32[(($head50)>>2)]; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and51=$74 & 1; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$nb; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or52=$and51 | $75; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or53=$or52 | 2; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$oldp; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head54=(($76+4)|0); //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head54)>>2)]=$or53; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$oldp; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $78=$77; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$nb; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr55=(($78+$79)|0); //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$add_ptr55; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head56=(($80+4)|0); //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($head56)>>2)]; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or57=$81 | 1; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head56)>>2)]=$or57; //@line 4338 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$newtopsize; //@line 4339 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or58=$82 | 1; //@line 4339 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$newtop; //@line 4339 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head59=(($83+4)|0); //@line 4339 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head59)>>2)]=$or58; //@line 4339 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$newtop; //@line 4340 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$m_addr; //@line 4340 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top60=(($85+24)|0); //@line 4340 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top60)>>2)]=$84; //@line 4340 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$newtopsize; //@line 4341 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$m_addr; //@line 4341 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize61=(($87+12)|0); //@line 4341 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize61)>>2)]=$86; //@line 4341 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$oldp; //@line 4342 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newp=$88; //@line 4342 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 4343 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 21: 
      __label__ = 22; break;
    case 22: 
      __label__ = 23; break;
    case 23: 
      __label__ = 25; break; //@line 4344 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      _abort(); //@line 4346 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 4346 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      var $89=$newp; //@line 4358 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp67=(($89)|0)!=0; //@line 4358 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp67) { __label__ = 26; break; } else { __label__ = 29; break; } //@line 4358 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $90=$extra; //@line 4359 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp69=(($90)|0)!=0; //@line 4359 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp69) { __label__ = 27; break; } else { __label__ = 28; break; } //@line 4359 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $91=$extra; //@line 4360 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _free($91); //@line 4360 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 4361 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $92=$newp; //@line 4362 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$92; //@line 4362 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr72=(($93+8)|0); //@line 4362 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$add_ptr72; //@line 4362 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4362 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $94=$bytes_addr; //@line 4365 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call74=_malloc($94); //@line 4365 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $newmem=$call74; //@line 4365 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $95=$newmem; //@line 4366 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp75=(($95)|0)!=0; //@line 4366 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp75) { __label__ = 30; break; } else { __label__ = 34; break; } //@line 4366 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $96=$oldsize; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$oldp; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head77=(($97+4)|0); //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $98=HEAP32[(($head77)>>2)]; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and78=$98 & 3; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp79=(($and78)|0)==0; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond80=$cmp79 ? 8 : 4; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub81=((($96)-($cond80))|0); //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oc=$sub81; //@line 4367 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$newmem; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$oldmem_addr; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$oc; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$bytes_addr; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp82=(($101)>>>0) < (($102)>>>0); //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp82) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $103=$oc; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond86 = $103;__label__ = 33; break; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $104=$bytes_addr; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond86 = $104;__label__ = 33; break; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $cond86; //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      assert($cond86 % 1 === 0, 'memcpy given ' + $cond86 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');_memcpy($99, $100, $cond86, 1); //@line 4368 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$oldmem_addr; //@line 4369 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _free($105); //@line 4369 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 4370 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $106=$newmem; //@line 4371 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $retval=$106; //@line 4371 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 35; break; //@line 4371 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $107=$retval; //@line 4375 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $107; //@line 4375 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_internal_realloc["X"]=1;

function _init_mparams() {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $magic;
      var $psize;
      var $gsize;
      var $0=HEAP32[((((_mparams)|0))>>2)]; //@line 2965 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($0)|0)==0; //@line 2965 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 7; break; } //@line 2965 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $call=_sysconf(8); //@line 2971 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$call; //@line 2971 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=$psize; //@line 2972 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $gsize=$1; //@line 2972 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$gsize; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$gsize; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=((($3)-(1))|0); //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & $sub; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp1=(($and)|0)!=0; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp1) { __label__ = 5; break; } else { __label__ = 4; break; } //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $4=$psize; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$psize; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub2=((($5)-(1))|0); //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and3=$4 & $sub2; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp4=(($and3)|0)!=0; //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp4) { __label__ = 5; break; } else { __label__ = 6; break; } //@line 2989 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      _abort(); //@line 2997 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 2997 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $6=$gsize; //@line 2999 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+8)|0))>>2)]=$6; //@line 2999 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$psize; //@line 3000 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+4)|0))>>2)]=$7; //@line 3000 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+12)|0))>>2)]=-1; //@line 3001 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+16)|0))>>2)]=2097152; //@line 3002 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams+20)|0))>>2)]=0; //@line 3004 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[((((_mparams+20)|0))>>2)]; //@line 3011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((__gm_+440)|0))>>2)]=$8; //@line 3011 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call6=_time(0); //@line 3030 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $xor=$call6 ^ 1431655765; //@line 3030 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $magic=$xor; //@line 3030 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$magic; //@line 3032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$9 | 8; //@line 3032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $magic=$or; //@line 3032 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$magic; //@line 3033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and7=$10 & -8; //@line 3033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $magic=$and7; //@line 3033 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$magic; //@line 3034 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[((((_mparams)|0))>>2)]=$11; //@line 3034 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 7; break; //@line 3036 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      ;
      return 1; //@line 3039 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}


// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.

function _prepend_alloc($m, $newbase, $oldbase, $nb) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $newbase_addr;
      var $oldbase_addr;
      var $nb_addr;
      var $p;
      var $oldfirst;
      var $psize;
      var $q;
      var $qsize;
      var $tsize;
      var $dsize;
      var $nsize;
      var $F;
      var $B;
      var $I;
      var $TP;
      var $XP;
      var $R;
      var $F63;
      var $RP;
      var $CP;
      var $H;
      var $C0;
      var $C1;
      var $I203;
      var $B205;
      var $F209;
      var $TP235;
      var $H236;
      var $I237;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K290;
      var $C;
      var $F328;
      $m_addr=$m;
      $newbase_addr=$newbase;
      $oldbase_addr=$oldbase;
      $nb_addr=$nb;
      var $0=$newbase_addr; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=$newbase_addr; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($1+8)|0); //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$add_ptr; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$2 & 7; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 0;__label__ = 5; break; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $3=$newbase_addr; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr1=(($3+8)|0); //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$add_ptr1; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and2=$4 & 7; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and2))|0); //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and3=$sub & 7; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and3;__label__ = 5; break; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($0+$cond)|0); //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$add_ptr4; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$5; //@line 3780 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=$oldbase_addr; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$oldbase_addr; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr5=(($7+8)|0); //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=$add_ptr5; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and6=$8 & 7; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp7=(($and6)|0)==0; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp7) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $cond15 = 0;__label__ = 8; break; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $9=$oldbase_addr; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr10=(($9+8)|0); //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$add_ptr10; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and11=$10 & 7; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub12=(((8)-($and11))|0); //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and13=$sub12 & 7; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond15 = $and13;__label__ = 8; break; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond15; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr16=(($6+$cond15)|0); //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$add_ptr16; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$11; //@line 3781 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$oldfirst; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $13=$12; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$p; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$14; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$13; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$15; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$sub_ptr_sub; //@line 3782 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$p; //@line 3783 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$16; //@line 3783 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$nb_addr; //@line 3783 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr17=(($17+$18)|0); //@line 3783 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $19=$add_ptr17; //@line 3783 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $q=$19; //@line 3783 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $20=$psize; //@line 3784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$nb_addr; //@line 3784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub18=((($20)-($21))|0); //@line 3784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $qsize=$sub18; //@line 3784 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$nb_addr; //@line 3785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$22 | 1; //@line 3785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or19=$or | 2; //@line 3785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$p; //@line 3785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($23+4)|0); //@line 3785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or19; //@line 3785 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$oldfirst; //@line 3792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$m_addr; //@line 3792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top=(($25+24)|0); //@line 3792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=HEAP32[(($top)>>2)]; //@line 3792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp20=(($24)|0)==(($26)|0); //@line 3792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp20) { __label__ = 9; break; } else { __label__ = 10; break; } //@line 3792 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $27=$qsize; //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$m_addr; //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $topsize=(($28+12)|0); //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=HEAP32[(($topsize)>>2)]; //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($29)+($27))|0); //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($topsize)>>2)]=$add; //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tsize=$add; //@line 3793 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$q; //@line 3794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 3794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top21=(($31+24)|0); //@line 3794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($top21)>>2)]=$30; //@line 3794 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$tsize; //@line 3795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or22=$32 | 1; //@line 3795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$q; //@line 3795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head23=(($33+4)|0); //@line 3795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head23)>>2)]=$or22; //@line 3795 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 110; break; //@line 3797 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $34=$oldfirst; //@line 3798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$m_addr; //@line 3798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dv=(($35+20)|0); //@line 3798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=HEAP32[(($dv)>>2)]; //@line 3798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp24=(($34)|0)==(($36)|0); //@line 3798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp24) { __label__ = 11; break; } else { __label__ = 12; break; } //@line 3798 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      var $37=$qsize; //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$m_addr; //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dvsize=(($38+8)|0); //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=HEAP32[(($dvsize)>>2)]; //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add26=((($39)+($37))|0); //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dvsize)>>2)]=$add26; //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $dsize=$add26; //@line 3799 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$q; //@line 3800 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$m_addr; //@line 3800 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $dv27=(($41+20)|0); //@line 3800 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($dv27)>>2)]=$40; //@line 3800 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$dsize; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or28=$42 | 1; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$q; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head29=(($43+4)|0); //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head29)>>2)]=$or28; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$dsize; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$q; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$45; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$dsize; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=(($46+$47)|0); //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$add_ptr30; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($48)|0); //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$44; //@line 3801 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 109; break; //@line 3802 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      var $49=$oldfirst; //@line 3804 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head32=(($49+4)|0); //@line 3804 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=HEAP32[(($head32)>>2)]; //@line 3804 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and33=$50 & 3; //@line 3804 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp34=(($and33)|0)!=1; //@line 3804 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp34) { __label__ = 73; break; } else { __label__ = 13; break; } //@line 3804 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $51=$oldfirst; //@line 3805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head36=(($51+4)|0); //@line 3805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=HEAP32[(($head36)>>2)]; //@line 3805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and37=$52 & -8; //@line 3805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nsize=$and37; //@line 3805 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$nsize; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$53 >>> 3; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp38=(($shr)>>>0) < 32; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp38) { __label__ = 14; break; } else { __label__ = 26; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $54=$oldfirst; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($54+8)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=HEAP32[(($fd)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$55; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$oldfirst; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($56+12)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $57=HEAP32[(($bk)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B=$57; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $58=$nsize; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr40=$58 >>> 3; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$shr40; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$F; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $60=$B; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp41=(($59)|0)==(($60)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp41) { __label__ = 15; break; } else { __label__ = 16; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $61=$I; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=1 << $61; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg=$shl ^ -1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($62)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $63=HEAP32[(($smallmap)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and43=$63 & $neg; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap)>>2)]=$and43; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 25; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $64=$F; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$I; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl45=$65 << 1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($66+40)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl45<<2))|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$arrayidx; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$67; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($64)|0)==(($68)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp46) { __label__ = 18; break; } else { __label__ = 17; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $69=$F; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$69; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($71+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=HEAP32[(($least_addr)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp47=(($70)>>>0) >= (($72)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp47) { __label__ = 18; break; } else { var $83 = 0;__label__ = 21; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $73=$B; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$I; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl48=$74 << 1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins49=(($75+40)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx50=(($smallbins49+($shl48<<2))|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$arrayidx50; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$76; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp51=(($73)|0)==(($77)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp51) { var $82 = 1;__label__ = 20; break; } else { __label__ = 19; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      var $78=$B; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$78; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr52=(($80+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=HEAP32[(($least_addr52)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp53=(($79)>>>0) >= (($81)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82 = $cmp53;__label__ = 20; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      var $82;
      var $83 = $82;__label__ = 21; break;
    case 21: 
      var $83;
      var $land_ext=(($83)&1);
      var $expval=(($land_ext)==(1));
      var $tobool=(($expval)|0)!=0;
      if ($tobool) { __label__ = 22; break; } else { __label__ = 23; break; }
    case 22: 
      var $84=$B; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=$F; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk55=(($85+12)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk55)>>2)]=$84; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$F; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $87=$B; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd56=(($87+8)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd56)>>2)]=$86; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 24; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      __label__ = 25; break;
    case 25: 
      __label__ = 72; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $88=$oldfirst; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $89=$88; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$89; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $90=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent=(($90+24)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($parent)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $XP=$91; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk60=(($92+12)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=HEAP32[(($bk60)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $94=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp61=(($93)|0)!=(($94)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp61) { __label__ = 27; break; } else { __label__ = 31; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 27: 
      var $95=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd64=(($95+8)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($fd64)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F63=$96; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $97=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk65=(($97+12)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $98=HEAP32[(($bk65)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$98; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$F63; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$99; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr66=(($101+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=HEAP32[(($least_addr66)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp67=(($100)>>>0) >= (($102)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp67)&1); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval68=(($conv)==(1)); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool69=(($expval68)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool69) { __label__ = 28; break; } else { __label__ = 29; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 28: 
      var $103=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$F63; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk71=(($104+12)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk71)>>2)]=$103; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $105=$F63; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd72=(($106+8)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd72)>>2)]=$105; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 30; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      __label__ = 43; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $107=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child=(($107+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx76=(($child+4)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx76; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=HEAP32[(($arrayidx76)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$108; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp77=(($108)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp77) { __label__ = 33; break; } else { __label__ = 32; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $109=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child80=(($109+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx81=(($child80)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$arrayidx81; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $110=HEAP32[(($arrayidx81)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$110; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp82=(($110)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp82) { __label__ = 33; break; } else { __label__ = 42; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      __label__ = 34; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $111=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child85=(($111+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx86=(($child85+4)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx86; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=HEAP32[(($arrayidx86)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp87=(($112)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp87) { var $115 = 1;__label__ = 36; break; } else { __label__ = 35; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $113=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child90=(($113+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx91=(($child90)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $CP=$arrayidx91; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=HEAP32[(($arrayidx91)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp92=(($114)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $115 = $cmp92;__label__ = 36; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $115;
      if ($115) { __label__ = 37; break; } else { __label__ = 38; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $116=$CP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $RP=$116; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $117=HEAP32[(($116)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $R=$117; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $118=$RP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$118; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr95=(($120+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=HEAP32[(($least_addr95)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp96=(($119)>>>0) >= (($121)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv97=(($cmp96)&1); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval98=(($conv97)==(1)); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool99=(($expval98)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool99) { __label__ = 39; break; } else { __label__ = 40; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      var $122=$RP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($122)>>2)]=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 41; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      __label__ = 42; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      __label__ = 43; break;
    case 43: 
      var $123=$XP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp105=(($123)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp105) { __label__ = 44; break; } else { __label__ = 71; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 44: 
      var $124=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index=(($124+28)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $125=HEAP32[(($index)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($126+304)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx108=(($treebins+($125<<2))|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx108; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$H; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=HEAP32[(($128)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp109=(($127)|0)==(($129)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp109) { __label__ = 45; break; } else { __label__ = 48; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      var $130=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$H; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($131)>>2)]=$130; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp112=(($130)|0)==0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp112) { __label__ = 46; break; } else { __label__ = 47; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      var $132=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index115=(($132+28)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $133=HEAP32[(($index115)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl116=1 << $133; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $neg117=$shl116 ^ -1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $134=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($134+4)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=HEAP32[(($treemap)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and118=$135 & $neg117; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap)>>2)]=$and118; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 55; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 48: 
      var $136=$XP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$136; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr121=(($138+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $139=HEAP32[(($least_addr121)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp122=(($137)>>>0) >= (($139)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv123=(($cmp122)&1); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval124=(($conv123)==(1)); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool125=(($expval124)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool125) { __label__ = 49; break; } else { __label__ = 53; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 49: 
      var $140=$XP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child127=(($140+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx128=(($child127)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=HEAP32[(($arrayidx128)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp129=(($141)|0)==(($142)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp129) { __label__ = 50; break; } else { __label__ = 51; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      var $143=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$XP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child132=(($144+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx133=(($child132)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx133)>>2)]=$143; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 51: 
      var $145=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=$XP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child135=(($146+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx136=(($child135+4)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx136)>>2)]=$145; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 52; break;
    case 52: 
      __label__ = 54; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 53: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 54: 
      __label__ = 55; break;
    case 55: 
      var $147=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp141=(($147)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp141) { __label__ = 56; break; } else { __label__ = 70; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 56: 
      var $148=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $149=$148; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $150=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr144=(($150+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($least_addr144)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp145=(($149)>>>0) >= (($151)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv146=(($cmp145)&1); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval147=(($conv146)==(1)); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool148=(($expval147)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool148) { __label__ = 57; break; } else { __label__ = 68; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 57: 
      var $152=$XP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $153=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent150=(($153+24)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent150)>>2)]=$152; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child151=(($154+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx152=(($child151)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=HEAP32[(($arrayidx152)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C0=$155; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp153=(($155)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp153) { __label__ = 58; break; } else { __label__ = 62; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 58: 
      var $156=$C0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=$156; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $158=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr156=(($158+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($least_addr156)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp157=(($157)>>>0) >= (($159)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv158=(($cmp157)&1); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval159=(($conv158)==(1)); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool160=(($expval159)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool160) { __label__ = 59; break; } else { __label__ = 60; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 59: 
      var $160=$C0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child162=(($161+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx163=(($child162)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx163)>>2)]=$160; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $163=$C0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent164=(($163+24)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent164)>>2)]=$162; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 61; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 60: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 61: 
      __label__ = 62; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 62: 
      var $164=$TP; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child168=(($164+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx169=(($child168+4)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $165=HEAP32[(($arrayidx169)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C1=$165; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp170=(($165)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp170) { __label__ = 63; break; } else { __label__ = 67; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 63: 
      var $166=$C1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $167=$166; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$m_addr; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr173=(($168+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=HEAP32[(($least_addr173)>>2)]; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp174=(($167)>>>0) >= (($169)>>>0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv175=(($cmp174)&1); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval176=(($conv175)==(1)); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool177=(($expval176)|0)!=0; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool177) { __label__ = 64; break; } else { __label__ = 65; break; } //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 64: 
      var $170=$C1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $171=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child179=(($171+16)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx180=(($child179+4)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx180)>>2)]=$170; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $172=$R; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$C1; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent181=(($173+24)|0); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent181)>>2)]=$172; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 66; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 65: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 66: 
      __label__ = 67; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 67: 
      __label__ = 69; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 68: 
      _abort(); //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 69: 
      __label__ = 70; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 70: 
      __label__ = 71; break; //@line 3806 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 71: 
      __label__ = 72; break;
    case 72: 
      var $174=$oldfirst; //@line 3807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$174; //@line 3807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=$nsize; //@line 3807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr190=(($175+$176)|0); //@line 3807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $177=$add_ptr190; //@line 3807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldfirst=$177; //@line 3807 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$nsize; //@line 3808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$qsize; //@line 3808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add191=((($179)+($178))|0); //@line 3808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $qsize=$add191; //@line 3808 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 73; break; //@line 3809 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 73: 
      var $180=$oldfirst; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head193=(($180+4)|0); //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181=HEAP32[(($head193)>>2)]; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and194=$181 & -2; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head193)>>2)]=$and194; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $182=$qsize; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or195=$182 | 1; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$q; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head196=(($183+4)|0); //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head196)>>2)]=$or195; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$qsize; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$q; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$185; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$qsize; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr197=(($186+$187)|0); //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$add_ptr197; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot198=(($188)|0); //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot198)>>2)]=$184; //@line 3810 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$qsize; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr199=$189 >>> 3; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp200=(($shr199)>>>0) < 32; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp200) { __label__ = 74; break; } else { __label__ = 81; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 74: 
      var $190=$qsize; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr204=$190 >>> 3; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I203=$shr204; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $191=$I203; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl206=$191 << 1; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $192=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins207=(($192+40)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx208=(($smallbins207+($shl206<<2))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $193=$arrayidx208; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $194=$193; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B205=$194; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $195=$B205; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F209=$195; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $196=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap210=(($196)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $197=HEAP32[(($smallmap210)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $198=$I203; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl211=1 << $198; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and212=$197 & $shl211; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool213=(($and212)|0)!=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool213) { __label__ = 76; break; } else { __label__ = 75; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 75: 
      var $199=$I203; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl215=1 << $199; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $200=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap216=(($200)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $201=HEAP32[(($smallmap216)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or217=$201 | $shl215; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap216)>>2)]=$or217; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 80; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 76: 
      var $202=$B205; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd219=(($202+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $203=HEAP32[(($fd219)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $204=$203; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $205=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr220=(($205+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $206=HEAP32[(($least_addr220)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp221=(($204)>>>0) >= (($206)>>>0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv222=(($cmp221)&1); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval223=(($conv222)==(1)); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool224=(($expval223)|0)!=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool224) { __label__ = 77; break; } else { __label__ = 78; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 77: 
      var $207=$B205; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd226=(($207+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $208=HEAP32[(($fd226)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F209=$208; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 79; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 78: 
      _abort(); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 79: 
      __label__ = 80; break;
    case 80: 
      var $209=$q; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $210=$B205; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd230=(($210+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd230)>>2)]=$209; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $211=$q; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $212=$F209; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk231=(($212+12)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk231)>>2)]=$211; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $213=$F209; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $214=$q; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd232=(($214+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd232)>>2)]=$213; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $215=$B205; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $216=$q; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk233=(($216+12)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk233)>>2)]=$215; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 108; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 81: 
      var $217=$q; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $218=$217; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $TP235=$218; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $219=$qsize; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr238=$219 >>> 8; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $X=$shr238; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $220=$X; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp239=(($220)|0)==0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp239) { __label__ = 82; break; } else { __label__ = 83; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 82: 
      $I237=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 87; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 83: 
      var $221=$X; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp243=(($221)>>>0) > 65535; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp243) { __label__ = 84; break; } else { __label__ = 85; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 84: 
      $I237=31; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 85: 
      var $222=$X; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$222; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $223=$Y; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub247=((($223)-(256))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr248=$sub247 >>> 16; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and249=$shr248 & 8; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$and249; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $224=$N; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $225=$Y; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl250=$225 << $224; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl250; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub251=((($shl250)-(4096))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr252=$sub251 >>> 16; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and253=$shr252 & 4; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and253; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $226=$K; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $227=$N; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add254=((($227)+($226))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add254; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $228=$K; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $229=$Y; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl255=$229 << $228; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl255; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub256=((($shl255)-(16384))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr257=$sub256 >>> 16; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and258=$shr257 & 2; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and258; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $230=$N; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add259=((($230)+($and258))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add259; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $231=$N; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub260=(((14)-($231))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $232=$K; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $233=$Y; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl261=$233 << $232; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl261; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr262=$shl261 >>> 15; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add263=((($sub260)+($shr262))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$add263; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $234=$K; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl264=$234 << 1; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $235=$qsize; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $236=$K; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add265=((($236)+(7))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr266=$235 >>> (($add265)>>>0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and267=$shr266 & 1; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add268=((($shl264)+($and267))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I237=$add268; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 86; break;
    case 86: 
      __label__ = 87; break;
    case 87: 
      var $237=$I237; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $238=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins271=(($238+304)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx272=(($treebins271+($237<<2))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H236=$arrayidx272; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $239=$I237; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $240=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index273=(($240+28)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index273)>>2)]=$239; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $241=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child274=(($241+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx275=(($child274+4)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx275)>>2)]=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $242=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child276=(($242+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx277=(($child276)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx277)>>2)]=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $243=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap278=(($243+4)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $244=HEAP32[(($treemap278)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $245=$I237; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl279=1 << $245; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and280=$244 & $shl279; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool281=(($and280)|0)!=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool281) { __label__ = 89; break; } else { __label__ = 88; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 88: 
      var $246=$I237; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl283=1 << $246; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $247=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap284=(($247+4)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $248=HEAP32[(($treemap284)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or285=$248 | $shl283; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap284)>>2)]=$or285; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $249=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $250=$H236; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($250)>>2)]=$249; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $251=$H236; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $252=$251; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $253=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent286=(($253+24)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent286)>>2)]=$252; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $254=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $255=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk287=(($255+12)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk287)>>2)]=$254; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $256=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd288=(($256+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd288)>>2)]=$254; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 107; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 89: 
      var $257=$H236; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $258=HEAP32[(($257)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$258; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $259=$qsize; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $260=$I237; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp291=(($260)|0)==31; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp291) { __label__ = 90; break; } else { __label__ = 91; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 90: 
      var $cond300 = 0;__label__ = 92; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 91: 
      var $261=$I237; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr295=$261 >>> 1; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add296=((($shr295)+(8))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub297=((($add296)-(2))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub298=(((31)-($sub297))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond300 = $sub298;__label__ = 92; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 92: 
      var $cond300; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl301=$259 << $cond300; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K290=$shl301; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 93; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 93: 
      var $262=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head302=(($262+4)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $263=HEAP32[(($head302)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and303=$263 & -8; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $264=$qsize; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp304=(($and303)|0)!=(($264)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp304) { __label__ = 94; break; } else { __label__ = 100; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 94: 
      var $265=$K290; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr307=$265 >>> 31; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and308=$shr307 & 1; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $266=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child309=(($266+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx310=(($child309+($and308<<2))|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx310; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $267=$K290; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl311=$267 << 1; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K290=$shl311; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $268=$C; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $269=HEAP32[(($268)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp312=(($269)|0)!=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp312) { __label__ = 95; break; } else { __label__ = 96; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 95: 
      var $270=$C; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $271=HEAP32[(($270)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$271; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 99; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 96: 
      var $272=$C; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $273=$272; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $274=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr316=(($274+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $275=HEAP32[(($least_addr316)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp317=(($273)>>>0) >= (($275)>>>0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv318=(($cmp317)&1); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval319=(($conv318)==(1)); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool320=(($expval319)|0)!=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool320) { __label__ = 97; break; } else { __label__ = 98; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 97: 
      var $276=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $277=$C; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($277)>>2)]=$276; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $278=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $279=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent322=(($279+24)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent322)>>2)]=$278; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $280=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $281=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk323=(($281+12)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk323)>>2)]=$280; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $282=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd324=(($282+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd324)>>2)]=$280; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 98: 
      _abort(); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 99: 
      __label__ = 105; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 100: 
      var $283=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd329=(($283+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $284=HEAP32[(($fd329)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F328=$284; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $285=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $286=$285; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $287=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr330=(($287+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $288=HEAP32[(($least_addr330)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp331=(($286)>>>0) >= (($288)>>>0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp331) { __label__ = 101; break; } else { var $293 = 0;__label__ = 102; break; } //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 101: 
      var $289=$F328; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $290=$289; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $291=$m_addr; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr334=(($291+16)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $292=HEAP32[(($least_addr334)>>2)]; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp335=(($290)>>>0) >= (($292)>>>0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $293 = $cmp335;__label__ = 102; break;
    case 102: 
      var $293;
      var $land_ext338=(($293)&1);
      var $expval339=(($land_ext338)==(1));
      var $tobool340=(($expval339)|0)!=0;
      if ($tobool340) { __label__ = 103; break; } else { __label__ = 104; break; }
    case 103: 
      var $294=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $295=$F328; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk342=(($295+12)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk342)>>2)]=$294; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $296=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd343=(($296+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd343)>>2)]=$294; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $297=$F328; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $298=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd344=(($298+8)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd344)>>2)]=$297; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $299=$T; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $300=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk345=(($300+12)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk345)>>2)]=$299; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $301=$TP235; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent346=(($301+24)|0); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent346)>>2)]=0; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 106; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 104: 
      _abort(); //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 105: 
      __label__ = 93; break; //@line 3811 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 106: 
      __label__ = 107; break;
    case 107: 
      __label__ = 108; break;
    case 108: 
      __label__ = 109; break;
    case 109: 
      __label__ = 110; break;
    case 110: 
      var $302=$p; //@line 3816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $303=$302; //@line 3816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr353=(($303+8)|0); //@line 3816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      ;
      return $add_ptr353; //@line 3816 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_prepend_alloc["X"]=1;

function _add_segment($m, $tbase, $tsize, $mmapped) {
  ;
  var __label__;
  __label__ = 2; 
  while(1) switch(__label__) {
    case 2: 
      var $m_addr;
      var $tbase_addr;
      var $tsize_addr;
      var $mmapped_addr;
      var $old_top;
      var $oldsp;
      var $old_end;
      var $ssize;
      var $rawsp;
      var $offset;
      var $asp;
      var $csp;
      var $sp;
      var $ss;
      var $tnext;
      var $p;
      var $nfences;
      var $nextp;
      var $q;
      var $psize;
      var $tn;
      var $I;
      var $B;
      var $F;
      var $TP;
      var $H;
      var $I57;
      var $X;
      var $Y;
      var $N;
      var $K;
      var $T;
      var $K105;
      var $C;
      var $F144;
      $m_addr=$m;
      $tbase_addr=$tbase;
      $tsize_addr=$tsize;
      $mmapped_addr=$mmapped;
      var $0=$m_addr; //@line 3822 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $top=(($0+24)|0); //@line 3822 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $1=HEAP32[(($top)>>2)]; //@line 3822 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $2=$1; //@line 3822 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $old_top=$2; //@line 3822 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $3=$m_addr; //@line 3823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $4=$old_top; //@line 3823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $call=_segment_holding($3, $4); //@line 3823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $oldsp=$call; //@line 3823 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $5=$oldsp; //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base=(($5)|0); //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $6=HEAP32[(($base)>>2)]; //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $7=$oldsp; //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size=(($7+4)|0); //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $8=HEAP32[(($size)>>2)]; //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr=(($6+$8)|0); //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $old_end=$add_ptr; //@line 3824 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $ssize=24; //@line 3825 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $9=$old_end; //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $10=$ssize; //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add=((($10)+(16))|0); //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add1=((($add)+(7))|0); //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $idx_neg=(((-$add1))|0); //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr2=(($9+$idx_neg)|0); //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $rawsp=$add_ptr2; //@line 3826 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $11=$rawsp; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr3=(($11+8)|0); //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $12=$add_ptr3; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and=$12 & 7; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp=(($and)|0)==0; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp) { __label__ = 3; break; } else { __label__ = 4; break; } //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 3: 
      var $cond = 0;__label__ = 5; break; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 4: 
      var $13=$rawsp; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr4=(($13+8)|0); //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $14=$add_ptr4; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and5=$14 & 7; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub=(((8)-($and5))|0); //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and6=$sub & 7; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond = $and6;__label__ = 5; break; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 5: 
      var $cond; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $offset=$cond; //@line 3827 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $15=$rawsp; //@line 3828 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $16=$offset; //@line 3828 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr7=(($15+$16)|0); //@line 3828 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $asp=$add_ptr7; //@line 3828 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $17=$asp; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $18=$old_top; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr8=(($18+16)|0); //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp9=(($17)>>>0) < (($add_ptr8)>>>0); //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp9) { __label__ = 6; break; } else { __label__ = 7; break; } //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 6: 
      var $19=$old_top; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond13 = $19;__label__ = 8; break; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 7: 
      var $20=$asp; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond13 = $20;__label__ = 8; break; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 8: 
      var $cond13; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $csp=$cond13; //@line 3829 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $21=$csp; //@line 3830 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $22=$21; //@line 3830 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $sp=$22; //@line 3830 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $23=$sp; //@line 3831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $24=$23; //@line 3831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr14=(($24+8)|0); //@line 3831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $25=$add_ptr14; //@line 3831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $ss=$25; //@line 3831 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $26=$sp; //@line 3832 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $27=$26; //@line 3832 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $28=$ssize; //@line 3832 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr15=(($27+$28)|0); //@line 3832 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $29=$add_ptr15; //@line 3832 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tnext=$29; //@line 3832 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $30=$tnext; //@line 3833 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$30; //@line 3833 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nfences=0; //@line 3834 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $31=$m_addr; //@line 3837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $32=$tbase_addr; //@line 3837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $33=$32; //@line 3837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $34=$tsize_addr; //@line 3837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub16=((($34)-(40))|0); //@line 3837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      _init_top($31, $33, $sub16); //@line 3837 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $35=$ssize; //@line 3841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or=$35 | 1; //@line 3841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or17=$or | 2; //@line 3841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $36=$sp; //@line 3841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head=(($36+4)|0); //@line 3841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head)>>2)]=$or17; //@line 3841 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $37=$ss; //@line 3842 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $38=$m_addr; //@line 3842 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg=(($38+444)|0); //@line 3842 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $39=$37; //@line 3842 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $40=$seg; //@line 3842 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      assert(16 % 1 === 0, 'memcpy given ' + 16 + ' bytes to copy. Problem with quantum=1 corrections perhaps?');HEAP32[(($39)>>2)]=HEAP32[(($40)>>2)];HEAP32[((($39)+(4))>>2)]=HEAP32[((($40)+(4))>>2)];HEAP32[((($39)+(8))>>2)]=HEAP32[((($40)+(8))>>2)];HEAP32[((($39)+(12))>>2)]=HEAP32[((($40)+(12))>>2)]; //@line 3842 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $41=$tbase_addr; //@line 3843 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $42=$m_addr; //@line 3843 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg18=(($42+444)|0); //@line 3843 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $base19=(($seg18)|0); //@line 3843 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($base19)>>2)]=$41; //@line 3843 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $43=$tsize_addr; //@line 3844 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $44=$m_addr; //@line 3844 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg20=(($44+444)|0); //@line 3844 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $size21=(($seg20+4)|0); //@line 3844 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($size21)>>2)]=$43; //@line 3844 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $45=$mmapped_addr; //@line 3845 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $46=$m_addr; //@line 3845 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg22=(($46+444)|0); //@line 3845 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sflags=(($seg22+12)|0); //@line 3845 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($sflags)>>2)]=$45; //@line 3845 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $47=$ss; //@line 3846 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $48=$m_addr; //@line 3846 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $seg23=(($48+444)|0); //@line 3846 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $next=(($seg23+8)|0); //@line 3846 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($next)>>2)]=$47; //@line 3846 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 9; break; //@line 3849 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 9: 
      var $49=$p; //@line 3850 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $50=$49; //@line 3850 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr24=(($50+4)|0); //@line 3850 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $51=$add_ptr24; //@line 3850 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nextp=$51; //@line 3850 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $52=$p; //@line 3851 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head25=(($52+4)|0); //@line 3851 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head25)>>2)]=7; //@line 3851 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $53=$nfences; //@line 3852 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $inc=((($53)+(1))|0); //@line 3852 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $nfences=$inc; //@line 3852 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $54=$nextp; //@line 3853 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head26=(($54+4)|0); //@line 3853 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $55=$head26; //@line 3853 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $56=$old_end; //@line 3853 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp27=(($55)>>>0) < (($56)>>>0); //@line 3853 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp27) { __label__ = 10; break; } else { __label__ = 11; break; } //@line 3853 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 10: 
      var $57=$nextp; //@line 3854 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $p=$57; //@line 3854 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 12; break; //@line 3854 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 11: 
      __label__ = 13; break; //@line 3856 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 12: 
      __label__ = 9; break; //@line 3857 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 13: 
      var $58=$csp; //@line 3861 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $59=$old_top; //@line 3861 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp28=(($58)|0)!=(($59)|0); //@line 3861 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp28) { __label__ = 14; break; } else { __label__ = 50; break; } //@line 3861 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 14: 
      var $60=$old_top; //@line 3862 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $61=$60; //@line 3862 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $q=$61; //@line 3862 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $62=$csp; //@line 3863 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $63=$old_top; //@line 3863 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_lhs_cast=$62; //@line 3863 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_rhs_cast=$63; //@line 3863 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub_ptr_sub=((($sub_ptr_lhs_cast)-($sub_ptr_rhs_cast))|0); //@line 3863 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $psize=$sub_ptr_sub; //@line 3863 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $64=$q; //@line 3864 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $65=$64; //@line 3864 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $66=$psize; //@line 3864 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr30=(($65+$66)|0); //@line 3864 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $67=$add_ptr30; //@line 3864 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $tn=$67; //@line 3864 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $68=$tn; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head31=(($68+4)|0); //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $69=HEAP32[(($head31)>>2)]; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and32=$69 & -2; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head31)>>2)]=$and32; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $70=$psize; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or33=$70 | 1; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $71=$q; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head34=(($71+4)|0); //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($head34)>>2)]=$or33; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $72=$psize; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $73=$q; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $74=$73; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $75=$psize; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add_ptr35=(($74+$75)|0); //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $76=$add_ptr35; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $prev_foot=(($76)|0); //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($prev_foot)>>2)]=$72; //@line 3865 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $77=$psize; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr=$77 >>> 3; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp36=(($shr)>>>0) < 32; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp36) { __label__ = 15; break; } else { __label__ = 22; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 15: 
      var $78=$psize; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr38=$78 >>> 3; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I=$shr38; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $79=$I; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl=$79 << 1; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $80=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallbins=(($80+40)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx=(($smallbins+($shl<<2))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $81=$arrayidx; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $82=$81; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $B=$82; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $83=$B; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$83; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $84=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap=(($84)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $85=HEAP32[(($smallmap)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $86=$I; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl39=1 << $86; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and40=$85 & $shl39; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool=(($and40)|0)!=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool) { __label__ = 17; break; } else { __label__ = 16; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 16: 
      var $87=$I; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl42=1 << $87; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $88=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $smallmap43=(($88)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $89=HEAP32[(($smallmap43)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or44=$89 | $shl42; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($smallmap43)>>2)]=$or44; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 21; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 17: 
      var $90=$B; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd=(($90+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $91=HEAP32[(($fd)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $92=$91; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $93=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr=(($93+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $94=HEAP32[(($least_addr)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp46=(($92)>>>0) >= (($94)>>>0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv=(($cmp46)&1); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval=(($conv)==(1)); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool47=(($expval)|0)!=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool47) { __label__ = 18; break; } else { __label__ = 19; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 18: 
      var $95=$B; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd49=(($95+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $96=HEAP32[(($fd49)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F=$96; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 20; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 19: 
      _abort(); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 20: 
      __label__ = 21; break;
    case 21: 
      var $97=$q; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $98=$B; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd53=(($98+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd53)>>2)]=$97; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $99=$q; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $100=$F; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk=(($100+12)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk)>>2)]=$99; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $101=$F; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $102=$q; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd54=(($102+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd54)>>2)]=$101; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $103=$B; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $104=$q; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk55=(($104+12)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk55)>>2)]=$103; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 49; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 22: 
      var $105=$q; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $106=$105; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $TP=$106; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $107=$psize; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr58=$107 >>> 8; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $X=$shr58; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $108=$X; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp59=(($108)|0)==0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp59) { __label__ = 23; break; } else { __label__ = 24; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 23: 
      $I57=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 28; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 24: 
      var $109=$X; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp63=(($109)>>>0) > 65535; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp63) { __label__ = 25; break; } else { __label__ = 26; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 25: 
      $I57=31; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 26: 
      var $110=$X; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$110; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $111=$Y; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub67=((($111)-(256))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr68=$sub67 >>> 16; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and69=$shr68 & 8; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$and69; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $112=$N; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $113=$Y; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl70=$113 << $112; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl70; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub71=((($shl70)-(4096))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr72=$sub71 >>> 16; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and73=$shr72 & 4; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and73; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $114=$K; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $115=$N; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add74=((($115)+($114))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add74; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $116=$K; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $117=$Y; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl75=$117 << $116; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl75; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub76=((($shl75)-(16384))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr77=$sub76 >>> 16; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and78=$shr77 & 2; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$and78; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $118=$N; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add79=((($118)+($and78))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $N=$add79; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $119=$N; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub80=(((14)-($119))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $120=$K; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $121=$Y; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl81=$121 << $120; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $Y=$shl81; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr82=$shl81 >>> 15; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add83=((($sub80)+($shr82))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K=$add83; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $122=$K; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl84=$122 << 1; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $123=$psize; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $124=$K; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add85=((($124)+(7))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr86=$123 >>> (($add85)>>>0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and87=$shr86 & 1; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add88=((($shl84)+($and87))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $I57=$add88; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 27; break;
    case 27: 
      __label__ = 28; break;
    case 28: 
      var $125=$I57; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $126=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treebins=(($126+304)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx91=(($treebins+($125<<2))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $H=$arrayidx91; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $127=$I57; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $128=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $index=(($128+28)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($index)>>2)]=$127; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $129=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child=(($129+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx92=(($child+4)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx92)>>2)]=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $130=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child93=(($130+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx94=(($child93)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($arrayidx94)>>2)]=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $131=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap=(($131+4)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $132=HEAP32[(($treemap)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $133=$I57; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl95=1 << $133; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and96=$132 & $shl95; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool97=(($and96)|0)!=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool97) { __label__ = 30; break; } else { __label__ = 29; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 29: 
      var $134=$I57; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl99=1 << $134; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $135=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $treemap100=(($135+4)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $136=HEAP32[(($treemap100)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $or101=$136 | $shl99; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($treemap100)>>2)]=$or101; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $137=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $138=$H; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($138)>>2)]=$137; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $139=$H; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $140=$139; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $141=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent=(($141+24)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent)>>2)]=$140; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $142=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $143=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk102=(($143+12)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk102)>>2)]=$142; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $144=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd103=(($144+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd103)>>2)]=$142; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 48; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 30: 
      var $145=$H; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $146=HEAP32[(($145)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$146; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $147=$psize; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $148=$I57; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp106=(($148)|0)==31; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp106) { __label__ = 31; break; } else { __label__ = 32; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 31: 
      var $cond115 = 0;__label__ = 33; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 32: 
      var $149=$I57; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr110=$149 >>> 1; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $add111=((($shr110)+(8))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub112=((($add111)-(2))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $sub113=(((31)-($sub112))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cond115 = $sub113;__label__ = 33; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 33: 
      var $cond115; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl116=$147 << $cond115; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K105=$shl116; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 34; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 34: 
      var $150=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $head118=(($150+4)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $151=HEAP32[(($head118)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and119=$151 & -8; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $152=$psize; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp120=(($and119)|0)!=(($152)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp120) { __label__ = 35; break; } else { __label__ = 41; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 35: 
      var $153=$K105; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shr123=$153 >>> 31; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $and124=$shr123 & 1; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $154=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $child125=(($154+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $arrayidx126=(($child125+($and124<<2))|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $C=$arrayidx126; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $155=$K105; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $shl127=$155 << 1; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $K105=$shl127; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $156=$C; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $157=HEAP32[(($156)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp128=(($157)|0)!=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp128) { __label__ = 36; break; } else { __label__ = 37; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 36: 
      var $158=$C; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $159=HEAP32[(($158)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $T=$159; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 40; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 37: 
      var $160=$C; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $161=$160; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $162=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr132=(($162+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $163=HEAP32[(($least_addr132)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp133=(($161)>>>0) >= (($163)>>>0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $conv134=(($cmp133)&1); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $expval135=(($conv134)==(1)); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $tobool136=(($expval135)|0)!=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($tobool136) { __label__ = 38; break; } else { __label__ = 39; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 38: 
      var $164=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $165=$C; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($165)>>2)]=$164; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $166=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $167=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent138=(($167+24)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent138)>>2)]=$166; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $168=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $169=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk139=(($169+12)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk139)>>2)]=$168; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $170=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd140=(($170+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd140)>>2)]=$168; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 39: 
      _abort(); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 40: 
      __label__ = 46; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 41: 
      var $171=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd145=(($171+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $172=HEAP32[(($fd145)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      $F144=$172; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $173=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $174=$173; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $175=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr146=(($175+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $176=HEAP32[(($least_addr146)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp147=(($174)>>>0) >= (($176)>>>0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      if ($cmp147) { __label__ = 42; break; } else { var $181 = 0;__label__ = 43; break; } //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 42: 
      var $177=$F144; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $178=$177; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $179=$m_addr; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $least_addr149=(($179+16)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $180=HEAP32[(($least_addr149)>>2)]; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $cmp150=(($178)>>>0) >= (($180)>>>0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $181 = $cmp150;__label__ = 43; break;
    case 43: 
      var $181;
      var $land_ext=(($181)&1);
      var $expval152=(($land_ext)==(1));
      var $tobool153=(($expval152)|0)!=0;
      if ($tobool153) { __label__ = 44; break; } else { __label__ = 45; break; }
    case 44: 
      var $182=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $183=$F144; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk155=(($183+12)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk155)>>2)]=$182; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $184=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd156=(($184+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd156)>>2)]=$182; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $185=$F144; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $186=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $fd157=(($186+8)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($fd157)>>2)]=$185; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $187=$T; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $188=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $bk158=(($188+12)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($bk158)>>2)]=$187; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $189=$TP; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      var $parent159=(($189+24)|0); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      HEAP32[(($parent159)>>2)]=0; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      __label__ = 47; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 45: 
      _abort(); //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
      throw "Reached an unreachable!" //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 46: 
      __label__ = 34; break; //@line 3866 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 47: 
      __label__ = 48; break;
    case 48: 
      __label__ = 49; break;
    case 49: 
      __label__ = 50; break; //@line 3867 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    case 50: 
      ;
      return; //@line 3870 "/home/gordon/sources/emscripten/system/lib/dlmalloc.c"
    default: assert(0, "bad label: " + __label__);
  }
}
_add_segment["X"]=1;

// Note: Some Emscripten settings will significantly limit the speed of the generated code.
// Note: Some Emscripten settings may limit the speed of the generated code.
// Warning: printing of i64 values may be slightly rounded! No deep i64 math used, so precise i64 code not included
var i64Math = null;

  
  function __formatString(format, varargs) {
      var textIndex = format;
      var argIndex = 0;
      function getNextArg(type) {
        // NOTE: Explicitly ignoring type safety. Otherwise this fails:
        //       int x = 4; printf("%c\n", (char)x);
        var ret;
        if (type === 'double') {
          ret = (tempDoubleI32[0]=HEAP32[(((varargs)+(argIndex))>>2)],tempDoubleI32[1]=HEAP32[(((varargs)+((argIndex)+(4)))>>2)],tempDoubleF64[0]);
        } else if (type == 'i64') {
          ret = [HEAP32[(((varargs)+(argIndex))>>2)],
                 HEAP32[(((varargs)+(argIndex+4))>>2)]];
        } else {
          type = 'i32'; // varargs are always i32, i64, or double
          ret = HEAP32[(((varargs)+(argIndex))>>2)];
        }
        argIndex += Runtime.getNativeFieldSize(type);
        return ret;
      }
  
      var ret = [];
      var curr, next, currArg;
      while(1) {
        var startTextIndex = textIndex;
        curr = HEAP8[(textIndex)];
        if (curr === 0) break;
        next = HEAP8[(textIndex+1)];
        if (curr == '%'.charCodeAt(0)) {
          // Handle flags.
          var flagAlwaysSigned = false;
          var flagLeftAlign = false;
          var flagAlternative = false;
          var flagZeroPad = false;
          flagsLoop: while (1) {
            switch (next) {
              case '+'.charCodeAt(0):
                flagAlwaysSigned = true;
                break;
              case '-'.charCodeAt(0):
                flagLeftAlign = true;
                break;
              case '#'.charCodeAt(0):
                flagAlternative = true;
                break;
              case '0'.charCodeAt(0):
                if (flagZeroPad) {
                  break flagsLoop;
                } else {
                  flagZeroPad = true;
                  break;
                }
              default:
                break flagsLoop;
            }
            textIndex++;
            next = HEAP8[(textIndex+1)];
          }
  
          // Handle width.
          var width = 0;
          if (next == '*'.charCodeAt(0)) {
            width = getNextArg('i32');
            textIndex++;
            next = HEAP8[(textIndex+1)];
          } else {
            while (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) {
              width = width * 10 + (next - '0'.charCodeAt(0));
              textIndex++;
              next = HEAP8[(textIndex+1)];
            }
          }
  
          // Handle precision.
          var precisionSet = false;
          if (next == '.'.charCodeAt(0)) {
            var precision = 0;
            precisionSet = true;
            textIndex++;
            next = HEAP8[(textIndex+1)];
            if (next == '*'.charCodeAt(0)) {
              precision = getNextArg('i32');
              textIndex++;
            } else {
              while(1) {
                var precisionChr = HEAP8[(textIndex+1)];
                if (precisionChr < '0'.charCodeAt(0) ||
                    precisionChr > '9'.charCodeAt(0)) break;
                precision = precision * 10 + (precisionChr - '0'.charCodeAt(0));
                textIndex++;
              }
            }
            next = HEAP8[(textIndex+1)];
          } else {
            var precision = 6; // Standard default.
          }
  
          // Handle integer sizes. WARNING: These assume a 32-bit architecture!
          var argSize;
          switch (String.fromCharCode(next)) {
            case 'h':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'h'.charCodeAt(0)) {
                textIndex++;
                argSize = 1; // char (actually i32 in varargs)
              } else {
                argSize = 2; // short (actually i32 in varargs)
              }
              break;
            case 'l':
              var nextNext = HEAP8[(textIndex+2)];
              if (nextNext == 'l'.charCodeAt(0)) {
                textIndex++;
                argSize = 8; // long long
              } else {
                argSize = 4; // long
              }
              break;
            case 'L': // long long
            case 'q': // int64_t
            case 'j': // intmax_t
              argSize = 8;
              break;
            case 'z': // size_t
            case 't': // ptrdiff_t
            case 'I': // signed ptrdiff_t or unsigned size_t
              argSize = 4;
              break;
            default:
              argSize = null;
          }
          if (argSize) textIndex++;
          next = HEAP8[(textIndex+1)];
  
          // Handle type specifier.
          if (['d', 'i', 'u', 'o', 'x', 'X', 'p'].indexOf(String.fromCharCode(next)) != -1) {
            // Integer.
            var signed = next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0);
            argSize = argSize || 4;
            var currArg = getNextArg('i' + (argSize * 8));
            var origArg = currArg;
            var argText;
            // Flatten i64-1 [low, high] into a (slightly rounded) double
            if (argSize == 8) {
              currArg = Runtime.makeBigInt(currArg[0], currArg[1], next == 'u'.charCodeAt(0));
            }
            // Truncate to requested size.
            if (argSize <= 4) {
              var limit = Math.pow(256, argSize) - 1;
              currArg = (signed ? reSign : unSign)(currArg & limit, argSize * 8);
            }
            // Format the number.
            var currAbsArg = Math.abs(currArg);
            var prefix = '';
            if (next == 'd'.charCodeAt(0) || next == 'i'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1]); else
              argText = reSign(currArg, 8 * argSize, 1).toString(10);
            } else if (next == 'u'.charCodeAt(0)) {
              if (argSize == 8 && i64Math) argText = i64Math.stringify(origArg[0], origArg[1], true); else
              argText = unSign(currArg, 8 * argSize, 1).toString(10);
              currArg = Math.abs(currArg);
            } else if (next == 'o'.charCodeAt(0)) {
              argText = (flagAlternative ? '0' : '') + currAbsArg.toString(8);
            } else if (next == 'x'.charCodeAt(0) || next == 'X'.charCodeAt(0)) {
              prefix = flagAlternative ? '0x' : '';
              if (currArg < 0) {
                // Represent negative numbers in hex as 2's complement.
                currArg = -currArg;
                argText = (currAbsArg - 1).toString(16);
                var buffer = [];
                for (var i = 0; i < argText.length; i++) {
                  buffer.push((0xF - parseInt(argText[i], 16)).toString(16));
                }
                argText = buffer.join('');
                while (argText.length < argSize * 2) argText = 'f' + argText;
              } else {
                argText = currAbsArg.toString(16);
              }
              if (next == 'X'.charCodeAt(0)) {
                prefix = prefix.toUpperCase();
                argText = argText.toUpperCase();
              }
            } else if (next == 'p'.charCodeAt(0)) {
              if (currAbsArg === 0) {
                argText = '(nil)';
              } else {
                prefix = '0x';
                argText = currAbsArg.toString(16);
              }
            }
            if (precisionSet) {
              while (argText.length < precision) {
                argText = '0' + argText;
              }
            }
  
            // Add sign if needed
            if (flagAlwaysSigned) {
              if (currArg < 0) {
                prefix = '-' + prefix;
              } else {
                prefix = '+' + prefix;
              }
            }
  
            // Add padding.
            while (prefix.length + argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad) {
                  argText = '0' + argText;
                } else {
                  prefix = ' ' + prefix;
                }
              }
            }
  
            // Insert the result into the buffer.
            argText = prefix + argText;
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (['f', 'F', 'e', 'E', 'g', 'G'].indexOf(String.fromCharCode(next)) != -1) {
            // Float.
            var currArg = getNextArg('double');
            var argText;
  
            if (isNaN(currArg)) {
              argText = 'nan';
              flagZeroPad = false;
            } else if (!isFinite(currArg)) {
              argText = (currArg < 0 ? '-' : '') + 'inf';
              flagZeroPad = false;
            } else {
              var isGeneral = false;
              var effectivePrecision = Math.min(precision, 20);
  
              // Convert g/G to f/F or e/E, as per:
              // http://pubs.opengroup.org/onlinepubs/9699919799/functions/printf.html
              if (next == 'g'.charCodeAt(0) || next == 'G'.charCodeAt(0)) {
                isGeneral = true;
                precision = precision || 1;
                var exponent = parseInt(currArg.toExponential(effectivePrecision).split('e')[1], 10);
                if (precision > exponent && exponent >= -4) {
                  next = ((next == 'g'.charCodeAt(0)) ? 'f' : 'F').charCodeAt(0);
                  precision -= exponent + 1;
                } else {
                  next = ((next == 'g'.charCodeAt(0)) ? 'e' : 'E').charCodeAt(0);
                  precision--;
                }
                effectivePrecision = Math.min(precision, 20);
              }
  
              if (next == 'e'.charCodeAt(0) || next == 'E'.charCodeAt(0)) {
                argText = currArg.toExponential(effectivePrecision);
                // Make sure the exponent has at least 2 digits.
                if (/[eE][-+]\d$/.test(argText)) {
                  argText = argText.slice(0, -1) + '0' + argText.slice(-1);
                }
              } else if (next == 'f'.charCodeAt(0) || next == 'F'.charCodeAt(0)) {
                argText = currArg.toFixed(effectivePrecision);
              }
  
              var parts = argText.split('e');
              if (isGeneral && !flagAlternative) {
                // Discard trailing zeros and periods.
                while (parts[0].length > 1 && parts[0].indexOf('.') != -1 &&
                       (parts[0].slice(-1) == '0' || parts[0].slice(-1) == '.')) {
                  parts[0] = parts[0].slice(0, -1);
                }
              } else {
                // Make sure we have a period in alternative mode.
                if (flagAlternative && argText.indexOf('.') == -1) parts[0] += '.';
                // Zero pad until required precision.
                while (precision > effectivePrecision++) parts[0] += '0';
              }
              argText = parts[0] + (parts.length > 1 ? 'e' + parts[1] : '');
  
              // Capitalize 'E' if needed.
              if (next == 'E'.charCodeAt(0)) argText = argText.toUpperCase();
  
              // Add sign.
              if (flagAlwaysSigned && currArg >= 0) {
                argText = '+' + argText;
              }
            }
  
            // Add padding.
            while (argText.length < width) {
              if (flagLeftAlign) {
                argText += ' ';
              } else {
                if (flagZeroPad && (argText[0] == '-' || argText[0] == '+')) {
                  argText = argText[0] + '0' + argText.slice(1);
                } else {
                  argText = (flagZeroPad ? '0' : ' ') + argText;
                }
              }
            }
  
            // Adjust case.
            if (next < 'a'.charCodeAt(0)) argText = argText.toUpperCase();
  
            // Insert the result into the buffer.
            argText.split('').forEach(function(chr) {
              ret.push(chr.charCodeAt(0));
            });
          } else if (next == 's'.charCodeAt(0)) {
            // String.
            var arg = getNextArg('i8*') || nullString;
            var argLength = String_len(arg);
            if (precisionSet) argLength = Math.min(argLength, precision);
            if (!flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
            for (var i = 0; i < argLength; i++) {
              ret.push(HEAPU8[(arg++)]);
            }
            if (flagLeftAlign) {
              while (argLength < width--) {
                ret.push(' '.charCodeAt(0));
              }
            }
          } else if (next == 'c'.charCodeAt(0)) {
            // Character.
            if (flagLeftAlign) ret.push(getNextArg('i8'));
            while (--width > 0) {
              ret.push(' '.charCodeAt(0));
            }
            if (!flagLeftAlign) ret.push(getNextArg('i8'));
          } else if (next == 'n'.charCodeAt(0)) {
            // Write the length written so far to the next parameter.
            var ptr = getNextArg('i32*');
            HEAP32[((ptr)>>2)]=ret.length
          } else if (next == '%'.charCodeAt(0)) {
            // Literal percent sign.
            ret.push(curr);
          } else {
            // Unknown specifiers remain untouched.
            for (var i = startTextIndex; i < textIndex + 2; i++) {
              ret.push(HEAP8[(i)]);
            }
          }
          textIndex += 2;
          // TODO: Support a/A (hex float) and m (last error) specifiers.
          // TODO: Support %1${specifier} for arg selection.
        } else {
          ret.push(curr);
          textIndex += 1;
        }
      }
      return ret;
    }function _snprintf(s, n, format, varargs) {
      // int snprintf(char *restrict s, size_t n, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var limit = (n === undefined) ? result.length
                                    : Math.min(result.length, n - 1);
      for (var i = 0; i < limit; i++) {
        HEAP8[((s)+(i))]=result[i];
      }
      HEAP8[((s)+(i))]=0;
      return result.length;
    }

  function _emscripten_run_script(ptr) {
      eval(Pointer_stringify(ptr));
    }

  
  
  var ERRNO_CODES={E2BIG:7,EACCES:13,EADDRINUSE:98,EADDRNOTAVAIL:99,EAFNOSUPPORT:97,EAGAIN:11,EALREADY:114,EBADF:9,EBADMSG:74,EBUSY:16,ECANCELED:125,ECHILD:10,ECONNABORTED:103,ECONNREFUSED:111,ECONNRESET:104,EDEADLK:35,EDESTADDRREQ:89,EDOM:33,EDQUOT:122,EEXIST:17,EFAULT:14,EFBIG:27,EHOSTUNREACH:113,EIDRM:43,EILSEQ:84,EINPROGRESS:115,EINTR:4,EINVAL:22,EIO:5,EISCONN:106,EISDIR:21,ELOOP:40,EMFILE:24,EMLINK:31,EMSGSIZE:90,EMULTIHOP:72,ENAMETOOLONG:36,ENETDOWN:100,ENETRESET:102,ENETUNREACH:101,ENFILE:23,ENOBUFS:105,ENODATA:61,ENODEV:19,ENOENT:2,ENOEXEC:8,ENOLCK:37,ENOLINK:67,ENOMEM:12,ENOMSG:42,ENOPROTOOPT:92,ENOSPC:28,ENOSR:63,ENOSTR:60,ENOSYS:38,ENOTCONN:107,ENOTDIR:20,ENOTEMPTY:39,ENOTRECOVERABLE:131,ENOTSOCK:88,ENOTSUP:95,ENOTTY:25,ENXIO:6,EOVERFLOW:75,EOWNERDEAD:130,EPERM:1,EPIPE:32,EPROTO:71,EPROTONOSUPPORT:93,EPROTOTYPE:91,ERANGE:34,EROFS:30,ESPIPE:29,ESRCH:3,ESTALE:116,ETIME:62,ETIMEDOUT:110,ETXTBSY:26,EWOULDBLOCK:11,EXDEV:18};
  
  function ___setErrNo(value) {
      // For convenient setting and returning of errno.
      if (!___setErrNo.ret) ___setErrNo.ret = allocate([0], 'i32', ALLOC_STATIC);
      HEAP32[((___setErrNo.ret)>>2)]=value
      return value;
    }
  
  var _stdin=0;
  
  var _stdout=0;
  
  var _stderr=0;
  
  var __impure_ptr=0;var FS={currentPath:"/",nextInode:2,streams:[null],checkStreams:function () {
        for (var i in FS.streams) assert(i >= 0 && i < FS.streams.length); // no keys not in dense span
        for (var i = 0; i < FS.streams.length; i++) assert(typeof FS.streams[i] == 'object'); // no non-null holes in dense span
      },ignorePermissions:true,joinPath:function (parts, forceRelative) {
        var ret = parts[0];
        for (var i = 1; i < parts.length; i++) {
          if (ret[ret.length-1] != '/') ret += '/';
          ret += parts[i];
        }
        if (forceRelative && ret[0] == '/') ret = ret.substr(1);
        return ret;
      },absolutePath:function (relative, base) {
        if (typeof relative !== 'string') return null;
        if (base === undefined) base = FS.currentPath;
        if (relative && relative[0] == '/') base = '';
        var full = base + '/' + relative;
        var parts = full.split('/').reverse();
        var absolute = [''];
        while (parts.length) {
          var part = parts.pop();
          if (part == '' || part == '.') {
            // Nothing.
          } else if (part == '..') {
            if (absolute.length > 1) absolute.pop();
          } else {
            absolute.push(part);
          }
        }
        return absolute.length == 1 ? '/' : absolute.join('/');
      },analyzePath:function (path, dontResolveLastLink, linksVisited) {
        var ret = {
          isRoot: false,
          exists: false,
          error: 0,
          name: null,
          path: null,
          object: null,
          parentExists: false,
          parentPath: null,
          parentObject: null
        };
        path = FS.absolutePath(path);
        if (path == '/') {
          ret.isRoot = true;
          ret.exists = ret.parentExists = true;
          ret.name = '/';
          ret.path = ret.parentPath = '/';
          ret.object = ret.parentObject = FS.root;
        } else if (path !== null) {
          linksVisited = linksVisited || 0;
          path = path.slice(1).split('/');
          var current = FS.root;
          var traversed = [''];
          while (path.length) {
            if (path.length == 1 && current.isFolder) {
              ret.parentExists = true;
              ret.parentPath = traversed.length == 1 ? '/' : traversed.join('/');
              ret.parentObject = current;
              ret.name = path[0];
            }
            var target = path.shift();
            if (!current.isFolder) {
              ret.error = ERRNO_CODES.ENOTDIR;
              break;
            } else if (!current.read) {
              ret.error = ERRNO_CODES.EACCES;
              break;
            } else if (!current.contents.hasOwnProperty(target)) {
              ret.error = ERRNO_CODES.ENOENT;
              break;
            }
            current = current.contents[target];
            if (current.link && !(dontResolveLastLink && path.length == 0)) {
              if (linksVisited > 40) { // Usual Linux SYMLOOP_MAX.
                ret.error = ERRNO_CODES.ELOOP;
                break;
              }
              var link = FS.absolutePath(current.link, traversed.join('/'));
              ret = FS.analyzePath([link].concat(path).join('/'),
                                   dontResolveLastLink, linksVisited + 1);
              return ret;
            }
            traversed.push(target);
            if (path.length == 0) {
              ret.exists = true;
              ret.path = traversed.join('/');
              ret.object = current;
            }
          }
        }
        return ret;
      },findObject:function (path, dontResolveLastLink) {
        FS.ensureRoot();
        var ret = FS.analyzePath(path, dontResolveLastLink);
        if (ret.exists) {
          return ret.object;
        } else {
          ___setErrNo(ret.error);
          return null;
        }
      },createObject:function (parent, name, properties, canRead, canWrite) {
        if (!parent) parent = '/';
        if (typeof parent === 'string') parent = FS.findObject(parent);
  
        if (!parent) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent path must exist.');
        }
        if (!parent.isFolder) {
          ___setErrNo(ERRNO_CODES.ENOTDIR);
          throw new Error('Parent must be a folder.');
        }
        if (!parent.write && !FS.ignorePermissions) {
          ___setErrNo(ERRNO_CODES.EACCES);
          throw new Error('Parent folder must be writeable.');
        }
        if (!name || name == '.' || name == '..') {
          ___setErrNo(ERRNO_CODES.ENOENT);
          throw new Error('Name must not be empty.');
        }
        if (parent.contents.hasOwnProperty(name)) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          throw new Error("Can't overwrite object.");
        }
  
        parent.contents[name] = {
          read: canRead === undefined ? true : canRead,
          write: canWrite === undefined ? false : canWrite,
          timestamp: Date.now(),
          inodeNumber: FS.nextInode++
        };
        for (var key in properties) {
          if (properties.hasOwnProperty(key)) {
            parent.contents[name][key] = properties[key];
          }
        }
  
        return parent.contents[name];
      },createFolder:function (parent, name, canRead, canWrite) {
        var properties = {isFolder: true, isDevice: false, contents: {}};
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createPath:function (parent, path, canRead, canWrite) {
        var current = FS.findObject(parent);
        if (current === null) throw new Error('Invalid parent.');
        path = path.split('/').reverse();
        while (path.length) {
          var part = path.pop();
          if (!part) continue;
          if (!current.contents.hasOwnProperty(part)) {
            FS.createFolder(current, part, canRead, canWrite);
          }
          current = current.contents[part];
        }
        return current;
      },createFile:function (parent, name, properties, canRead, canWrite) {
        properties.isFolder = false;
        return FS.createObject(parent, name, properties, canRead, canWrite);
      },createDataFile:function (parent, name, data, canRead, canWrite) {
        if (typeof data === 'string') {
          var dataArray = new Array(data.length);
          for (var i = 0, len = data.length; i < len; ++i) dataArray[i] = data.charCodeAt(i);
          data = dataArray;
        }
        var properties = {
          isDevice: false,
          contents: data.subarray ? data.subarray(0) : data // as an optimization, create a new array wrapper (not buffer) here, to help JS engines understand this object
        };
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createLazyFile:function (parent, name, url, canRead, canWrite) {
  
        if (typeof XMLHttpRequest !== 'undefined') {
          if (!ENVIRONMENT_IS_WORKER) throw 'Cannot do synchronous binary XHRs outside webworkers in modern browsers. Use --embed-file or --preload-file in emcc';
          // Lazy chunked Uint8Array (implements get and length from Uint8Array). Actual getting is abstracted away for eventual reuse.
          var LazyUint8Array = function(chunkSize, length) {
            this.length = length;
            this.chunkSize = chunkSize;
            this.chunks = []; // Loaded chunks. Index is the chunk number
          }
          LazyUint8Array.prototype.get = function(idx) {
            if (idx > this.length-1 || idx < 0) {
              return undefined;
            }
            var chunkOffset = idx % chunkSize;
            var chunkNum = Math.floor(idx / chunkSize);
            return this.getter(chunkNum)[chunkOffset];
          }
          LazyUint8Array.prototype.setDataGetter = function(getter) {
            this.getter = getter;
          }
    
          // Find length
          var xhr = new XMLHttpRequest();
          xhr.open('HEAD', url, false);
          xhr.send(null);
          if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
          var datalength = Number(xhr.getResponseHeader("Content-length"));
          var header;
          var hasByteServing = (header = xhr.getResponseHeader("Accept-Ranges")) && header === "bytes";
          var chunkSize = 1024*1024; // Chunk size in bytes
          if (!hasByteServing) chunkSize = datalength;
    
          // Function to get a range from the remote URL.
          var doXHR = (function(from, to) {
            if (from > to) throw new Error("invalid range (" + from + ", " + to + ") or no bytes requested!");
            if (to > datalength-1) throw new Error("only " + datalength + " bytes available! programmer error!");
    
            // TODO: Use mozResponseArrayBuffer, responseStream, etc. if available.
            var xhr = new XMLHttpRequest();
            xhr.open('GET', url, false);
            if (datalength !== chunkSize) xhr.setRequestHeader("Range", "bytes=" + from + "-" + to);
    
            // Some hints to the browser that we want binary data.
            if (typeof Uint8Array != 'undefined') xhr.responseType = 'arraybuffer';
            if (xhr.overrideMimeType) {
              xhr.overrideMimeType('text/plain; charset=x-user-defined');
            }
    
            xhr.send(null);
            if (!(xhr.status >= 200 && xhr.status < 300 || xhr.status === 304)) throw new Error("Couldn't load " + url + ". Status: " + xhr.status);
            if (xhr.response !== undefined) {
              return new Uint8Array(xhr.response || []);
            } else {
              return intArrayFromString(xhr.responseText || '', true);
            }
          });
    
          var lazyArray = new LazyUint8Array(chunkSize, datalength);
          lazyArray.setDataGetter(function(chunkNum) {
            var start = chunkNum * lazyArray.chunkSize;
            var end = (chunkNum+1) * lazyArray.chunkSize - 1; // including this byte
            end = Math.min(end, datalength-1); // if datalength-1 is selected, this is the last block
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") {
              lazyArray.chunks[chunkNum] = doXHR(start, end);
            }
            if (typeof(lazyArray.chunks[chunkNum]) === "undefined") throw new Error("doXHR failed!");
            return lazyArray.chunks[chunkNum];
          });
          var properties = { isDevice: false, contents: lazyArray };
        } else {
          var properties = { isDevice: false, url: url };
        }
  
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createPreloadedFile:function (parent, name, url, canRead, canWrite, onload, onerror, dontCreateFile) {
        Browser.ensureObjects();
        var fullname = FS.joinPath([parent, name], true);
        function processData(byteArray) {
          function finish(byteArray) {
            if (!dontCreateFile) {
              FS.createDataFile(parent, name, byteArray, canRead, canWrite);
            }
            if (onload) onload();
            removeRunDependency('cp ' + fullname);
          }
          var handled = false;
          Module['preloadPlugins'].forEach(function(plugin) {
            if (handled) return;
            if (plugin['canHandle'](fullname)) {
              plugin['handle'](byteArray, fullname, finish, function() {
                if (onerror) onerror();
                removeRunDependency('cp ' + fullname);
              });
              handled = true;
            }
          });
          if (!handled) finish(byteArray);
        }
        addRunDependency('cp ' + fullname);
        if (typeof url == 'string') {
          Browser.asyncLoad(url, function(byteArray) {
            processData(byteArray);
          }, onerror);
        } else {
          processData(url);
        }
      },createLink:function (parent, name, target, canRead, canWrite) {
        var properties = {isDevice: false, link: target};
        return FS.createFile(parent, name, properties, canRead, canWrite);
      },createDevice:function (parent, name, input, output) {
        if (!(input || output)) {
          throw new Error('A device must have at least one callback defined.');
        }
        var ops = {isDevice: true, input: input, output: output};
        return FS.createFile(parent, name, ops, Boolean(input), Boolean(output));
      },forceLoadFile:function (obj) {
        if (obj.isDevice || obj.isFolder || obj.link || obj.contents) return true;
        var success = true;
        if (typeof XMLHttpRequest !== 'undefined') {
          throw new Error("Lazy loading should have been performed (contents set) in createLazyFile, but it was not. Lazy loading only works in web workers. Use --embed-file or --preload-file in emcc on the main thread.");
        } else if (Module['read']) {
          // Command-line.
          try {
            // WARNING: Can't read binary files in V8's d8 or tracemonkey's js, as
            //          read() will try to parse UTF8.
            obj.contents = intArrayFromString(Module['read'](obj.url), true);
          } catch (e) {
            success = false;
          }
        } else {
          throw new Error('Cannot load without read() or XMLHttpRequest.');
        }
        if (!success) ___setErrNo(ERRNO_CODES.EIO);
        return success;
      },ensureRoot:function () {
        if (FS.root) return;
        // The main file system tree. All the contents are inside this.
        FS.root = {
          read: true,
          write: true,
          isFolder: true,
          isDevice: false,
          timestamp: Date.now(),
          inodeNumber: 1,
          contents: {}
        };
      },init:function (input, output, error) {
        // Make sure we initialize only once.
        assert(!FS.init.initialized, 'FS.init was previously called. If you want to initialize later with custom parameters, remove any earlier calls (note that one is automatically added to the generated code)');
        FS.init.initialized = true;
  
        FS.ensureRoot();
  
        // Allow Module.stdin etc. to provide defaults, if none explicitly passed to us here
        input = input || Module['stdin'];
        output = output || Module['stdout'];
        error = error || Module['stderr'];
  
        // Default handlers.
        var stdinOverridden = true, stdoutOverridden = true, stderrOverridden = true;
        if (!input) {
          stdinOverridden = false;
          input = function() {
            if (!input.cache || !input.cache.length) {
              var result;
              if (typeof window != 'undefined' &&
                  typeof window.prompt == 'function') {
                // Browser.
                result = window.prompt('Input: ');
                if (result === null) result = String.fromCharCode(0); // cancel ==> EOF
              } else if (typeof readline == 'function') {
                // Command line.
                result = readline();
              }
              if (!result) result = '';
              input.cache = intArrayFromString(result + '\n', true);
            }
            return input.cache.shift();
          };
        }
        var utf8 = new Runtime.UTF8Processor();
        function simpleOutput(val) {
          if (val === null || val === '\n'.charCodeAt(0)) {
            output.printer(output.buffer.join(''));
            output.buffer = [];
          } else {
            output.buffer.push(utf8.processCChar(val));
          }
        }
        if (!output) {
          stdoutOverridden = false;
          output = simpleOutput;
        }
        if (!output.printer) output.printer = Module['print'];
        if (!output.buffer) output.buffer = [];
        if (!error) {
          stderrOverridden = false;
          error = simpleOutput;
        }
        if (!error.printer) error.printer = Module['print'];
        if (!error.buffer) error.buffer = [];
  
        // Create the temporary folder, if not already created
        try {
          FS.createFolder('/', 'tmp', true, true);
        } catch(e) {}
  
        // Create the I/O devices.
        var devFolder = FS.createFolder('/', 'dev', true, true);
        var stdin = FS.createDevice(devFolder, 'stdin', input);
        var stdout = FS.createDevice(devFolder, 'stdout', null, output);
        var stderr = FS.createDevice(devFolder, 'stderr', null, error);
        FS.createDevice(devFolder, 'tty', input, output);
  
        // Create default streams.
        FS.streams[1] = {
          path: '/dev/stdin',
          object: stdin,
          position: 0,
          isRead: true,
          isWrite: false,
          isAppend: false,
          isTerminal: !stdinOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[2] = {
          path: '/dev/stdout',
          object: stdout,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stdoutOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        FS.streams[3] = {
          path: '/dev/stderr',
          object: stderr,
          position: 0,
          isRead: false,
          isWrite: true,
          isAppend: false,
          isTerminal: !stderrOverridden,
          error: false,
          eof: false,
          ungotten: []
        };
        // Allocate these on the stack (and never free, we are called from ATINIT or earlier), to keep their locations low
        _stdin = allocate([1], 'void*', ALLOC_STACK);
        _stdout = allocate([2], 'void*', ALLOC_STACK);
        _stderr = allocate([3], 'void*', ALLOC_STACK);
  
        // Other system paths
        FS.createPath('/', 'dev/shm/tmp', true, true); // temp files
  
        // Newlib initialization
        for (var i = FS.streams.length; i < Math.max(_stdin, _stdout, _stderr) + 4; i++) {
          FS.streams[i] = null; // Make sure to keep FS.streams dense
        }
        FS.streams[_stdin] = FS.streams[1];
        FS.streams[_stdout] = FS.streams[2];
        FS.streams[_stderr] = FS.streams[3];
        FS.checkStreams();
        assert(FS.streams.length < 1024); // at this early stage, we should not have a large set of file descriptors - just a few
        __impure_ptr = allocate([ allocate(
          [0, 0, 0, 0, _stdin, 0, 0, 0, _stdout, 0, 0, 0, _stderr, 0, 0, 0],
          'void*', ALLOC_STATIC) ], 'void*', ALLOC_STATIC);
      },quit:function () {
        if (!FS.init.initialized) return;
        // Flush any partially-printed lines in stdout and stderr. Careful, they may have been closed
        if (FS.streams[2] && FS.streams[2].object.output.buffer.length > 0) FS.streams[2].object.output('\n'.charCodeAt(0));
        if (FS.streams[3] && FS.streams[3].object.output.buffer.length > 0) FS.streams[3].object.output('\n'.charCodeAt(0));
      },standardizePath:function (path) {
        if (path.substr(0, 2) == './') path = path.substr(2);
        return path;
      },deleteFile:function (path) {
        var path = FS.analyzePath(path);
        if (!path.parentExists || !path.exists) {
          throw 'Invalid path ' + path;
        }
        delete path.parentObject.contents[path.name];
      }};
  
  
  function _pread(fildes, buf, nbyte, offset) {
      // ssize_t pread(int fildes, void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead = 0;
        while (stream.ungotten.length && nbyte > 0) {
          HEAP8[(buf++)]=stream.ungotten.pop()
          nbyte--;
          bytesRead++;
        }
        var contents = stream.object.contents;
        var size = Math.min(contents.length - offset, nbyte);
        if (contents.subarray || contents.slice) { // typed array or normal array
          for (var i = 0; i < size; i++) {
            HEAP8[((buf)+(i))]=contents[offset + i]
          }
        } else {
          for (var i = 0; i < size; i++) { // LazyUint8Array from sync binary XHR
            HEAP8[((buf)+(i))]=contents.get(offset + i)
          }
        }
        bytesRead += size;
        return bytesRead;
      }
    }function _read(fildes, buf, nbyte) {
      // ssize_t read(int fildes, void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/read.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isRead) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var bytesRead;
        if (stream.object.isDevice) {
          if (stream.object.input) {
            bytesRead = 0;
            while (stream.ungotten.length && nbyte > 0) {
              HEAP8[(buf++)]=stream.ungotten.pop()
              nbyte--;
              bytesRead++;
            }
            for (var i = 0; i < nbyte; i++) {
              try {
                var result = stream.object.input();
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
              if (result === null || result === undefined) break;
              bytesRead++;
              HEAP8[((buf)+(i))]=result
            }
            return bytesRead;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var ungotSize = stream.ungotten.length;
          bytesRead = _pread(fildes, buf, nbyte, stream.position);
          if (bytesRead != -1) {
            stream.position += (stream.ungotten.length - ungotSize) + bytesRead;
          }
          return bytesRead;
        }
      }
    }function _fread(ptr, size, nitems, stream) {
      // size_t fread(void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fread.html
      var bytesToRead = nitems * size;
      if (bytesToRead == 0) return 0;
      var bytesRead = _read(stream, ptr, bytesToRead);
      var streamObj = FS.streams[stream];
      if (bytesRead == -1) {
        if (streamObj) streamObj.error = true;
        return 0;
      } else {
        if (bytesRead < bytesToRead) streamObj.eof = true;
        return Math.floor(bytesRead / size);
      }
    }

  
  function _close(fildes) {
      // int close(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/close.html
      if (FS.streams[fildes]) {
        if (FS.streams[fildes].currentEntry) {
          _free(FS.streams[fildes].currentEntry);
        }
        FS.streams[fildes] = null;
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }
  
  function _fsync(fildes) {
      // int fsync(int fildes);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fsync.html
      if (FS.streams[fildes]) {
        // We write directly to the file system, so there's nothing to do here.
        return 0;
      } else {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      }
    }function _fclose(stream) {
      // int fclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fclose.html
      _fsync(stream);
      return _close(stream);
    }

  
  
  var ERRNO_MESSAGES={1:"Operation not permitted",2:"No such file or directory",3:"No such process",4:"Interrupted system call",5:"Input/output error",6:"No such device or address",8:"Exec format error",9:"Bad file descriptor",10:"No child processes",11:"Resource temporarily unavailable",12:"Cannot allocate memory",13:"Permission denied",14:"Bad address",16:"Device or resource busy",17:"File exists",18:"Invalid cross-device link",19:"No such device",20:"Not a directory",21:"Is a directory",22:"Invalid argument",23:"Too many open files in system",24:"Too many open files",25:"Inappropriate ioctl for device",26:"Text file busy",27:"File too large",28:"No space left on device",29:"Illegal seek",30:"Read-only file system",31:"Too many links",32:"Broken pipe",33:"Numerical argument out of domain",34:"Numerical result out of range",35:"Resource deadlock avoided",36:"File name too long",37:"No locks available",38:"Function not implemented",39:"Directory not empty",40:"Too many levels of symbolic links",42:"No message of desired type",43:"Identifier removed",60:"Device not a stream",61:"No data available",62:"Timer expired",63:"Out of streams resources",67:"Link has been severed",71:"Protocol error",72:"Multihop attempted",74:"Bad message",75:"Value too large for defined data type",84:"Invalid or incomplete multibyte or wide character",88:"Socket operation on non-socket",89:"Destination address required",90:"Message too long",91:"Protocol wrong type for socket",92:"Protocol not available",93:"Protocol not supported",95:"Operation not supported",97:"Address family not supported by protocol",98:"Address already in use",99:"Cannot assign requested address",100:"Network is down",101:"Network is unreachable",102:"Network dropped connection on reset",103:"Software caused connection abort",104:"Connection reset by peer",105:"No buffer space available",106:"Transport endpoint is already connected",107:"Transport endpoint is not connected",110:"Connection timed out",111:"Connection refused",113:"No route to host",114:"Operation already in progress",115:"Operation now in progress",116:"Stale NFS file handle",122:"Disk quota exceeded",125:"Operation canceled",130:"Owner died",131:"State not recoverable"};function _strerror_r(errnum, strerrbuf, buflen) {
      if (errnum in ERRNO_MESSAGES) {
        if (ERRNO_MESSAGES[errnum].length > buflen - 1) {
          return ___setErrNo(ERRNO_CODES.ERANGE);
        } else {
          var msg = ERRNO_MESSAGES[errnum];
          for (var i = 0; i < msg.length; i++) {
            HEAP8[((strerrbuf)+(i))]=msg.charCodeAt(i)
          }
          HEAP8[((strerrbuf)+(i))]=0
          return 0;
        }
      } else {
        return ___setErrNo(ERRNO_CODES.EINVAL);
      }
    }function _strerror(errnum) {
      if (!_strerror.buffer) _strerror.buffer = _malloc(256);
      _strerror_r(errnum, _strerror.buffer, 256);
      return _strerror.buffer;
    }

  
  function ___errno_location() {
      return ___setErrNo.ret;
    }var ___errno=___errno_location;

  
  function _isspace(chr) {
      return chr in { 32: 0, 9: 0, 10: 0, 11: 0, 12: 0, 13: 0 };
    }
  
  function _isdigit(chr) {
      return chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0);
    }function _strtod(str, endptr) {
      var origin = str;
  
      // Skip space.
      while (_isspace(HEAP8[(str)])) str++;
  
      // Check for a plus/minus sign.
      var multiplier = 1;
      if (HEAP8[(str)] == '-'.charCodeAt(0)) {
        multiplier = -1;
        str++;
      } else if (HEAP8[(str)] == '+'.charCodeAt(0)) {
        str++;
      }
  
      var chr;
      var ret = 0;
  
      // Get whole part.
      var whole = false;
      while(1) {
        chr = HEAP8[(str)];
        if (!_isdigit(chr)) break;
        whole = true;
        ret = ret*10 + chr - '0'.charCodeAt(0);
        str++;
      }
  
      // Get fractional part.
      var fraction = false;
      if (HEAP8[(str)] == '.'.charCodeAt(0)) {
        str++;
        var mul = 1/10;
        while(1) {
          chr = HEAP8[(str)];
          if (!_isdigit(chr)) break;
          fraction = true;
          ret += mul*(chr - '0'.charCodeAt(0));
          mul /= 10;
          str++;
        }
      }
  
      if (!whole && !fraction) {
        if (endptr) {
          HEAP32[((endptr)>>2)]=origin
        }
        return 0;
      }
  
      // Get exponent part.
      chr = HEAP8[(str)];
      if (chr == 'e'.charCodeAt(0) || chr == 'E'.charCodeAt(0)) {
        str++;
        var exponent = 0;
        var expNegative = false;
        chr = HEAP8[(str)];
        if (chr == '-'.charCodeAt(0)) {
          expNegative = true;
          str++;
        } else if (chr == '+'.charCodeAt(0)) {
          str++;
        }
        chr = HEAP8[(str)];
        while(1) {
          if (!_isdigit(chr)) break;
          exponent = exponent*10 + chr - '0'.charCodeAt(0);
          str++;
          chr = HEAP8[(str)];
        }
        if (expNegative) exponent = -exponent;
        ret *= Math.pow(10, exponent);
      }
  
      // Set end pointer.
      if (endptr) {
        HEAP32[((endptr)>>2)]=str
      }
  
      return ret * multiplier;
    }

  function _fileno(stream) {
      // int fileno(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fileno.html
      // We use file descriptor numbers and FILE* streams interchangeably.
      return stream;
    }

  function _strchr(ptr, chr) {
      ptr--;
      do {
        ptr++;
        var val = HEAP8[(ptr)];
        if (val == chr) return ptr;
      } while (val);
      return 0;
    }

  function _memchr(ptr, chr, num) {
      chr = unSign(chr);
      for (var i = 0; i < num; i++) {
        if (HEAP8[(ptr)] == chr) return ptr;
        ptr++;
      }
      return 0;
    }

  function _strstr(ptr1, ptr2) {
      var check = 0, start;
      do {
        if (!check) {
          start = ptr1;
          check = ptr2;
        }
        var curr1 = HEAP8[(ptr1++)];
        var curr2 = HEAP8[(check++)];
        if (curr2 == 0) return start;
        if (curr2 != curr1) {
          // rewind to one character after start, to find ez in eeez
          ptr1 = start + 1;
          check = 0;
        }
      } while (curr1);
      return 0;
    }

  
  
  function _memcpy(dest, src, num, align) {
      assert(num % 1 === 0, 'memcpy given ' + num + ' bytes to copy. Problem with quantum=1 corrections perhaps?');
      if (num >= 20 && src % 2 == dest % 2) {
        // This is unaligned, but quite large, and potentially alignable, so work hard to get to aligned settings
        if (src % 4 == dest % 4) {
          var stop = src + num;
          while (src % 4) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src4 = src >> 2, dest4 = dest >> 2, stop4 = stop >> 2;
          while (src4 < stop4) {
            HEAP32[dest4++] = HEAP32[src4++];
          }
          src = src4 << 2;
          dest = dest4 << 2;
          while (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        } else {
          var stop = src + num;
          if (src % 2) { // no need to check for stop, since we have large num
            HEAP8[dest++] = HEAP8[src++];
          }
          var src2 = src >> 1, dest2 = dest >> 1, stop2 = stop >> 1;
          while (src2 < stop2) {
            HEAP16[dest2++] = HEAP16[src2++];
          }
          src = src2 << 1;
          dest = dest2 << 1;
          if (src < stop) {
            HEAP8[dest++] = HEAP8[src++];
          }
        }
      } else {
        while (num--) {
          HEAP8[dest++] = HEAP8[src++];
        }
      }
    }function _memmove(dest, src, num, align) {
      if (src < dest && dest < src + num) {
        // Copy backwards in a safe manner
        src += num;
        dest += num;
        while (num--) {
          dest--;
          src--;
          HEAP8[(dest)]=HEAP8[(src)];
        }
      } else {
        _memcpy(dest, src, num, align);
      }
    }var _llvm_memmove_p0i8_p0i8_i32=_memmove;

  function _pclose(stream) {
      // int pclose(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/pclose.html
      // We allow only one process, so no pipes.
      ___setErrNo(ERRNO_CODES.ECHILD);
      return -1;
    }

  
  function __exit(status) {
      // void _exit(int status);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/exit.html
  
      function ExitStatus() {
        this.name = "ExitStatus";
        this.message = "Program terminated with exit(" + status + ")";
        this.status = status;
      };
      ExitStatus.prototype = new Error();
      ExitStatus.prototype.constructor = ExitStatus;
  
      exitRuntime();
      ABORT = true;
  
      throw new ExitStatus();
    }function _exit(status) {
      __exit(status);
    }

  var _llvm_memcpy_p0i8_p0i8_i32=_memcpy;

  function _popen(command, mode) {
      // FILE *popen(const char *command, const char *mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/popen.html
      // We allow only one process, so no pipes.
      ___setErrNo(ERRNO_CODES.EMFILE);
      return 0;
    }

  
  
  function _pwrite(fildes, buf, nbyte, offset) {
      // ssize_t pwrite(int fildes, const void *buf, size_t nbyte, off_t offset);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream || stream.object.isDevice) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (stream.object.isFolder) {
        ___setErrNo(ERRNO_CODES.EISDIR);
        return -1;
      } else if (nbyte < 0 || offset < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        var contents = stream.object.contents;
        while (contents.length < offset) contents.push(0);
        for (var i = 0; i < nbyte; i++) {
          contents[offset + i] = HEAPU8[((buf)+(i))];
        }
        stream.object.timestamp = Date.now();
        return i;
      }
    }function _write(fildes, buf, nbyte) {
      // ssize_t write(int fildes, const void *buf, size_t nbyte);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/write.html
      var stream = FS.streams[fildes];
      if (!stream) {
        ___setErrNo(ERRNO_CODES.EBADF);
        return -1;
      } else if (!stream.isWrite) {
        ___setErrNo(ERRNO_CODES.EACCES);
        return -1;
      } else if (nbyte < 0) {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return -1;
      } else {
        if (stream.object.isDevice) {
          if (stream.object.output) {
            for (var i = 0; i < nbyte; i++) {
              try {
                stream.object.output(HEAP8[((buf)+(i))]);
              } catch (e) {
                ___setErrNo(ERRNO_CODES.EIO);
                return -1;
              }
            }
            stream.object.timestamp = Date.now();
            return i;
          } else {
            ___setErrNo(ERRNO_CODES.ENXIO);
            return -1;
          }
        } else {
          var bytesWritten = _pwrite(fildes, buf, nbyte, stream.position);
          if (bytesWritten != -1) stream.position += bytesWritten;
          return bytesWritten;
        }
      }
    }
  
  function _strlen(ptr) {
      return String_len(ptr);
    }function _fputs(s, stream) {
      // int fputs(const char *restrict s, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fputs.html
      return _write(stream, s, _strlen(s));
    }

  function _fflush(stream) {
      // int fflush(FILE *stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fflush.html
      var flush = function(filedes) {
        // Right now we write all data directly, except for output devices.
        if (FS.streams[filedes] && FS.streams[filedes].object.output) {
          if (!FS.streams[filedes].isTerminal) { // don't flush terminals, it would cause a \n to also appear
            FS.streams[filedes].object.output(null);
          }
        }
      };
      try {
        if (stream === 0) {
          for (var i = 0; i < FS.streams.length; i++) if (FS.streams[i]) flush(i);
        } else {
          flush(stream);
        }
        return 0;
      } catch (e) {
        ___setErrNo(ERRNO_CODES.EIO);
        return -1;
      }
    }

  function _rand() {
      return Math.floor(Math.random()*0x80000000);
    }

  function _time(ptr) {
      var ret = Math.floor(Date.now()/1000);
      if (ptr) {
        HEAP32[((ptr)>>2)]=ret
      }
      return ret;
    }

  function _srand(seed) {}


  
  
  function _tolower(chr) {
      if (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0)) {
        return chr - 'A'.charCodeAt(0) + 'a'.charCodeAt(0);
      } else {
        return chr;
      }
    }function _strncasecmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = _tolower(HEAPU8[((px)+(i))]);
        var y = _tolower(HEAPU8[((py)+(i))]);
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcasecmp(px, py) {
      return _strncasecmp(px, py, TOTAL_MEMORY);
    }

  
  function _strncmp(px, py, n) {
      var i = 0;
      while (i < n) {
        var x = HEAPU8[((px)+(i))];
        var y = HEAPU8[((py)+(i))];
        if (x == y && x == 0) return 0;
        if (x == 0) return -1;
        if (y == 0) return 1;
        if (x == y) {
          i ++;
          continue;
        } else {
          return x > y ? 1 : -1;
        }
      }
      return 0;
    }function _strcmp(px, py) {
      return _strncmp(px, py, TOTAL_MEMORY);
    }


  function _strftime(s, maxsize, format, timeptr) {
      // size_t strftime(char *restrict s, size_t maxsize, const char *restrict format, const struct tm *restrict timeptr);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/strftime.html
      // TODO: Implement.
      return 0;
    }

  
  var ___tm_struct_layout={__size__:44,tm_sec:0,tm_min:4,tm_hour:8,tm_mday:12,tm_mon:16,tm_year:20,tm_wday:24,tm_yday:28,tm_isdst:32,tm_gmtoff:36,tm_zone:40};
  
  var ___tm_current=0;
  
  
  var ___tm_timezones={};
  
  
  var __tzname=null;
  
  var __daylight=null;
  
  var __timezone=null;function _tzset() {
      // TODO: Use (malleable) environment variables instead of system settings.
      if (__tzname) return; // glibc does not need the double __
  
      __timezone = _malloc(4);
      HEAP32[((__timezone)>>2)]=-(new Date()).getTimezoneOffset() * 60
  
      __daylight = _malloc(4);
      var winter = new Date(2000, 0, 1);
      var summer = new Date(2000, 6, 1);
      HEAP32[((__daylight)>>2)]=Number(winter.getTimezoneOffset() != summer.getTimezoneOffset())
  
      var winterName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | winter.toString().match(/\(([A-Z]+)\)/)[1];
      var summerName = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | summer.toString().match(/\(([A-Z]+)\)/)[1];
      var winterNamePtr = allocate(intArrayFromString(winterName), 'i8', ALLOC_NORMAL);
      var summerNamePtr = allocate(intArrayFromString(summerName), 'i8', ALLOC_NORMAL);
      __tzname = _malloc(2 * 4); // glibc does not need the double __
      HEAP32[((__tzname)>>2)]=winterNamePtr
      HEAP32[(((__tzname)+(4))>>2)]=summerNamePtr
    }function _localtime_r(time, tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var date = new Date(HEAP32[((time)>>2)]*1000);
      HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)]=date.getSeconds()
      HEAP32[(((tmPtr)+(offsets.tm_min))>>2)]=date.getMinutes()
      HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)]=date.getHours()
      HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)]=date.getDate()
      HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)]=date.getMonth()
      HEAP32[(((tmPtr)+(offsets.tm_year))>>2)]=date.getFullYear()-1900
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=date.getDay()
  
      var start = new Date(date.getFullYear(), 0, 1);
      var yday = Math.floor((date.getTime() - start.getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      HEAP32[(((tmPtr)+(offsets.tm_gmtoff))>>2)]=start.getTimezoneOffset() * 60
  
      var dst = Number(start.getTimezoneOffset() != date.getTimezoneOffset());
      HEAP32[(((tmPtr)+(offsets.tm_isdst))>>2)]=dst
  
      var timezone = 'GMT'; // XXX do not rely on browser timezone info, it is very unpredictable | date.toString().match(/\(([A-Z]+)\)/)[1];
      if (!(timezone in ___tm_timezones)) {
        ___tm_timezones[timezone] = allocate(intArrayFromString(timezone), 'i8', ALLOC_NORMAL);
      }
      HEAP32[(((tmPtr)+(offsets.tm_zone))>>2)]=___tm_timezones[timezone]
  
      return tmPtr;
    }function _localtime(time) {
      if (!___tm_current) ___tm_current = _malloc(___tm_struct_layout.__size__);
      return _localtime_r(time, ___tm_current);
    }

  function _strcpy(pdest, psrc) {
      var i = 0;
      do {
        HEAP8[(pdest+i)]=HEAP8[(psrc+i)];
        i ++;
      } while (HEAP8[((psrc)+(i-1))] != 0);
      return pdest;
    }

  
  
  function __isFloat(text) {
      return !!(/^[+-]?[0-9]*\.?[0-9]+([eE][+-]?[0-9]+)?$/.exec(text));
    }function __scanString(format, get, unget, varargs) {
      if (!__scanString.whiteSpace) {
        __scanString.whiteSpace = {};
        __scanString.whiteSpace[' '.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\t'.charCodeAt(0)] = 1;
        __scanString.whiteSpace['\n'.charCodeAt(0)] = 1;
        __scanString.whiteSpace[' '] = 1;
        __scanString.whiteSpace['\t'] = 1;
        __scanString.whiteSpace['\n'] = 1;
      }
      // Supports %x, %4x, %d.%d, %lld, %s, %f, %lf.
      // TODO: Support all format specifiers.
      format = Pointer_stringify(format);
      var soFar = 0;
      if (format.indexOf('%n') >= 0) {
        // need to track soFar
        var _get = get;
        get = function() {
          soFar++;
          return _get();
        }
        var _unget = unget;
        unget = function() {
          soFar--;
          return _unget();
        }
      }
      var formatIndex = 0;
      var argsi = 0;
      var fields = 0;
      var argIndex = 0;
      var next;
  
      next = 1;
      mainLoop:
      for (var formatIndex = 0; formatIndex < format.length; formatIndex++) {
        // remove whitespace
        while (1) {
          next = get();
          if (next == 0) return fields;
          if (!(next in __scanString.whiteSpace)) break;
        } 
        unget(next);
        
        if (next <= 0) return fields;
        var next = get();
        if (next <= 0) return fields;  // End of input.
  
        if (format[formatIndex] === '%') {
          formatIndex++;
          var maxSpecifierStart = formatIndex;
          while (format[formatIndex].charCodeAt(0) >= '0'.charCodeAt(0) &&
                 format[formatIndex].charCodeAt(0) <= '9'.charCodeAt(0)) {
            formatIndex++;
          }
          var max_;
          if (formatIndex != maxSpecifierStart) {
            max_ = parseInt(format.slice(maxSpecifierStart, formatIndex), 10);
          }
          var long_ = false;
          var half = false;
          var longLong = false;
          if (format[formatIndex] == 'l') {
            long_ = true;
            formatIndex++;
            if(format[formatIndex] == 'l') {
              longLong = true;
              formatIndex++;
            }
          } else if (format[formatIndex] == 'h') {
            half = true;
            formatIndex++;
          }
          var type = format[formatIndex];
          formatIndex++;
          var curr = 0;
          var buffer = [];
          // Read characters according to the format. floats are trickier, they may be in an unfloat state in the middle, then be a valid float later
          if (type == 'f') {
            var last = 0;
            while (next > 0) {
              buffer.push(String.fromCharCode(next));
              if (__isFloat(buffer.join(''))) {
                last = buffer.length;
              }
              next = get();
            }
            unget(next);
            while (buffer.length > last) {
              unget(buffer.pop().charCodeAt(0));
            }
            next = get();
          } else if (type != 'n') {
            var first = true;
            while ((curr < max_ || isNaN(max_)) && next > 0) {
              if (!(next in __scanString.whiteSpace) && // stop on whitespace
                  (type == 's' ||
                   ((type === 'd' || type == 'u' || type == 'i') && ((next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0)) ||
                                                                     (first && next == '-'.charCodeAt(0)))) ||
                   (type === 'x' && (next >= '0'.charCodeAt(0) && next <= '9'.charCodeAt(0) ||
                                     next >= 'a'.charCodeAt(0) && next <= 'f'.charCodeAt(0) ||
                                     next >= 'A'.charCodeAt(0) && next <= 'F'.charCodeAt(0)))) &&
                  (formatIndex >= format.length || next !== format[formatIndex].charCodeAt(0))) { // Stop when we read something that is coming up
                buffer.push(String.fromCharCode(next));
                next = get();
                curr++;
              } else {
                break;
              }
              first = false;
            }
          }
          if (buffer.length === 0 && type != 'n') return 0;  // Failure.
          var text = buffer.join('');
          var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
          argIndex += Runtime.getNativeFieldSize('void*');
          switch (type) {
            case 'd': case 'u': case 'i':
              if (half) {
                HEAP16[((argPtr)>>1)]=parseInt(text, 10);
              } else if(longLong) {
                (tempI64 = [parseInt(text, 10)>>>0,Math.min(Math.floor((parseInt(text, 10))/4294967296), 4294967295)],HEAP32[((argPtr)>>2)]=tempI64[0],HEAP32[(((argPtr)+(4))>>2)]=tempI64[1]);
              } else {
                HEAP32[((argPtr)>>2)]=parseInt(text, 10);
              }
              break;
            case 'x':
              HEAP32[((argPtr)>>2)]=parseInt(text, 16)
              break;
            case 'f':
              if (long_) {
                (tempDoubleF64[0]=parseFloat(text),HEAP32[((argPtr)>>2)]=tempDoubleI32[0],HEAP32[(((argPtr)+(4))>>2)]=tempDoubleI32[1])
              } else {
                HEAPF32[((argPtr)>>2)]=parseFloat(text)
              }
              break;
            case 's':
              var array = intArrayFromString(text);
              for (var j = 0; j < array.length; j++) {
                HEAP8[((argPtr)+(j))]=array[j]
              }
              break;
            case 'n':
              HEAP32[((argPtr)>>2)]=soFar-1
              break;
          }
          if (type != 'n') fields++;
          if (next <= 0) break mainLoop;  // End of input.
        } else if (format[formatIndex] in __scanString.whiteSpace) {
          while (next in __scanString.whiteSpace) {
            next = get();
            if (next <= 0) break mainLoop;  // End of input.
          }
          unget(next);
        } else {
          // Not a specifier.
          if (format[formatIndex].charCodeAt(0) !== next) {
            unget(next);
            break mainLoop;
          }
        }
      }
      // 'n' is special in that it needs no input. so it can be at the end, even with nothing left to read
      if (format[formatIndex-1] == '%' && format[formatIndex] == 'n') {
        var argPtr = HEAP32[(((varargs)+(argIndex))>>2)];
        HEAP32[((argPtr)>>2)]=soFar-1
      }
      return fields;
    }function _sscanf(s, format, varargs) {
      // int sscanf(const char *restrict s, const char *restrict format, ... );
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/scanf.html
      var index = 0;
      var get = function() { return HEAP8[((s)+(index++))]; };
      var unget = function() { index--; };
      return __scanString(format, get, unget, varargs);
    }

  function _mktime(tmPtr) {
      _tzset();
      var offsets = ___tm_struct_layout;
      var year = HEAP32[(((tmPtr)+(offsets.tm_year))>>2)];
      var timestamp = new Date(year >= 1900 ? year : year + 1900,
                               HEAP32[(((tmPtr)+(offsets.tm_mon))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_mday))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_hour))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_min))>>2)],
                               HEAP32[(((tmPtr)+(offsets.tm_sec))>>2)],
                               0).getTime() / 1000;
      HEAP32[(((tmPtr)+(offsets.tm_wday))>>2)]=new Date(timestamp).getDay()
      var yday = Math.round((timestamp - (new Date(year, 0, 1)).getTime()) / (1000 * 60 * 60 * 24));
      HEAP32[(((tmPtr)+(offsets.tm_yday))>>2)]=yday
      return timestamp;
    }

  function _strcspn(pstr, pset) {
      var str = pstr, set, strcurr, setcurr;
      while (1) {
        strcurr = HEAP8[(str)];
        if (!strcurr) return str - pstr;
        set = pset;
        while (1) {
          setcurr = HEAP8[(set)];
          if (!setcurr || setcurr == strcurr) break;
          set++;
        }
        if (setcurr) return str - pstr;
        str++;
      }
    }

  function _toupper(chr) {
      if (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) {
        return chr - 'a'.charCodeAt(0) + 'A'.charCodeAt(0);
      } else {
        return chr;
      }
    }


  function _strpbrk(ptr1, ptr2) {
      var curr;
      var searchSet = {};
      while (1) {
        var curr = HEAP8[(ptr2++)];
        if (!curr) break;
        searchSet[curr] = 1;
      }
      while (1) {
        curr = HEAP8[(ptr1)];
        if (!curr) break;
        if (curr in searchSet) return ptr1;
        ptr1++;
      }
      return 0;
    }


  function _isalpha(chr) {
      return (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  function _sprintf(s, format, varargs) {
      // int sprintf(char *restrict s, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      return _snprintf(s, undefined, format, varargs);
    }



  function _isalnum(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0));
    }

  
  function _memset(ptr, value, num, align) {
      // TODO: make these settings, and in memcpy, {{'s
      if (num >= 20) {
        // This is unaligned, but quite large, so work hard to get to aligned settings
        var stop = ptr + num;
        while (ptr % 4) { // no need to check for stop, since we have large num
          HEAP8[ptr++] = value;
        }
        if (value < 0) value += 256; // make it unsigned
        var ptr4 = ptr >> 2, stop4 = stop >> 2, value4 = value | (value << 8) | (value << 16) | (value << 24);
        while (ptr4 < stop4) {
          HEAP32[ptr4++] = value4;
        }
        ptr = ptr4 << 2;
        while (ptr < stop) {
          HEAP8[ptr++] = value;
        }
      } else {
        while (num--) {
          HEAP8[ptr++] = value;
        }
      }
    }var _llvm_memset_p0i8_i32=_memset;

  
  
  var ___dirent_struct_layout=null;function _open(path, oflag, varargs) {
      // int open(const char *path, int oflag, ...);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/open.html
      // NOTE: This implementation tries to mimic glibc rather that strictly
      // following the POSIX standard.
  
      var mode = HEAP32[((varargs)>>2)];
  
      // Simplify flags.
      var accessMode = oflag & 3;
      var isWrite = accessMode != 0;
      var isRead = accessMode != 1;
      var isCreate = Boolean(oflag & 512);
      var isExistCheck = Boolean(oflag & 2048);
      var isTruncate = Boolean(oflag & 1024);
      var isAppend = Boolean(oflag & 8);
  
      // Verify path.
      var origPath = path;
      path = FS.analyzePath(Pointer_stringify(path));
      if (!path.parentExists) {
        ___setErrNo(path.error);
        return -1;
      }
      var target = path.object || null;
      var finalPath;
  
      // Verify the file exists, create if needed and allowed.
      if (target) {
        if (isCreate && isExistCheck) {
          ___setErrNo(ERRNO_CODES.EEXIST);
          return -1;
        }
        if ((isWrite || isCreate || isTruncate) && target.isFolder) {
          ___setErrNo(ERRNO_CODES.EISDIR);
          return -1;
        }
        if (isRead && !target.read || isWrite && !target.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        if (isTruncate && !target.isDevice) {
          target.contents = [];
        } else {
          if (!FS.forceLoadFile(target)) {
            ___setErrNo(ERRNO_CODES.EIO);
            return -1;
          }
        }
        finalPath = path.path;
      } else {
        if (!isCreate) {
          ___setErrNo(ERRNO_CODES.ENOENT);
          return -1;
        }
        if (!path.parentObject.write) {
          ___setErrNo(ERRNO_CODES.EACCES);
          return -1;
        }
        target = FS.createDataFile(path.parentObject, path.name, [],
                                   mode & 0x100, mode & 0x80);  // S_IRUSR, S_IWUSR.
        finalPath = path.parentPath + '/' + path.name;
      }
      // Actually create an open stream.
      var id = FS.streams.length; // Keep dense
      if (target.isFolder) {
        var entryBuffer = 0;
        if (___dirent_struct_layout) {
          entryBuffer = _malloc(___dirent_struct_layout.__size__);
        }
        var contents = [];
        for (var key in target.contents) contents.push(key);
        FS.streams[id] = {
          path: finalPath,
          object: target,
          // An index into contents. Special values: -2 is ".", -1 is "..".
          position: -2,
          isRead: true,
          isWrite: false,
          isAppend: false,
          error: false,
          eof: false,
          ungotten: [],
          // Folder-specific properties:
          // Remember the contents at the time of opening in an array, so we can
          // seek between them relying on a single order.
          contents: contents,
          // Each stream has its own area for readdir() returns.
          currentEntry: entryBuffer
        };
      } else {
        FS.streams[id] = {
          path: finalPath,
          object: target,
          position: 0,
          isRead: isRead,
          isWrite: isWrite,
          isAppend: isAppend,
          error: false,
          eof: false,
          ungotten: []
        };
      }
      FS.checkStreams();
      return id;
    }function _fopen(filename, mode) {
      // FILE *fopen(const char *restrict filename, const char *restrict mode);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fopen.html
      var flags;
      mode = Pointer_stringify(mode);
      if (mode[0] == 'r') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 0;
        }
      } else if (mode[0] == 'w') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 1024;
      } else if (mode[0] == 'a') {
        if (mode.indexOf('+') != -1) {
          flags = 2;
        } else {
          flags = 1;
        }
        flags |= 512;
        flags |= 8;
      } else {
        ___setErrNo(ERRNO_CODES.EINVAL);
        return 0;
      }
      var ret = _open(filename, flags, allocate([0x1FF, 0, 0, 0], 'i32', ALLOC_STACK));  // All creation permissions.
      return (ret == -1) ? 0 : ret;
    }

  function _strdup(ptr) {
      var len = String_len(ptr);
      var newStr = _malloc(len + 1);
      _memcpy(newStr, ptr, len, 1);
      HEAP8[((newStr)+(len))]=0;
      return newStr;
    }
var _llvm_va_start; // stub for _llvm_va_start

  function _llvm_va_end() {}


  function _strncpy(pdest, psrc, num) {
      var padding = false, curr;
      for (var i = 0; i < num; i++) {
        curr = padding ? 0 : HEAP8[((psrc)+(i))];
        HEAP8[((pdest)+(i))]=curr
        padding = padding || HEAP8[((psrc)+(i))] == 0;
      }
      return pdest;
    }


  
  function _usleep(useconds) {
      // int usleep(useconds_t useconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/usleep.html
      // We're single-threaded, so use a busy loop. Super-ugly.
      var msec = useconds / 1000;
      var start = Date.now();
      while (Date.now() - start < msec) {
        // Do nothing.
      }
      return 0;
    }function _sleep(seconds) {
      // unsigned sleep(unsigned seconds);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/sleep.html
      return _usleep(seconds * 1e6);
    }

  function _llvm_va_copy(ppdest, ppsrc) {
      HEAP8[(ppdest)]=HEAP8[(ppsrc)];HEAP8[((ppdest)+(1))]=HEAP8[((ppsrc)+(1))];HEAP8[((ppdest)+(2))]=HEAP8[((ppsrc)+(2))];HEAP8[((ppdest)+(3))]=HEAP8[((ppsrc)+(3))];
      /* Alternate implementation that copies the actual DATA; it assumes the va_list is prefixed by its size
      var psrc = IHEAP[ppsrc]-1;
      var num = IHEAP[psrc]; // right before the data, is the number of (flattened) values
      var pdest = _malloc(num+1);
      _memcpy(pdest, psrc, num+1);
      IHEAP[ppdest] = pdest+1;
      */
    }

  var _vsnprintf=_snprintf;

  function _isupper(chr) {
      return chr >= 'A'.charCodeAt(0) && chr <= 'Z'.charCodeAt(0);
    }

  function _islower(chr) {
      return chr >= 'a'.charCodeAt(0) && chr <= 'z'.charCodeAt(0);
    }

  function _isblank(chr) {
      return chr == ' '.charCodeAt(0) || chr == '\t'.charCodeAt(0);
    }

  function _iscntrl(chr) {
      return (0 <= chr && chr <= 0x1F) || chr === 0x7F;
    }

  
  function _isprint(chr) {
      return 0x1F < chr && chr < 0x7F;
    }var _isgraph=_isprint;


  function _ispunct(chr) {
      return (chr >= '!'.charCodeAt(0) && chr <= '/'.charCodeAt(0)) ||
             (chr >= ':'.charCodeAt(0) && chr <= '@'.charCodeAt(0)) ||
             (chr >= '['.charCodeAt(0) && chr <= '`'.charCodeAt(0)) ||
             (chr >= '{'.charCodeAt(0) && chr <= '~'.charCodeAt(0));
    }

  function _isxdigit(chr) {
      return (chr >= '0'.charCodeAt(0) && chr <= '9'.charCodeAt(0)) ||
             (chr >= 'a'.charCodeAt(0) && chr <= 'f'.charCodeAt(0)) ||
             (chr >= 'A'.charCodeAt(0) && chr <= 'F'.charCodeAt(0));
    }

  var _strcoll=_strcmp;

  function _memcmp(p1, p2, num) {
      for (var i = 0; i < num; i++) {
        var v1 = HEAPU8[((p1)+(i))];
        var v2 = HEAPU8[((p2)+(i))];
        if (v1 != v2) return v1 > v2 ? 1 : -1;
      }
      return 0;
    }

  
  
  
  var _environ=null;
  
  var ___environ=null;function ___buildEnvironment(env) {
      // WARNING: Arbitrary limit!
      var MAX_ENV_VALUES = 64;
      var TOTAL_ENV_SIZE = 1024;
  
      // Statically allocate memory for the environment.
      var poolPtr;
      var envPtr;
      if (_environ === null) {
        // Set default values. Use string keys for Closure Compiler compatibility.
        ENV['USER'] = 'root';
        ENV['PATH'] = '/';
        ENV['PWD'] = '/';
        ENV['HOME'] = '/home/emscripten';
        ENV['LANG'] = 'en_US.UTF-8';
        ENV['_'] = './this.program';
        // Allocate memory.
        poolPtr = allocate(TOTAL_ENV_SIZE, 'i8', ALLOC_STATIC);
        envPtr = allocate(MAX_ENV_VALUES * 4,
                          'i8*', ALLOC_STATIC);
        HEAP32[((envPtr)>>2)]=poolPtr
        _environ = allocate([envPtr], 'i8**', ALLOC_STATIC);
        // Set up global variable alias.
        ___environ = _environ;
      } else {
        envPtr = HEAP32[((_environ)>>2)];
        poolPtr = HEAP32[((envPtr)>>2)];
      }
  
      // Collect key=value lines.
      var strings = [];
      var totalSize = 0;
      for (var key in env) {
        if (typeof env[key] === 'string') {
          var line = key + '=' + env[key];
          strings.push(line);
          totalSize += line.length;
        }
      }
      if (totalSize > TOTAL_ENV_SIZE) {
        throw new Error('Environment size exceeded TOTAL_ENV_SIZE!');
      }
  
      // Make new.
      var ptrSize = 4;
      for (var i = 0; i < strings.length; i++) {
        var line = strings[i];
        for (var j = 0; j < line.length; j++) {
          HEAP8[((poolPtr)+(j))]=line.charCodeAt(j);
        }
        HEAP8[((poolPtr)+(j))]=0;
        HEAP32[(((envPtr)+(i * ptrSize))>>2)]=poolPtr;
        poolPtr += line.length + 1;
      }
      HEAP32[(((envPtr)+(strings.length * ptrSize))>>2)]=0;
    }var ENV={};function _getenv(name) {
      // char *getenv(const char *name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/getenv.html
      if (name === 0) return 0;
      name = Pointer_stringify(name);
      if (!ENV.hasOwnProperty(name)) return 0;
  
      if (_getenv.ret) _free(_getenv.ret);
      _getenv.ret = allocate(intArrayFromString(ENV[name]), 'i8', ALLOC_NORMAL);
      return _getenv.ret;
    }

  
  function _fwrite(ptr, size, nitems, stream) {
      // size_t fwrite(const void *restrict ptr, size_t size, size_t nitems, FILE *restrict stream);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/fwrite.html
      var bytesToWrite = nitems * size;
      if (bytesToWrite == 0) return 0;
      var bytesWritten = _write(stream, ptr, bytesToWrite);
      if (bytesWritten == -1) {
        if (FS.streams[stream]) FS.streams[stream].error = true;
        return 0;
      } else {
        return Math.floor(bytesWritten / size);
      }
    }function _fprintf(stream, format, varargs) {
      // int fprintf(FILE *restrict stream, const char *restrict format, ...);
      // http://pubs.opengroup.org/onlinepubs/000095399/functions/printf.html
      var result = __formatString(format, varargs);
      var stack = Runtime.stackSave();
      var ret = _fwrite(allocate(result, 'i8', ALLOC_STACK), 1, result.length, stream);
      Runtime.stackRestore(stack);
      return ret;
    }
var _llvm_dbg_declare; // stub for _llvm_dbg_declare
var _llvm_expect_i32; // stub for _llvm_expect_i32

  function _abort() {
      ABORT = true;
      throw 'abort() at ' + (new Error().stack);
    }

  function _sysconf(name) {
      // long sysconf(int name);
      // http://pubs.opengroup.org/onlinepubs/009695399/functions/sysconf.html
      switch(name) {
        case 8: return PAGE_SIZE;
        case 54:
        case 56:
        case 21:
        case 61:
        case 63:
        case 22:
        case 67:
        case 23:
        case 24:
        case 25:
        case 26:
        case 27:
        case 69:
        case 28:
        case 101:
        case 70:
        case 71:
        case 29:
        case 30:
        case 199:
        case 75:
        case 76:
        case 32:
        case 43:
        case 44:
        case 80:
        case 46:
        case 47:
        case 45:
        case 48:
        case 49:
        case 42:
        case 82:
        case 33:
        case 7:
        case 108:
        case 109:
        case 107:
        case 112:
        case 119:
        case 121:
          return 200809;
        case 13:
        case 104:
        case 94:
        case 95:
        case 34:
        case 35:
        case 77:
        case 81:
        case 83:
        case 84:
        case 85:
        case 86:
        case 87:
        case 88:
        case 89:
        case 90:
        case 91:
        case 94:
        case 95:
        case 110:
        case 111:
        case 113:
        case 114:
        case 115:
        case 116:
        case 117:
        case 118:
        case 120:
        case 40:
        case 16:
        case 79:
        case 19:
          return -1;
        case 92:
        case 93:
        case 5:
        case 72:
        case 6:
        case 74:
        case 92:
        case 93:
        case 96:
        case 97:
        case 98:
        case 99:
        case 102:
        case 103:
        case 105:
          return 1;
        case 38:
        case 66:
        case 50:
        case 51:
        case 4:
          return 1024;
        case 15:
        case 64:
        case 41:
          return 32;
        case 55:
        case 37:
        case 17:
          return 2147483647;
        case 18:
        case 1:
          return 47839;
        case 59:
        case 57:
          return 99;
        case 68:
        case 58:
          return 2048;
        case 0: return 2097152;
        case 3: return 65536;
        case 14: return 32768;
        case 73: return 32767;
        case 39: return 16384;
        case 60: return 1000;
        case 106: return 700;
        case 52: return 256;
        case 62: return 255;
        case 2: return 100;
        case 65: return 64;
        case 36: return 20;
        case 100: return 16;
        case 20: return 6;
        case 53: return 4;
      }
      ___setErrNo(ERRNO_CODES.EINVAL);
      return -1;
    }

  function _sbrk(bytes) {
      // Implement a Linux-like 'memory area' for our 'process'.
      // Changes the size of the memory area by |bytes|; returns the
      // address of the previous top ('break') of the memory area
  
      // We need to make sure no one else allocates unfreeable memory!
      // We must control this entirely. So we don't even need to do
      // unfreeable allocations - the HEAP is ours, from STATICTOP up.
      // TODO: We could in theory slice off the top of the HEAP when
      //       sbrk gets a negative increment in |bytes|...
      var self = _sbrk;
      if (!self.called) {
        STATICTOP = alignMemoryPage(STATICTOP); // make sure we start out aligned
        self.called = true;
        _sbrk.DYNAMIC_START = STATICTOP;
      }
      var ret = STATICTOP;
      if (bytes != 0) Runtime.staticAlloc(bytes);
      return ret;  // Previous break location.
    }





  var Browser={mainLoop:{scheduler:null,shouldPause:false,paused:false,queue:[],pause:function () {
          Browser.mainLoop.shouldPause = true;
        },resume:function () {
          if (Browser.mainLoop.paused) {
            Browser.mainLoop.paused = false;
            Browser.mainLoop.scheduler();
          }
          Browser.mainLoop.shouldPause = false;
        },updateStatus:function () {
          if (Module['setStatus']) {
            var message = Module['statusMessage'] || 'Please wait...';
            var remaining = Browser.mainLoop.remainingBlockers;
            var expected = Browser.mainLoop.expectedBlockers;
            if (remaining) {
              if (remaining < expected) {
                Module['setStatus'](message + ' (' + (expected - remaining) + '/' + expected + ')');
              } else {
                Module['setStatus'](message);
              }
            } else {
              Module['setStatus']('');
            }
          }
        }},pointerLock:false,moduleContextCreatedCallbacks:[],workers:[],ensureObjects:function () {
        if (Browser.ensured) return;
        Browser.ensured = true;
        try {
          new Blob();
          Browser.hasBlobConstructor = true;
        } catch(e) {
          Browser.hasBlobConstructor = false;
          console.log("warning: no blob constructor, cannot create blobs with mimetypes");
        }
        Browser.BlobBuilder = typeof MozBlobBuilder != "undefined" ? MozBlobBuilder : (typeof WebKitBlobBuilder != "undefined" ? WebKitBlobBuilder : (!Browser.hasBlobConstructor ? console.log("warning: no BlobBuilder") : null));
        Browser.URLObject = typeof window != "undefined" ? (window.URL ? window.URL : window.webkitURL) : console.log("warning: cannot create object URLs");
  
        // Support for plugins that can process preloaded files. You can add more of these to
        // your app by creating and appending to Module.preloadPlugins.
        //
        // Each plugin is asked if it can handle a file based on the file's name. If it can,
        // it is given the file's raw data. When it is done, it calls a callback with the file's
        // (possibly modified) data. For example, a plugin might decompress a file, or it
        // might create some side data structure for use later (like an Image element, etc.).
  
        function getMimetype(name) {
          return {
            'jpg': 'image/jpeg',
            'png': 'image/png',
            'bmp': 'image/bmp',
            'ogg': 'audio/ogg',
            'wav': 'audio/wav',
            'mp3': 'audio/mpeg'
          }[name.substr(-3)];
          return ret;
        }
  
        if (!Module["preloadPlugins"]) Module["preloadPlugins"] = [];
  
        var imagePlugin = {};
        imagePlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.jpg': 1, '.png': 1, '.bmp': 1 };
        };
        imagePlugin['handle'] = function(byteArray, name, onload, onerror) {
          var b = null;
          if (Browser.hasBlobConstructor) {
            try {
              b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              Runtime.warnOnce('Blob constructor present but fails: ' + e + '; falling back to blob builder');
            }
          }
          if (!b) {
            var bb = new Browser.BlobBuilder();
            bb.append((new Uint8Array(byteArray)).buffer); // we need to pass a buffer, and must copy the array to get the right data range
            b = bb.getBlob();
          }
          var url = Browser.URLObject.createObjectURL(b);
          assert(typeof url == 'string', 'createObjectURL must return a url as a string');
          var img = new Image();
          img.onload = function() {
            assert(img.complete, 'Image ' + name + ' could not be decoded');
            var canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            var ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            Module["preloadedImages"][name] = canvas;
            Browser.URLObject.revokeObjectURL(url);
            if (onload) onload(byteArray);
          };
          img.onerror = function(event) {
            console.log('Image ' + url + ' could not be decoded');
            if (onerror) onerror();
          };
          img.src = url;
        };
        Module['preloadPlugins'].push(imagePlugin);
  
        var audioPlugin = {};
        audioPlugin['canHandle'] = function(name) {
          return name.substr(-4) in { '.ogg': 1, '.wav': 1, '.mp3': 1 };
        };
        audioPlugin['handle'] = function(byteArray, name, onload, onerror) {
          var done = false;
          function finish(audio) {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = audio;
            if (onload) onload(byteArray);
          }
          function fail() {
            if (done) return;
            done = true;
            Module["preloadedAudios"][name] = new Audio(); // empty shim
            if (onerror) onerror();
          }
          if (Browser.hasBlobConstructor) {
            try {
              var b = new Blob([byteArray], { type: getMimetype(name) });
            } catch(e) {
              return fail();
            }
            var url = Browser.URLObject.createObjectURL(b); // XXX we never revoke this!
            assert(typeof url == 'string', 'createObjectURL must return a url as a string');
            var audio = new Audio();
            audio.addEventListener('canplaythrough', function() { finish(audio) }, false); // use addEventListener due to chromium bug 124926
            audio.onerror = function(event) {
              if (done) return;
              console.log('warning: browser could not fully decode audio ' + name + ', trying slower base64 approach');
              function encode64(data) {
                var BASE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
                var PAD = '=';
                var ret = '';
                var leftchar = 0;
                var leftbits = 0;
                for (var i = 0; i < data.length; i++) {
                  leftchar = (leftchar << 8) | data[i];
                  leftbits += 8;
                  while (leftbits >= 6) {
                    var curr = (leftchar >> (leftbits-6)) & 0x3f;
                    leftbits -= 6;
                    ret += BASE[curr];
                  }
                }
                if (leftbits == 2) {
                  ret += BASE[(leftchar&3) << 4];
                  ret += PAD + PAD;
                } else if (leftbits == 4) {
                  ret += BASE[(leftchar&0xf) << 2];
                  ret += PAD;
                }
                return ret;
              }
              audio.src = 'data:audio/x-' + name.substr(-3) + ';base64,' + encode64(byteArray);
              finish(audio); // we don't wait for confirmation this worked - but it's worth trying
            };
            audio.src = url;
            // workaround for chrome bug 124926 - we do not always get oncanplaythrough or onerror
            setTimeout(function() {
              finish(audio); // try to use it even though it is not necessarily ready to play
            }, 10000);
          } else {
            return fail();
          }
        };
        Module['preloadPlugins'].push(audioPlugin);
      },createContext:function (canvas, useWebGL, setInModule) {
        try {
          var ctx = canvas.getContext(useWebGL ? 'experimental-webgl' : '2d');
          if (!ctx) throw ':(';
        } catch (e) {
          Module.print('Could not create canvas - ' + e);
          return null;
        }
        if (useWebGL) {
          // Set the background of the WebGL canvas to black
          canvas.style.backgroundColor = "black";
  
          // Warn on context loss
          canvas.addEventListener('webglcontextlost', function(event) {
            alert('WebGL context lost. You will need to reload the page.');
          }, false);
        }
        if (setInModule) {
          Module.ctx = ctx;
          Module.useWebGL = useWebGL;
          Browser.moduleContextCreatedCallbacks.forEach(function(callback) { callback() });
        }
        return ctx;
      },requestFullScreen:function () {
        var canvas = Module['canvas'];
        function fullScreenChange() {
          var isFullScreen = false;
          if ((document['webkitFullScreenElement'] || document['webkitFullscreenElement'] ||
               document['mozFullScreenElement'] || document['mozFullscreenElement'] ||
               document['fullScreenElement'] || document['fullscreenElement']) === canvas) {
            canvas.requestPointerLock = canvas['requestPointerLock'] ||
                                        canvas['mozRequestPointerLock'] ||
                                        canvas['webkitRequestPointerLock'];
            canvas.requestPointerLock();
            isFullScreen = true;
          }
          if (Module['onFullScreen']) Module['onFullScreen'](isFullScreen);
        }
  
        document.addEventListener('fullscreenchange', fullScreenChange, false);
        document.addEventListener('mozfullscreenchange', fullScreenChange, false);
        document.addEventListener('webkitfullscreenchange', fullScreenChange, false);
  
        function pointerLockChange() {
          Browser.pointerLock = document['pointerLockElement'] === canvas ||
                                document['mozPointerLockElement'] === canvas ||
                                document['webkitPointerLockElement'] === canvas;
        }
  
        document.addEventListener('pointerlockchange', pointerLockChange, false);
        document.addEventListener('mozpointerlockchange', pointerLockChange, false);
        document.addEventListener('webkitpointerlockchange', pointerLockChange, false);
  
        canvas.requestFullScreen = canvas['requestFullScreen'] ||
                                   canvas['mozRequestFullScreen'] ||
                                   (canvas['webkitRequestFullScreen'] ? function() { canvas['webkitRequestFullScreen'](Element['ALLOW_KEYBOARD_INPUT']) } : null);
        canvas.requestFullScreen(); 
      },requestAnimationFrame:function (func) {
        if (!window.requestAnimationFrame) {
          window.requestAnimationFrame = window['requestAnimationFrame'] ||
                                         window['mozRequestAnimationFrame'] ||
                                         window['webkitRequestAnimationFrame'] ||
                                         window['msRequestAnimationFrame'] ||
                                         window['oRequestAnimationFrame'] ||
                                         window['setTimeout'];
        }
        window.requestAnimationFrame(func);
      },getMovementX:function (event) {
        return event['movementX'] ||
               event['mozMovementX'] ||
               event['webkitMovementX'] ||
               0;
      },getMovementY:function (event) {
        return event['movementY'] ||
               event['mozMovementY'] ||
               event['webkitMovementY'] ||
               0;
      },xhrLoad:function (url, onload, onerror) {
        var xhr = new XMLHttpRequest();
        xhr.open('GET', url, true);
        xhr.responseType = 'arraybuffer';
        xhr.onload = function() {
          if (xhr.status == 200) {
            onload(xhr.response);
          } else {
            onerror();
          }
        };
        xhr.onerror = onerror;
        xhr.send(null);
      },asyncLoad:function (url, onload, onerror) {
        Browser.xhrLoad(url, function(arrayBuffer) {
          assert(arrayBuffer, 'Loading data file "' + url + '" failed (no arrayBuffer).');
          onload(new Uint8Array(arrayBuffer));
          removeRunDependency('al ' + url);
        }, function(event) {
          if (onerror) {
            onerror();
          } else {
            throw 'Loading data file "' + url + '" failed.';
          }
        });
        addRunDependency('al ' + url);
      },resizeListeners:[],updateResizeListeners:function () {
        var canvas = Module['canvas'];
        Browser.resizeListeners.forEach(function(listener) {
          listener(canvas.width, canvas.height);
        });
      },setCanvasSize:function (width, height, noUpdates) {
        var canvas = Module['canvas'];
        canvas.width = width;
        canvas.height = height;
        if (!noUpdates) Browser.updateResizeListeners();
      }};
__ATINIT__.unshift({ func: function() { if (!Module["noFSInit"] && !FS.init.initialized) FS.init() } });__ATMAIN__.push({ func: function() { FS.ignorePermissions = false } });__ATEXIT__.push({ func: function() { FS.quit() } });Module["FS_createFolder"] = FS.createFolder;Module["FS_createPath"] = FS.createPath;Module["FS_createDataFile"] = FS.createDataFile;Module["FS_createPreloadedFile"] = FS.createPreloadedFile;Module["FS_createLazyFile"] = FS.createLazyFile;Module["FS_createLink"] = FS.createLink;Module["FS_createDevice"] = FS.createDevice;
___setErrNo(0);
___buildEnvironment(ENV);
Module["requestFullScreen"] = function() { Browser.requestFullScreen() };
  Module["requestAnimationFrame"] = function(func) { Browser.requestAnimationFrame(func) };
  Module["pauseMainLoop"] = function() { Browser.mainLoop.pause() };
  Module["resumeMainLoop"] = function() { Browser.mainLoop.resume() };
  

// === Auto-generated postamble setup entry stuff ===

Module.callMain = function callMain(args) {
  var argc = args.length+1;
  function pad() {
    for (var i = 0; i < 4-1; i++) {
      argv.push(0);
    }
  }
  var argv = [allocate(intArrayFromString("/bin/this.program"), 'i8', ALLOC_STATIC) ];
  pad();
  for (var i = 0; i < argc-1; i = i + 1) {
    argv.push(allocate(intArrayFromString(args[i]), 'i8', ALLOC_STATIC));
    pad();
  }
  argv.push(0);
  argv = allocate(argv, 'i32', ALLOC_STATIC);

  try {
    return _main(argc, argv, 0);
  }
  catch(e) { if (e.name == "ExitStatus") return e.status; throw e; }
}



var _G1;


var _G;
var _stdin;

var _stdout;

var _stderr;









var __str41;

























var _tokeninfo;
var _PRIMES;




var _local_buf;


var _logmode;

var _msg_eol;
var __str1121;


var _die_sleep;
var _opt_complementary;


var _applet_name;




var _rerrs;



































var __str35232;

var _nuls;

































































































var _cnames;
var _cclasses;











var ___collate_range_cmp_s1;
var ___collate_range_cmp_s2;
var ___collate_load_error;

var _optarg;
var _optind;
var _opterr;
var _optopt;
var _optwhere;







var __gm_;
var _mparams;
STRING_TABLE.__str20=allocate([119,101,98,97,119,107,95,110,111,116,105,102,105,99,97,116,105,111,110,95,99,97,108,108,98,97,99,107,40,37,100,44,37,100,44,37,100,44,37,100,44,37,100,41,0] /* webawk_notification_ */, "i8", ALLOC_STATIC);
_G1=allocate(120, "i8", ALLOC_STATIC);
STRING_TABLE._vNames=allocate([67,79,78,86,70,77,84,0,79,70,77,84,0,70,83,0,42,79,70,83,0,79,82,83,0,82,83,0,42,82,84,0,70,73,76,69,78,65,77,69,0,83,85,66,83,69,80,0,36,0,42,65,82,71,73,78,68,0,65,82,71,67,0,65,82,71,86,0,69,82,82,78,79,0,70,78,82,0,78,82,0,78,70,0,42,73,71,78,79,82,69,67,65,83,69,0,42,69,78,86,73,82,79,78,0,0,0] /* CONVFMT\00OFMT\00FS\ */, "i8", ALLOC_STATIC);
STRING_TABLE._vValues=allocate([37,46,54,103,0,37,46,54,103,0,32,0,32,0,10,0,10,0,0,0,28,0,0,255,0] /* %.6g\00%.6g\00 \00 \ */, "i8", ALLOC_STATIC);
_G=allocate(384, "i8", ALLOC_STATIC);
STRING_TABLE.__str23=allocate([47,100,101,118,47,115,116,100,105,110,0] /* /dev/stdin\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24=allocate([47,100,101,118,47,115,116,100,111,117,116,0] /* /dev/stdout\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25=allocate([47,100,101,118,47,115,116,100,101,114,114,0] /* /dev/stderr\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26=allocate([118,58,58,102,58,58,0] /* v::f::\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27=allocate([70,58,118,58,102,58,87,58,0] /* F:v:f:W:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31=allocate([99,109,100,46,32,108,105,110,101,0] /* cmd. line\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33=allocate([119,97,114,110,105,110,103,58,32,111,112,116,105,111,110,32,45,87,32,105,115,32,105,103,110,111,114,101,100,0] /* warning: option -W i */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35=allocate([97,119,107,0] /* awk\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38=allocate([37,115,58,37,105,58,32,37,115,0] /* %s:%i: %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39=allocate([10,10,0] /* \0A\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40=allocate([45,0] /* -\00 */, "i8", ALLOC_STATIC);
__str41=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str42=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43=allocate([100,105,111,117,120,88,0] /* diouxX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44=allocate([101,69,102,103,71,0] /* eEfgG\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_INV_FMT=allocate([73,110,118,97,108,105,100,32,102,111,114,109,97,116,32,115,112,101,99,105,102,105,101,114,0] /* Invalid format speci */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45=allocate([119,0] /* w\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46=allocate([112,111,112,101,110,0] /* popen\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47=allocate([97,0] /* a\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_NOT_ARRAY=allocate([78,111,116,32,97,110,32,97,114,114,97,121,0] /* Not an array\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_POSSIBLE_ERROR=allocate([80,111,115,115,105,98,108,101,32,115,121,110,116,97,120,32,101,114,114,111,114,0] /* Possible syntax erro */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_UNDEF_FUNC=allocate([67,97,108,108,32,116,111,32,117,110,100,101,102,105,110,101,100,32,102,117,110,99,116,105,111,110,0] /* Call to undefined fu */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_NO_MATH=allocate([77,97,116,104,32,115,117,112,112,111,114,116,32,105,115,32,110,111,116,32,99,111,109,112,105,108,101,100,32,105,110,0] /* Math support is not  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49=allocate([37,115,37,115,37,115,0] /* %s%s%s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_DIV_BY_ZERO=allocate([68,105,118,105,115,105,111,110,32,98,121,32,122,101,114,111,0] /* Division by zero\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_TOO_FEW_ARGS=allocate([84,111,111,32,102,101,119,32,97,114,103,117,109,101,110,116,115,32,102,111,114,32,98,117,105,108,116,105,110,0] /* Too few arguments fo */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50=allocate([37,97,32,37,98,32,37,100,32,37,72,58,37,77,58,37,83,32,37,90,32,37,89,0] /* %a %b %d %H:%M:%S %Z */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51=allocate([82,83,84,65,82,84,0] /* RSTART\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52=allocate([82,76,69,78,71,84,72,0] /* RLENGTH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53=allocate([37,117,32,37,117,32,37,117,32,37,117,32,37,117,32,37,117,32,37,100,0] /* %u %u %u %u %u %u %d */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_INTERNAL_ERROR=allocate([73,110,116,101,114,110,97,108,32,101,114,114,111,114,0] /* Internal error\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54=allocate([37,42,120,32,102,111,114,109,97,116,115,32,97,114,101,32,110,111,116,32,115,117,112,112,111,114,116,101,100,0] /* %_x formats are not  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55=allocate([69,109,112,116,121,32,115,101,113,117,101,110,99,101,0] /* Empty sequence\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_UNEXP_TOKEN=allocate([85,110,101,120,112,101,99,116,101,100,32,116,111,107,101,110,0] /* Unexpected token\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._EMSG_UNEXP_EOS=allocate([85,110,101,120,112,101,99,116,101,100,32,101,110,100,32,111,102,32,115,116,114,105,110,103,0] /* Unexpected end of st */, "i8", ALLOC_STATIC);
STRING_TABLE._tokenlist=allocate([1,40,255,1,41,255,1,47,255,2,62,62,1,62,1,124,255,2,43,43,2,45,45,255,2,43,43,2,45,45,1,36,255,2,61,61,1,61,2,43,61,2,45,61,2,42,61,2,47,61,2,37,61,2,94,61,1,43,1,45,3,42,42,61,2,42,42,1,47,1,37,1,94,1,42,2,33,61,2,62,61,2,60,61,1,62,1,60,2,33,126,1,126,2,38,38,2,124,124,1,63,1,58,255,2,105,110,255,1,44,255,1,124,255,1,43,1,45,1,33,255,1,93,255,1,123,255,1,125,255,1,59,255,1,10,255,2,105,102,2,100,111,3,102,111,114,5,98,114,101,97,107,8,99,111,110,116,105,110,117,101,6,100,101,108,101,116,101,5,112,114,105,110,116,6,112,114,105,110,116,102,4,110,101,120,116,8,110,101,120,116,102,105,108,101,6,114,101,116,117,114,110,4,101,120,105,116,255,5,119,104,105,108,101,255,4,101,108,115,101,255,3,97,110,100,5,99,111,109,112,108,6,108,115,104,105,102,116,2,111,114,6,114,115,104,105,102,116,3,120,111,114,5,99,108,111,115,101,6,115,121,115,116,101,109,6,102,102,108,117,115,104,5,97,116,97,110,50,3,99,111,115,3,101,120,112,3,105,110,116,3,108,111,103,4,114,97,110,100,3,115,105,110,4,115,113,114,116,5,115,114,97,110,100,6,103,101,110,115,117,98,4,103,115,117,98,5,105,110,100,101,120,6,108,101,110,103,116,104,5,109,97,116,99,104,5,115,112,108,105,116,7,115,112,114,105,110,116,102,3,115,117,98,6,115,117,98,115,116,114,7,115,121,115,116,105,109,101,8,115,116,114,102,116,105,109,101,6,109,107,116,105,109,101,7,116,111,108,111,119,101,114,7,116,111,117,112,112,101,114,255,7,103,101,116,108,105,110,101,255,4,102,117,110,99,8,102,117,110,99,116,105,111,110,255,5,66,69,71,73,78,255,3,69,78,68,0] /* \01(\FF\01)\FF\01/\F */, "i8", ALLOC_STATIC);
_tokeninfo=allocate([0, 0, 0, 0, 0, 0, 0, 0, 8448, 0, 0, 0, 655457, 0, 0, 0, 655479, 0, 0, 0, 655484, 0, 0, 0, 151135856, 0, 0, 0, 151135853, 0, 0, 0, 151135824, 0, 0, 0, 151135821, 0, 0, 0, 84023040, 0, 0, 0, 654513157, 0, 0, 0, 1241718528, 0, 0, 0, 1242767915, 0, 0, 0, 1242767917, 0, 0, 0, 1242767914, 0, 0, 0, 1242767919, 0, 0, 0, 1242767909, 0, 0, 0, 1242767910, 0, 0, 0, 487788587, 0, 0, 0, 487788589, 0, 0, 0, 1242767910, 0, 0, 0, 252907558, 0, 0, 0, 420679727, 0, 0, 0, 420679717, 0, 0, 0, 252907558, 0, 0, 0, 420679722, 0, 0, 0, 654513156, 0, 0, 0, 654513155, 0, 0, 0, 654513152, 0, 0, 0, 654513153, 0, 0, 0, 654513154, 0, 0, 0, 755310113, 0, 0, 0, 755310206, 0, 0, 0, 922819584, 0, 0, 0, 989928704, 0, 0, 0, 1073816895, 0, 0, 0, 1124078138, 0, 0, 0, 822549248, 0, 0, 0, 1343165184, 0, 0, 0, 621223936, 0, 0, 0, 318907947, 0, 0, 0, 318907949, 0, 0, 0, 318907937, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12288, 0, 0, 0, 12544, 0, 0, 0, 12800, 0, 0, 0, 2048, 0, 0, 0, 2304, 0, 0, 0, 65792, 0, 0, 0, 1024, 0, 0, 0, 1280, 0, 0, 0, 2816, 0, 0, 0, 3072, 0, 0, 0, 74496, 0, 0, 0, 1116672, 0, 0, 0, 13056, 0, 0, 0, 0, 0, 0, 0, -2097147636, 0, 0, 0, 1090523405, 0, 0, 0, -2097147634, 0, 0, 0, -2097147633, 0, 0, 0, -2097147632, 0, 0, 0, -2097147631, 0, 0, 0, 333324, 0, 0, 0, 333322, 0, 0, 0, 333323, 0, 0, 0, -2097147648, 0, 0, 0, 1119746, 0, 0, 0, 1119747, 0, 0, 0, 1119744, 0, 0, 0, 1119748, 0, 0, 0, 5633, 0, 0, 0, 1119749, 0, 0, 0, 1119750, 0, 0, 0, 1119751, 0, 0, 0, -704638711, 0, 0, 0, -1241509622, 0, 0, 0, -1694494463, 0, 0, 0, 333321, 0, 0, 0, -1996484350, 0, 0, 0, -1962929917, 0, 0, 0, 9216, 0, 0, 0, -1241509621, 0, 0, 0, -1895821052, 0, 0, 0, 5640, 0, 0, 0, 184553733, 0, 0, 0, 184553734, 0, 0, 0, 1224741127, 0, 0, 0, 1224741128, 0, 0, 0, 465408, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0,"i32",0,0,0], ALLOC_STATIC);
_PRIMES=allocate([251, 0, 1021, 0, 4093, 0, 16381, 0, -15, 0], ["i16",0,"i16",0,"i16",0,"i16",0,"i16",0], ALLOC_STATIC);
STRING_TABLE.__str56=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63=allocate([114,0] /* r\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str171=allocate([99,97,110,39,116,32,111,112,101,110,32,39,37,115,39,0] /* can't open '%s'\00 */, "i8", ALLOC_STATIC);
_local_buf=allocate(12, "i8", ALLOC_STATIC);
STRING_TABLE._bb_msg_memory_exhausted=allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0] /* out of memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE._bb_msg_standard_input=allocate([115,116,97,110,100,97,114,100,32,105,110,112,117,116,0] /* standard input\00 */, "i8", ALLOC_STATIC);
_logmode=allocate([1], ["i8",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str120=allocate([10,0] /* \0A\00 */, "i8", ALLOC_STATIC);
_msg_eol=allocate(4, "i8", ALLOC_STATIC);
__str1121=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE._bb_process_escape_sequence_charmap=allocate([97,98,101,102,110,114,116,118,92,0,7,8,27,12,10,13,9,11,92,92] /* abefnrtv\5C\00\07\08 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str130=allocate([37,115,0] /* %s\00 */, "i8", ALLOC_STATIC);
_die_sleep=allocate(4, "i8", ALLOC_STATIC);
_opt_complementary=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str161=allocate([98,97,100,32,114,101,103,101,120,32,39,37,115,39,58,32,37,115,0] /* bad regex '%s': %s\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4174=allocate([66,117,115,121,66,111,120,65,119,107,0] /* BusyBoxAwk\00 */, "i8", ALLOC_STATIC);
_applet_name=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str5177=allocate([40,66,117,115,121,66,111,120,32,65,87,75,32,85,115,97,103,101,41,10,0] /* (BusyBox AWK Usage)\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6178=allocate([70,58,118,58,102,58,87,58,0] /* F:v:f:W:\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7179=allocate([105,110,116,101,114,110,97,108,32,101,114,114,111,114,32,105,110,32,102,105,120,101,100,95,103,101,116,111,112,116,51,50,0] /* internal error in fi */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14186=allocate([105,110,118,97,108,105,100,32,99,111,109,109,97,110,100,45,108,105,110,101,32,97,114,103,117,109,101,110,116,0] /* invalid command-line */, "i8", ALLOC_STATIC);
_rerrs=allocate([1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 12, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 13, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 14, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 15, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 16, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"*",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str197=allocate([82,69,71,95,48,120,37,120,0] /* REG_0x%x\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1198=allocate([48,0] /* 0\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2199=allocate([37,100,0] /* %d\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3200=allocate([82,69,71,95,78,79,77,65,84,67,72,0] /* REG_NOMATCH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4201=allocate([114,101,103,101,120,101,99,40,41,32,102,97,105,108,101,100,32,116,111,32,109,97,116,99,104,0] /* regexec() failed to  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5202=allocate([82,69,71,95,66,65,68,80,65,84,0] /* REG_BADPAT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6203=allocate([105,110,118,97,108,105,100,32,114,101,103,117,108,97,114,32,101,120,112,114,101,115,115,105,111,110,0] /* invalid regular expr */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7204=allocate([82,69,71,95,69,67,79,76,76,65,84,69,0] /* REG_ECOLLATE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8205=allocate([105,110,118,97,108,105,100,32,99,111,108,108,97,116,105,110,103,32,101,108,101,109,101,110,116,0] /* invalid collating el */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9206=allocate([82,69,71,95,69,67,84,89,80,69,0] /* REG_ECTYPE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10207=allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,99,108,97,115,115,0] /* invalid character cl */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11208=allocate([82,69,71,95,69,69,83,67,65,80,69,0] /* REG_EESCAPE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12209=allocate([116,114,97,105,108,105,110,103,32,98,97,99,107,115,108,97,115,104,32,40,92,41,0] /* trailing backslash ( */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13210=allocate([82,69,71,95,69,83,85,66,82,69,71,0] /* REG_ESUBREG\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14211=allocate([105,110,118,97,108,105,100,32,98,97,99,107,114,101,102,101,114,101,110,99,101,32,110,117,109,98,101,114,0] /* invalid backreferenc */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15212=allocate([82,69,71,95,69,66,82,65,67,75,0] /* REG_EBRACK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16213=allocate([98,114,97,99,107,101,116,115,32,40,91,32,93,41,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* brackets ([ ]) not b */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17214=allocate([82,69,71,95,69,80,65,82,69,78,0] /* REG_EPAREN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18215=allocate([112,97,114,101,110,116,104,101,115,101,115,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* parentheses not bala */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19216=allocate([82,69,71,95,69,66,82,65,67,69,0] /* REG_EBRACE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20217=allocate([98,114,97,99,101,115,32,110,111,116,32,98,97,108,97,110,99,101,100,0] /* braces not balanced\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21218=allocate([82,69,71,95,66,65,68,66,82,0] /* REG_BADBR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22219=allocate([105,110,118,97,108,105,100,32,114,101,112,101,116,105,116,105,111,110,32,99,111,117,110,116,40,115,41,0] /* invalid repetition c */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23220=allocate([82,69,71,95,69,82,65,78,71,69,0] /* REG_ERANGE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24221=allocate([105,110,118,97,108,105,100,32,99,104,97,114,97,99,116,101,114,32,114,97,110,103,101,0] /* invalid character ra */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25222=allocate([82,69,71,95,69,83,80,65,67,69,0] /* REG_ESPACE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26223=allocate([111,117,116,32,111,102,32,109,101,109,111,114,121,0] /* out of memory\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27224=allocate([82,69,71,95,66,65,68,82,80,84,0] /* REG_BADRPT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28225=allocate([114,101,112,101,116,105,116,105,111,110,45,111,112,101,114,97,116,111,114,32,111,112,101,114,97,110,100,32,105,110,118,97,108,105,100,0] /* repetition-operator  */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29226=allocate([82,69,71,95,69,77,80,84,89,0] /* REG_EMPTY\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30227=allocate([101,109,112,116,121,32,40,115,117,98,41,101,120,112,114,101,115,115,105,111,110,0] /* empty (sub)expressio */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31228=allocate([82,69,71,95,65,83,83,69,82,84,0] /* REG_ASSERT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32229=allocate([34,99,97,110,39,116,32,104,97,112,112,101,110,34,32,45,45,32,121,111,117,32,102,111,117,110,100,32,97,32,98,117,103,0] /* \22can't happen\22 - */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33230=allocate([82,69,71,95,73,78,86,65,82,71,0] /* REG_INVARG\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34231=allocate([105,110,118,97,108,105,100,32,97,114,103,117,109,101,110,116,32,116,111,32,114,101,103,101,120,32,114,111,117,116,105,110,101,0] /* invalid argument to  */, "i8", ALLOC_STATIC);
__str35232=allocate(1, "i8", ALLOC_STATIC);
STRING_TABLE.__str36233=allocate([42,42,42,32,117,110,107,110,111,119,110,32,114,101,103,101,120,112,32,101,114,114,111,114,32,99,111,100,101,32,42,42,42,0] /* ___ unknown regexp e */, "i8", ALLOC_STATIC);
_nuls=allocate(10, "i8", ALLOC_STATIC);
STRING_TABLE.__str238=allocate([91,58,60,58,93,93,0] /* [:_:]]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1239=allocate([91,58,62,58,93,93,0] /* [:_:]]\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2240=allocate([78,85,76,0] /* NUL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3241=allocate([83,79,72,0] /* SOH\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4242=allocate([83,84,88,0] /* STX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5243=allocate([69,84,88,0] /* ETX\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6244=allocate([69,79,84,0] /* EOT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str7245=allocate([69,78,81,0] /* ENQ\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str8246=allocate([65,67,75,0] /* ACK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str9247=allocate([66,69,76,0] /* BEL\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str10248=allocate([97,108,101,114,116,0] /* alert\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str11249=allocate([66,83,0] /* BS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str12250=allocate([98,97,99,107,115,112,97,99,101,0] /* backspace\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str13251=allocate([72,84,0] /* HT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str14252=allocate([116,97,98,0] /* tab\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str15253=allocate([76,70,0] /* LF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str16254=allocate([110,101,119,108,105,110,101,0] /* newline\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str17255=allocate([86,84,0] /* VT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str18256=allocate([118,101,114,116,105,99,97,108,45,116,97,98,0] /* vertical-tab\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str19257=allocate([70,70,0] /* FF\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str20258=allocate([102,111,114,109,45,102,101,101,100,0] /* form-feed\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str21259=allocate([67,82,0] /* CR\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str22260=allocate([99,97,114,114,105,97,103,101,45,114,101,116,117,114,110,0] /* carriage-return\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str23261=allocate([83,79,0] /* SO\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str24262=allocate([83,73,0] /* SI\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str25263=allocate([68,76,69,0] /* DLE\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str26264=allocate([68,67,49,0] /* DC1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str27265=allocate([68,67,50,0] /* DC2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str28266=allocate([68,67,51,0] /* DC3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str29267=allocate([68,67,52,0] /* DC4\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str30268=allocate([78,65,75,0] /* NAK\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str31269=allocate([83,89,78,0] /* SYN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str32270=allocate([69,84,66,0] /* ETB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str33271=allocate([67,65,78,0] /* CAN\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str34272=allocate([69,77,0] /* EM\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str35273=allocate([83,85,66,0] /* SUB\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str36274=allocate([69,83,67,0] /* ESC\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str37275=allocate([73,83,52,0] /* IS4\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str38276=allocate([70,83,0] /* FS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str39277=allocate([73,83,51,0] /* IS3\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str40278=allocate([71,83,0] /* GS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str41279=allocate([73,83,50,0] /* IS2\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str42280=allocate([82,83,0] /* RS\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str43281=allocate([73,83,49,0] /* IS1\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str44282=allocate([85,83,0] /* US\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str45283=allocate([115,112,97,99,101,0] /* space\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str46284=allocate([101,120,99,108,97,109,97,116,105,111,110,45,109,97,114,107,0] /* exclamation-mark\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str47285=allocate([113,117,111,116,97,116,105,111,110,45,109,97,114,107,0] /* quotation-mark\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str48286=allocate([110,117,109,98,101,114,45,115,105,103,110,0] /* number-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str49287=allocate([100,111,108,108,97,114,45,115,105,103,110,0] /* dollar-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str50288=allocate([112,101,114,99,101,110,116,45,115,105,103,110,0] /* percent-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str51289=allocate([97,109,112,101,114,115,97,110,100,0] /* ampersand\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str52290=allocate([97,112,111,115,116,114,111,112,104,101,0] /* apostrophe\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str53291=allocate([108,101,102,116,45,112,97,114,101,110,116,104,101,115,105,115,0] /* left-parenthesis\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str54292=allocate([114,105,103,104,116,45,112,97,114,101,110,116,104,101,115,105,115,0] /* right-parenthesis\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str55293=allocate([97,115,116,101,114,105,115,107,0] /* asterisk\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str56294=allocate([112,108,117,115,45,115,105,103,110,0] /* plus-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str57=allocate([99,111,109,109,97,0] /* comma\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str58=allocate([104,121,112,104,101,110,0] /* hyphen\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str59=allocate([104,121,112,104,101,110,45,109,105,110,117,115,0] /* hyphen-minus\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str60=allocate([112,101,114,105,111,100,0] /* period\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str61=allocate([102,117,108,108,45,115,116,111,112,0] /* full-stop\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str62=allocate([115,108,97,115,104,0] /* slash\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str63295=allocate([115,111,108,105,100,117,115,0] /* solidus\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str64=allocate([122,101,114,111,0] /* zero\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str65=allocate([111,110,101,0] /* one\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str66=allocate([116,119,111,0] /* two\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str67=allocate([116,104,114,101,101,0] /* three\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str68=allocate([102,111,117,114,0] /* four\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str69=allocate([102,105,118,101,0] /* five\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str70296=allocate([115,105,120,0] /* six\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str71=allocate([115,101,118,101,110,0] /* seven\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str72=allocate([101,105,103,104,116,0] /* eight\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str73=allocate([110,105,110,101,0] /* nine\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str74=allocate([99,111,108,111,110,0] /* colon\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str75=allocate([115,101,109,105,99,111,108,111,110,0] /* semicolon\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str76=allocate([108,101,115,115,45,116,104,97,110,45,115,105,103,110,0] /* less-than-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str77=allocate([101,113,117,97,108,115,45,115,105,103,110,0] /* equals-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str78=allocate([103,114,101,97,116,101,114,45,116,104,97,110,45,115,105,103,110,0] /* greater-than-sign\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str79=allocate([113,117,101,115,116,105,111,110,45,109,97,114,107,0] /* question-mark\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str80=allocate([99,111,109,109,101,114,99,105,97,108,45,97,116,0] /* commercial-at\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str81=allocate([108,101,102,116,45,115,113,117,97,114,101,45,98,114,97,99,107,101,116,0] /* left-square-bracket\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str82=allocate([98,97,99,107,115,108,97,115,104,0] /* backslash\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str83=allocate([114,101,118,101,114,115,101,45,115,111,108,105,100,117,115,0] /* reverse-solidus\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str84=allocate([114,105,103,104,116,45,115,113,117,97,114,101,45,98,114,97,99,107,101,116,0] /* right-square-bracket */, "i8", ALLOC_STATIC);
STRING_TABLE.__str85=allocate([99,105,114,99,117,109,102,108,101,120,0] /* circumflex\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str86=allocate([99,105,114,99,117,109,102,108,101,120,45,97,99,99,101,110,116,0] /* circumflex-accent\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str87=allocate([117,110,100,101,114,115,99,111,114,101,0] /* underscore\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str88=allocate([108,111,119,45,108,105,110,101,0] /* low-line\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str89=allocate([103,114,97,118,101,45,97,99,99,101,110,116,0] /* grave-accent\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str90=allocate([108,101,102,116,45,98,114,97,99,101,0] /* left-brace\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str91=allocate([108,101,102,116,45,99,117,114,108,121,45,98,114,97,99,107,101,116,0] /* left-curly-bracket\0 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str92=allocate([118,101,114,116,105,99,97,108,45,108,105,110,101,0] /* vertical-line\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str93=allocate([114,105,103,104,116,45,98,114,97,99,101,0] /* right-brace\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str94=allocate([114,105,103,104,116,45,99,117,114,108,121,45,98,114,97,99,107,101,116,0] /* right-curly-bracket\ */, "i8", ALLOC_STATIC);
STRING_TABLE.__str95=allocate([116,105,108,100,101,0] /* tilde\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str96=allocate([68,69,76,0] /* DEL\00 */, "i8", ALLOC_STATIC);
_cnames=allocate([0, 0, 0, 0, 0, undef, 0, 0, 0, 0, 0, 0, 1, undef, 0, 0, 0, 0, 0, 0, 2, undef, 0, 0, 0, 0, 0, 0, 3, undef, 0, 0, 0, 0, 0, 0, 4, undef, 0, 0, 0, 0, 0, 0, 5, undef, 0, 0, 0, 0, 0, 0, 6, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 7, undef, 0, 0, 0, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 8, undef, 0, 0, 0, 0, 0, 0, 9, undef, 0, 0, 0, 0, 0, 0, 9, undef, 0, 0, 0, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 10, undef, 0, 0, 0, 0, 0, 0, 11, undef, 0, 0, 0, 0, 0, 0, 11, undef, 0, 0, 0, 0, 0, 0, 12, undef, 0, 0, 0, 0, 0, 0, 12, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 13, undef, 0, 0, 0, 0, 0, 0, 14, undef, 0, 0, 0, 0, 0, 0, 15, undef, 0, 0, 0, 0, 0, 0, 16, undef, 0, 0, 0, 0, 0, 0, 17, undef, 0, 0, 0, 0, 0, 0, 18, undef, 0, 0, 0, 0, 0, 0, 19, undef, 0, 0, 0, 0, 0, 0, 20, undef, 0, 0, 0, 0, 0, 0, 21, undef, 0, 0, 0, 0, 0, 0, 22, undef, 0, 0, 0, 0, 0, 0, 23, undef, 0, 0, 0, 0, 0, 0, 24, undef, 0, 0, 0, 0, 0, 0, 25, undef, 0, 0, 0, 0, 0, 0, 26, undef, 0, 0, 0, 0, 0, 0, 27, undef, 0, 0, 0, 0, 0, 0, 28, undef, 0, 0, 0, 0, 0, 0, 28, undef, 0, 0, 0, 0, 0, 0, 29, undef, 0, 0, 0, 0, 0, 0, 29, undef, 0, 0, 0, 0, 0, 0, 30, undef, 0, 0, 0, 0, 0, 0, 30, undef, 0, 0, 0, 0, 0, 0, 31, undef, 0, 0, 0, 0, 0, 0, 31, undef, 0, 0, 0, 0, 0, 0, 32, undef, 0, 0, 0, 0, 0, 0, 33, undef, 0, 0, 0, 0, 0, 0, 34, undef, 0, 0, 0, 0, 0, 0, 35, undef, 0, 0, 0, 0, 0, 0, 36, undef, 0, 0, 0, 0, 0, 0, 37, undef, 0, 0, 0, 0, 0, 0, 38, undef, 0, 0, 0, 0, 0, 0, 39, undef, 0, 0, 0, 0, 0, 0, 40, undef, 0, 0, 0, 0, 0, 0, 41, undef, 0, 0, 0, 0, 0, 0, 42, undef, 0, 0, 0, 0, 0, 0, 43, undef, 0, 0, 0, 0, 0, 0, 44, undef, 0, 0, 0, 0, 0, 0, 45, undef, 0, 0, 0, 0, 0, 0, 45, undef, 0, 0, 0, 0, 0, 0, 46, undef, 0, 0, 0, 0, 0, 0, 46, undef, 0, 0, 0, 0, 0, 0, 47, undef, 0, 0, 0, 0, 0, 0, 47, undef, 0, 0, 0, 0, 0, 0, 48, undef, 0, 0, 0, 0, 0, 0, 49, undef, 0, 0, 0, 0, 0, 0, 50, undef, 0, 0, 0, 0, 0, 0, 51, undef, 0, 0, 0, 0, 0, 0, 52, undef, 0, 0, 0, 0, 0, 0, 53, undef, 0, 0, 0, 0, 0, 0, 54, undef, 0, 0, 0, 0, 0, 0, 55, undef, 0, 0, 0, 0, 0, 0, 56, undef, 0, 0, 0, 0, 0, 0, 57, undef, 0, 0, 0, 0, 0, 0, 58, undef, 0, 0, 0, 0, 0, 0, 59, undef, 0, 0, 0, 0, 0, 0, 60, undef, 0, 0, 0, 0, 0, 0, 61, undef, 0, 0, 0, 0, 0, 0, 62, undef, 0, 0, 0, 0, 0, 0, 63, undef, 0, 0, 0, 0, 0, 0, 64, undef, 0, 0, 0, 0, 0, 0, 91, undef, 0, 0, 0, 0, 0, 0, 92, undef, 0, 0, 0, 0, 0, 0, 92, undef, 0, 0, 0, 0, 0, 0, 93, undef, 0, 0, 0, 0, 0, 0, 94, undef, 0, 0, 0, 0, 0, 0, 94, undef, 0, 0, 0, 0, 0, 0, 95, undef, 0, 0, 0, 0, 0, 0, 95, undef, 0, 0, 0, 0, 0, 0, 96, undef, 0, 0, 0, 0, 0, 0, 123, undef, 0, 0, 0, 0, 0, 0, 123, undef, 0, 0, 0, 0, 0, 0, 124, undef, 0, 0, 0, 0, 0, 0, 125, undef, 0, 0, 0, 0, 0, 0, 125, undef, 0, 0, 0, 0, 0, 0, 126, undef, 0, 0, 0, 0, 0, 0, 127, undef, 0, 0, 0, 0, 0, 0, 0, undef, 0, 0], ["*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8","*",0,0,0,"i8","i8","i8","i8"], ALLOC_STATIC);
_cclasses=allocate([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 6, 0, 0, 0, 0, 0, 0, 0, 7, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 9, 0, 0, 0, 0, 0, 0, 0, 10, 0, 0, 0, 0, 0, 0, 0, 11, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], ["*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0,"*",0,0,0,"i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str97=allocate([97,108,110,117,109,0] /* alnum\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str98=allocate([97,108,112,104,97,0] /* alpha\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str99=allocate([98,108,97,110,107,0] /* blank\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str100=allocate([99,110,116,114,108,0] /* cntrl\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str101=allocate([100,105,103,105,116,0] /* digit\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str102=allocate([103,114,97,112,104,0] /* graph\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str103=allocate([108,111,119,101,114,0] /* lower\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str104=allocate([112,114,105,110,116,0] /* print\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str105=allocate([112,117,110,99,116,0] /* punct\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str106=allocate([117,112,112,101,114,0] /* upper\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str107=allocate([120,100,105,103,105,116,0] /* xdigit\00 */, "i8", ALLOC_STATIC);
___collate_range_cmp_s1=allocate(2, "i8", ALLOC_STATIC);
___collate_range_cmp_s2=allocate(2, "i8", ALLOC_STATIC);
___collate_load_error=allocate([1], ["i32",0,0,0], ALLOC_STATIC);
STRING_TABLE.__str313=allocate([115,104,117,116,32,117,112,32,103,99,99,0] /* shut up gcc\00 */, "i8", ALLOC_STATIC);
_optarg=allocate(4, "i8", ALLOC_STATIC);
_optind=allocate(4, "i8", ALLOC_STATIC);
_opterr=allocate([1], ["i32",0,0,0], ALLOC_STATIC);
_optopt=allocate([63], ["i32",0,0,0], ALLOC_STATIC);
_optwhere=allocate(4, "i8", ALLOC_STATIC);
STRING_TABLE.__str324=allocate([45,45,0] /* --\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str1325=allocate([80,79,83,73,88,76,89,95,67,79,82,82,69,67,84,0] /* POSIXLY_CORRECT\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str2326=allocate([37,115,58,32,111,112,116,105,111,110,32,96,37,115,39,32,105,115,32,97,109,98,105,103,117,111,117,115,32,40,99,111,117,108,100,32,98,101,32,96,45,45,37,115,39,32,111,114,32,96,45,45,37,115,39,41,10,0] /* %s: option `%s' is a */, "i8", ALLOC_STATIC);
STRING_TABLE.__str3327=allocate([37,115,58,32,105,110,118,97,108,105,100,32,111,112,116,105,111,110,32,45,45,32,96,45,37,99,39,10,0] /* %s: invalid option - */, "i8", ALLOC_STATIC);
STRING_TABLE.__str4328=allocate([37,115,58,32,97,114,103,117,109,101,110,116,32,114,101,113,117,105,114,101,100,32,102,111,114,32,111,112,116,105,111,110,32,96,0] /* %s: argument require */, "i8", ALLOC_STATIC);
STRING_TABLE.__str5329=allocate([45,45,37,115,39,10,0] /* --%s'\0A\00 */, "i8", ALLOC_STATIC);
STRING_TABLE.__str6330=allocate([45,37,99,39,10,0] /* -%c'\0A\00 */, "i8", ALLOC_STATIC);
__gm_=allocate(468, "i8", ALLOC_STATIC);
_mparams=allocate(24, "i8", ALLOC_STATIC);
HEAP32[((_msg_eol)>>2)]=((STRING_TABLE.__str120)|0);
HEAP32[((_applet_name)>>2)]=((STRING_TABLE.__str4174)|0);
HEAP32[(((_rerrs)+(4))>>2)]=((STRING_TABLE.__str3200)|0);
HEAP32[(((_rerrs)+(8))>>2)]=((STRING_TABLE.__str4201)|0);
HEAP32[(((_rerrs)+(16))>>2)]=((STRING_TABLE.__str5202)|0);
HEAP32[(((_rerrs)+(20))>>2)]=((STRING_TABLE.__str6203)|0);
HEAP32[(((_rerrs)+(28))>>2)]=((STRING_TABLE.__str7204)|0);
HEAP32[(((_rerrs)+(32))>>2)]=((STRING_TABLE.__str8205)|0);
HEAP32[(((_rerrs)+(40))>>2)]=((STRING_TABLE.__str9206)|0);
HEAP32[(((_rerrs)+(44))>>2)]=((STRING_TABLE.__str10207)|0);
HEAP32[(((_rerrs)+(52))>>2)]=((STRING_TABLE.__str11208)|0);
HEAP32[(((_rerrs)+(56))>>2)]=((STRING_TABLE.__str12209)|0);
HEAP32[(((_rerrs)+(64))>>2)]=((STRING_TABLE.__str13210)|0);
HEAP32[(((_rerrs)+(68))>>2)]=((STRING_TABLE.__str14211)|0);
HEAP32[(((_rerrs)+(76))>>2)]=((STRING_TABLE.__str15212)|0);
HEAP32[(((_rerrs)+(80))>>2)]=((STRING_TABLE.__str16213)|0);
HEAP32[(((_rerrs)+(88))>>2)]=((STRING_TABLE.__str17214)|0);
HEAP32[(((_rerrs)+(92))>>2)]=((STRING_TABLE.__str18215)|0);
HEAP32[(((_rerrs)+(100))>>2)]=((STRING_TABLE.__str19216)|0);
HEAP32[(((_rerrs)+(104))>>2)]=((STRING_TABLE.__str20217)|0);
HEAP32[(((_rerrs)+(112))>>2)]=((STRING_TABLE.__str21218)|0);
HEAP32[(((_rerrs)+(116))>>2)]=((STRING_TABLE.__str22219)|0);
HEAP32[(((_rerrs)+(124))>>2)]=((STRING_TABLE.__str23220)|0);
HEAP32[(((_rerrs)+(128))>>2)]=((STRING_TABLE.__str24221)|0);
HEAP32[(((_rerrs)+(136))>>2)]=((STRING_TABLE.__str25222)|0);
HEAP32[(((_rerrs)+(140))>>2)]=((STRING_TABLE.__str26223)|0);
HEAP32[(((_rerrs)+(148))>>2)]=((STRING_TABLE.__str27224)|0);
HEAP32[(((_rerrs)+(152))>>2)]=((STRING_TABLE.__str28225)|0);
HEAP32[(((_rerrs)+(160))>>2)]=((STRING_TABLE.__str29226)|0);
HEAP32[(((_rerrs)+(164))>>2)]=((STRING_TABLE.__str30227)|0);
HEAP32[(((_rerrs)+(172))>>2)]=((STRING_TABLE.__str31228)|0);
HEAP32[(((_rerrs)+(176))>>2)]=((STRING_TABLE.__str32229)|0);
HEAP32[(((_rerrs)+(184))>>2)]=((STRING_TABLE.__str33230)|0);
HEAP32[(((_rerrs)+(188))>>2)]=((STRING_TABLE.__str34231)|0);
HEAP32[(((_rerrs)+(196))>>2)]=((__str35232)|0);
HEAP32[(((_rerrs)+(200))>>2)]=((STRING_TABLE.__str36233)|0);
HEAP32[((_cnames)>>2)]=((STRING_TABLE.__str2240)|0);
HEAP32[(((_cnames)+(8))>>2)]=((STRING_TABLE.__str3241)|0);
HEAP32[(((_cnames)+(16))>>2)]=((STRING_TABLE.__str4242)|0);
HEAP32[(((_cnames)+(24))>>2)]=((STRING_TABLE.__str5243)|0);
HEAP32[(((_cnames)+(32))>>2)]=((STRING_TABLE.__str6244)|0);
HEAP32[(((_cnames)+(40))>>2)]=((STRING_TABLE.__str7245)|0);
HEAP32[(((_cnames)+(48))>>2)]=((STRING_TABLE.__str8246)|0);
HEAP32[(((_cnames)+(56))>>2)]=((STRING_TABLE.__str9247)|0);
HEAP32[(((_cnames)+(64))>>2)]=((STRING_TABLE.__str10248)|0);
HEAP32[(((_cnames)+(72))>>2)]=((STRING_TABLE.__str11249)|0);
HEAP32[(((_cnames)+(80))>>2)]=((STRING_TABLE.__str12250)|0);
HEAP32[(((_cnames)+(88))>>2)]=((STRING_TABLE.__str13251)|0);
HEAP32[(((_cnames)+(96))>>2)]=((STRING_TABLE.__str14252)|0);
HEAP32[(((_cnames)+(104))>>2)]=((STRING_TABLE.__str15253)|0);
HEAP32[(((_cnames)+(112))>>2)]=((STRING_TABLE.__str16254)|0);
HEAP32[(((_cnames)+(120))>>2)]=((STRING_TABLE.__str17255)|0);
HEAP32[(((_cnames)+(128))>>2)]=((STRING_TABLE.__str18256)|0);
HEAP32[(((_cnames)+(136))>>2)]=((STRING_TABLE.__str19257)|0);
HEAP32[(((_cnames)+(144))>>2)]=((STRING_TABLE.__str20258)|0);
HEAP32[(((_cnames)+(152))>>2)]=((STRING_TABLE.__str21259)|0);
HEAP32[(((_cnames)+(160))>>2)]=((STRING_TABLE.__str22260)|0);
HEAP32[(((_cnames)+(168))>>2)]=((STRING_TABLE.__str23261)|0);
HEAP32[(((_cnames)+(176))>>2)]=((STRING_TABLE.__str24262)|0);
HEAP32[(((_cnames)+(184))>>2)]=((STRING_TABLE.__str25263)|0);
HEAP32[(((_cnames)+(192))>>2)]=((STRING_TABLE.__str26264)|0);
HEAP32[(((_cnames)+(200))>>2)]=((STRING_TABLE.__str27265)|0);
HEAP32[(((_cnames)+(208))>>2)]=((STRING_TABLE.__str28266)|0);
HEAP32[(((_cnames)+(216))>>2)]=((STRING_TABLE.__str29267)|0);
HEAP32[(((_cnames)+(224))>>2)]=((STRING_TABLE.__str30268)|0);
HEAP32[(((_cnames)+(232))>>2)]=((STRING_TABLE.__str31269)|0);
HEAP32[(((_cnames)+(240))>>2)]=((STRING_TABLE.__str32270)|0);
HEAP32[(((_cnames)+(248))>>2)]=((STRING_TABLE.__str33271)|0);
HEAP32[(((_cnames)+(256))>>2)]=((STRING_TABLE.__str34272)|0);
HEAP32[(((_cnames)+(264))>>2)]=((STRING_TABLE.__str35273)|0);
HEAP32[(((_cnames)+(272))>>2)]=((STRING_TABLE.__str36274)|0);
HEAP32[(((_cnames)+(280))>>2)]=((STRING_TABLE.__str37275)|0);
HEAP32[(((_cnames)+(288))>>2)]=((STRING_TABLE.__str38276)|0);
HEAP32[(((_cnames)+(296))>>2)]=((STRING_TABLE.__str39277)|0);
HEAP32[(((_cnames)+(304))>>2)]=((STRING_TABLE.__str40278)|0);
HEAP32[(((_cnames)+(312))>>2)]=((STRING_TABLE.__str41279)|0);
HEAP32[(((_cnames)+(320))>>2)]=((STRING_TABLE.__str42280)|0);
HEAP32[(((_cnames)+(328))>>2)]=((STRING_TABLE.__str43281)|0);
HEAP32[(((_cnames)+(336))>>2)]=((STRING_TABLE.__str44282)|0);
HEAP32[(((_cnames)+(344))>>2)]=((STRING_TABLE.__str45283)|0);
HEAP32[(((_cnames)+(352))>>2)]=((STRING_TABLE.__str46284)|0);
HEAP32[(((_cnames)+(360))>>2)]=((STRING_TABLE.__str47285)|0);
HEAP32[(((_cnames)+(368))>>2)]=((STRING_TABLE.__str48286)|0);
HEAP32[(((_cnames)+(376))>>2)]=((STRING_TABLE.__str49287)|0);
HEAP32[(((_cnames)+(384))>>2)]=((STRING_TABLE.__str50288)|0);
HEAP32[(((_cnames)+(392))>>2)]=((STRING_TABLE.__str51289)|0);
HEAP32[(((_cnames)+(400))>>2)]=((STRING_TABLE.__str52290)|0);
HEAP32[(((_cnames)+(408))>>2)]=((STRING_TABLE.__str53291)|0);
HEAP32[(((_cnames)+(416))>>2)]=((STRING_TABLE.__str54292)|0);
HEAP32[(((_cnames)+(424))>>2)]=((STRING_TABLE.__str55293)|0);
HEAP32[(((_cnames)+(432))>>2)]=((STRING_TABLE.__str56294)|0);
HEAP32[(((_cnames)+(440))>>2)]=((STRING_TABLE.__str57)|0);
HEAP32[(((_cnames)+(448))>>2)]=((STRING_TABLE.__str58)|0);
HEAP32[(((_cnames)+(456))>>2)]=((STRING_TABLE.__str59)|0);
HEAP32[(((_cnames)+(464))>>2)]=((STRING_TABLE.__str60)|0);
HEAP32[(((_cnames)+(472))>>2)]=((STRING_TABLE.__str61)|0);
HEAP32[(((_cnames)+(480))>>2)]=((STRING_TABLE.__str62)|0);
HEAP32[(((_cnames)+(488))>>2)]=((STRING_TABLE.__str63295)|0);
HEAP32[(((_cnames)+(496))>>2)]=((STRING_TABLE.__str64)|0);
HEAP32[(((_cnames)+(504))>>2)]=((STRING_TABLE.__str65)|0);
HEAP32[(((_cnames)+(512))>>2)]=((STRING_TABLE.__str66)|0);
HEAP32[(((_cnames)+(520))>>2)]=((STRING_TABLE.__str67)|0);
HEAP32[(((_cnames)+(528))>>2)]=((STRING_TABLE.__str68)|0);
HEAP32[(((_cnames)+(536))>>2)]=((STRING_TABLE.__str69)|0);
HEAP32[(((_cnames)+(544))>>2)]=((STRING_TABLE.__str70296)|0);
HEAP32[(((_cnames)+(552))>>2)]=((STRING_TABLE.__str71)|0);
HEAP32[(((_cnames)+(560))>>2)]=((STRING_TABLE.__str72)|0);
HEAP32[(((_cnames)+(568))>>2)]=((STRING_TABLE.__str73)|0);
HEAP32[(((_cnames)+(576))>>2)]=((STRING_TABLE.__str74)|0);
HEAP32[(((_cnames)+(584))>>2)]=((STRING_TABLE.__str75)|0);
HEAP32[(((_cnames)+(592))>>2)]=((STRING_TABLE.__str76)|0);
HEAP32[(((_cnames)+(600))>>2)]=((STRING_TABLE.__str77)|0);
HEAP32[(((_cnames)+(608))>>2)]=((STRING_TABLE.__str78)|0);
HEAP32[(((_cnames)+(616))>>2)]=((STRING_TABLE.__str79)|0);
HEAP32[(((_cnames)+(624))>>2)]=((STRING_TABLE.__str80)|0);
HEAP32[(((_cnames)+(632))>>2)]=((STRING_TABLE.__str81)|0);
HEAP32[(((_cnames)+(640))>>2)]=((STRING_TABLE.__str82)|0);
HEAP32[(((_cnames)+(648))>>2)]=((STRING_TABLE.__str83)|0);
HEAP32[(((_cnames)+(656))>>2)]=((STRING_TABLE.__str84)|0);
HEAP32[(((_cnames)+(664))>>2)]=((STRING_TABLE.__str85)|0);
HEAP32[(((_cnames)+(672))>>2)]=((STRING_TABLE.__str86)|0);
HEAP32[(((_cnames)+(680))>>2)]=((STRING_TABLE.__str87)|0);
HEAP32[(((_cnames)+(688))>>2)]=((STRING_TABLE.__str88)|0);
HEAP32[(((_cnames)+(696))>>2)]=((STRING_TABLE.__str89)|0);
HEAP32[(((_cnames)+(704))>>2)]=((STRING_TABLE.__str90)|0);
HEAP32[(((_cnames)+(712))>>2)]=((STRING_TABLE.__str91)|0);
HEAP32[(((_cnames)+(720))>>2)]=((STRING_TABLE.__str92)|0);
HEAP32[(((_cnames)+(728))>>2)]=((STRING_TABLE.__str93)|0);
HEAP32[(((_cnames)+(736))>>2)]=((STRING_TABLE.__str94)|0);
HEAP32[(((_cnames)+(744))>>2)]=((STRING_TABLE.__str95)|0);
HEAP32[(((_cnames)+(752))>>2)]=((STRING_TABLE.__str96)|0);
HEAP32[((_cclasses)>>2)]=((STRING_TABLE.__str97)|0);
HEAP32[(((_cclasses)+(8))>>2)]=((STRING_TABLE.__str98)|0);
HEAP32[(((_cclasses)+(16))>>2)]=((STRING_TABLE.__str99)|0);
HEAP32[(((_cclasses)+(24))>>2)]=((STRING_TABLE.__str100)|0);
HEAP32[(((_cclasses)+(32))>>2)]=((STRING_TABLE.__str101)|0);
HEAP32[(((_cclasses)+(40))>>2)]=((STRING_TABLE.__str102)|0);
HEAP32[(((_cclasses)+(48))>>2)]=((STRING_TABLE.__str103)|0);
HEAP32[(((_cclasses)+(56))>>2)]=((STRING_TABLE.__str104)|0);
HEAP32[(((_cclasses)+(64))>>2)]=((STRING_TABLE.__str105)|0);
HEAP32[(((_cclasses)+(72))>>2)]=((STRING_TABLE.__str45283)|0);
HEAP32[(((_cclasses)+(80))>>2)]=((STRING_TABLE.__str106)|0);
HEAP32[(((_cclasses)+(88))>>2)]=((STRING_TABLE.__str107)|0);
FUNCTION_TABLE = [0,0]; Module["FUNCTION_TABLE"] = FUNCTION_TABLE;


function run(args) {
  args = args || Module['arguments'];

  if (runDependencies > 0) {
    Module.printErr('run() called, but dependencies remain, so not running');
    return 0;
  }

  if (Module['preRun']) {
    if (typeof Module['preRun'] == 'function') Module['preRun'] = [Module['preRun']];
    var toRun = Module['preRun'];
    Module['preRun'] = [];
    for (var i = toRun.length-1; i >= 0; i--) {
      toRun[i]();
    }
    if (runDependencies > 0) {
      // a preRun added a dependency, run will be called later
      return 0;
    }
  }

  function doRun() {
    var ret = 0;
    calledRun = true;
    if (Module['_main']) {
      preMain();
      ret = Module.callMain(args);
      if (!Module['noExitRuntime']) {
        exitRuntime();
      }
    }
    if (Module['postRun']) {
      if (typeof Module['postRun'] == 'function') Module['postRun'] = [Module['postRun']];
      while (Module['postRun'].length > 0) {
        Module['postRun'].pop()();
      }
    }
    return ret;
  }

  if (Module['setStatus']) {
    Module['setStatus']('Running...');
    setTimeout(function() {
      setTimeout(function() {
        Module['setStatus']('');
      }, 1);
      doRun();
    }, 1);
    return 0;
  } else {
    return doRun();
  }
}
Module['run'] = run;

// {{PRE_RUN_ADDITIONS}}

if (Module['preInit']) {
  if (typeof Module['preInit'] == 'function') Module['preInit'] = [Module['preInit']];
  while (Module['preInit'].length > 0) {
    Module['preInit'].pop()();
  }
}

initRuntime();

var shouldRunNow = true;
if (Module['noInitialRun']) {
  shouldRunNow = false;
}

if (shouldRunNow) {
  var ret = run();
  Module.print('Exit Status: ' + ret);
}

// {{POST_RUN_ADDITIONS}}






  // {{MODULE_ADDITIONS}}


// EMSCRIPTEN_GENERATED_FUNCTIONS: ["_enlarge","_xfopen","_hashwalk_init","_bb_error_msg_and_die","_xfunc_die","_skip_whitespace","_llist_pop","_altoffset","_awk_exit","_p_bracket","_safe_write","_findmust","_setvar_i","_setvar_u","_doemit","_p_simp_re","_setvar_p","_setvar_s","_mccase","_qrealloc","_firstch","_nch","_p_count","_fflush_all","_xregcomp","_p_b_eclass","_isalnum_","_bothcases","_lslow","___collate_range_cmp","_chain_expr","_freezeset","_utoa_to_buf","_mk_re_node","_release_unused_segments","_free","_chain_node","_sys_alloc","_bb_error_msg","_write_globals","_xmalloc","_awk_split","_lfast","_bb_simple_perror_msg","_hashidx","_stripsnug","_repeat","_lmatcher","_dofwd","_doinsert","_hashwalk_next","_awk_getline","_hash_search","_main","_regatoi","_permute","_nextchar","_next_token","_split_f0","_getopt_internal","_mmap_alloc","_parse_expr","_sslow","_hash_init","_regfree","_realloc","_hash_remove","_tmalloc_large","_is_option","_xrealloc","_getvar_i_int","_xfopen_stdin","_p_ere","_seterr","_p_str","_fmt_num","_computejumps","_prepend_alloc","_computematchjumps","_p_b_term","_nvfree","_bb_perror_msg_and_die","_vasprintf","_fopen_or_warn_stdin","_sfast","_ptest","_clear_array","_bb_perror_msg","_hash_find","_rollback_token","_itoa_to_buf","_incvar","_is_assignment","_sys_trim","_fopen_or_warn","_my_strtod","_tmalloc_small","_mmap_resize","_exec_builtin","_p_b_cclass","_fopen_for_read","_ldissect","_itoa","_do_mktime","_categorize","_init_bins","_nonnewline","_smatcher","_p_ere_exp","_sstep","_xasprintf","_nextword","_samesets","_bb_verror_msg","_chain_loop","_new_node","_p_bre","_fixed_getopt32","_p_b_coll_elem","_parse_program","_regexec","_bb_simple_perror_msg_and_die","_istrue","_hash_rebuild","_bb_show_usage","_sbackref","_xzalloc","_fsrealloc","_nextarg","_process_notification","_malloc","_syntax_error","_getopt","_is_numeric","_iamarray","_getvar_i","_sdissect","_as_regex","_dupl","_clrvar","_nvalloc","_freeset","_skip_spaces","_safe_read","_awk_printf","_reverse_argv_elements","_getvar_s","_mk_splitter","_full_write","_regerror","_init_top","_mcinvert","_read_globals","_bb_process_escape_sequence","_internal_realloc","_othercase","_isinsets","_handle_special","_allocset","_lstep","_init_mparams","_send_notification","_copyvar","_segment_holding","_chain_group","_evaluate","_add_segment","_regcomp_or_errmsg","_regcomp","_next_input_file","_chain_notification","_awk_sub","_pluscount","_zero_out_var","_ordinary","_lbackref","_condition","_xstrndup","_llist_add_to_end","_xstrdup","_setari_u","_notification_adjust_pattern_positions","_p_b_symbol"]

	/* This is the end-part of the wrapping function, defined in "pre_AWK.js" */

	/* Above this point, the entire emscripten-compiled javascript generates and setups the "Module" object.
	   All we need to do is run it */

	Module['__run__'] = run;

	//FS.streams[3].object.printer = Module["foo_printErr"];
	//Module["printErr"] = Module["foo_printErr"];

	var func_run = Module['__run__'];
	var exit_code = func_run();
	var result = {};

	result['exit_code'] = exit_code;
	result['stderr'] = Module.awk_stderr;
	result['stdout'] = Module.awk_stdout;
	result['input'] = input_text ;
	result['program'] = program_source ;

	return result;
}

//NOTE: These values must match the defined enum in awk.c
var NTBT_ENTER_BEGIN_BLOCK= 1;
var NTBT_EXIT_BEGIN_BLOCK = 2;
var NTBT_ENTER_END_BLOCK  = 3;
var NTBT_EXIT_END_BLOCK   = 4;
var NTBT_ENTER_ACTION     = 5;
var NTBT_EXIT_ACTION      = 6;
var NTBT_ENTER_PATTERN    = 7;
var NTBT_TAKE_PATTERN=8; //will only be called if the pattern matched
var NTBT_EXIT_PATTERN=9; //will only be called if the pattern didn't match
var NTBT_IMPLICIT_PATTERN = 10; // called when there's only an action, BEFORE the action notification.
var NTBT_IMPLICIT_ACTION = 11; // called when there's only a pattern, AFTER the pattern notification (only if it matched).
var NTBT_LAST_RULE       = 12; // Last rule means no more patterns/actions - 
var NTBT_NEXT			 = 13; // 'next' called - interrupt flowcontrol
var NTBT_NEXTFILE		 = 14; // 'nextfile' called - interrupt flowcontrol
var NTBT_EXIT			 = 15; // 'exit' called - interrupt flowcontrol
var NTBT_GETLINE		 = 16; // getline was explicitly or implicitly called
var NTBT_END_OF_FILE     = 17; //End of a single file - NOT USED
var NTBT_END_OF_FILES    = 18;  //End of all files - finished program; moving to END block.


var webawk_notification_names = {};
webawk_notification_names[NTBT_ENTER_BEGIN_BLOCK] = "BEGIN(enter)";
webawk_notification_names[NTBT_EXIT_BEGIN_BLOCK]  = "BEGIN(exit)";
webawk_notification_names[NTBT_ENTER_END_BLOCK]   = "END(enter)";
webawk_notification_names[NTBT_EXIT_END_BLOCK]    = "END(exit)";
webawk_notification_names[NTBT_ENTER_ACTION]      = "ACTION(enter)";
webawk_notification_names[NTBT_EXIT_ACTION]       = "ACTION(exit)";
webawk_notification_names[NTBT_ENTER_PATTERN]     = "PATTERN(enter)";
webawk_notification_names[NTBT_TAKE_PATTERN]      = "PATTERN(matched)";
webawk_notification_names[NTBT_EXIT_PATTERN]      = "PATTERN(no-match)"
webawk_notification_names[NTBT_IMPLICIT_PATTERN]  = "PATTERN(implicit)";
webawk_notification_names[NTBT_IMPLICIT_ACTION]   = "ACTION(implicit)";
webawk_notification_names[NTBT_LAST_RULE]         = "LAST_RULE";
webawk_notification_names[NTBT_NEXT]              = "NEXT";
webawk_notification_names[NTBT_NEXTFILE]          = "NEXTFILE";
webawk_notification_names[NTBT_EXIT]              = "EXIT";
webawk_notification_names[NTBT_GETLINE]           = "GETLINE";
webawk_notification_names[NTBT_END_OF_FILE]       = "END_OF_FILE";
webawk_notification_names[NTBT_END_OF_FILES]      = "END_OF_ALL_FILES";

//busy-wait loop sleep is an ugly hack, but we're in a web-worker.
function pausecomp(millis) {
	var date = new Date();
	var curDate = null;

	do { curDate = new Date(); }
	while(curDate-date < millis);
}

function webawk_notification_callback (type,start_line,start_pos,end_line,end_pos)
{
	self.postMessage({
			'event' : 'notification',
			'type' : type,
			'type_name' : webawk_notification_names[type],
			'start_line' : start_line,
			'start_pos'  : start_pos,
			'end_line'   : end_line,
			'end_pos'    : end_pos
			});

	pausecomp(2000);
}

//This is a Web-Worker
self.onmessage = function(event) {
	switch(event.data.type)
	{
	case "run_awk":
		var awk_program = event.data.awk_program;
		var input_data  = event.data.input_data;

		var awk_result = run_web_awk(awk_program, input_data);
		var exit_code = awk_result.exit_code ;

		self.postMessage({
          'id' : event.data.id,
					'event': 'exit',
					'exit_code': exit_code
				});
		break;
	}
};

